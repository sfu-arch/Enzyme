; ModuleID = 'hand-raw.ll'
source_filename = "hand.cpp"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"class.std::ios_base::Init" = type { i8 }
%"class.std::vector" = type { %"struct.std::_Vector_base" }
%"struct.std::_Vector_base" = type { %"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl" }
%"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl" = type { %"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<std::__cxx11::basic_string<char>, std::allocator<std::__cxx11::basic_string<char>>>::_Vector_impl_data" = type { %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"* }
%"class.std::__cxx11::basic_string" = type { %"struct.std::__cxx11::basic_string<char>::_Alloc_hider", i64, %union.anon }
%"struct.std::__cxx11::basic_string<char>::_Alloc_hider" = type { i8* }
%union.anon = type { i64, [8 x i8] }
%struct.__dirstream = type opaque
%struct.dirent = type { i64, i64, i16, i8, [256 x i8] }
%struct.timeval = type { i64, i64 }
%class.HandModelLightMatrix = type <{ %"class.std::vector", %"class.std::vector.3", %"class.std::vector.8", %"class.std::vector.8", %class.LightMatrix, %class.LightMatrix, %"class.std::vector.13", i8, [7 x i8] }>
%"class.std::vector.3" = type { %"struct.std::_Vector_base.4" }
%"struct.std::_Vector_base.4" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl" = type { %"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" }
%"struct.std::_Vector_base<int, std::allocator<int>>::_Vector_impl_data" = type { i32*, i32*, i32* }
%"class.std::vector.8" = type { %"struct.std::_Vector_base.9" }
%"struct.std::_Vector_base.9" = type { %"struct.std::_Vector_base<LightMatrix<double>, std::allocator<LightMatrix<double>>>::_Vector_impl" }
%"struct.std::_Vector_base<LightMatrix<double>, std::allocator<LightMatrix<double>>>::_Vector_impl" = type { %"struct.std::_Vector_base<LightMatrix<double>, std::allocator<LightMatrix<double>>>::_Vector_impl_data" }
%"struct.std::_Vector_base<LightMatrix<double>, std::allocator<LightMatrix<double>>>::_Vector_impl_data" = type { %class.LightMatrix*, %class.LightMatrix*, %class.LightMatrix* }
%class.LightMatrix = type { i8, i32, i32, double* }
%"class.std::vector.13" = type { %"struct.std::_Vector_base.14" }
%"struct.std::_Vector_base.14" = type { %"struct.std::_Vector_base<Triangle, std::allocator<Triangle>>::_Vector_impl" }
%"struct.std::_Vector_base<Triangle, std::allocator<Triangle>>::_Vector_impl" = type { %"struct.std::_Vector_base<Triangle, std::allocator<Triangle>>::_Vector_impl_data" }
%"struct.std::_Vector_base<Triangle, std::allocator<Triangle>>::_Vector_impl_data" = type { %struct.Triangle*, %struct.Triangle*, %struct.Triangle* }
%struct.Triangle = type { [3 x i32] }
%"class.std::basic_ifstream" = type { %"class.std::basic_istream.base", %"class.std::basic_filebuf", %"class.std::basic_ios" }
%"class.std::basic_istream.base" = type { i32 (...)**, i64 }
%"class.std::basic_filebuf" = type { %"class.std::basic_streambuf", %union.pthread_mutex_t, %"class.std::__basic_file", i32, %struct.__mbstate_t, %struct.__mbstate_t, %struct.__mbstate_t, i8*, i64, i8, i8, i8, i8, i8*, i8*, i8, %"class.std::codecvt"*, i8*, i64, i8*, i8* }
%"class.std::basic_streambuf" = type { i32 (...)**, i8*, i8*, i8*, i8*, i8*, i8*, %"class.std::locale" }
%"class.std::locale" = type { %"class.std::locale::_Impl"* }
%"class.std::locale::_Impl" = type { i32, %"class.std::locale::facet"**, i64, %"class.std::locale::facet"**, i8** }
%"class.std::locale::facet" = type <{ i32 (...)**, i32, [4 x i8] }>
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%"class.std::__basic_file" = type <{ %struct._IO_FILE*, i8, [7 x i8] }>
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.__mbstate_t = type { i32, %union.anon.18 }
%union.anon.18 = type { i32 }
%"class.std::codecvt" = type { %"class.std::__codecvt_abstract_base.base", %struct.__locale_struct* }
%"class.std::__codecvt_abstract_base.base" = type { %"class.std::locale::facet.base" }
%"class.std::locale::facet.base" = type <{ i32 (...)**, i32 }>
%struct.__locale_struct = type { [13 x %struct.__locale_data*], i16*, i32*, i32*, [13 x i8*] }
%struct.__locale_data = type opaque
%"class.std::basic_ios" = type { %"class.std::ios_base", %"class.std::basic_ostream"*, i8, i8, %"class.std::basic_streambuf"*, %"class.std::ctype"*, %"class.std::num_put"*, %"class.std::num_get"* }
%"class.std::ios_base" = type { i32 (...)**, i64, i64, i32, i32, i32, %"struct.std::ios_base::_Callback_list"*, %"struct.std::ios_base::_Words", [8 x %"struct.std::ios_base::_Words"], i32, %"struct.std::ios_base::_Words"*, %"class.std::locale" }
%"struct.std::ios_base::_Callback_list" = type { %"struct.std::ios_base::_Callback_list"*, void (i32, %"class.std::ios_base"*, i32)*, i32, i32 }
%"struct.std::ios_base::_Words" = type { i8*, i64 }
%"class.std::basic_ostream" = type { i32 (...)**, %"class.std::basic_ios" }
%"class.std::ctype" = type <{ %"class.std::locale::facet.base", [4 x i8], %struct.__locale_struct*, i8, [7 x i8], i32*, i32*, i16*, i8, [256 x i8], [256 x i8], i8, [6 x i8] }>
%"class.std::num_put" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::num_get" = type { %"class.std::locale::facet.base", [4 x i8] }
%"class.std::basic_istream" = type { i32 (...)**, i64, %"class.std::basic_ios" }
%class.HandDataLightMatrix = type { %class.HandModelLightMatrix, %"class.std::vector.3", %class.LightMatrix }
%"class.std::vector.19" = type { %"struct.std::_Vector_base.20" }
%"struct.std::_Vector_base.20" = type { %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" }
%"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl" = type { %"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" }
%"struct.std::_Vector_base<double, std::allocator<double>>::_Vector_impl_data" = type { double*, double*, double* }
%struct.HandObjectiveData = type { i32, i8**, i32*, %struct.Matrix*, %struct.Matrix*, %struct.Matrix, %struct.Matrix, %struct.Triangle*, i32, i32, i32*, %struct.Matrix }
%struct.Matrix = type { i32, i32, double* }
%struct.HandInput = type { %"class.std::vector.19", %class.HandDataLightMatrix, %"class.std::vector.19" }
%struct.HandOutput = type { %"class.std::vector.19", i32, i32, %"class.std::vector.19" }
%struct.Matrix_diff = type { double* }

$_ZN20HandModelLightMatrixD2Ev = comdat any

$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any

$_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_ = comdat any

$_ZNSt6vectorI11LightMatrixIdESaIS1_EE17_M_realloc_insertIJiiEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_ = comdat any

$_ZNSt6vectorI8TriangleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_ = comdat any

$_ZNSt6vectorIiSaIiEE17_M_default_appendEm = comdat any

$_ZNSt6vectorIdSaIdEE17_M_default_appendEm = comdat any

@.str = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.1 = private unnamed_addr constant [3 x i8] c"..\00", align 1
@.str.2 = private unnamed_addr constant [6 x i8] c"%s/%s\00", align 1
@.str.3 = private unnamed_addr constant [2 x i8] c"/\00", align 1
@.str.5 = private unnamed_addr constant [3 x i8] c"/\\\00", align 1
@_ZStL8__ioinit = internal global %"class.std::ios_base::Init" zeroinitializer, align 1
@__dso_handle = external hidden global i8
@.str.7 = private unnamed_addr constant [10 x i8] c"bones.txt\00", align 1
@.str.8 = private unnamed_addr constant [13 x i8] c"vertices.txt\00", align 1
@.str.9 = private unnamed_addr constant [14 x i8] c"triangles.txt\00", align 1
@.str.13 = private unnamed_addr constant [32 x i8] c"simple_small/hand1_t26_c100.txt\00", align 1
@.str.14 = private unnamed_addr constant [18 x i8] c"starting path %s\0A\00", align 1
@.str.15 = private unnamed_addr constant [6 x i8] c"data/\00", align 1
@.str.16 = private unnamed_addr constant [7 x i8] c"model/\00", align 1
@.str.17 = private unnamed_addr constant [25 x i8] c"Tapenade combined %0.6f\0A\00", align 1
@.str.18 = private unnamed_addr constant [4 x i8] c"%f \00", align 1
@.str.20 = private unnamed_addr constant [23 x i8] c"Enzyme combined %0.6f\0A\00", align 1
@enzyme_dup = external dso_local local_unnamed_addr global i32, align 4
@enzyme_const = external dso_local local_unnamed_addr global i32, align 4
@enzyme_dupnoneed = external dso_local local_unnamed_addr global i32, align 4
@.str.21 = private unnamed_addr constant [5 x i8] c"stoi\00", align 1
@.str.22 = private unnamed_addr constant [5 x i8] c"stod\00", align 1
@.str.23 = private unnamed_addr constant [21 x i8] c"basic_string::append\00", align 1
@.str.25 = private unnamed_addr constant [26 x i8] c"vector::_M_realloc_insert\00", align 1
@.str.26 = private unnamed_addr constant [21 x i8] c"basic_string::substr\00", align 1
@.str.27 = private unnamed_addr constant [55 x i8] c"%s: __pos (which is %zu) > this->size() (which is %zu)\00", align 1
@_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE = external unnamed_addr constant [4 x i8*], align 8
@_ZTVSt13basic_filebufIcSt11char_traitsIcEE = external dso_local unnamed_addr constant { [16 x i8*] }, align 8
@_ZTVSt15basic_streambufIcSt11char_traitsIcEE = external dso_local unnamed_addr constant { [16 x i8*] }, align 8
@.str.29 = private unnamed_addr constant [26 x i8] c"vector::_M_default_append\00", align 1
@.str.30 = private unnamed_addr constant [49 x i8] c"cannot create std::vector larger than max_size()\00", align 1
@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_hand.cpp, i8* null }]
@str = private unnamed_addr constant [20 x i8] c"manual reverse mode\00", align 1
@str.31 = private unnamed_addr constant [23 x i8] c"manual ad reverse mode\00", align 1
@str.32 = private unnamed_addr constant [14 x i8] c"starting main\00", align 1
@ResultFormatStrIR = global [80 x i8] c"forward ops = %d, reverse ops = %d, forward mem ops = %d, reverse mem ops = %d\0A\00"

; Function Attrs: nounwind uwtable
define dso_local void @_Z8getTestsRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEPKcS5_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %tests, i8* %name, %"class.std::__cxx11::basic_string"* nocapture readonly %indent) local_unnamed_addr #0 {
entry:
  %__dnew.i.i.i.i.i94 = alloca i64, align 8
  %__dnew.i.i.i.i = alloca i64, align 8
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %path = alloca [1024 x i8], align 16
  %agg.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp20 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp24 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp28 = alloca %"class.std::__cxx11::basic_string", align 8
  %call = tail call %struct.__dirstream* @opendir(i8* %name)
  %tobool.not = icmp eq %struct.__dirstream* %call, null
  br i1 %tobool.not, label %cleanup34, label %while.cond.preheader

while.cond.preheader:                             ; preds = %entry
  %call2122 = call %struct.dirent* @readdir(%struct.__dirstream* nonnull %call) #31
  %cmp.not123 = icmp eq %struct.dirent* %call2122, null
  br i1 %cmp.not123, label %while.end, label %while.body.lr.ph

while.body.lr.ph:                                 ; preds = %while.cond.preheader
  %0 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp20 to i8*
  %1 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp20, i64 0, i32 2
  %2 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp20 to %union.anon**
  %3 = bitcast %union.anon* %1 to i8*
  %4 = bitcast i64* %__dnew.i.i.i.i to i8*
  %_M_p.i13.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp20, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp20, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp20, i64 0, i32 1
  %5 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp24 to i8*
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp24, i64 0, i32 2
  %7 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp24 to %union.anon**
  %8 = bitcast %union.anon* %6 to i8*
  %9 = bitcast %union.anon* %6 to i32*
  %_M_string_length.i.i.i.i.i.i80 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp24, i64 0, i32 1
  %10 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp28 to i8*
  %11 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp28, i64 0, i32 2
  %12 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp28 to %union.anon**
  %_M_p.i9.i.i95 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %indent, i64 0, i32 0, i32 0
  %_M_string_length.i.i.i96 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %indent, i64 0, i32 1
  %13 = bitcast i64* %__dnew.i.i.i.i.i94 to i8*
  %14 = bitcast %union.anon* %11 to i8*
  %_M_p.i13.i.i.i.i.i100 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp28, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i.i.i101 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp28, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i.i.i107 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp28, i64 0, i32 1
  %_M_finish.i.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %tests, i64 0, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %tests, i64 0, i32 0, i32 0, i32 0, i32 2
  %15 = getelementptr inbounds [1024 x i8], [1024 x i8]* %path, i64 0, i64 0
  %16 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to i8*
  %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2
  %18 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to %union.anon**
  %19 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  %20 = bitcast %union.anon* %17 to i8*
  %_M_p.i13.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 1
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 2
  %22 = bitcast %"class.std::__cxx11::basic_string"* %agg.tmp to %union.anon**
  %_M_p.i21.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 2, i32 0
  %arraydecay.i.i.i = bitcast %union.anon* %21 to i8*
  %_M_string_length.i.i.i55 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.tmp, i64 0, i32 1
  %arrayidx.i.i.i.i.i81 = getelementptr inbounds i8, i8* %8, i64 4
  br label %while.body

while.body:                                       ; preds = %while.cond.backedge, %while.body.lr.ph
  %call2124 = phi %struct.dirent* [ %call2122, %while.body.lr.ph ], [ %call2, %while.cond.backedge ]
  %d_type = getelementptr inbounds %struct.dirent, %struct.dirent* %call2124, i64 0, i32 3
  %23 = load i8, i8* %d_type, align 2, !tbaa !2
  %cmp3 = icmp eq i8 %23, 4
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %while.body
  call void @llvm.lifetime.start.p0i8(i64 1024, i8* nonnull %15) #31
  %arraydecay = getelementptr inbounds %struct.dirent, %struct.dirent* %call2124, i64 0, i32 4, i64 0
  %call5 = call i32 @strcmp(i8* nonnull %arraydecay, i8* nonnull dereferenceable(2) getelementptr inbounds ([2 x i8], [2 x i8]* @.str, i64 0, i64 0)) #32
  %cmp6 = icmp eq i32 %call5, 0
  br i1 %cmp6, label %cleanup, label %lor.lhs.false, !llvm.loop !8

lor.lhs.false:                                    ; preds = %if.then4
  %call9 = call i32 @strcmp(i8* nonnull %arraydecay, i8* nonnull dereferenceable(3) getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i64 0, i64 0)) #32
  %cmp10 = icmp eq i32 %call9, 0
  br i1 %cmp10, label %cleanup, label %if.end12, !llvm.loop !8

if.end12:                                         ; preds = %lor.lhs.false
  %call16 = call i32 (i8*, i64, i8*, ...) @snprintf(i8* nonnull %15, i64 1024, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.2, i64 0, i64 0), i8* %name, i8* nonnull %arraydecay) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %16) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !11)
  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !14, !alias.scope !11
  %24 = load i8*, i8** %_M_p.i9.i.i95, align 8, !tbaa !17, !noalias !11
  %25 = load i64, i64* %_M_string_length.i.i.i96, align 8, !tbaa !19, !noalias !11
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %19) #31, !noalias !11
  store i64 %25, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !11
  %cmp3.i.i.i.i.i = icmp ugt i64 %25, 15
  br i1 %cmp3.i.i.i.i.i, label %if.then4.i.i.i.i.i, label %if.end6.i.i.i.i.i

if.then4.i.i.i.i.i:                               ; preds = %if.end12
  %call5.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i, i64 0) #31
  store i8* %call5.i.i.i.i.i, i8** %_M_p.i13.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !11
  %26 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !11
  store i64 %26, i64* %_M_allocated_capacity.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !11
  br label %if.end6.i.i.i.i.i

if.end6.i.i.i.i.i:                                ; preds = %if.then4.i.i.i.i.i, %if.end12
  %27 = phi i8* [ %call5.i.i.i.i.i, %if.then4.i.i.i.i.i ], [ %20, %if.end12 ]
  switch i64 %25, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  ]

if.then.i.i.i.i.i.i.i:                            ; preds = %if.end6.i.i.i.i.i
  %28 = load i8, i8* %24, align 1, !tbaa !21
  store i8 %28, i8* %27, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end6.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %27, i8* align 1 %24, i64 %25, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i
  %29 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !11
  store i64 %29, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !11
  %30 = load i8*, i8** %_M_p.i13.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !11
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %30, i64 %29
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %19) #31, !noalias !11
  %call.i.i.i = call i64 @strlen(i8* nonnull dereferenceable(1) %arraydecay) #31, !noalias !11
  %31 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !11
  %sub3.i.i.i = sub i64 4611686018427387903, %31
  %cmp.i.i.i = icmp ult i64 %sub3.i.i.i, %call.i.i.i
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit

if.then.i.i.i:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  %call2.i.i = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i8* nonnull %arraydecay, i64 %call.i.i.i) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !22)
  %32 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !19, !noalias !22
  %cmp.i.i.i52 = icmp eq i64 %32, 4611686018427387903
  br i1 %cmp.i.i.i52, label %if.then.i.i.i53, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i

if.then.i.i.i53:                                  ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i: ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit
  %call2.i.i54 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.3, i64 0, i64 0), i64 1) #31, !noalias !22
  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !14, !alias.scope !22
  %_M_p.i.i23.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i54, i64 0, i32 0, i32 0
  %33 = load i8*, i8** %_M_p.i.i23.i.i, align 8, !tbaa !17
  %34 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i54, i64 0, i32 2
  %arraydecay.i.i.i.i = bitcast %union.anon* %34 to i8*
  %cmp.i.i2.i = icmp eq i8* %33, %arraydecay.i.i.i.i
  br i1 %cmp.i.i2.i, label %if.then.i.i, label %if.else.i.i

if.then.i.i:                                      ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %arraydecay.i.i.i, i8* nonnull align 8 dereferenceable(16) %33, i64 16, i1 false) #31
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit

if.else.i.i:                                      ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i
  store i8* %33, i8** %_M_p.i21.i.i, align 8, !tbaa !17, !alias.scope !22
  %_M_allocated_capacity.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i54, i64 0, i32 2, i32 0
  %35 = load i64, i64* %_M_allocated_capacity.i.i, align 8, !tbaa !21
  store i64 %35, i64* %_M_allocated_capacity.i.i.i, align 8, !tbaa !21, !alias.scope !22
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit: ; preds = %if.else.i.i, %if.then.i.i
  %_M_string_length.i20.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i54, i64 0, i32 1
  %36 = load i64, i64* %_M_string_length.i20.i.i, align 8, !tbaa !19
  store i64 %36, i64* %_M_string_length.i.i.i55, align 8, !tbaa !19, !alias.scope !22
  %37 = bitcast %"class.std::__cxx11::basic_string"* %call2.i.i54 to %union.anon**
  store %union.anon* %34, %union.anon** %37, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i20.i.i, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i, align 8, !tbaa !21
  call void @_Z8getTestsRSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EEPKcS5_(%"class.std::vector"* nonnull align 8 dereferenceable(24) %tests, i8* nonnull %15, %"class.std::__cxx11::basic_string"* nonnull %agg.tmp)
  %38 = load i8*, i8** %_M_p.i21.i.i, align 8, !tbaa !17
  %cmp.i.i.i61 = icmp eq i8* %38, %arraydecay.i.i.i
  br i1 %cmp.i.i.i61, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit63, label %if.then.i.i62

if.then.i.i62:                                    ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit
  call void @_ZdlPv(i8* %38) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit63

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit63: ; preds = %if.then.i.i62, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit
  %39 = load i8*, i8** %_M_p.i13.i.i.i.i.i, align 8, !tbaa !17
  %cmp.i.i.i66 = icmp eq i8* %39, %20
  br i1 %cmp.i.i.i66, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit68, label %if.then.i.i67

if.then.i.i67:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit63
  call void @_ZdlPv(i8* %39) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit68

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit68: ; preds = %if.then.i.i67, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit63
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %16) #31
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %15) #31
  br label %while.cond.backedge

cleanup:                                          ; preds = %lor.lhs.false, %if.then4
  call void @llvm.lifetime.end.p0i8(i64 1024, i8* nonnull %15) #31
  br label %while.cond.backedge

if.else:                                          ; preds = %while.body
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #31
  %arraydecay22 = getelementptr inbounds %struct.dirent, %struct.dirent* %call2124, i64 0, i32 4, i64 0
  store %union.anon* %1, %union.anon** %2, align 8, !tbaa !14
  %call.i.i = call i64 @strlen(i8* nonnull dereferenceable(1) %arraydecay22) #31
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %4) #31
  store i64 %call.i.i, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  %cmp3.i.i.i.i = icmp ugt i64 %call.i.i, 15
  br i1 %cmp3.i.i.i.i, label %if.then4.i.i.i.i, label %if.end6.i.i.i.i

if.then4.i.i.i.i:                                 ; preds = %if.else
  %call5.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp20, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i, i64 0) #31
  store i8* %call5.i.i.i.i, i8** %_M_p.i13.i.i.i.i, align 8, !tbaa !17
  %40 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  store i64 %40, i64* %_M_allocated_capacity.i.i.i.i.i, align 8, !tbaa !21
  br label %if.end6.i.i.i.i

if.end6.i.i.i.i:                                  ; preds = %if.then4.i.i.i.i, %if.else
  %41 = phi i8* [ %call5.i.i.i.i, %if.then4.i.i.i.i ], [ %3, %if.else ]
  switch i64 %call.i.i, label %if.end.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  ]

if.then.i.i.i.i.i.i:                              ; preds = %if.end6.i.i.i.i
  %42 = load i8, i8* %arraydecay22, align 1, !tbaa !21
  store i8 %42, i8* %41, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit

if.end.i.i.i.i.i.i.i:                             ; preds = %if.end6.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* nonnull align 1 %arraydecay22, i64 %call.i.i, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit: ; preds = %if.end.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.end6.i.i.i.i
  %43 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  store i64 %43, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  %44 = load i8*, i8** %_M_p.i13.i.i.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i = getelementptr inbounds i8, i8* %44, i64 %43
  store i8 0, i8* %arrayidx.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %4) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %5) #31
  store %union.anon* %6, %union.anon** %7, align 8, !tbaa !14
  store i32 1954051118, i32* %9, align 8
  store i64 4, i64* %_M_string_length.i.i.i.i.i.i80, align 8, !tbaa !19
  store i8 0, i8* %arrayidx.i.i.i.i.i81, align 4, !tbaa !21
  %45 = load i64, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  %cmp.i = icmp ult i64 %45, 4
  br i1 %cmp.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit88, label %for.body.i.i.preheader.i.i

for.body.i.i.preheader.i.i:                       ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  %46 = load i8*, i8** %_M_p.i13.i.i.i.i, align 8, !tbaa !17, !noalias !25
  %add.ptr.i.i.i = getelementptr inbounds i8, i8* %46, i64 %45
  br label %for.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %for.body.i.i.i.i, %for.body.i.i.preheader.i.i
  %agg.tmp2.sroa.0.0.i.i.i = phi i8* [ %add.ptr.i.i.i, %for.body.i.i.preheader.i.i ], [ %incdec.ptr.i9.i.i.i.i, %for.body.i.i.i.i ]
  %47 = phi i8* [ %arrayidx.i.i.i.i.i81, %for.body.i.i.preheader.i.i ], [ %incdec.ptr.i11.i.i.i.i, %for.body.i.i.i.i ]
  %incdec.ptr.i11.i.i.i.i = getelementptr inbounds i8, i8* %47, i64 -1
  %48 = load i8, i8* %incdec.ptr.i11.i.i.i.i, align 1, !tbaa !21
  %incdec.ptr.i9.i.i.i.i = getelementptr inbounds i8, i8* %agg.tmp2.sroa.0.0.i.i.i, i64 -1
  %49 = load i8, i8* %incdec.ptr.i9.i.i.i.i, align 1, !tbaa !21
  %cmp.i.i.i.i = icmp eq i8 %48, %49
  %cmp.i.i.not.i.i.i.i = icmp ne i8* %incdec.ptr.i11.i.i.i.i, %8
  %50 = and i1 %cmp.i.i.i.i, %cmp.i.i.not.i.i.i.i
  br i1 %50, label %for.body.i.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit88, !llvm.loop !28

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit88: ; preds = %for.body.i.i.i.i, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit
  %retval.0.i = phi i1 [ false, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2EPKcRKS3_.exit ], [ %cmp.i.i.i.i, %for.body.i.i.i.i ]
  %.pre = load i8*, i8** %_M_p.i13.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %5) #31
  %cmp.i.i.i91 = icmp eq i8* %.pre, %3
  br i1 %cmp.i.i.i91, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit93, label %if.then.i.i92

if.then.i.i92:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit88
  call void @_ZdlPv(i8* %.pre) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit93

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit93: ; preds = %if.then.i.i92, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit88
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #31
  br i1 %retval.0.i, label %if.then27, label %while.cond.backedge

if.then27:                                        ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit93
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %10) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !29)
  store %union.anon* %11, %union.anon** %12, align 8, !tbaa !14, !alias.scope !29
  %51 = load i8*, i8** %_M_p.i9.i.i95, align 8, !tbaa !17, !noalias !29
  %52 = load i64, i64* %_M_string_length.i.i.i96, align 8, !tbaa !19, !noalias !29
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %13) #31, !noalias !29
  store i64 %52, i64* %__dnew.i.i.i.i.i94, align 8, !tbaa !20, !noalias !29
  %cmp3.i.i.i.i.i97 = icmp ugt i64 %52, 15
  br i1 %cmp3.i.i.i.i.i97, label %if.then4.i.i.i.i.i102, label %if.end6.i.i.i.i.i103

if.then4.i.i.i.i.i102:                            ; preds = %if.then27
  %call5.i.i.i.i.i99 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp28, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i94, i64 0) #31
  store i8* %call5.i.i.i.i.i99, i8** %_M_p.i13.i.i.i.i.i100, align 8, !tbaa !17, !alias.scope !29
  %53 = load i64, i64* %__dnew.i.i.i.i.i94, align 8, !tbaa !20, !noalias !29
  store i64 %53, i64* %_M_allocated_capacity.i.i.i.i.i.i101, align 8, !tbaa !21, !alias.scope !29
  br label %if.end6.i.i.i.i.i103

if.end6.i.i.i.i.i103:                             ; preds = %if.then4.i.i.i.i.i102, %if.then27
  %54 = phi i8* [ %call5.i.i.i.i.i99, %if.then4.i.i.i.i.i102 ], [ %14, %if.then27 ]
  switch i64 %52, label %if.end.i.i.i.i.i.i.i.i105 [
    i64 1, label %if.then.i.i.i.i.i.i.i104
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i112
  ]

if.then.i.i.i.i.i.i.i104:                         ; preds = %if.end6.i.i.i.i.i103
  %55 = load i8, i8* %51, align 1, !tbaa !21
  store i8 %55, i8* %54, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i112

if.end.i.i.i.i.i.i.i.i105:                        ; preds = %if.end6.i.i.i.i.i103
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %54, i8* align 1 %51, i64 %52, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i112

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i112: ; preds = %if.end.i.i.i.i.i.i.i.i105, %if.then.i.i.i.i.i.i.i104, %if.end6.i.i.i.i.i103
  %56 = load i64, i64* %__dnew.i.i.i.i.i94, align 8, !tbaa !20, !noalias !29
  store i64 %56, i64* %_M_string_length.i.i.i.i.i.i.i107, align 8, !tbaa !19, !alias.scope !29
  %57 = load i8*, i8** %_M_p.i13.i.i.i.i.i100, align 8, !tbaa !17, !alias.scope !29
  %arrayidx.i.i.i.i.i.i108 = getelementptr inbounds i8, i8* %57, i64 %56
  store i8 0, i8* %arrayidx.i.i.i.i.i.i108, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %13) #31, !noalias !29
  %call.i.i.i109 = call i64 @strlen(i8* nonnull dereferenceable(1) %arraydecay22) #31, !noalias !29
  %58 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i107, align 8, !tbaa !19, !alias.scope !29
  %sub3.i.i.i110 = sub i64 4611686018427387903, %58
  %cmp.i.i.i111 = icmp ult i64 %sub3.i.i.i110, %call.i.i.i109
  br i1 %cmp.i.i.i111, label %if.then.i.i.i113, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit116

if.then.i.i.i113:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i112
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit116: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i112
  %call2.i.i114 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp28, i8* nonnull %arraydecay22, i64 %call.i.i.i109) #31
  %59 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i.i, align 8, !tbaa !32
  %60 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_end_of_storage.i.i, align 8, !tbaa !34
  %cmp.not.i.i = icmp eq %"class.std::__cxx11::basic_string"* %59, %60
  br i1 %cmp.not.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit, label %if.then.i.i117

if.then.i.i117:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit116
  %61 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %59, i64 0, i32 2
  %62 = bitcast %"class.std::__cxx11::basic_string"* %59 to %union.anon**
  store %union.anon* %61, %union.anon** %62, align 8, !tbaa !14
  %63 = load i8*, i8** %_M_p.i13.i.i.i.i.i100, align 8, !tbaa !17
  %cmp.i.i.i.i.i.i = icmp eq i8* %63, %14
  br i1 %cmp.i.i.i.i.i.i, label %if.then.i.i.i.i.i, label %if.else.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %if.then.i.i117
  %arraydecay.i.i.i.i.i.i = bitcast %union.anon* %61 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %arraydecay.i.i.i.i.i.i, i8* nonnull align 8 dereferenceable(16) %14, i64 16, i1 false) #31
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit.thread

if.else.i.i.i.i.i:                                ; preds = %if.then.i.i117
  %_M_p.i21.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %59, i64 0, i32 0, i32 0
  store i8* %63, i8** %_M_p.i21.i.i.i.i.i, align 8, !tbaa !17
  %64 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i101, align 8, !tbaa !21
  %_M_allocated_capacity.i.i.i.i.i.i119 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %59, i64 0, i32 2, i32 0
  store i64 %64, i64* %_M_allocated_capacity.i.i.i.i.i.i119, align 8, !tbaa !21
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit.thread

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit.thread: ; preds = %if.else.i.i.i.i.i, %if.then.i.i.i.i.i
  %65 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i107, align 8, !tbaa !19
  %_M_string_length.i.i.i.i.i.i120 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %59, i64 0, i32 1
  store i64 %65, i64* %_M_string_length.i.i.i.i.i.i120, align 8, !tbaa !19
  %66 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i.i, align 8, !tbaa !32
  %incdec.ptr.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %66, i64 1
  store %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i, %"class.std::__cxx11::basic_string"** %_M_finish.i.i, align 8, !tbaa !32
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit: ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit116
  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%"class.std::vector"* nonnull dereferenceable(24) %tests, %"class.std::__cxx11::basic_string"* %59, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp28) #31
  %.pre125 = load i8*, i8** %_M_p.i13.i.i.i.i.i100, align 8, !tbaa !17
  %cmp.i.i.i57 = icmp eq i8* %.pre125, %14
  br i1 %cmp.i.i.i57, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i58

if.then.i.i58:                                    ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit
  call void @_ZdlPv(i8* %.pre125) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i58, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backEOS5_.exit.thread
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %10) #31
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit93, %cleanup, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit68
  %call2 = call %struct.dirent* @readdir(%struct.__dirstream* nonnull %call) #31
  %cmp.not = icmp eq %struct.dirent* %call2, null
  br i1 %cmp.not, label %while.end, label %while.body, !llvm.loop !8

while.end:                                        ; preds = %while.cond.backedge, %while.cond.preheader
  %call33 = call i32 @closedir(%struct.__dirstream* nonnull %call)
  br label %cleanup34

cleanup34:                                        ; preds = %while.end, %entry
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.start.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare dso_local noalias noundef %struct.__dirstream* @opendir(i8* nocapture noundef readonly) local_unnamed_addr #2

declare dso_local %struct.dirent* @readdir(%struct.__dirstream*) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly willreturn
declare dso_local i32 @strcmp(i8* nocapture, i8* nocapture) local_unnamed_addr #4

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @snprintf(i8* noalias nocapture noundef writeonly, i64 noundef, i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.lifetime.end.p0i8(i64 immarg, i8* nocapture) #1

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @closedir(%struct.__dirstream* nocapture noundef) local_unnamed_addr #2

; Function Attrs: nounwind uwtable mustprogress
define dso_local i64 @_Z15find_last_slashRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %filepath) local_unnamed_addr #5 {
entry:
  %call2.i = tail call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filepath, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 -1, i64 2) #31
  ret i64 %call2.i
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z20filepath_to_basenameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %agg.result, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %filepath) local_unnamed_addr #0 {
entry:
  %__dnew.i.i.i.i.i28 = alloca i64, align 8
  %__dnew.i.i.i.i12 = alloca i64, align 8
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %__dnew.i.i.i.i = alloca i64, align 8
  %filename = alloca %"class.std::__cxx11::basic_string", align 8
  %call2.i.i = tail call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filepath, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 -1, i64 2) #31
  %0 = bitcast %"class.std::__cxx11::basic_string"* %filename to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #31
  %cmp = icmp eq i64 %call2.i.i, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %1 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2
  %2 = bitcast %"class.std::__cxx11::basic_string"* %filename to %union.anon**
  store %union.anon* %1, %union.anon** %2, align 8, !tbaa !14
  %_M_p.i9.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 0, i32 0
  %3 = load i8*, i8** %_M_p.i9.i, align 8, !tbaa !17
  %_M_string_length.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 1
  %4 = load i64, i64* %_M_string_length.i.i, align 8, !tbaa !19
  %5 = bitcast i64* %__dnew.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %5) #31
  store i64 %4, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  %cmp3.i.i.i.i = icmp ugt i64 %4, 15
  br i1 %cmp3.i.i.i.i, label %if.then4.i.i.i.i, label %if.end.if.end6_crit_edge.i.i.i.i

if.end.if.end6_crit_edge.i.i.i.i:                 ; preds = %cond.true
  %6 = bitcast %union.anon* %1 to i8*
  br label %if.end6.i.i.i.i

if.then4.i.i.i.i:                                 ; preds = %cond.true
  %call5.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filename, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i, i64 0) #31
  %_M_p.i13.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i, i8** %_M_p.i13.i.i.i.i, align 8, !tbaa !17
  %7 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2, i32 0
  store i64 %7, i64* %_M_allocated_capacity.i.i.i.i.i, align 8, !tbaa !21
  br label %if.end6.i.i.i.i

if.end6.i.i.i.i:                                  ; preds = %if.then4.i.i.i.i, %if.end.if.end6_crit_edge.i.i.i.i
  %8 = phi i8* [ %6, %if.end.if.end6_crit_edge.i.i.i.i ], [ %call5.i.i.i.i, %if.then4.i.i.i.i ]
  switch i64 %4, label %if.end.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  ]

if.then.i.i.i.i.i.i:                              ; preds = %if.end6.i.i.i.i
  %9 = load i8, i8* %3, align 1, !tbaa !21
  store i8 %9, i8* %8, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit

if.end.i.i.i.i.i.i.i:                             ; preds = %if.end6.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %8, i8* align 1 %3, i64 %4, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit: ; preds = %if.end.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i, %if.end6.i.i.i.i
  %_M_p.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %10 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 1
  store i64 %10, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  %11 = load i8*, i8** %_M_p.i.i.i.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i = getelementptr inbounds i8, i8* %11, i64 %10
  store i8 0, i8* %arrayidx.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %5) #31
  br label %cond.end

cond.false:                                       ; preds = %entry
  %add = add nuw i64 %call2.i.i, 1
  tail call void @llvm.experimental.noalias.scope.decl(metadata !35)
  %_M_string_length.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 1
  %12 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !35
  %cmp.i.i.not = icmp ugt i64 %12, %call2.i.i
  br i1 %cmp.i.i.not, label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i, label %if.then.i.i

if.then.i.i:                                      ; preds = %cond.false
  tail call void (i8*, ...) @_ZSt24__throw_out_of_range_fmtPKcz(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.27, i64 0, i64 0), i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.26, i64 0, i64 0), i64 %add, i64 %12) #33
  unreachable

_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i: ; preds = %cond.false
  %13 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2
  %14 = bitcast %"class.std::__cxx11::basic_string"* %filename to %union.anon**
  store %union.anon* %13, %union.anon** %14, align 8, !tbaa !14, !alias.scope !35
  %15 = bitcast %union.anon* %13 to i8*
  %_M_p.i13.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 0, i32 0
  %16 = load i8*, i8** %_M_p.i13.i.i, align 8, !tbaa !17, !noalias !35
  %add.ptr.i.i = getelementptr inbounds i8, i8* %16, i64 %add
  %sub.i.i.i = sub i64 %12, %add
  %17 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %17) #31, !noalias !35
  store i64 %sub.i.i.i, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !35
  %cmp3.i.i.i.i.i = icmp ugt i64 %sub.i.i.i, 15
  br i1 %cmp3.i.i.i.i.i, label %if.then4.i.i.i.i.i, label %if.end6.i.i.i.i.i

if.then4.i.i.i.i.i:                               ; preds = %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i
  %call5.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filename, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i, i64 0) #31
  %_M_p.i13.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i, i8** %_M_p.i13.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !35
  %18 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !35
  %_M_allocated_capacity.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2, i32 0
  store i64 %18, i64* %_M_allocated_capacity.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !35
  br label %if.end6.i.i.i.i.i

if.end6.i.i.i.i.i:                                ; preds = %if.then4.i.i.i.i.i, %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i
  %19 = phi i8* [ %call5.i.i.i.i.i, %if.then4.i.i.i.i.i ], [ %15, %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEmPKc.exit.i.i ]
  switch i64 %sub.i.i.i, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i
    i64 0, label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit
  ]

if.then.i.i.i.i.i.i.i:                            ; preds = %if.end6.i.i.i.i.i
  %20 = load i8, i8* %add.ptr.i.i, align 1, !tbaa !21
  store i8 %20, i8* %19, align 1, !tbaa !21
  br label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end6.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %19, i8* align 1 %add.ptr.i.i, i64 %sub.i.i.i, i1 false) #31
  br label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit

_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i
  %_M_p.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %21 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !35
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 1
  store i64 %21, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !35
  %22 = load i8*, i8** %_M_p.i.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !35
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %22, i64 %21
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %17) #31, !noalias !35
  br label %cond.end

cond.end:                                         ; preds = %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  %call.i = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filename, i8 signext 46, i64 -1) #31
  %cmp2 = icmp eq i64 %call.i, -1
  br i1 %cmp2, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %cond.end
  %23 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %24 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon**
  store %union.anon* %23, %union.anon** %24, align 8, !tbaa !14
  %_M_p.i9.i13 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %25 = load i8*, i8** %_M_p.i9.i13, align 8, !tbaa !17
  %_M_string_length.i.i14 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 1
  %26 = load i64, i64* %_M_string_length.i.i14, align 8, !tbaa !19
  %27 = bitcast i64* %__dnew.i.i.i.i12 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %27) #31
  store i64 %26, i64* %__dnew.i.i.i.i12, align 8, !tbaa !20
  %cmp3.i.i.i.i15 = icmp ugt i64 %26, 15
  br i1 %cmp3.i.i.i.i15, label %if.then4.i.i.i.i20, label %if.end.if.end6_crit_edge.i.i.i.i16

if.end.if.end6_crit_edge.i.i.i.i16:               ; preds = %cond.true3
  %28 = bitcast %union.anon* %23 to i8*
  br label %if.end6.i.i.i.i21

if.then4.i.i.i.i20:                               ; preds = %cond.true3
  %call5.i.i.i.i17 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.result, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i12, i64 0) #31
  %_M_p.i13.i.i.i.i18 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i17, i8** %_M_p.i13.i.i.i.i18, align 8, !tbaa !17
  %29 = load i64, i64* %__dnew.i.i.i.i12, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i.i.i19 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 0
  store i64 %29, i64* %_M_allocated_capacity.i.i.i.i.i19, align 8, !tbaa !21
  br label %if.end6.i.i.i.i21

if.end6.i.i.i.i21:                                ; preds = %if.then4.i.i.i.i20, %if.end.if.end6_crit_edge.i.i.i.i16
  %30 = phi i8* [ %28, %if.end.if.end6_crit_edge.i.i.i.i16 ], [ %call5.i.i.i.i17, %if.then4.i.i.i.i20 ]
  switch i64 %26, label %if.end.i.i.i.i.i.i.i23 [
    i64 1, label %if.then.i.i.i.i.i.i22
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit27
  ]

if.then.i.i.i.i.i.i22:                            ; preds = %if.end6.i.i.i.i21
  %31 = load i8, i8* %25, align 1, !tbaa !21
  store i8 %31, i8* %30, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit27

if.end.i.i.i.i.i.i.i23:                           ; preds = %if.end6.i.i.i.i21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %30, i8* align 1 %25, i64 %26, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit27

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit27: ; preds = %if.end.i.i.i.i.i.i.i23, %if.then.i.i.i.i.i.i22, %if.end6.i.i.i.i21
  %_M_p.i.i.i.i.i24 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  %32 = load i64, i64* %__dnew.i.i.i.i12, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i25 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 %32, i64* %_M_string_length.i.i.i.i.i.i25, align 8, !tbaa !19
  %33 = load i8*, i8** %_M_p.i.i.i.i.i24, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i26 = getelementptr inbounds i8, i8* %33, i64 %32
  store i8 0, i8* %arrayidx.i.i.i.i.i26, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %27) #31
  br label %nrvo.skipdtor

cond.false4:                                      ; preds = %cond.end
  call void @llvm.experimental.noalias.scope.decl(metadata !38)
  %_M_string_length.i.i.i29 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 1
  %34 = load i64, i64* %_M_string_length.i.i.i29, align 8, !tbaa !19, !noalias !38
  %35 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %36 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon**
  store %union.anon* %35, %union.anon** %36, align 8, !tbaa !14, !alias.scope !38
  %37 = bitcast %union.anon* %35 to i8*
  %_M_p.i13.i.i30 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %38 = load i8*, i8** %_M_p.i13.i.i30, align 8, !tbaa !17, !noalias !38
  %cmp.i.i.i = icmp ugt i64 %34, %call.i
  %spec.select.i.i.i = select i1 %cmp.i.i.i, i64 %call.i, i64 %34
  %39 = bitcast i64* %__dnew.i.i.i.i.i28 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %39) #31, !noalias !38
  store i64 %spec.select.i.i.i, i64* %__dnew.i.i.i.i.i28, align 8, !tbaa !20, !noalias !38
  %cmp3.i.i.i.i.i31 = icmp ugt i64 %spec.select.i.i.i, 15
  br i1 %cmp3.i.i.i.i.i31, label %if.then4.i.i.i.i.i36, label %if.end6.i.i.i.i.i37

if.then4.i.i.i.i.i36:                             ; preds = %cond.false4
  %call5.i.i.i.i.i33 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.result, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i28, i64 0) #31
  %_M_p.i13.i.i.i.i.i34 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i33, i8** %_M_p.i13.i.i.i.i.i34, align 8, !tbaa !17, !alias.scope !38
  %40 = load i64, i64* %__dnew.i.i.i.i.i28, align 8, !tbaa !20, !noalias !38
  %_M_allocated_capacity.i.i.i.i.i.i35 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 0
  store i64 %40, i64* %_M_allocated_capacity.i.i.i.i.i.i35, align 8, !tbaa !21, !alias.scope !38
  br label %if.end6.i.i.i.i.i37

if.end6.i.i.i.i.i37:                              ; preds = %if.then4.i.i.i.i.i36, %cond.false4
  %41 = phi i8* [ %call5.i.i.i.i.i33, %if.then4.i.i.i.i.i36 ], [ %37, %cond.false4 ]
  switch i64 %spec.select.i.i.i, label %if.end.i.i.i.i.i.i.i.i39 [
    i64 1, label %if.then.i.i.i.i.i.i.i38
    i64 0, label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit43
  ]

if.then.i.i.i.i.i.i.i38:                          ; preds = %if.end6.i.i.i.i.i37
  %42 = load i8, i8* %38, align 1, !tbaa !21
  store i8 %42, i8* %41, align 1, !tbaa !21
  br label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit43

if.end.i.i.i.i.i.i.i.i39:                         ; preds = %if.end6.i.i.i.i.i37
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %41, i8* align 1 %38, i64 %spec.select.i.i.i, i1 false) #31
  br label %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit43

_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit43: ; preds = %if.end.i.i.i.i.i.i.i.i39, %if.then.i.i.i.i.i.i.i38, %if.end6.i.i.i.i.i37
  %_M_p.i.i.i.i.i.i40 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  %43 = load i64, i64* %__dnew.i.i.i.i.i28, align 8, !tbaa !20, !noalias !38
  %_M_string_length.i.i.i.i.i.i.i41 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 %43, i64* %_M_string_length.i.i.i.i.i.i.i41, align 8, !tbaa !19, !alias.scope !38
  %44 = load i8*, i8** %_M_p.i.i.i.i.i.i40, align 8, !tbaa !17, !alias.scope !38
  %arrayidx.i.i.i.i.i.i42 = getelementptr inbounds i8, i8* %44, i64 %43
  store i8 0, i8* %arrayidx.i.i.i.i.i.i42, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %39) #31, !noalias !38
  br label %nrvo.skipdtor

nrvo.skipdtor:                                    ; preds = %_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm.exit43, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit27
  %_M_p.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 0, i32 0
  %45 = load i8*, i8** %_M_p.i.i.i.i, align 8, !tbaa !17
  %46 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filename, i64 0, i32 2
  %arraydecay.i.i.i.i = bitcast %union.anon* %46 to i8*
  %cmp.i.i.i44 = icmp eq i8* %45, %arraydecay.i.i.i.i
  br i1 %cmp.i.i.i44, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i45

if.then.i.i45:                                    ; preds = %nrvo.skipdtor
  call void @_ZdlPv(i8* %45) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i45, %nrvo.skipdtor
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #31
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(%"class.std::__cxx11::basic_string"* noalias sret(%"class.std::__cxx11::basic_string") align 8 %agg.result, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %filepath) local_unnamed_addr #0 {
entry:
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %call2.i.i = tail call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %filepath, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 -1, i64 2) #31
  %cmp = icmp eq i64 %call2.i.i, -1
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %0 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %1 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon**
  store %union.anon* %0, %union.anon** %1, align 8, !tbaa !14
  %2 = bitcast %union.anon* %0 to i16*
  store i16 12078, i16* %2, align 8
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 2, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  %.cast = bitcast %union.anon* %0 to i8*
  %arrayidx.i.i.i.i.i = getelementptr inbounds i8, i8* %.cast, i64 2
  store i8 0, i8* %arrayidx.i.i.i.i.i, align 2, !tbaa !21
  br label %nrvo.skipdtor

cond.false:                                       ; preds = %entry
  %add = add nuw i64 %call2.i.i, 1
  tail call void @llvm.experimental.noalias.scope.decl(metadata !41)
  %_M_string_length.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 1
  %3 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !41
  %4 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2
  %5 = bitcast %"class.std::__cxx11::basic_string"* %agg.result to %union.anon**
  store %union.anon* %4, %union.anon** %5, align 8, !tbaa !14, !alias.scope !41
  %6 = bitcast %union.anon* %4 to i8*
  %_M_p.i13.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %filepath, i64 0, i32 0, i32 0
  %7 = load i8*, i8** %_M_p.i13.i.i, align 8, !tbaa !17, !noalias !41
  %cmp.i.i.i = icmp ugt i64 %3, %add
  %spec.select.i.i.i = select i1 %cmp.i.i.i, i64 %add, i64 %3
  %8 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %8) #31, !noalias !41
  store i64 %spec.select.i.i.i, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !41
  %cmp3.i.i.i.i.i = icmp ugt i64 %spec.select.i.i.i, 15
  br i1 %cmp3.i.i.i.i.i, label %if.then4.i.i.i.i.i, label %if.end6.i.i.i.i.i

if.then4.i.i.i.i.i:                               ; preds = %cond.false
  %call5.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %agg.result, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i, i64 0) #31
  %_M_p.i13.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i, i8** %_M_p.i13.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !41
  %9 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !41
  %_M_allocated_capacity.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 2, i32 0
  store i64 %9, i64* %_M_allocated_capacity.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !41
  br label %if.end6.i.i.i.i.i

if.end6.i.i.i.i.i:                                ; preds = %if.then4.i.i.i.i.i, %cond.false
  %10 = phi i8* [ %call5.i.i.i.i.i, %if.then4.i.i.i.i.i ], [ %6, %cond.false ]
  switch i64 %spec.select.i.i.i, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i
    i64 0, label %cond.end
  ]

if.then.i.i.i.i.i.i.i:                            ; preds = %if.end6.i.i.i.i.i
  %11 = load i8, i8* %7, align 1, !tbaa !21
  store i8 %11, i8* %10, align 1, !tbaa !21
  br label %cond.end

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end6.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %7, i64 %spec.select.i.i.i, i1 false) #31
  br label %cond.end

cond.end:                                         ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i
  %_M_p.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 0, i32 0
  %12 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !41
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %agg.result, i64 0, i32 1
  store i64 %12, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !41
  %13 = load i8*, i8** %_M_p.i.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !41
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %13, i64 %12
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %8) #31, !noalias !41
  br label %nrvo.skipdtor

nrvo.skipdtor:                                    ; preds = %cond.end, %cond.true
  ret void
}

declare dso_local void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull dereferenceable(1)) unnamed_addr #3

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base4InitD1Ev(%"class.std::ios_base::Init"* nonnull dereferenceable(1)) unnamed_addr #6

; Function Attrs: nofree nounwind
declare dso_local i32 @__cxa_atexit(void (i8*)*, i8*, i8*) local_unnamed_addr #7

; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
define dso_local float @_Z5tdiffP7timevalS0_(%struct.timeval* nocapture readonly %start, %struct.timeval* nocapture readonly %end) local_unnamed_addr #8 {
entry:
  %tv_sec = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 0
  %0 = load i64, i64* %tv_sec, align 8, !tbaa !44
  %tv_sec1 = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 0
  %1 = load i64, i64* %tv_sec1, align 8, !tbaa !44
  %sub = sub nsw i64 %0, %1
  %conv = sitofp i64 %sub to double
  %tv_usec = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 1
  %2 = load i64, i64* %tv_usec, align 8, !tbaa !46
  %tv_usec2 = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 1
  %3 = load i64, i64* %tv_usec2, align 8, !tbaa !46
  %sub3 = sub nsw i64 %2, %3
  %conv4 = sitofp i64 %sub3 to double
  %mul = fmul fast double %conv4, 0x3EB0C6F7A0B5ED8D
  %add = fadd fast double %mul, %conv
  %conv5 = fptrunc double %add to float
  ret float %conv5
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z15read_hand_modelRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP20HandModelLightMatrix(%"class.std::__cxx11::basic_string"* nocapture nonnull readonly align 8 dereferenceable(32) %path, %class.HandModelLightMatrix* %pmodel) local_unnamed_addr #0 {
entry:
  %__endptr.i.i571 = alloca i8*, align 8
  %__endptr.i.i539 = alloca i8*, align 8
  %__endptr.i.i523 = alloca i8*, align 8
  %__endptr.i.i507 = alloca i8*, align 8
  %__endptr.i.i489 = alloca i8*, align 8
  %__dnew.i.i.i.i.i462 = alloca i64, align 8
  %__dnew.i.i.i.i.i416 = alloca i64, align 8
  %__dnew.i.i.i.i.i318 = alloca i64, align 8
  %__endptr.i.i302 = alloca i8*, align 8
  %__endptr.i.i232 = alloca i8*, align 8
  %__endptr.i.i220 = alloca i8*, align 8
  %__endptr.i.i = alloca i8*, align 8
  %__dnew.i.i.i.i.i.i.i = alloca i64, align 8
  %__dnew.i.i.i.i.i = alloca i64, align 8
  %bones_in = alloca %"class.std::basic_ifstream", align 8
  %ref.tmp = alloca %"class.std::__cxx11::basic_string", align 8
  %s = alloca %"class.std::__cxx11::basic_string", align 8
  %tmp = alloca [16 x double], align 16
  %tmp697 = bitcast [16 x double]* %tmp to i8*
  %ref.tmp8 = alloca i32, align 4
  %ref.tmp9 = alloca i32, align 4
  %ref.tmp29 = alloca i32, align 4
  %ref.tmp30 = alloca i32, align 4
  %vert_in = alloca %"class.std::basic_ifstream", align 8
  %ref.tmp38 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp56 = alloca %"class.std::basic_ifstream", align 8
  %ref.tmp57 = alloca %"class.std::__cxx11::basic_string", align 8
  %triangles_in = alloca %"class.std::basic_ifstream", align 8
  %ref.tmp106 = alloca %"class.std::__cxx11::basic_string", align 8
  %ss = alloca [3 x %"class.std::__cxx11::basic_string"], align 16
  %curr = alloca %struct.Triangle, align 4
  %0 = bitcast %"class.std::basic_ifstream"* %bones_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %0) #31
  %1 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %1) #31
  tail call void @llvm.experimental.noalias.scope.decl(metadata !47)
  %2 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2
  %3 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp to %union.anon**
  store %union.anon* %2, %union.anon** %3, align 8, !tbaa !14, !alias.scope !47
  %_M_p.i9.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 0, i32 0
  %4 = load i8*, i8** %_M_p.i9.i.i, align 8, !tbaa !17, !noalias !47
  %_M_string_length.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 1
  %5 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !47
  %6 = bitcast i64* %__dnew.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %6) #31, !noalias !47
  store i64 %5, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !47
  %cmp3.i.i.i.i.i = icmp ugt i64 %5, 15
  br i1 %cmp3.i.i.i.i.i, label %if.then4.i.i.i.i.i, label %if.end.if.end6_crit_edge.i.i.i.i.i

if.end.if.end6_crit_edge.i.i.i.i.i:               ; preds = %entry
  %7 = bitcast %union.anon* %2 to i8*
  br label %if.end6.i.i.i.i.i

if.then4.i.i.i.i.i:                               ; preds = %entry
  %call5.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i, i64 0) #31
  %_M_p.i13.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i, i8** %_M_p.i13.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !47
  %8 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !47
  %_M_allocated_capacity.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 2, i32 0
  store i64 %8, i64* %_M_allocated_capacity.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !47
  br label %if.end6.i.i.i.i.i

if.end6.i.i.i.i.i:                                ; preds = %if.then4.i.i.i.i.i, %if.end.if.end6_crit_edge.i.i.i.i.i
  %9 = phi i8* [ %7, %if.end.if.end6_crit_edge.i.i.i.i.i ], [ %call5.i.i.i.i.i, %if.then4.i.i.i.i.i ]
  switch i64 %5, label %if.end.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  ]

if.then.i.i.i.i.i.i.i:                            ; preds = %if.end6.i.i.i.i.i
  %10 = load i8, i8* %4, align 1, !tbaa !21
  store i8 %10, i8* %9, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i

if.end.i.i.i.i.i.i.i.i:                           ; preds = %if.end6.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %9, i8* align 1 %4, i64 %5, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i: ; preds = %if.end.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i
  %_M_p.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 0, i32 0
  %11 = load i64, i64* %__dnew.i.i.i.i.i, align 8, !tbaa !20, !noalias !47
  %_M_string_length.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp, i64 0, i32 1
  store i64 %11, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !47
  %12 = load i8*, i8** %_M_p.i.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !47
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %12, i64 %11
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %6) #31, !noalias !47
  %13 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !47
  %sub3.i.i.i = sub i64 4611686018427387903, %13
  %cmp.i.i.i = icmp ult i64 %sub3.i.i.i, 9
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit

if.then.i.i.i:                                    ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i
  %call2.i.i = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.7, i64 0, i64 0), i64 9) #31
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %bones_in, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp, i32 8)
  %14 = load i8*, i8** %_M_p.i.i.i.i.i.i, align 8, !tbaa !17
  %arraydecay.i.i.i.i = bitcast %union.anon* %2 to i8*
  %cmp.i.i.i190 = icmp eq i8* %14, %arraydecay.i.i.i.i
  br i1 %cmp.i.i.i190, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit
  call void @_ZdlPv(i8* %14) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %1) #31
  %15 = bitcast %"class.std::__cxx11::basic_string"* %s to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %15) #31
  %16 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 2
  %17 = bitcast %"class.std::__cxx11::basic_string"* %s to %union.anon**
  store %union.anon* %16, %union.anon** %17, align 8, !tbaa !14
  %_M_string_length.i.i.i191 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 1
  store i64 0, i64* %_M_string_length.i.i.i191, align 8, !tbaa !19
  %.cast.i = bitcast %union.anon* %16 to i8*
  store i8 0, i8* %.cast.i, align 8, !tbaa !21
  %18 = bitcast %"class.std::basic_ifstream"* %bones_in to i8**
  %vtable684 = load i8*, i8** %18, align 8, !tbaa !50
  %vbase.offset.ptr685 = getelementptr i8, i8* %vtable684, i64 -24
  %19 = bitcast i8* %vbase.offset.ptr685 to i64*
  %vbase.offset686 = load i64, i64* %19, align 8
  %add.ptr = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 1, i32 0, i32 2
  %20 = bitcast i8** %add.ptr to i8*
  %_M_streambuf_state.i.i687 = getelementptr inbounds i8, i8* %20, i64 %vbase.offset686
  %21 = bitcast i8* %_M_streambuf_state.i.i687 to i32*
  %22 = load i32, i32* %21, align 8, !tbaa !52
  %cmp.i688 = icmp eq i32 %22, 0
  br i1 %cmp.i688, label %while.body.lr.ph, label %while.end

while.body.lr.ph:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %23 = bitcast %"class.std::basic_ifstream"* %bones_in to %"class.std::basic_istream"*
  %_M_finish.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %_M_p.i9.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 0, i32 0
  %24 = bitcast i64* %__dnew.i.i.i.i.i.i.i to i8*
  %bone_names = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0
  %25 = bitcast i8** %__endptr.i.i to i8*
  %_M_finish.i.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 1, i32 0, i32 0, i32 0, i32 2
  %_M_start.i27.i.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %26 = bitcast i8** %__endptr.i.i220 to i8*
  %27 = bitcast i32* %ref.tmp8 to i8*
  %28 = bitcast i32* %ref.tmp9 to i8*
  %_M_finish.i206 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i207 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 2, i32 0, i32 0, i32 0, i32 2
  %base_relatives = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 2
  %29 = bitcast i8** %__endptr.i.i302 to i8*
  %30 = bitcast i8** %__endptr.i.i232 to i8*
  %arrayidx28 = getelementptr inbounds [16 x double], [16 x double]* %tmp, i64 0, i64 15
  %31 = bitcast i32* %ref.tmp29 to i8*
  %32 = bitcast i32* %ref.tmp30 to i8*
  %_M_finish.i245 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i246 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2
  %inverse_base_absolutes = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 3
  br label %while.body

while.body:                                       ; preds = %while.cond.backedge, %while.body.lr.ph
  %call1 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #31
  %33 = load i64, i64* %_M_string_length.i.i.i191, align 8, !tbaa !19
  %cmp.i192 = icmp eq i64 %33, 0
  br i1 %cmp.i192, label %while.cond.backedge, label %if.end

if.end:                                           ; preds = %while.body
  %34 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i, align 8, !tbaa !32
  %35 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_end_of_storage.i, align 8, !tbaa !34
  %cmp.not.i = icmp eq %"class.std::__cxx11::basic_string"* %34, %35
  br i1 %cmp.not.i, label %if.else.i, label %if.then.i

if.then.i:                                        ; preds = %if.end
  %36 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 2
  %37 = bitcast %"class.std::__cxx11::basic_string"* %34 to %union.anon**
  store %union.anon* %36, %union.anon** %37, align 8, !tbaa !14
  %38 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %24) #31
  store i64 %33, i64* %__dnew.i.i.i.i.i.i.i, align 8, !tbaa !20
  %cmp3.i.i.i.i.i.i.i = icmp ugt i64 %33, 15
  br i1 %cmp3.i.i.i.i.i.i.i, label %if.end6.i.i.i.i.i.i.i.thread, label %if.end6.i.i.i.i.i.i.i

if.end6.i.i.i.i.i.i.i.thread:                     ; preds = %if.then.i
  %call5.i.i.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %34, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i.i.i, i64 0) #31
  %_M_p.i13.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i.i.i, i8** %_M_p.i13.i.i.i.i.i.i.i, align 8, !tbaa !17
  %39 = load i64, i64* %__dnew.i.i.i.i.i.i.i, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 2, i32 0
  store i64 %39, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i, align 8, !tbaa !21
  br label %if.end.i.i.i.i.i.i.i.i.i.i

if.end6.i.i.i.i.i.i.i:                            ; preds = %if.then.i
  %40 = bitcast %union.anon* %36 to i8*
  %cond = icmp eq i64 %33, 1
  br i1 %cond, label %if.then.i.i.i.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i.i.i:                        ; preds = %if.end6.i.i.i.i.i.i.i
  %41 = load i8, i8* %38, align 1, !tbaa !21
  store i8 %41, i8* %40, align 1, !tbaa !21
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit.i

if.end.i.i.i.i.i.i.i.i.i.i:                       ; preds = %if.end6.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i.i.i.thread
  %42 = phi i8* [ %call5.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i.i.i.thread ], [ %40, %if.end6.i.i.i.i.i.i.i ]
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %42, i8* align 1 %38, i64 %33, i1 false) #31
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit.i

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit.i: ; preds = %if.end.i.i.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i.i
  %_M_p.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 0, i32 0
  %43 = load i64, i64* %__dnew.i.i.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %34, i64 0, i32 1
  store i64 %43, i64* %_M_string_length.i.i.i.i.i.i.i.i.i, align 8, !tbaa !19
  %44 = load i8*, i8** %_M_p.i.i.i.i.i.i.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %44, i64 %43
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %24) #31
  %45 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i, align 8, !tbaa !32
  %incdec.ptr.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %45, i64 1
  store %"class.std::__cxx11::basic_string"* %incdec.ptr.i, %"class.std::__cxx11::basic_string"** %_M_finish.i, align 8, !tbaa !32
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit

if.else.i:                                        ; preds = %if.end
  call void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%"class.std::vector"* nonnull dereferenceable(24) %bone_names, %"class.std::__cxx11::basic_string"* %34, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s) #31
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit: ; preds = %if.else.i, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit.i
  %call3 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #31
  %46 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %25) #31
  %call.i.i.i193 = tail call i32* @__errno_location() #34
  %47 = load i32, i32* %call.i.i.i193, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i193, align 4, !tbaa !59
  %call.i.i = call i64 @strtol(i8* %46, i8** nonnull %__endptr.i.i, i32 10) #31
  %48 = load i8*, i8** %__endptr.i.i, align 8, !tbaa !60
  %cmp.i.i = icmp eq i8* %48, %46
  br i1 %cmp.i.i, label %if.then.i.i194, label %if.else.i.i

if.then.i.i194:                                   ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0)) #33
  unreachable

if.else.i.i:                                      ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE9push_backERKS5_.exit
  %49 = load i32, i32* %call.i.i.i193, align 4, !tbaa !59
  %cmp2.i.i = icmp eq i32 %49, 34
  %__val.off.i.i.i = add i64 %call.i.i, 2147483648
  %50 = icmp ugt i64 %__val.off.i.i.i, 4294967295
  %or.cond.i.i = or i1 %50, %cmp2.i.i
  br i1 %or.cond.i.i, label %if.then4.i.i, label %if.else5.i.i

if.then4.i.i:                                     ; preds = %if.else.i.i
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0)) #33
  unreachable

if.else5.i.i:                                     ; preds = %if.else.i.i
  %cmp.i.i.i195 = icmp eq i32 %49, 0
  br i1 %cmp.i.i.i195, label %if.then.i.i.i196, label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit

if.then.i.i.i196:                                 ; preds = %if.else5.i.i
  store i32 %47, i32* %call.i.i.i193, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit

_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit: ; preds = %if.then.i.i.i196, %if.else5.i.i
  %conv.i.i = trunc i64 %call.i.i to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %25) #31
  %51 = load i32*, i32** %_M_finish.i.i, align 8, !tbaa !61
  %52 = load i32*, i32** %_M_end_of_storage.i.i, align 8, !tbaa !63
  %cmp.not.i.i = icmp eq i32* %51, %52
  br i1 %cmp.not.i.i, label %if.else.i.i198, label %if.then.i.i197

if.then.i.i197:                                   ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit
  store i32 %conv.i.i, i32* %51, align 4, !tbaa !59
  %incdec.ptr.i.i = getelementptr inbounds i32, i32* %51, i64 1
  br label %_ZNSt6vectorIiSaIiEE9push_backEOi.exit

if.else.i.i198:                                   ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit
  %53 = load i32*, i32** %_M_start.i27.i.i, align 8, !tbaa !64
  %sub.ptr.lhs.cast.i28.i.i = ptrtoint i32* %51 to i64
  %sub.ptr.rhs.cast.i29.i.i = ptrtoint i32* %53 to i64
  %sub.ptr.sub.i30.i.i = sub i64 %sub.ptr.lhs.cast.i28.i.i, %sub.ptr.rhs.cast.i29.i.i
  %sub.ptr.div.i31.i.i = ashr exact i64 %sub.ptr.sub.i30.i.i, 2
  %cmp.i.i199 = icmp eq i64 %sub.ptr.sub.i30.i.i, 9223372036854775804
  br i1 %cmp.i.i199, label %if.then.i.i200, label %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i

if.then.i.i200:                                   ; preds = %if.else.i.i198
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.25, i64 0, i64 0)) #33
  unreachable

_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i:  ; preds = %if.else.i.i198
  %cmp.i.i.i201 = icmp eq i64 %sub.ptr.sub.i30.i.i, 0
  %.sroa.speculated.i.i = select i1 %cmp.i.i.i201, i64 1, i64 %sub.ptr.div.i31.i.i
  %add.i.i = add nsw i64 %.sroa.speculated.i.i, %sub.ptr.div.i31.i.i
  %cmp7.i.i = icmp ult i64 %add.i.i, %sub.ptr.div.i31.i.i
  %cmp9.i.i = icmp ugt i64 %add.i.i, 2305843009213693951
  %or.cond.i.i202 = or i1 %cmp7.i.i, %cmp9.i.i
  %cond.i.i = select i1 %or.cond.i.i202, i64 2305843009213693951, i64 %add.i.i
  %cmp.not.i.i203 = icmp eq i64 %cond.i.i, 0
  br i1 %cmp.not.i.i203, label %_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i, label %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i.i

_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i.i: ; preds = %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i
  %mul.i.i.i.i = shl nuw nsw i64 %cond.i.i, 2
  %call2.i.i.i.i = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i) #35
  %54 = bitcast i8* %call2.i.i.i.i to i32*
  br label %_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i

_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i: ; preds = %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i.i, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i
  %cond.i48.i = phi i32* [ %54, %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i.i ], [ null, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit.i ]
  %add.ptr.i = getelementptr inbounds i32, i32* %cond.i48.i, i64 %sub.ptr.div.i31.i.i
  store i32 %conv.i.i, i32* %add.ptr.i, align 4, !tbaa !59
  %cmp.i.i.i.i42.i = icmp sgt i64 %sub.ptr.sub.i30.i.i, 0
  br i1 %cmp.i.i.i.i42.i, label %if.then.i.i.i.i43.i, label %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i

if.then.i.i.i.i43.i:                              ; preds = %_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i
  %55 = bitcast i32* %cond.i48.i to i8*
  %56 = bitcast i32* %53 to i8*
  call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %55, i8* align 4 %56, i64 %sub.ptr.sub.i30.i.i, i1 false) #31
  br label %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i

_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i: ; preds = %if.then.i.i.i.i43.i, %_ZNSt12_Vector_baseIiSaIiEE11_M_allocateEm.exit.i
  %incdec.ptr.i204 = getelementptr inbounds i32, i32* %add.ptr.i, i64 1
  %tobool.not.i.i = icmp eq i32* %53, null
  br i1 %tobool.not.i.i, label %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit, label %if.then.i38.i

if.then.i38.i:                                    ; preds = %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i
  %57 = bitcast i32* %53 to i8*
  call void @_ZdlPv(i8* nonnull %57) #31
  br label %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit

_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit: ; preds = %if.then.i38.i, %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit.i
  store i32* %cond.i48.i, i32** %_M_start.i27.i.i, align 8, !tbaa !64
  store i32* %incdec.ptr.i204, i32** %_M_finish.i.i, align 8, !tbaa !61
  %add.ptr20.i = getelementptr inbounds i32, i32* %cond.i48.i, i64 %cond.i.i
  br label %_ZNSt6vectorIiSaIiEE9push_backEOi.exit

_ZNSt6vectorIiSaIiEE9push_backEOi.exit:           ; preds = %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit, %if.then.i.i197
  %_M_finish.i.i.sink = phi i32** [ %_M_finish.i.i, %if.then.i.i197 ], [ %_M_end_of_storage.i.i, %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit ]
  %incdec.ptr.i.i.sink = phi i32* [ %incdec.ptr.i.i, %if.then.i.i197 ], [ %add.ptr20.i, %_ZNSt6vectorIiSaIiEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPiS1_EEDpOT_.exit ]
  store i32* %incdec.ptr.i.i.sink, i32** %_M_finish.i.i.sink, align 8, !tbaa !60
  call void @llvm.lifetime.start.p0i8(i64 128, i8* nonnull %tmp697) #31
  br label %for.body

for.cond.cleanup:                                 ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %27) #31
  store i32 4, i32* %ref.tmp8, align 4, !tbaa !59
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %28) #31
  store i32 4, i32* %ref.tmp9, align 4, !tbaa !59
  %58 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i206, align 8, !tbaa !65
  %59 = load %class.LightMatrix*, %class.LightMatrix** %_M_end_of_storage.i207, align 8, !tbaa !67
  %cmp.not.i208 = icmp eq %class.LightMatrix* %58, %59
  br i1 %cmp.not.i208, label %if.else.i212, label %if.then.i211

if.then.i211:                                     ; preds = %for.cond.cleanup
  %is_data_owner_.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 0, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i.i, align 8, !tbaa !68
  %nrows_.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 0, i32 1
  store i32 4, i32* %nrows_.i.i.i.i, align 4, !tbaa !71
  %ncols_.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 0, i32 2
  store i32 4, i32* %ncols_.i.i.i.i, align 8, !tbaa !72
  %call.i.i.i.i = call noalias nonnull dereferenceable(128) i8* @_Znam(i64 128) #36
  %data_.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 0, i32 3
  %60 = bitcast double** %data_.i.i.i.i to i8**
  store i8* %call.i.i.i.i, i8** %60, align 8, !tbaa !73
  %incdec.ptr.i210 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %58, i64 1
  store %class.LightMatrix* %incdec.ptr.i210, %class.LightMatrix** %_M_finish.i206, align 8, !tbaa !65
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit

if.else.i212:                                     ; preds = %for.cond.cleanup
  call void @_ZNSt6vectorI11LightMatrixIdESaIS1_EE17_M_realloc_insertIJiiEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%"class.std::vector.8"* nonnull dereferenceable(24) %base_relatives, %class.LightMatrix* %58, i32* nonnull align 4 dereferenceable(4) %ref.tmp8, i32* nonnull align 4 dereferenceable(4) %ref.tmp9) #31
  %.pre = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i206, align 8, !tbaa !60
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit

_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit: ; preds = %if.else.i212, %if.then.i211
  %61 = phi %class.LightMatrix* [ %incdec.ptr.i210, %if.then.i211 ], [ %.pre, %if.else.i212 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %28) #31
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %27) #31
  %ncols_.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %61, i64 -1, i32 2
  %62 = load i32, i32* %ncols_.i.i, align 8, !tbaa !72
  %nrows_.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %61, i64 -1, i32 1
  %63 = load i32, i32* %nrows_.i.i, align 4, !tbaa !71
  %mul.i8.i = mul i32 %63, %62
  %cmp9.i = icmp sgt i32 %mul.i8.i, 0
  br i1 %cmp9.i, label %for.body.lr.ph.i, label %_ZN11LightMatrixIdE3setEPKd.exit

for.body.lr.ph.i:                                 ; preds = %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit
  %data_.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %61, i64 -1, i32 3
  %64 = bitcast double** %data_.i to i8**
  %65 = load i8*, i8** %64, align 8, !tbaa !73
  %wide.trip.count.i = zext i32 %mul.i8.i to i64
  %66 = shl nuw nsw i64 %wide.trip.count.i, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %65, i8* nonnull align 16 %tmp697, i64 %66, i1 false)
  br label %_ZN11LightMatrixIdE3setEPKd.exit

_ZN11LightMatrixIdE3setEPKd.exit:                 ; preds = %for.body.lr.ph.i, %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit
  %cmp46.i = icmp sgt i32 %62, 0
  br i1 %cmp46.i, label %for.body.lr.ph.i216, label %for.body18.preheader

for.body18.preheader:                             ; preds = %for.cond.loopexit.i, %_ZN11LightMatrixIdE3setEPKd.exit
  br label %for.body18

for.body.lr.ph.i216:                              ; preds = %_ZN11LightMatrixIdE3setEPKd.exit
  %data_.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %61, i64 -1, i32 3
  %67 = sext i32 %63 to i64
  %68 = zext i32 %62 to i64
  %wide.trip.count = zext i32 %63 to i64
  br label %for.body.i218

for.cond.loopexit.i:                              ; preds = %for.body5.i, %for.body.i218
  %exitcond.not.i217 = icmp eq i64 %indvars.iv.next707, %68
  %indvars.iv.next699 = add nuw nsw i64 %indvars.iv698, 1
  br i1 %exitcond.not.i217, label %for.body18.preheader, label %for.body.i218, !llvm.loop !74

for.body.i218:                                    ; preds = %for.cond.loopexit.i, %for.body.lr.ph.i216
  %indvars.iv706 = phi i64 [ %indvars.iv.next707, %for.cond.loopexit.i ], [ 0, %for.body.lr.ph.i216 ]
  %indvars.iv698 = phi i64 [ %indvars.iv.next699, %for.cond.loopexit.i ], [ 1, %for.body.lr.ph.i216 ]
  %indvars.iv.next707 = add nuw nsw i64 %indvars.iv706, 1
  %cmp344.i = icmp slt i64 %indvars.iv.next707, %67
  br i1 %cmp344.i, label %for.body5.lr.ph.i, label %for.cond.loopexit.i

for.body5.lr.ph.i:                                ; preds = %for.body.i218
  %69 = load double*, double** %data_.i.i, align 8, !tbaa !73
  %70 = mul nsw i64 %indvars.iv706, %67
  br label %for.body5.i

for.body5.i:                                      ; preds = %for.body5.i, %for.body5.lr.ph.i
  %indvars.iv700 = phi i64 [ %indvars.iv.next701, %for.body5.i ], [ %indvars.iv698, %for.body5.lr.ph.i ]
  %71 = add nsw i64 %indvars.iv700, %70
  %arrayidx.i.i = getelementptr inbounds double, double* %69, i64 %71
  %72 = load double, double* %arrayidx.i.i, align 8, !tbaa !75
  %73 = mul nsw i64 %indvars.iv700, %67
  %74 = add nsw i64 %73, %indvars.iv706
  %arrayidx.i43.i = getelementptr inbounds double, double* %69, i64 %74
  %75 = load double, double* %arrayidx.i43.i, align 8, !tbaa !75
  store double %75, double* %arrayidx.i.i, align 8, !tbaa !75
  store double %72, double* %arrayidx.i43.i, align 8, !tbaa !75
  %indvars.iv.next701 = add nuw nsw i64 %indvars.iv700, 1
  %exitcond705.not = icmp eq i64 %indvars.iv.next701, %wide.trip.count
  br i1 %exitcond705.not, label %for.cond.loopexit.i, label %for.body5.i, !llvm.loop !77

for.body:                                         ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit, %_ZNSt6vectorIiSaIiEE9push_backEOi.exit
  %indvars.iv694 = phi i64 [ 0, %_ZNSt6vectorIiSaIiEE9push_backEOi.exit ], [ %indvars.iv.next695, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit ]
  %call6 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #31
  %76 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %26) #31
  %77 = load i32, i32* %call.i.i.i193, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i193, align 4, !tbaa !59
  %call.i.i223 = call fast double @strtod(i8* %76, i8** nonnull %__endptr.i.i220) #31
  %78 = load i8*, i8** %__endptr.i.i220, align 8, !tbaa !60
  %cmp.i.i224 = icmp eq i8* %78, %76
  br i1 %cmp.i.i224, label %if.then.i.i225, label %if.else.i.i227

if.then.i.i225:                                   ; preds = %for.body
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.else.i.i227:                                   ; preds = %for.body
  %79 = load i32, i32* %call.i.i.i193, align 4, !tbaa !59
  switch i32 %79, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit [
    i32 34, label %if.then4.i.i228
    i32 0, label %if.then.i.i.i231
  ]

if.then4.i.i228:                                  ; preds = %if.else.i.i227
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.then.i.i.i231:                                 ; preds = %if.else.i.i227
  store i32 %77, i32* %call.i.i.i193, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit: ; preds = %if.then.i.i.i231, %if.else.i.i227
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %26) #31
  %arrayidx = getelementptr inbounds [16 x double], [16 x double]* %tmp, i64 0, i64 %indvars.iv694
  store double %call.i.i223, double* %arrayidx, align 8, !tbaa !75
  %indvars.iv.next695 = add nuw nsw i64 %indvars.iv694, 1
  %exitcond696.not = icmp eq i64 %indvars.iv.next695, 16
  br i1 %exitcond696.not, label %for.cond.cleanup, label %for.body, !llvm.loop !78

for.cond.cleanup17:                               ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit314
  %call26 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 10) #31
  %80 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %30) #31
  %81 = load i32, i32* %call.i.i.i193, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i193, align 4, !tbaa !59
  %call.i.i235 = call fast double @strtod(i8* %80, i8** nonnull %__endptr.i.i232) #31
  %82 = load i8*, i8** %__endptr.i.i232, align 8, !tbaa !60
  %cmp.i.i236 = icmp eq i8* %82, %80
  br i1 %cmp.i.i236, label %if.then.i.i237, label %if.else.i.i239

if.then.i.i237:                                   ; preds = %for.cond.cleanup17
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.else.i.i239:                                   ; preds = %for.cond.cleanup17
  %83 = load i32, i32* %call.i.i.i193, align 4, !tbaa !59
  switch i32 %83, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit244 [
    i32 34, label %if.then4.i.i240
    i32 0, label %if.then.i.i.i243
  ]

if.then4.i.i240:                                  ; preds = %if.else.i.i239
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.then.i.i.i243:                                 ; preds = %if.else.i.i239
  store i32 %81, i32* %call.i.i.i193, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit244

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit244: ; preds = %if.then.i.i.i243, %if.else.i.i239
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %30) #31
  store double %call.i.i235, double* %arrayidx28, align 8, !tbaa !75
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %31) #31
  store i32 4, i32* %ref.tmp29, align 4, !tbaa !59
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %32) #31
  store i32 4, i32* %ref.tmp30, align 4, !tbaa !59
  %84 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i245, align 8, !tbaa !65
  %85 = load %class.LightMatrix*, %class.LightMatrix** %_M_end_of_storage.i246, align 8, !tbaa !67
  %cmp.not.i247 = icmp eq %class.LightMatrix* %84, %85
  br i1 %cmp.not.i247, label %if.else.i257, label %if.then.i256

if.then.i256:                                     ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit244
  %is_data_owner_.i.i.i.i248 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 0, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i.i248, align 8, !tbaa !68
  %nrows_.i.i.i.i249 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 0, i32 1
  store i32 4, i32* %nrows_.i.i.i.i249, align 4, !tbaa !71
  %ncols_.i.i.i.i250 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 0, i32 2
  store i32 4, i32* %ncols_.i.i.i.i250, align 8, !tbaa !72
  %call.i.i.i.i253 = call noalias nonnull dereferenceable(128) i8* @_Znam(i64 128) #36
  %data_.i.i.i.i254 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 0, i32 3
  %86 = bitcast double** %data_.i.i.i.i254 to i8**
  store i8* %call.i.i.i.i253, i8** %86, align 8, !tbaa !73
  %incdec.ptr.i255 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %84, i64 1
  store %class.LightMatrix* %incdec.ptr.i255, %class.LightMatrix** %_M_finish.i245, align 8, !tbaa !65
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit258

if.else.i257:                                     ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit244
  call void @_ZNSt6vectorI11LightMatrixIdESaIS1_EE17_M_realloc_insertIJiiEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%"class.std::vector.8"* nonnull dereferenceable(24) %inverse_base_absolutes, %class.LightMatrix* %84, i32* nonnull align 4 dereferenceable(4) %ref.tmp29, i32* nonnull align 4 dereferenceable(4) %ref.tmp30) #31
  %.pre724 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i245, align 8, !tbaa !60
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit258

_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit258: ; preds = %if.else.i257, %if.then.i256
  %87 = phi %class.LightMatrix* [ %incdec.ptr.i255, %if.then.i256 ], [ %.pre724, %if.else.i257 ]
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %32) #31
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %31) #31
  %ncols_.i.i261 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %87, i64 -1, i32 2
  %88 = load i32, i32* %ncols_.i.i261, align 8, !tbaa !72
  %nrows_.i.i262 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %87, i64 -1, i32 1
  %89 = load i32, i32* %nrows_.i.i262, align 4, !tbaa !71
  %mul.i8.i263 = mul i32 %89, %88
  %cmp9.i264 = icmp sgt i32 %mul.i8.i263, 0
  br i1 %cmp9.i264, label %for.body.lr.ph.i267, label %_ZN11LightMatrixIdE3setEPKd.exit274

for.body.lr.ph.i267:                              ; preds = %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit258
  %data_.i265 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %87, i64 -1, i32 3
  %90 = bitcast double** %data_.i265 to i8**
  %91 = load i8*, i8** %90, align 8, !tbaa !73
  %wide.trip.count.i266 = zext i32 %mul.i8.i263 to i64
  %92 = shl nuw nsw i64 %wide.trip.count.i266, 3
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %91, i8* nonnull align 16 %tmp697, i64 %92, i1 false)
  br label %_ZN11LightMatrixIdE3setEPKd.exit274

_ZN11LightMatrixIdE3setEPKd.exit274:              ; preds = %for.body.lr.ph.i267, %_ZNSt6vectorI11LightMatrixIdESaIS1_EE12emplace_backIJiiEEEvDpOT_.exit258
  %cmp46.i278 = icmp sgt i32 %88, 0
  br i1 %cmp46.i278, label %for.body.lr.ph.i281, label %_ZN11LightMatrixIdE18transpose_in_placeEv.exit301

for.body.lr.ph.i281:                              ; preds = %_ZN11LightMatrixIdE3setEPKd.exit274
  %data_.i.i280 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %87, i64 -1, i32 3
  %93 = sext i32 %89 to i64
  %94 = zext i32 %88 to i64
  %wide.trip.count719 = zext i32 %89 to i64
  br label %for.body.i287

for.cond.loopexit.i283:                           ; preds = %for.body5.i300, %for.body.i287
  %exitcond.not.i282 = icmp eq i64 %indvars.iv.next722, %94
  %indvars.iv.next713 = add nuw nsw i64 %indvars.iv712, 1
  br i1 %exitcond.not.i282, label %_ZN11LightMatrixIdE18transpose_in_placeEv.exit301, label %for.body.i287, !llvm.loop !74

for.body.i287:                                    ; preds = %for.cond.loopexit.i283, %for.body.lr.ph.i281
  %indvars.iv721 = phi i64 [ %indvars.iv.next722, %for.cond.loopexit.i283 ], [ 0, %for.body.lr.ph.i281 ]
  %indvars.iv712 = phi i64 [ %indvars.iv.next713, %for.cond.loopexit.i283 ], [ 1, %for.body.lr.ph.i281 ]
  %indvars.iv.next722 = add nuw nsw i64 %indvars.iv721, 1
  %cmp344.i286 = icmp slt i64 %indvars.iv.next722, %93
  br i1 %cmp344.i286, label %for.body5.lr.ph.i289, label %for.cond.loopexit.i283

for.body5.lr.ph.i289:                             ; preds = %for.body.i287
  %95 = load double*, double** %data_.i.i280, align 8, !tbaa !73
  %96 = mul nsw i64 %indvars.iv721, %93
  br label %for.body5.i300

for.body5.i300:                                   ; preds = %for.body5.i300, %for.body5.lr.ph.i289
  %indvars.iv714 = phi i64 [ %indvars.iv.next715, %for.body5.i300 ], [ %indvars.iv712, %for.body5.lr.ph.i289 ]
  %97 = add nsw i64 %indvars.iv714, %96
  %arrayidx.i.i293 = getelementptr inbounds double, double* %95, i64 %97
  %98 = load double, double* %arrayidx.i.i293, align 8, !tbaa !75
  %99 = mul nsw i64 %indvars.iv714, %93
  %100 = add nsw i64 %99, %indvars.iv721
  %arrayidx.i43.i297 = getelementptr inbounds double, double* %95, i64 %100
  %101 = load double, double* %arrayidx.i43.i297, align 8, !tbaa !75
  store double %101, double* %arrayidx.i.i293, align 8, !tbaa !75
  store double %98, double* %arrayidx.i43.i297, align 8, !tbaa !75
  %indvars.iv.next715 = add nuw nsw i64 %indvars.iv714, 1
  %exitcond720.not = icmp eq i64 %indvars.iv.next715, %wide.trip.count719
  br i1 %exitcond720.not, label %for.cond.loopexit.i283, label %for.body5.i300, !llvm.loop !77

_ZN11LightMatrixIdE18transpose_in_placeEv.exit301: ; preds = %for.cond.loopexit.i283, %_ZN11LightMatrixIdE3setEPKd.exit274
  call void @llvm.lifetime.end.p0i8(i64 128, i8* nonnull %tmp697) #31
  br label %while.cond.backedge

while.cond.backedge:                              ; preds = %_ZN11LightMatrixIdE18transpose_in_placeEv.exit301, %while.body
  %vtable = load i8*, i8** %18, align 8, !tbaa !50
  %vbase.offset.ptr = getelementptr i8, i8* %vtable, i64 -24
  %102 = bitcast i8* %vbase.offset.ptr to i64*
  %vbase.offset = load i64, i64* %102, align 8
  %_M_streambuf_state.i.i = getelementptr inbounds i8, i8* %20, i64 %vbase.offset
  %103 = bitcast i8* %_M_streambuf_state.i.i to i32*
  %104 = load i32, i32* %103, align 8, !tbaa !52
  %cmp.i = icmp eq i32 %104, 0
  br i1 %cmp.i, label %while.body, label %while.end, !llvm.loop !79

for.body18:                                       ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit314, %for.body18.preheader
  %indvars.iv709 = phi i64 [ %indvars.iv.next710, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit314 ], [ 0, %for.body18.preheader ]
  %call19 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %23, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #31
  %105 = load i8*, i8** %_M_p.i9.i.i.i.i, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %29) #31
  %106 = load i32, i32* %call.i.i.i193, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i193, align 4, !tbaa !59
  %call.i.i305 = call fast double @strtod(i8* %105, i8** nonnull %__endptr.i.i302) #31
  %107 = load i8*, i8** %__endptr.i.i302, align 8, !tbaa !60
  %cmp.i.i306 = icmp eq i8* %107, %105
  br i1 %cmp.i.i306, label %if.then.i.i307, label %if.else.i.i309

if.then.i.i307:                                   ; preds = %for.body18
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.else.i.i309:                                   ; preds = %for.body18
  %108 = load i32, i32* %call.i.i.i193, align 4, !tbaa !59
  switch i32 %108, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit314 [
    i32 34, label %if.then4.i.i310
    i32 0, label %if.then.i.i.i313
  ]

if.then4.i.i310:                                  ; preds = %if.else.i.i309
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.then.i.i.i313:                                 ; preds = %if.else.i.i309
  store i32 %106, i32* %call.i.i.i193, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit314

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit314: ; preds = %if.then.i.i.i313, %if.else.i.i309
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %29) #31
  %arrayidx22 = getelementptr inbounds [16 x double], [16 x double]* %tmp, i64 0, i64 %indvars.iv709
  store double %call.i.i305, double* %arrayidx22, align 8, !tbaa !75
  %indvars.iv.next710 = add nuw nsw i64 %indvars.iv709, 1
  %exitcond711.not = icmp eq i64 %indvars.iv.next710, 15
  br i1 %exitcond711.not, label %for.cond.cleanup17, label %for.body18, !llvm.loop !80

while.end:                                        ; preds = %while.cond.backedge, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 1
  %call.i = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i) #31
  %tobool.not.i = icmp eq %"class.std::basic_filebuf"* %call.i, null
  br i1 %tobool.not.i, label %if.then.i316, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit

if.then.i316:                                     ; preds = %while.end
  %vtable.i = load i8*, i8** %18, align 8, !tbaa !50
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %109 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %109, align 8
  %add.ptr.i315 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i
  %110 = bitcast i8* %add.ptr.i315 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i315, i64 32
  %111 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %112 = load i32, i32* %111, align 8, !tbaa !52
  %or.i.i.i = or i32 %112, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %110, i32 %or.i.i.i) #31
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit: ; preds = %if.then.i316, %while.end
  %_M_finish.i317 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %113 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i317, align 8, !tbaa !32
  %_M_start.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %114 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i, align 8, !tbaa !81
  %sub.ptr.lhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %113 to i64
  %sub.ptr.rhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %114 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %115 = lshr exact i64 %sub.ptr.sub.i, 5
  %conv = trunc i64 %115 to i32
  %116 = bitcast %"class.std::basic_ifstream"* %vert_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %116) #31
  %117 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp38 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %117) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !82)
  %118 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 2
  %119 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp38 to %union.anon**
  store %union.anon* %118, %union.anon** %119, align 8, !tbaa !14, !alias.scope !82
  %120 = load i8*, i8** %_M_p.i9.i.i, align 8, !tbaa !17, !noalias !82
  %121 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !82
  %122 = bitcast i64* %__dnew.i.i.i.i.i318 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %122) #31, !noalias !82
  store i64 %121, i64* %__dnew.i.i.i.i.i318, align 8, !tbaa !20, !noalias !82
  %cmp3.i.i.i.i.i321 = icmp ugt i64 %121, 15
  br i1 %cmp3.i.i.i.i.i321, label %if.then4.i.i.i.i.i326, label %if.end.if.end6_crit_edge.i.i.i.i.i322

if.end.if.end6_crit_edge.i.i.i.i.i322:            ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit
  %123 = bitcast %union.anon* %118 to i8*
  br label %if.end6.i.i.i.i.i327

if.then4.i.i.i.i.i326:                            ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit
  %call5.i.i.i.i.i323 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp38, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i318, i64 0) #31
  %_M_p.i13.i.i.i.i.i324 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i323, i8** %_M_p.i13.i.i.i.i.i324, align 8, !tbaa !17, !alias.scope !82
  %124 = load i64, i64* %__dnew.i.i.i.i.i318, align 8, !tbaa !20, !noalias !82
  %_M_allocated_capacity.i.i.i.i.i.i325 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 2, i32 0
  store i64 %124, i64* %_M_allocated_capacity.i.i.i.i.i.i325, align 8, !tbaa !21, !alias.scope !82
  br label %if.end6.i.i.i.i.i327

if.end6.i.i.i.i.i327:                             ; preds = %if.then4.i.i.i.i.i326, %if.end.if.end6_crit_edge.i.i.i.i.i322
  %125 = phi i8* [ %123, %if.end.if.end6_crit_edge.i.i.i.i.i322 ], [ %call5.i.i.i.i.i323, %if.then4.i.i.i.i.i326 ]
  switch i64 %121, label %if.end.i.i.i.i.i.i.i.i329 [
    i64 1, label %if.then.i.i.i.i.i.i.i328
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i336
  ]

if.then.i.i.i.i.i.i.i328:                         ; preds = %if.end6.i.i.i.i.i327
  %126 = load i8, i8* %120, align 1, !tbaa !21
  store i8 %126, i8* %125, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i336

if.end.i.i.i.i.i.i.i.i329:                        ; preds = %if.end6.i.i.i.i.i327
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %125, i8* align 1 %120, i64 %121, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i336

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i336: ; preds = %if.end.i.i.i.i.i.i.i.i329, %if.then.i.i.i.i.i.i.i328, %if.end6.i.i.i.i.i327
  %_M_p.i.i.i.i.i.i330 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 0, i32 0
  %127 = load i64, i64* %__dnew.i.i.i.i.i318, align 8, !tbaa !20, !noalias !82
  %_M_string_length.i.i.i.i.i.i.i331 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp38, i64 0, i32 1
  store i64 %127, i64* %_M_string_length.i.i.i.i.i.i.i331, align 8, !tbaa !19, !alias.scope !82
  %128 = load i8*, i8** %_M_p.i.i.i.i.i.i330, align 8, !tbaa !17, !alias.scope !82
  %arrayidx.i.i.i.i.i.i332 = getelementptr inbounds i8, i8* %128, i64 %127
  store i8 0, i8* %arrayidx.i.i.i.i.i.i332, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %122) #31, !noalias !82
  %129 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i331, align 8, !tbaa !19, !alias.scope !82
  %sub3.i.i.i334 = sub i64 4611686018427387903, %129
  %cmp.i.i.i335 = icmp ult i64 %sub3.i.i.i334, 12
  br i1 %cmp.i.i.i335, label %if.then.i.i.i337, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit339

if.then.i.i.i337:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i336
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit339: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i336
  %call2.i.i338 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp38, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i64 12) #31
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %vert_in, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp38, i32 8)
  %130 = load i8*, i8** %_M_p.i.i.i.i.i.i330, align 8, !tbaa !17
  %arraydecay.i.i.i.i341 = bitcast %union.anon* %118 to i8*
  %cmp.i.i.i342 = icmp eq i8* %130, %arraydecay.i.i.i.i341
  br i1 %cmp.i.i.i342, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit344, label %if.then.i.i343

if.then.i.i343:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit339
  call void @_ZdlPv(i8* %130) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit344

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit344: ; preds = %if.then.i.i343, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit339
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %117) #31
  %131 = bitcast %"class.std::basic_ifstream"* %vert_in to i8**
  %vtable40674 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr41675 = getelementptr i8, i8* %vtable40674, i64 -24
  %132 = bitcast i8* %vbase.offset.ptr41675 to i64*
  %vbase.offset42676 = load i64, i64* %132, align 8
  %add.ptr43 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1, i32 0, i32 2
  %133 = bitcast i8** %add.ptr43 to i8*
  %_M_streambuf_state.i.i345677 = getelementptr inbounds i8, i8* %133, i64 %vbase.offset42676
  %134 = bitcast i8* %_M_streambuf_state.i.i345677 to i32*
  %135 = load i32, i32* %134, align 8, !tbaa !52
  %cmp.i346678 = icmp eq i32 %135, 0
  br i1 %cmp.i346678, label %while.body45.lr.ph, label %while.end51

while.body45.lr.ph:                               ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit344
  %136 = bitcast %"class.std::basic_ifstream"* %vert_in to %"class.std::basic_istream"*
  %add.ptr.i350 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1, i32 19
  %137 = bitcast i8** %add.ptr.i350 to i8*
  br label %while.body45

while.body45:                                     ; preds = %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit, %while.body45.lr.ph
  %vbase.offset.i349 = phi i64 [ %vbase.offset42676, %while.body45.lr.ph ], [ %vbase.offset42, %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit ]
  %n_vertices.0679 = phi i32 [ 0, %while.body45.lr.ph ], [ %spec.select, %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit ]
  %_M_ctype.i.i = getelementptr inbounds i8, i8* %137, i64 %vbase.offset.i349
  %138 = bitcast i8* %_M_ctype.i.i to %"class.std::ctype"**
  %139 = load %"class.std::ctype"*, %"class.std::ctype"** %138, align 8, !tbaa !85
  %tobool.not.i.i.i = icmp eq %"class.std::ctype"* %139, null
  br i1 %tobool.not.i.i.i, label %if.then.i.i.i351, label %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i

if.then.i.i.i351:                                 ; preds = %while.body45
  call void @_ZSt16__throw_bad_castv() #33
  unreachable

_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i: ; preds = %while.body45
  %_M_widen_ok.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %139, i64 0, i32 8
  %140 = load i8, i8* %_M_widen_ok.i.i.i, align 8, !tbaa !87
  %tobool.not.i3.i.i = icmp eq i8 %140, 0
  br i1 %tobool.not.i3.i.i, label %if.end.i.i.i, label %if.then.i4.i.i

if.then.i4.i.i:                                   ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  %arrayidx.i.i.i = getelementptr inbounds %"class.std::ctype", %"class.std::ctype"* %139, i64 0, i32 9, i64 10
  %141 = load i8, i8* %arrayidx.i.i.i, align 1, !tbaa !21
  br label %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit

if.end.i.i.i:                                     ; preds = %_ZSt13__check_facetISt5ctypeIcEERKT_PS3_.exit.i.i
  call void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull dereferenceable(570) %139) #31
  %142 = bitcast %"class.std::ctype"* %139 to i8 (%"class.std::ctype"*, i8)***
  %vtable.i.i.i = load i8 (%"class.std::ctype"*, i8)**, i8 (%"class.std::ctype"*, i8)*** %142, align 8, !tbaa !50
  %vfn.i.i.i = getelementptr inbounds i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vtable.i.i.i, i64 6
  %143 = load i8 (%"class.std::ctype"*, i8)*, i8 (%"class.std::ctype"*, i8)** %vfn.i.i.i, align 8
  %call.i.i.i352 = call signext i8 %143(%"class.std::ctype"* nonnull dereferenceable(570) %139, i8 signext 10) #31
  br label %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit

_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit: ; preds = %if.end.i.i.i, %if.then.i4.i.i
  %retval.0.i.i.i = phi i8 [ %141, %if.then.i4.i.i ], [ %call.i.i.i352, %if.end.i.i.i ]
  %call1.i = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %136, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext %retval.0.i.i.i) #31
  %144 = load i64, i64* %_M_string_length.i.i.i191, align 8, !tbaa !19
  %cmp.i354 = icmp ne i64 %144, 0
  %inc49 = zext i1 %cmp.i354 to i32
  %spec.select = add nuw nsw i32 %n_vertices.0679, %inc49
  %vtable40 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr41 = getelementptr i8, i8* %vtable40, i64 -24
  %145 = bitcast i8* %vbase.offset.ptr41 to i64*
  %vbase.offset42 = load i64, i64* %145, align 8
  %_M_streambuf_state.i.i345 = getelementptr inbounds i8, i8* %133, i64 %vbase.offset42
  %146 = bitcast i8* %_M_streambuf_state.i.i345 to i32*
  %147 = load i32, i32* %146, align 8, !tbaa !52
  %cmp.i346 = icmp eq i32 %147, 0
  br i1 %cmp.i346, label %while.body45, label %while.end51, !llvm.loop !89

while.end51:                                      ; preds = %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit344
  %n_vertices.0.lcssa = phi i32 [ 0, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit344 ], [ %spec.select, %_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EE.exit ]
  %_M_filebuf.i355 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1
  %call.i356 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i355) #31
  %tobool.not.i357 = icmp eq %"class.std::basic_filebuf"* %call.i356, null
  br i1 %tobool.not.i357, label %if.then.i364, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit365

if.then.i364:                                     ; preds = %while.end51
  %vtable.i358 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr.i359 = getelementptr i8, i8* %vtable.i358, i64 -24
  %148 = bitcast i8* %vbase.offset.ptr.i359 to i64*
  %vbase.offset.i360 = load i64, i64* %148, align 8
  %add.ptr.i361 = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i360
  %149 = bitcast i8* %add.ptr.i361 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i362 = getelementptr inbounds i8, i8* %add.ptr.i361, i64 32
  %150 = bitcast i8* %_M_streambuf_state.i.i.i362 to i32*
  %151 = load i32, i32* %150, align 8, !tbaa !52
  %or.i.i.i363 = or i32 %151, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %149, i32 %or.i.i.i363) #31
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit365

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit365: ; preds = %if.then.i364, %while.end51
  %nrows_.i366 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 1
  %152 = load i32, i32* %nrows_.i366, align 4, !tbaa !71
  %ncols_.i367 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 2
  %153 = load i32, i32* %ncols_.i367, align 8, !tbaa !72
  %mul.i = mul nsw i32 %153, %152
  %mul2.i = shl nsw i32 %n_vertices.0.lcssa, 2
  %cmp.not.i368 = icmp eq i32 %mul.i, %mul2.i
  br i1 %cmp.not.i368, label %_ZN11LightMatrixIdE6resizeEii.exit, label %if.then.i370

if.then.i370:                                     ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit365
  %is_data_owner_.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 0
  %154 = load i8, i8* %is_data_owner_.i, align 8, !tbaa !68, !range !90
  %tobool.not.i369 = icmp eq i8 %154, 0
  br i1 %tobool.not.i369, label %if.end.i, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i370
  %data_.i371 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  %155 = load double*, double** %data_.i371, align 8, !tbaa !73
  %isnull.i = icmp eq double* %155, null
  br i1 %isnull.i, label %if.end.i, label %delete.notnull.i

delete.notnull.i:                                 ; preds = %if.then3.i
  %156 = bitcast double* %155 to i8*
  call void @_ZdaPv(i8* %156) #37
  br label %if.end.i

if.end.i:                                         ; preds = %delete.notnull.i, %if.then3.i, %if.then.i370
  %cmp5.i.not = icmp eq i32 %n_vertices.0.lcssa, 0
  br i1 %cmp5.i.not, label %_ZN11LightMatrixIdE6resizeEii.exit.thread, label %_ZN11LightMatrixIdE6resizeEii.exit.thread734

_ZN11LightMatrixIdE6resizeEii.exit.thread734:     ; preds = %if.end.i
  %conv20.i = zext i32 %mul2.i to i64
  %157 = shl nuw nsw i64 %conv20.i, 3
  %call.i372 = call noalias nonnull i8* @_Znam(i64 %157) #36
  %data_8.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  %158 = bitcast double** %data_8.i to i8**
  store i8* %call.i372, i8** %158, align 8, !tbaa !73
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i367, align 8, !tbaa !72
  store i32 4, i32* %nrows_.i366, align 4, !tbaa !71
  br label %for.body.lr.ph.i379

_ZN11LightMatrixIdE6resizeEii.exit.thread:        ; preds = %if.end.i
  %data_9.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  store double* null, double** %data_9.i, align 8, !tbaa !73
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i367, align 8, !tbaa !72
  store i32 4, i32* %nrows_.i366, align 4, !tbaa !71
  br label %_ZN11LightMatrixIdE7set_rowEiRKd.exit

_ZN11LightMatrixIdE6resizeEii.exit:               ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit365
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i367, align 8, !tbaa !72
  store i32 4, i32* %nrows_.i366, align 4, !tbaa !71
  %cmp5.i375.not = icmp eq i32 %n_vertices.0.lcssa, 0
  br i1 %cmp5.i375.not, label %_ZN11LightMatrixIdE7set_rowEiRKd.exit, label %for.body.lr.ph.i379

for.body.lr.ph.i379:                              ; preds = %_ZN11LightMatrixIdE6resizeEii.exit, %_ZN11LightMatrixIdE6resizeEii.exit.thread734
  %data_.i.i376 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  %159 = load double*, double** %data_.i.i376, align 8, !tbaa !73
  %wide.trip.count.i378 = zext i32 %n_vertices.0.lcssa to i64
  br label %for.body.i384

for.body.i384:                                    ; preds = %for.body.i384, %for.body.lr.ph.i379
  %indvars.iv.i380 = phi i64 [ 0, %for.body.lr.ph.i379 ], [ %indvars.iv.next.i382, %for.body.i384 ]
  %160 = shl nsw i64 %indvars.iv.i380, 2
  %161 = or i64 %160, 3
  %arrayidx.i.i381 = getelementptr inbounds double, double* %159, i64 %161
  store double 1.000000e+00, double* %arrayidx.i.i381, align 8, !tbaa !75
  %indvars.iv.next.i382 = add nuw nsw i64 %indvars.iv.i380, 1
  %exitcond.not.i383 = icmp eq i64 %indvars.iv.next.i382, %wide.trip.count.i378
  br i1 %exitcond.not.i383, label %_ZN11LightMatrixIdE7set_rowEiRKd.exit, label %for.body.i384, !llvm.loop !91

_ZN11LightMatrixIdE7set_rowEiRKd.exit:            ; preds = %for.body.i384, %_ZN11LightMatrixIdE6resizeEii.exit, %_ZN11LightMatrixIdE6resizeEii.exit.thread
  %cmp5.i375.not733 = phi i1 [ true, %_ZN11LightMatrixIdE6resizeEii.exit.thread ], [ true, %_ZN11LightMatrixIdE6resizeEii.exit ], [ false, %for.body.i384 ]
  %nrows_.i385 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 1
  %162 = load i32, i32* %nrows_.i385, align 4, !tbaa !71
  %ncols_.i386 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 2
  %163 = load i32, i32* %ncols_.i386, align 8, !tbaa !72
  %mul.i387 = mul nsw i32 %163, %162
  %mul2.i388 = mul i32 %n_vertices.0.lcssa, %conv
  %cmp.not.i389 = icmp eq i32 %mul.i387, %mul2.i388
  br i1 %cmp.not.i389, label %_ZN11LightMatrixIdE6resizeEii.exit405, label %if.then.i392

if.then.i392:                                     ; preds = %_ZN11LightMatrixIdE7set_rowEiRKd.exit
  %is_data_owner_.i390 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 0
  %164 = load i8, i8* %is_data_owner_.i390, align 8, !tbaa !68, !range !90
  %tobool.not.i391 = icmp eq i8 %164, 0
  br i1 %tobool.not.i391, label %if.end.i398, label %if.then3.i395

if.then3.i395:                                    ; preds = %if.then.i392
  %data_.i393 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  %165 = load double*, double** %data_.i393, align 8, !tbaa !73
  %isnull.i394 = icmp eq double* %165, null
  br i1 %isnull.i394, label %if.end.i398, label %delete.notnull.i396

delete.notnull.i396:                              ; preds = %if.then3.i395
  %166 = bitcast double* %165 to i8*
  call void @_ZdaPv(i8* %166) #37
  br label %if.end.i398

if.end.i398:                                      ; preds = %delete.notnull.i396, %if.then3.i395, %if.then.i392
  %cmp5.i397 = icmp sgt i32 %mul2.i388, 0
  br i1 %cmp5.i397, label %_ZN11LightMatrixIdE6resizeEii.exit405.thread, label %_ZN11LightMatrixIdE6resizeEii.exit405.thread644

_ZN11LightMatrixIdE6resizeEii.exit405.thread:     ; preds = %if.end.i398
  %conv20.i399 = zext i32 %mul2.i388 to i64
  %167 = shl nuw nsw i64 %conv20.i399, 3
  %call.i400 = call noalias nonnull i8* @_Znam(i64 %167) #36
  %data_8.i401 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  %168 = bitcast double** %data_8.i401 to i8**
  store i8* %call.i400, i8** %168, align 8, !tbaa !73
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i386, align 8, !tbaa !72
  store i32 %conv, i32* %nrows_.i385, align 4, !tbaa !71
  br label %for.body.lr.ph.i410

_ZN11LightMatrixIdE6resizeEii.exit405.thread644:  ; preds = %if.end.i398
  %data_9.i403 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  store double* null, double** %data_9.i403, align 8, !tbaa !73
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i386, align 8, !tbaa !72
  store i32 %conv, i32* %nrows_.i385, align 4, !tbaa !71
  br label %_ZN11LightMatrixIdE4fillERKd.exit

_ZN11LightMatrixIdE6resizeEii.exit405:            ; preds = %_ZN11LightMatrixIdE7set_rowEiRKd.exit
  store i32 %n_vertices.0.lcssa, i32* %ncols_.i386, align 8, !tbaa !72
  store i32 %conv, i32* %nrows_.i385, align 4, !tbaa !71
  %cmp6.i = icmp sgt i32 %mul.i387, 0
  br i1 %cmp6.i, label %_ZN11LightMatrixIdE6resizeEii.exit405.for.body.lr.ph.i410_crit_edge, label %_ZN11LightMatrixIdE4fillERKd.exit

_ZN11LightMatrixIdE6resizeEii.exit405.for.body.lr.ph.i410_crit_edge: ; preds = %_ZN11LightMatrixIdE6resizeEii.exit405
  %data_.i408.phi.trans.insert = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  %169 = bitcast double** %data_.i408.phi.trans.insert to i8**
  %.pre727730 = load i8*, i8** %169, align 8, !tbaa !73
  %.pre728 = zext i32 %mul2.i388 to i64
  %.pre729 = shl nuw nsw i64 %.pre728, 3
  br label %for.body.lr.ph.i410

for.body.lr.ph.i410:                              ; preds = %_ZN11LightMatrixIdE6resizeEii.exit405.for.body.lr.ph.i410_crit_edge, %_ZN11LightMatrixIdE6resizeEii.exit405.thread
  %.pre-phi = phi i64 [ %.pre729, %_ZN11LightMatrixIdE6resizeEii.exit405.for.body.lr.ph.i410_crit_edge ], [ %167, %_ZN11LightMatrixIdE6resizeEii.exit405.thread ]
  %170 = phi i8* [ %.pre727730, %_ZN11LightMatrixIdE6resizeEii.exit405.for.body.lr.ph.i410_crit_edge ], [ %call.i400, %_ZN11LightMatrixIdE6resizeEii.exit405.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %170, i8 0, i64 %.pre-phi, i1 false)
  br label %_ZN11LightMatrixIdE4fillERKd.exit

_ZN11LightMatrixIdE4fillERKd.exit:                ; preds = %for.body.lr.ph.i410, %_ZN11LightMatrixIdE6resizeEii.exit405, %_ZN11LightMatrixIdE6resizeEii.exit405.thread644
  %171 = bitcast %"class.std::basic_ifstream"* %ref.tmp56 to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %171) #31
  %172 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp57 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %172) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !92)
  %173 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 2
  %174 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp57 to %union.anon**
  store %union.anon* %173, %union.anon** %174, align 8, !tbaa !14, !alias.scope !92
  %175 = load i8*, i8** %_M_p.i9.i.i, align 8, !tbaa !17, !noalias !92
  %176 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !92
  %177 = bitcast i64* %__dnew.i.i.i.i.i416 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %177) #31, !noalias !92
  store i64 %176, i64* %__dnew.i.i.i.i.i416, align 8, !tbaa !20, !noalias !92
  %cmp3.i.i.i.i.i419 = icmp ugt i64 %176, 15
  br i1 %cmp3.i.i.i.i.i419, label %if.then4.i.i.i.i.i424, label %if.end.if.end6_crit_edge.i.i.i.i.i420

if.end.if.end6_crit_edge.i.i.i.i.i420:            ; preds = %_ZN11LightMatrixIdE4fillERKd.exit
  %178 = bitcast %union.anon* %173 to i8*
  br label %if.end6.i.i.i.i.i425

if.then4.i.i.i.i.i424:                            ; preds = %_ZN11LightMatrixIdE4fillERKd.exit
  %call5.i.i.i.i.i421 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp57, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i416, i64 0) #31
  %_M_p.i13.i.i.i.i.i422 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i421, i8** %_M_p.i13.i.i.i.i.i422, align 8, !tbaa !17, !alias.scope !92
  %179 = load i64, i64* %__dnew.i.i.i.i.i416, align 8, !tbaa !20, !noalias !92
  %_M_allocated_capacity.i.i.i.i.i.i423 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 2, i32 0
  store i64 %179, i64* %_M_allocated_capacity.i.i.i.i.i.i423, align 8, !tbaa !21, !alias.scope !92
  br label %if.end6.i.i.i.i.i425

if.end6.i.i.i.i.i425:                             ; preds = %if.then4.i.i.i.i.i424, %if.end.if.end6_crit_edge.i.i.i.i.i420
  %180 = phi i8* [ %178, %if.end.if.end6_crit_edge.i.i.i.i.i420 ], [ %call5.i.i.i.i.i421, %if.then4.i.i.i.i.i424 ]
  switch i64 %176, label %if.end.i.i.i.i.i.i.i.i427 [
    i64 1, label %if.then.i.i.i.i.i.i.i426
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i434
  ]

if.then.i.i.i.i.i.i.i426:                         ; preds = %if.end6.i.i.i.i.i425
  %181 = load i8, i8* %175, align 1, !tbaa !21
  store i8 %181, i8* %180, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i434

if.end.i.i.i.i.i.i.i.i427:                        ; preds = %if.end6.i.i.i.i.i425
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %180, i8* align 1 %175, i64 %176, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i434

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i434: ; preds = %if.end.i.i.i.i.i.i.i.i427, %if.then.i.i.i.i.i.i.i426, %if.end6.i.i.i.i.i425
  %_M_p.i.i.i.i.i.i428 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 0, i32 0
  %182 = load i64, i64* %__dnew.i.i.i.i.i416, align 8, !tbaa !20, !noalias !92
  %_M_string_length.i.i.i.i.i.i.i429 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp57, i64 0, i32 1
  store i64 %182, i64* %_M_string_length.i.i.i.i.i.i.i429, align 8, !tbaa !19, !alias.scope !92
  %183 = load i8*, i8** %_M_p.i.i.i.i.i.i428, align 8, !tbaa !17, !alias.scope !92
  %arrayidx.i.i.i.i.i.i430 = getelementptr inbounds i8, i8* %183, i64 %182
  store i8 0, i8* %arrayidx.i.i.i.i.i.i430, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %177) #31, !noalias !92
  %184 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i429, align 8, !tbaa !19, !alias.scope !92
  %sub3.i.i.i432 = sub i64 4611686018427387903, %184
  %cmp.i.i.i433 = icmp ult i64 %sub3.i.i.i432, 12
  br i1 %cmp.i.i.i433, label %if.then.i.i.i435, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit437

if.then.i.i.i435:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i434
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit437: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i434
  %call2.i.i436 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp57, i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.8, i64 0, i64 0), i64 12) #31
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %ref.tmp56, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp57, i32 8)
  %vtable.i.i.i438 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr.i.i.i = getelementptr i8, i8* %vtable.i.i.i438, i64 -24
  %185 = bitcast i8* %vbase.offset.ptr.i.i.i to i64*
  %vbase.offset.i.i.i = load i64, i64* %185, align 8
  %add.ptr.i.i.i = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i.i.i
  %186 = bitcast i8* %add.ptr.i.i.i to %"class.std::basic_ios"*
  %187 = bitcast %"class.std::basic_ifstream"* %ref.tmp56 to i8**
  %vtable2.i.i.i = load i8*, i8** %187, align 8, !tbaa !50
  %vbase.offset.ptr3.i.i.i = getelementptr i8, i8* %vtable2.i.i.i, i64 -24
  %188 = bitcast i8* %vbase.offset.ptr3.i.i.i to i64*
  %vbase.offset4.i.i.i = load i64, i64* %188, align 8
  %add.ptr5.i.i.i = getelementptr inbounds i8, i8* %171, i64 %vbase.offset4.i.i.i
  %189 = bitcast i8* %add.ptr5.i.i.i to %"class.std::basic_ios"*
  %190 = bitcast i8* %add.ptr.i.i.i to %"class.std::ios_base"*
  %191 = bitcast i8* %add.ptr5.i.i.i to %"class.std::ios_base"*
  call void @_ZNSt8ios_base7_M_swapERS_(%"class.std::ios_base"* nonnull dereferenceable(216) %190, %"class.std::ios_base"* nonnull align 8 dereferenceable(216) %191) #31
  %_M_ios_locale.i.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 208
  %192 = bitcast i8* %_M_ios_locale.i.i.i.i to %"class.std::locale"*
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE15_M_cache_localeERKSt6locale(%"class.std::basic_ios"* nonnull dereferenceable(264) %186, %"class.std::locale"* nonnull align 8 dereferenceable(8) %192) #31
  %_M_ios_locale2.i.i.i.i = getelementptr inbounds i8, i8* %add.ptr5.i.i.i, i64 208
  %193 = bitcast i8* %_M_ios_locale2.i.i.i.i to %"class.std::locale"*
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE15_M_cache_localeERKSt6locale(%"class.std::basic_ios"* nonnull dereferenceable(264) %189, %"class.std::locale"* nonnull align 8 dereferenceable(8) %193) #31
  %_M_tie.i.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 216
  %194 = bitcast i8* %_M_tie.i.i.i.i to %"class.std::basic_ostream"**
  %_M_tie3.i.i.i.i = getelementptr inbounds i8, i8* %add.ptr5.i.i.i, i64 216
  %195 = bitcast i8* %_M_tie3.i.i.i.i to %"class.std::basic_ostream"**
  %196 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %194, align 8, !tbaa !60
  %197 = load %"class.std::basic_ostream"*, %"class.std::basic_ostream"** %195, align 8, !tbaa !60
  store %"class.std::basic_ostream"* %197, %"class.std::basic_ostream"** %194, align 8, !tbaa !60
  store %"class.std::basic_ostream"* %196, %"class.std::basic_ostream"** %195, align 8, !tbaa !60
  %198 = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 224
  %199 = getelementptr inbounds i8, i8* %add.ptr5.i.i.i, i64 224
  %200 = load i8, i8* %198, align 1, !tbaa !21
  %201 = load i8, i8* %199, align 8, !tbaa !21
  store i8 %201, i8* %198, align 1, !tbaa !21
  store i8 %200, i8* %199, align 8, !tbaa !21
  %202 = getelementptr inbounds i8, i8* %add.ptr.i.i.i, i64 225
  %203 = getelementptr inbounds i8, i8* %add.ptr5.i.i.i, i64 225
  %204 = load i8, i8* %202, align 1, !tbaa !95, !range !90
  %205 = load i8, i8* %203, align 1, !tbaa !95, !range !90
  store i8 %205, i8* %202, align 1, !tbaa !95
  store i8 %204, i8* %203, align 1, !tbaa !95
  %206 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 0, i32 1
  %207 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 0, i32 1
  %208 = load i64, i64* %206, align 8, !tbaa !20
  %209 = load i64, i64* %207, align 8, !tbaa !20
  store i64 %209, i64* %206, align 8, !tbaa !20
  store i64 %208, i64* %207, align 8, !tbaa !20
  %_M_filebuf.i439 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 1
  %call5.i = call nonnull align 8 dereferenceable(240) %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEEaSEOS2_(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i355, %"class.std::basic_filebuf"* nonnull align 8 dereferenceable(240) %_M_filebuf.i439) #31
  %210 = load i32 (...)**, i32 (...)*** bitcast ([4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE to i32 (...)***), align 8
  %211 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 0, i32 0
  store i32 (...)** %210, i32 (...)*** %211, align 8, !tbaa !50
  %212 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 3) to i32 (...)***), align 8
  %vbase.offset.ptr3.i.i = getelementptr i32 (...)*, i32 (...)** %210, i64 -3
  %213 = bitcast i32 (...)** %vbase.offset.ptr3.i.i to i64*
  %vbase.offset.i.i = load i64, i64* %213, align 8
  %add.ptr.i.i440 = getelementptr inbounds i8, i8* %171, i64 %vbase.offset.i.i
  %214 = bitcast i8* %add.ptr.i.i440 to i32 (...)***
  store i32 (...)** %212, i32 (...)*** %214, align 8, !tbaa !50
  %215 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i439, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %215, align 8, !tbaa !50
  %call.i.i.i441 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i439) #31
  %_M_file.i.i.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i) #31
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %215, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i) #31
  %216 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 1) to i32 (...)***), align 8
  store i32 (...)** %216, i32 (...)*** %211, align 8, !tbaa !50
  %217 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 2) to i32 (...)***), align 8
  %vbase.offset.ptr3.i.i.i442 = getelementptr i32 (...)*, i32 (...)** %216, i64 -3
  %218 = bitcast i32 (...)** %vbase.offset.ptr3.i.i.i442 to i64*
  %vbase.offset.i.i.i443 = load i64, i64* %218, align 8
  %add.ptr.i.i.i444 = getelementptr inbounds i8, i8* %171, i64 %vbase.offset.i.i.i443
  %219 = bitcast i8* %add.ptr.i.i.i444 to i32 (...)***
  store i32 (...)** %217, i32 (...)*** %219, align 8, !tbaa !50
  store i64 0, i64* %207, align 8, !tbaa !96
  %220 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %ref.tmp56, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %220) #31
  %221 = load i8*, i8** %_M_p.i.i.i.i.i.i428, align 8, !tbaa !17
  %arraydecay.i.i.i.i446 = bitcast %union.anon* %173 to i8*
  %cmp.i.i.i447 = icmp eq i8* %221, %arraydecay.i.i.i.i446
  br i1 %cmp.i.i.i447, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit449, label %if.then.i.i448

if.then.i.i448:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit437
  call void @_ZdlPv(i8* %221) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit449

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit449: ; preds = %if.then.i.i448, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit437
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %172) #31
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %171) #31
  br i1 %cmp5.i375.not733, label %for.cond.cleanup61, label %for.cond63.preheader.lr.ph

for.cond63.preheader.lr.ph:                       ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit449
  %222 = bitcast %"class.std::basic_ifstream"* %vert_in to %"class.std::basic_istream"*
  %_M_p.i.i.i490 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 0, i32 0
  %223 = bitcast i8** %__endptr.i.i489 to i8*
  %data_.i502 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 4, i32 3
  %224 = bitcast i8** %__endptr.i.i507 to i8*
  %225 = bitcast i8** %__endptr.i.i523 to i8*
  %226 = bitcast i8** %__endptr.i.i539 to i8*
  %data_.i552 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 5, i32 3
  br label %for.cond63.preheader

for.cond63.preheader:                             ; preds = %for.cond.cleanup88, %for.cond63.preheader.lr.ph
  %i_vert.0672 = phi i32 [ 0, %for.cond63.preheader.lr.ph ], [ %inc104, %for.cond.cleanup88 ]
  br label %for.body66

for.cond.cleanup61:                               ; preds = %for.cond.cleanup88, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit449
  %call.i451 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i355) #31
  %tobool.not.i452 = icmp eq %"class.std::basic_filebuf"* %call.i451, null
  br i1 %tobool.not.i452, label %if.then.i459, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit461

if.then.i459:                                     ; preds = %for.cond.cleanup61
  %vtable.i453 = load i8*, i8** %131, align 8, !tbaa !50
  %vbase.offset.ptr.i454 = getelementptr i8, i8* %vtable.i453, i64 -24
  %227 = bitcast i8* %vbase.offset.ptr.i454 to i64*
  %vbase.offset.i455 = load i64, i64* %227, align 8
  %add.ptr.i456 = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i455
  %228 = bitcast i8* %add.ptr.i456 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i457 = getelementptr inbounds i8, i8* %add.ptr.i456, i64 32
  %229 = bitcast i8* %_M_streambuf_state.i.i.i457 to i32*
  %230 = load i32, i32* %229, align 8, !tbaa !52
  %or.i.i.i458 = or i32 %230, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %228, i32 %or.i.i.i458) #31
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit461

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit461: ; preds = %if.then.i459, %for.cond.cleanup61
  %231 = bitcast %"class.std::basic_ifstream"* %triangles_in to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %231) #31
  %232 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp106 to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %232) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !98)
  %233 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 2
  %234 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp106 to %union.anon**
  store %union.anon* %233, %union.anon** %234, align 8, !tbaa !14, !alias.scope !98
  %235 = load i8*, i8** %_M_p.i9.i.i, align 8, !tbaa !17, !noalias !98
  %236 = load i64, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !noalias !98
  %237 = bitcast i64* %__dnew.i.i.i.i.i462 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %237) #31, !noalias !98
  store i64 %236, i64* %__dnew.i.i.i.i.i462, align 8, !tbaa !20, !noalias !98
  %cmp3.i.i.i.i.i465 = icmp ugt i64 %236, 15
  br i1 %cmp3.i.i.i.i.i465, label %if.then4.i.i.i.i.i470, label %if.end.if.end6_crit_edge.i.i.i.i.i466

if.end.if.end6_crit_edge.i.i.i.i.i466:            ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit461
  %238 = bitcast %union.anon* %233 to i8*
  br label %if.end6.i.i.i.i.i471

if.then4.i.i.i.i.i470:                            ; preds = %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit461
  %call5.i.i.i.i.i467 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp106, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i462, i64 0) #31
  %_M_p.i13.i.i.i.i.i468 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i467, i8** %_M_p.i13.i.i.i.i.i468, align 8, !tbaa !17, !alias.scope !98
  %239 = load i64, i64* %__dnew.i.i.i.i.i462, align 8, !tbaa !20, !noalias !98
  %_M_allocated_capacity.i.i.i.i.i.i469 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 2, i32 0
  store i64 %239, i64* %_M_allocated_capacity.i.i.i.i.i.i469, align 8, !tbaa !21, !alias.scope !98
  br label %if.end6.i.i.i.i.i471

if.end6.i.i.i.i.i471:                             ; preds = %if.then4.i.i.i.i.i470, %if.end.if.end6_crit_edge.i.i.i.i.i466
  %240 = phi i8* [ %238, %if.end.if.end6_crit_edge.i.i.i.i.i466 ], [ %call5.i.i.i.i.i467, %if.then4.i.i.i.i.i470 ]
  switch i64 %236, label %if.end.i.i.i.i.i.i.i.i473 [
    i64 1, label %if.then.i.i.i.i.i.i.i472
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i480
  ]

if.then.i.i.i.i.i.i.i472:                         ; preds = %if.end6.i.i.i.i.i471
  %241 = load i8, i8* %235, align 1, !tbaa !21
  store i8 %241, i8* %240, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i480

if.end.i.i.i.i.i.i.i.i473:                        ; preds = %if.end6.i.i.i.i.i471
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %240, i8* align 1 %235, i64 %236, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i480

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i480: ; preds = %if.end.i.i.i.i.i.i.i.i473, %if.then.i.i.i.i.i.i.i472, %if.end6.i.i.i.i.i471
  %_M_p.i.i.i.i.i.i474 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 0, i32 0
  %242 = load i64, i64* %__dnew.i.i.i.i.i462, align 8, !tbaa !20, !noalias !98
  %_M_string_length.i.i.i.i.i.i.i475 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp106, i64 0, i32 1
  store i64 %242, i64* %_M_string_length.i.i.i.i.i.i.i475, align 8, !tbaa !19, !alias.scope !98
  %243 = load i8*, i8** %_M_p.i.i.i.i.i.i474, align 8, !tbaa !17, !alias.scope !98
  %arrayidx.i.i.i.i.i.i476 = getelementptr inbounds i8, i8* %243, i64 %242
  store i8 0, i8* %arrayidx.i.i.i.i.i.i476, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %237) #31, !noalias !98
  %244 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i475, align 8, !tbaa !19, !alias.scope !98
  %sub3.i.i.i478 = sub i64 4611686018427387903, %244
  %cmp.i.i.i479 = icmp ult i64 %sub3.i.i.i478, 13
  br i1 %cmp.i.i.i479, label %if.then.i.i.i481, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit483

if.then.i.i.i481:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i480
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit483: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit.i480
  %call2.i.i482 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp106, i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.9, i64 0, i64 0), i64 13) #31
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %triangles_in, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp106, i32 8)
  %245 = load i8*, i8** %_M_p.i.i.i.i.i.i474, align 8, !tbaa !17
  %arraydecay.i.i.i.i485 = bitcast %union.anon* %233 to i8*
  %cmp.i.i.i486 = icmp eq i8* %245, %arraydecay.i.i.i.i485
  br i1 %cmp.i.i.i486, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit488, label %if.then.i.i487

if.then.i.i487:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit483
  call void @_ZdlPv(i8* %245) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit488

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit488: ; preds = %if.then.i.i487, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_.exit483
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %232) #31
  %246 = bitcast [3 x %"class.std::__cxx11::basic_string"]* %ss to i8*
  call void @llvm.lifetime.start.p0i8(i64 96, i8* nonnull %246) #31
  %array.begin = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 0
  %arrayctor.end = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 3
  br label %arrayctor.loop

for.body66:                                       ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit501, %for.cond63.preheader
  %j.0667 = phi i32 [ 0, %for.cond63.preheader ], [ %inc72, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit501 ]
  %call67 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #31
  %247 = load i8*, i8** %_M_p.i.i.i490, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %223) #31
  %call.i.i.i491 = tail call i32* @__errno_location() #34
  %248 = load i32, i32* %call.i.i.i491, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i491, align 4, !tbaa !59
  %call.i.i492 = call fast double @strtod(i8* %247, i8** nonnull %__endptr.i.i489) #31
  %249 = load i8*, i8** %__endptr.i.i489, align 8, !tbaa !60
  %cmp.i.i493 = icmp eq i8* %249, %247
  br i1 %cmp.i.i493, label %if.then.i.i494, label %if.else.i.i496

if.then.i.i494:                                   ; preds = %for.body66
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.else.i.i496:                                   ; preds = %for.body66
  %250 = load i32, i32* %call.i.i.i491, align 4, !tbaa !59
  switch i32 %250, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit501 [
    i32 34, label %if.then4.i.i497
    i32 0, label %if.then.i.i.i500
  ]

if.then4.i.i497:                                  ; preds = %if.else.i.i496
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.then.i.i.i500:                                 ; preds = %if.else.i.i496
  store i32 %248, i32* %call.i.i.i491, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit501

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit501: ; preds = %if.then.i.i.i500, %if.else.i.i496
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %223) #31
  %251 = load double*, double** %data_.i502, align 8, !tbaa !73
  %252 = load i32, i32* %nrows_.i366, align 4, !tbaa !71
  %mul.i504 = mul nsw i32 %252, %i_vert.0672
  %add.i505 = add nsw i32 %mul.i504, %j.0667
  %idxprom.i = sext i32 %add.i505 to i64
  %arrayidx.i506 = getelementptr inbounds double, double* %251, i64 %idxprom.i
  store double %call.i.i492, double* %arrayidx.i506, align 8, !tbaa !75
  %inc72 = add nuw nsw i32 %j.0667, 1
  %exitcond690.not = icmp eq i32 %inc72, 3
  br i1 %exitcond690.not, label %for.body78.preheader, label %for.body66, !llvm.loop !101

for.body78.preheader:                             ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit501
  %call.i.i.i491.lcssa4 = phi i32* [ %call.i.i.i491, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit501 ]
  br label %for.body78

for.cond.cleanup77:                               ; preds = %for.body78
  %call83 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #31
  %253 = load i8*, i8** %_M_p.i.i.i490, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %224) #31
  %254 = load i32, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  %call.i.i510 = call i64 @strtol(i8* %253, i8** nonnull %__endptr.i.i507, i32 10) #31
  %255 = load i8*, i8** %__endptr.i.i507, align 8, !tbaa !60
  %cmp.i.i511 = icmp eq i8* %255, %253
  br i1 %cmp.i.i511, label %if.then.i.i512, label %if.else.i.i516

if.then.i.i512:                                   ; preds = %for.cond.cleanup77
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0)) #33
  unreachable

if.else.i.i516:                                   ; preds = %for.cond.cleanup77
  %256 = load i32, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  %cmp2.i.i513 = icmp eq i32 %256, 34
  %__val.off.i.i.i514 = add i64 %call.i.i510, 2147483648
  %257 = icmp ugt i64 %__val.off.i.i.i514, 4294967295
  %or.cond.i.i515 = or i1 %257, %cmp2.i.i513
  br i1 %or.cond.i.i515, label %if.then4.i.i517, label %if.else5.i.i518

if.then4.i.i517:                                  ; preds = %if.else.i.i516
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0)) #33
  unreachable

if.else5.i.i518:                                  ; preds = %if.else.i.i516
  %cmp.i.i.i519 = icmp eq i32 %256, 0
  br i1 %cmp.i.i.i519, label %if.then.i.i.i520, label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit522

if.then.i.i.i520:                                 ; preds = %if.else5.i.i518
  store i32 %254, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit522

_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit522: ; preds = %if.then.i.i.i520, %if.else5.i.i518
  %conv.i.i521 = trunc i64 %call.i.i510 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %224) #31
  %cmp87669 = icmp sgt i32 %conv.i.i521, 0
  br i1 %cmp87669, label %for.body89.lr.ph, label %for.cond.cleanup88

for.body89.lr.ph:                                 ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit522
  %sub = add nsw i32 %conv.i.i521, -1
  br label %for.body89

for.body78:                                       ; preds = %for.body78, %for.body78.preheader
  %j74.0668 = phi i32 [ %inc81, %for.body78 ], [ 0, %for.body78.preheader ]
  %call79 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #31
  %inc81 = add nuw nsw i32 %j74.0668, 1
  %exitcond691.not = icmp eq i32 %inc81, 5
  br i1 %exitcond691.not, label %for.cond.cleanup77, label %for.body78, !llvm.loop !102

for.cond.cleanup88:                               ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit551, %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit522
  %inc104 = add nuw i32 %i_vert.0672, 1
  %exitcond693.not = icmp eq i32 %inc104, %n_vertices.0.lcssa
  br i1 %exitcond693.not, label %for.cond.cleanup61, label %for.cond63.preheader, !llvm.loop !103

for.body89:                                       ; preds = %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit551, %for.body89.lr.ph
  %j85.0670 = phi i32 [ 0, %for.body89.lr.ph ], [ %inc101, %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit551 ]
  %call90 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext 58) #31
  %258 = load i8*, i8** %_M_p.i.i.i490, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %225) #31
  %259 = load i32, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  %call.i.i526 = call i64 @strtol(i8* %258, i8** nonnull %__endptr.i.i523, i32 10) #31
  %260 = load i8*, i8** %__endptr.i.i523, align 8, !tbaa !60
  %cmp.i.i527 = icmp eq i8* %260, %258
  br i1 %cmp.i.i527, label %if.then.i.i528, label %if.else.i.i532

if.then.i.i528:                                   ; preds = %for.body89
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0)) #33
  unreachable

if.else.i.i532:                                   ; preds = %for.body89
  %261 = load i32, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  %cmp2.i.i529 = icmp eq i32 %261, 34
  %__val.off.i.i.i530 = add i64 %call.i.i526, 2147483648
  %262 = icmp ugt i64 %__val.off.i.i.i530, 4294967295
  %or.cond.i.i531 = or i1 %262, %cmp2.i.i529
  br i1 %or.cond.i.i531, label %if.then4.i.i533, label %if.else5.i.i534

if.then4.i.i533:                                  ; preds = %if.else.i.i532
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0)) #33
  unreachable

if.else5.i.i534:                                  ; preds = %if.else.i.i532
  %cmp.i.i.i535 = icmp eq i32 %261, 0
  br i1 %cmp.i.i.i535, label %if.then.i.i.i536, label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit538

if.then.i.i.i536:                                 ; preds = %if.else5.i.i534
  store i32 %259, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit538

_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit538: ; preds = %if.then.i.i.i536, %if.else5.i.i534
  %conv.i.i537 = trunc i64 %call.i.i526 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %225) #31
  %cmp92 = icmp eq i32 %j85.0670, %sub
  %.sink = select i1 %cmp92, i8 10, i8 58
  %call95 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %222, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %s, i8 signext %.sink) #31
  %263 = load i8*, i8** %_M_p.i.i.i490, align 8, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %226) #31
  %264 = load i32, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  %call.i.i542 = call fast double @strtod(i8* %263, i8** nonnull %__endptr.i.i539) #31
  %265 = load i8*, i8** %__endptr.i.i539, align 8, !tbaa !60
  %cmp.i.i543 = icmp eq i8* %265, %263
  br i1 %cmp.i.i543, label %if.then.i.i544, label %if.else.i.i546

if.then.i.i544:                                   ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit538
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.else.i.i546:                                   ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit538
  %266 = load i32, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  switch i32 %266, label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit551 [
    i32 34, label %if.then4.i.i547
    i32 0, label %if.then.i.i.i550
  ]

if.then4.i.i547:                                  ; preds = %if.else.i.i546
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.22, i64 0, i64 0)) #33
  unreachable

if.then.i.i.i550:                                 ; preds = %if.else.i.i546
  store i32 %264, i32* %call.i.i.i491.lcssa4, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit551

_ZNSt7__cxx114stodERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPm.exit551: ; preds = %if.then.i.i.i550, %if.else.i.i546
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %226) #31
  %267 = load double*, double** %data_.i552, align 8, !tbaa !73
  %268 = load i32, i32* %nrows_.i385, align 4, !tbaa !71
  %mul.i554 = mul nsw i32 %268, %i_vert.0672
  %add.i555 = add nsw i32 %mul.i554, %conv.i.i537
  %idxprom.i556 = sext i32 %add.i555 to i64
  %arrayidx.i557 = getelementptr inbounds double, double* %267, i64 %idxprom.i556
  store double %call.i.i542, double* %arrayidx.i557, align 8, !tbaa !75
  %inc101 = add nuw nsw i32 %j85.0670, 1
  %exitcond692.not = icmp eq i32 %inc101, %conv.i.i521
  br i1 %exitcond692.not, label %for.cond.cleanup88, label %for.body89, !llvm.loop !104

arrayctor.loop:                                   ; preds = %arrayctor.loop, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit488
  %arrayctor.cur = phi %"class.std::__cxx11::basic_string"* [ %array.begin, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit488 ], [ %arrayctor.next, %arrayctor.loop ]
  %269 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arrayctor.cur, i64 0, i32 2
  %270 = bitcast %"class.std::__cxx11::basic_string"* %arrayctor.cur to %union.anon**
  store %union.anon* %269, %union.anon** %270, align 8, !tbaa !14
  %_M_string_length.i.i.i558 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arrayctor.cur, i64 0, i32 1
  store i64 0, i64* %_M_string_length.i.i.i558, align 8, !tbaa !19
  %.cast.i559 = bitcast %union.anon* %269 to i8*
  store i8 0, i8* %.cast.i559, align 1, !tbaa !21
  %arrayctor.next = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arrayctor.cur, i64 1
  %arrayctor.done = icmp eq %"class.std::__cxx11::basic_string"* %arrayctor.next, %arrayctor.end
  br i1 %arrayctor.done, label %while.cond107.preheader, label %arrayctor.loop

while.cond107.preheader:                          ; preds = %arrayctor.loop
  %271 = bitcast %"class.std::basic_ifstream"* %triangles_in to i8**
  %vtable108662 = load i8*, i8** %271, align 8, !tbaa !50
  %vbase.offset.ptr109663 = getelementptr i8, i8* %vtable108662, i64 -24
  %272 = bitcast i8* %vbase.offset.ptr109663 to i64*
  %vbase.offset110664 = load i64, i64* %272, align 8
  %add.ptr111 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 1, i32 0, i32 2
  %273 = bitcast i8** %add.ptr111 to i8*
  %_M_streambuf_state.i.i560665 = getelementptr inbounds i8, i8* %273, i64 %vbase.offset110664
  %274 = bitcast i8* %_M_streambuf_state.i.i560665 to i32*
  %275 = load i32, i32* %274, align 8, !tbaa !52
  %cmp.i561666 = icmp eq i32 %275, 0
  br i1 %cmp.i561666, label %while.body113.lr.ph, label %while.end137

while.body113.lr.ph:                              ; preds = %while.cond107.preheader
  %276 = bitcast %"class.std::basic_ifstream"* %triangles_in to %"class.std::basic_istream"*
  %_M_string_length.i.i562 = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 0, i32 1
  %arrayidx120 = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 1
  %arrayidx122 = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 2
  %277 = bitcast %struct.Triangle* %curr to i8*
  %278 = bitcast i8** %__endptr.i.i571 to i8*
  %_M_finish.i564 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 6, i32 0, i32 0, i32 0, i32 1
  %_M_end_of_storage.i565 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 6, i32 0, i32 0, i32 0, i32 2
  %triangles = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 6
  br label %while.body113

while.body113:                                    ; preds = %while.cond107.backedge, %while.body113.lr.ph
  %call115 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %276, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %array.begin, i8 signext 58) #31
  %279 = load i64, i64* %_M_string_length.i.i562, align 8, !tbaa !19
  %cmp.i563 = icmp eq i64 %279, 0
  br i1 %cmp.i563, label %while.cond107.backedge, label %if.end119

if.end119:                                        ; preds = %while.body113
  %call121 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %276, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %arrayidx120, i8 signext 58) #31
  %call123 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16) %276, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %arrayidx122, i8 signext 10) #31
  call void @llvm.lifetime.start.p0i8(i64 12, i8* nonnull %277) #31
  %call.i.i.i573 = tail call i32* @__errno_location() #34
  br label %for.body128

for.cond.cleanup127:                              ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit586
  %280 = load %struct.Triangle*, %struct.Triangle** %_M_finish.i564, align 8, !tbaa !105
  %281 = load %struct.Triangle*, %struct.Triangle** %_M_end_of_storage.i565, align 8, !tbaa !107
  %cmp.not.i566 = icmp eq %struct.Triangle* %280, %281
  br i1 %cmp.not.i566, label %if.else.i569, label %if.then.i568

if.then.i568:                                     ; preds = %for.cond.cleanup127
  %282 = bitcast %struct.Triangle* %280 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(12) %282, i8* nonnull align 4 dereferenceable(12) %277, i64 12, i1 false) #31, !tbaa.struct !108
  %283 = load %struct.Triangle*, %struct.Triangle** %_M_finish.i564, align 8, !tbaa !105
  %incdec.ptr.i567 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %283, i64 1
  store %struct.Triangle* %incdec.ptr.i567, %struct.Triangle** %_M_finish.i564, align 8, !tbaa !105
  br label %_ZNSt6vectorI8TriangleSaIS0_EE9push_backERKS0_.exit

if.else.i569:                                     ; preds = %for.cond.cleanup127
  call void @_ZNSt6vectorI8TriangleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_(%"class.std::vector.13"* nonnull dereferenceable(24) %triangles, %struct.Triangle* %280, %struct.Triangle* nonnull align 4 dereferenceable(12) %curr) #31
  br label %_ZNSt6vectorI8TriangleSaIS0_EE9push_backERKS0_.exit

_ZNSt6vectorI8TriangleSaIS0_EE9push_backERKS0_.exit: ; preds = %if.else.i569, %if.then.i568
  call void @llvm.lifetime.end.p0i8(i64 12, i8* nonnull %277) #31
  br label %while.cond107.backedge

while.cond107.backedge:                           ; preds = %_ZNSt6vectorI8TriangleSaIS0_EE9push_backERKS0_.exit, %while.body113
  %vtable108 = load i8*, i8** %271, align 8, !tbaa !50
  %vbase.offset.ptr109 = getelementptr i8, i8* %vtable108, i64 -24
  %284 = bitcast i8* %vbase.offset.ptr109 to i64*
  %vbase.offset110 = load i64, i64* %284, align 8
  %_M_streambuf_state.i.i560 = getelementptr inbounds i8, i8* %273, i64 %vbase.offset110
  %285 = bitcast i8* %_M_streambuf_state.i.i560 to i32*
  %286 = load i32, i32* %285, align 8, !tbaa !52
  %cmp.i561 = icmp eq i32 %286, 0
  br i1 %cmp.i561, label %while.body113, label %while.end137, !llvm.loop !109

for.body128:                                      ; preds = %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit586, %if.end119
  %indvars.iv = phi i64 [ 0, %if.end119 ], [ %indvars.iv.next, %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit586 ]
  %_M_p.i.i.i572 = getelementptr inbounds [3 x %"class.std::__cxx11::basic_string"], [3 x %"class.std::__cxx11::basic_string"]* %ss, i64 0, i64 %indvars.iv, i32 0, i32 0
  %287 = load i8*, i8** %_M_p.i.i.i572, align 16, !tbaa !17
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %278) #31
  %288 = load i32, i32* %call.i.i.i573, align 4, !tbaa !59
  store i32 0, i32* %call.i.i.i573, align 4, !tbaa !59
  %call.i.i574 = call i64 @strtol(i8* %287, i8** nonnull %__endptr.i.i571, i32 10) #31
  %289 = load i8*, i8** %__endptr.i.i571, align 8, !tbaa !60
  %cmp.i.i575 = icmp eq i8* %289, %287
  br i1 %cmp.i.i575, label %if.then.i.i576, label %if.else.i.i580

if.then.i.i576:                                   ; preds = %for.body128
  call void @_ZSt24__throw_invalid_argumentPKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0)) #33
  unreachable

if.else.i.i580:                                   ; preds = %for.body128
  %290 = load i32, i32* %call.i.i.i573, align 4, !tbaa !59
  %cmp2.i.i577 = icmp eq i32 %290, 34
  %__val.off.i.i.i578 = add i64 %call.i.i574, 2147483648
  %291 = icmp ugt i64 %__val.off.i.i.i578, 4294967295
  %or.cond.i.i579 = or i1 %291, %cmp2.i.i577
  br i1 %or.cond.i.i579, label %if.then4.i.i581, label %if.else5.i.i582

if.then4.i.i581:                                  ; preds = %if.else.i.i580
  call void @_ZSt20__throw_out_of_rangePKc(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21, i64 0, i64 0)) #33
  unreachable

if.else5.i.i582:                                  ; preds = %if.else.i.i580
  %cmp.i.i.i583 = icmp eq i32 %290, 0
  br i1 %cmp.i.i.i583, label %if.then.i.i.i584, label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit586

if.then.i.i.i584:                                 ; preds = %if.else5.i.i582
  store i32 %288, i32* %call.i.i.i573, align 4, !tbaa !59
  br label %_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit586

_ZNSt7__cxx114stoiERKNS_12basic_stringIcSt11char_traitsIcESaIcEEEPmi.exit586: ; preds = %if.then.i.i.i584, %if.else5.i.i582
  %conv.i.i585 = trunc i64 %call.i.i574 to i32
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %278) #31
  %arrayidx133 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %curr, i64 0, i32 0, i64 %indvars.iv
  store i32 %conv.i.i585, i32* %arrayidx133, align 4, !tbaa !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.cond.cleanup127, label %for.body128, !llvm.loop !110

while.end137:                                     ; preds = %while.cond107.backedge, %while.cond107.preheader
  %_M_filebuf.i587 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 1
  %call.i588 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i587) #31
  %tobool.not.i589 = icmp eq %"class.std::basic_filebuf"* %call.i588, null
  br i1 %tobool.not.i589, label %if.then.i596, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit598

if.then.i596:                                     ; preds = %while.end137
  %vtable.i590 = load i8*, i8** %271, align 8, !tbaa !50
  %vbase.offset.ptr.i591 = getelementptr i8, i8* %vtable.i590, i64 -24
  %292 = bitcast i8* %vbase.offset.ptr.i591 to i64*
  %vbase.offset.i592 = load i64, i64* %292, align 8
  %add.ptr.i593 = getelementptr inbounds i8, i8* %231, i64 %vbase.offset.i592
  %293 = bitcast i8* %add.ptr.i593 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i594 = getelementptr inbounds i8, i8* %add.ptr.i593, i64 32
  %294 = bitcast i8* %_M_streambuf_state.i.i.i594 to i32*
  %295 = load i32, i32* %294, align 8, !tbaa !52
  %or.i.i.i595 = or i32 %295, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %293, i32 %or.i.i.i595) #31
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit598

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit598: ; preds = %if.then.i596, %while.end137
  %is_mirrored = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %pmodel, i64 0, i32 7
  store i8 0, i8* %is_mirrored, align 8, !tbaa !111
  br label %arraydestroy.body

arraydestroy.body:                                ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit603, %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit598
  %arraydestroy.elementPast = phi %"class.std::__cxx11::basic_string"* [ %arrayctor.end, %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit598 ], [ %arraydestroy.element, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit603 ]
  %arraydestroy.element = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arraydestroy.elementPast, i64 -1
  %_M_p.i.i.i.i599 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arraydestroy.element, i64 0, i32 0, i32 0
  %296 = load i8*, i8** %_M_p.i.i.i.i599, align 8, !tbaa !17
  %297 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %arraydestroy.elementPast, i64 -1, i32 2
  %arraydecay.i.i.i.i600 = bitcast %union.anon* %297 to i8*
  %cmp.i.i.i601 = icmp eq i8* %296, %arraydecay.i.i.i.i600
  br i1 %cmp.i.i.i601, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit603, label %if.then.i.i602

if.then.i.i602:                                   ; preds = %arraydestroy.body
  call void @_ZdlPv(i8* %296) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit603

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit603: ; preds = %if.then.i.i602, %arraydestroy.body
  %arraydestroy.done = icmp eq %"class.std::__cxx11::basic_string"* %arraydestroy.element, %array.begin
  br i1 %arraydestroy.done, label %arraydestroy.done139, label %arraydestroy.body

arraydestroy.done139:                             ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit603
  call void @llvm.lifetime.end.p0i8(i64 96, i8* nonnull %246) #31
  %298 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 0, i32 0
  store i32 (...)** %210, i32 (...)*** %298, align 8, !tbaa !50
  %vbase.offset.i.i605 = load i64, i64* %213, align 8
  %add.ptr.i.i606 = getelementptr inbounds i8, i8* %231, i64 %vbase.offset.i.i605
  %299 = bitcast i8* %add.ptr.i.i606 to i32 (...)***
  store i32 (...)** %212, i32 (...)*** %299, align 8, !tbaa !50
  %300 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i587, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %300, align 8, !tbaa !50
  %call.i.i.i608 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i587) #31
  %_M_file.i.i.i609 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i609) #31
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %300, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i610 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i610) #31
  store i32 (...)** %216, i32 (...)*** %298, align 8, !tbaa !50
  %vbase.offset.i.i.i612 = load i64, i64* %218, align 8
  %add.ptr.i.i.i613 = getelementptr inbounds i8, i8* %231, i64 %vbase.offset.i.i.i612
  %301 = bitcast i8* %add.ptr.i.i.i613 to i32 (...)***
  store i32 (...)** %217, i32 (...)*** %301, align 8, !tbaa !50
  %302 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 0, i32 1
  store i64 0, i64* %302, align 8, !tbaa !96
  %303 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %triangles_in, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %303) #31
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %231) #31
  %304 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 0, i32 0
  store i32 (...)** %210, i32 (...)*** %304, align 8, !tbaa !50
  %vbase.offset.i.i615 = load i64, i64* %213, align 8
  %add.ptr.i.i616 = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i.i615
  %305 = bitcast i8* %add.ptr.i.i616 to i32 (...)***
  store i32 (...)** %212, i32 (...)*** %305, align 8, !tbaa !50
  %306 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i355, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %306, align 8, !tbaa !50
  %call.i.i.i618 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i355) #31
  %_M_file.i.i.i619 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i619) #31
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %306, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i620 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i620) #31
  store i32 (...)** %216, i32 (...)*** %304, align 8, !tbaa !50
  %vbase.offset.i.i.i622 = load i64, i64* %218, align 8
  %add.ptr.i.i.i623 = getelementptr inbounds i8, i8* %116, i64 %vbase.offset.i.i.i622
  %307 = bitcast i8* %add.ptr.i.i.i623 to i32 (...)***
  store i32 (...)** %217, i32 (...)*** %307, align 8, !tbaa !50
  store i64 0, i64* %206, align 8, !tbaa !96
  %308 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %vert_in, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %308) #31
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %116) #31
  %_M_p.i.i.i.i624 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %s, i64 0, i32 0, i32 0
  %309 = load i8*, i8** %_M_p.i.i.i.i624, align 8, !tbaa !17
  %cmp.i.i.i626 = icmp eq i8* %309, %.cast.i
  br i1 %cmp.i.i.i626, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit628, label %if.then.i.i627

if.then.i.i627:                                   ; preds = %arraydestroy.done139
  call void @_ZdlPv(i8* %309) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit628

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit628: ; preds = %if.then.i.i627, %arraydestroy.done139
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %15) #31
  %310 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 0, i32 0
  store i32 (...)** %210, i32 (...)*** %310, align 8, !tbaa !50
  %vbase.offset.i.i630 = load i64, i64* %213, align 8
  %add.ptr.i.i631 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i.i630
  %311 = bitcast i8* %add.ptr.i.i631 to i32 (...)***
  store i32 (...)** %212, i32 (...)*** %311, align 8, !tbaa !50
  %312 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %312, align 8, !tbaa !50
  %call.i.i.i633 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i) #31
  %_M_file.i.i.i634 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i634) #31
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %312, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i635 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i635) #31
  store i32 (...)** %216, i32 (...)*** %310, align 8, !tbaa !50
  %vbase.offset.i.i.i637 = load i64, i64* %218, align 8
  %add.ptr.i.i.i638 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i.i.i637
  %313 = bitcast i8* %add.ptr.i.i.i638 to i32 (...)***
  store i32 (...)** %217, i32 (...)*** %313, align 8, !tbaa !50
  %314 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 0, i32 1
  store i64 0, i64* %314, align 8, !tbaa !96
  %315 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %bones_in, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %315) #31
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %0) #31
  ret void
}

; Function Attrs: nounwind uwtable
declare dso_local void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256), %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i32) unnamed_addr #0 align 2

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZSt7getlineIcSt11char_traitsIcESaIcEERSt13basic_istreamIT_T0_ES7_RNSt7__cxx1112basic_stringIS4_S5_T1_EES4_(%"class.std::basic_istream"* nonnull align 8 dereferenceable(16), %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32), i8 signext) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define dso_local void @_Z18read_hand_instanceRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PSt6vectorIdSaIdEEP19HandDataLightMatrixSA_(%"class.std::__cxx11::basic_string"* nocapture nonnull readonly align 8 dereferenceable(32) %model_dir, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %fn_in, %"class.std::vector.19"* %theta, %class.HandDataLightMatrix* %data, %"class.std::vector.19"* %us) local_unnamed_addr #0 {
entry:
  %in = alloca %"class.std::basic_ifstream", align 8
  %n_pts = alloca i32, align 4
  %n_theta = alloca i32, align 4
  %model = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 0
  tail call void @_Z15read_hand_modelRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEP20HandModelLightMatrix(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %model_dir, %class.HandModelLightMatrix* %model)
  %0 = bitcast %"class.std::basic_ifstream"* %in to i8*
  call void @llvm.lifetime.start.p0i8(i64 520, i8* nonnull %0) #31
  call void @_ZNSt14basic_ifstreamIcSt11char_traitsIcEEC1ERKNSt7__cxx1112basic_stringIcS1_SaIcEEESt13_Ios_Openmode(%"class.std::basic_ifstream"* nonnull dereferenceable(256) %in, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %fn_in, i32 8)
  %1 = bitcast i32* %n_pts to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %1) #31
  %2 = bitcast i32* %n_theta to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %2) #31
  %3 = bitcast %"class.std::basic_ifstream"* %in to %"class.std::basic_istream"*
  %call = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, i32* nonnull align 4 dereferenceable(4) %n_pts) #31
  %call1 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull dereferenceable(16) %call, i32* nonnull align 4 dereferenceable(4) %n_theta) #31
  %correspondences = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 1
  %4 = load i32, i32* %n_pts, align 4, !tbaa !59
  %conv = sext i32 %4 to i64
  %_M_finish.i.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 1, i32 0, i32 0, i32 0, i32 1
  %5 = load i32*, i32** %_M_finish.i.i, align 8, !tbaa !61
  %_M_start.i.i = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %correspondences, i64 0, i32 0, i32 0, i32 0, i32 0
  %6 = load i32*, i32** %_M_start.i.i, align 8, !tbaa !64
  %sub.ptr.lhs.cast.i.i = ptrtoint i32* %5 to i64
  %sub.ptr.rhs.cast.i.i = ptrtoint i32* %6 to i64
  %sub.ptr.sub.i.i = sub i64 %sub.ptr.lhs.cast.i.i, %sub.ptr.rhs.cast.i.i
  %sub.ptr.div.i.i = ashr exact i64 %sub.ptr.sub.i.i, 2
  %cmp.i = icmp ult i64 %sub.ptr.div.i.i, %conv
  br i1 %cmp.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %entry
  %sub.i = sub nsw i64 %conv, %sub.ptr.div.i.i
  call void @_ZNSt6vectorIiSaIiEE17_M_default_appendEm(%"class.std::vector.3"* nonnull dereferenceable(24) %correspondences, i64 %sub.i) #31
  %.pre = load i32, i32* %n_pts, align 4, !tbaa !59
  br label %_ZNSt6vectorIiSaIiEE6resizeEm.exit

if.else.i:                                        ; preds = %entry
  %cmp4.i = icmp ule i64 %sub.ptr.div.i.i, %conv
  %add.ptr.i = getelementptr inbounds i32, i32* %6, i64 %conv
  %tobool.not.i.i = icmp eq i32* %5, %add.ptr.i
  %or.cond.i = or i1 %tobool.not.i.i, %cmp4.i
  br i1 %or.cond.i, label %_ZNSt6vectorIiSaIiEE6resizeEm.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %if.else.i
  store i32* %add.ptr.i, i32** %_M_finish.i.i, align 8, !tbaa !61
  br label %_ZNSt6vectorIiSaIiEE6resizeEm.exit

_ZNSt6vectorIiSaIiEE6resizeEm.exit:               ; preds = %if.then.i.i, %if.else.i, %if.then.i
  %7 = phi i32 [ %.pre, %if.then.i ], [ %4, %if.else.i ], [ %4, %if.then.i.i ]
  %nrows_.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 1
  %8 = load i32, i32* %nrows_.i, align 4, !tbaa !71
  %ncols_.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 2
  %9 = load i32, i32* %ncols_.i, align 8, !tbaa !72
  %mul.i = mul nsw i32 %9, %8
  %mul2.i = mul nsw i32 %7, 3
  %cmp.not.i = icmp eq i32 %mul.i, %mul2.i
  br i1 %cmp.not.i, label %_ZN11LightMatrixIdE6resizeEii.exit, label %if.then.i62

if.then.i62:                                      ; preds = %_ZNSt6vectorIiSaIiEE6resizeEm.exit
  %is_data_owner_.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 0
  %10 = load i8, i8* %is_data_owner_.i, align 8, !tbaa !68, !range !90
  %tobool.not.i = icmp eq i8 %10, 0
  br i1 %tobool.not.i, label %if.end.i, label %if.then3.i

if.then3.i:                                       ; preds = %if.then.i62
  %data_.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 3
  %11 = load double*, double** %data_.i, align 8, !tbaa !73
  %isnull.i = icmp eq double* %11, null
  br i1 %isnull.i, label %if.end.i, label %delete.notnull.i

delete.notnull.i:                                 ; preds = %if.then3.i
  %12 = bitcast double* %11 to i8*
  call void @_ZdaPv(i8* %12) #37
  br label %if.end.i

if.end.i:                                         ; preds = %delete.notnull.i, %if.then3.i, %if.then.i62
  %cmp5.i = icmp sgt i32 %7, 0
  br i1 %cmp5.i, label %if.then6.i, label %if.else.i63

if.then6.i:                                       ; preds = %if.end.i
  %conv20.i = zext i32 %mul2.i to i64
  %13 = shl nuw nsw i64 %conv20.i, 3
  %call.i = call noalias nonnull i8* @_Znam(i64 %13) #36
  %data_8.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 3
  %14 = bitcast double** %data_8.i to i8**
  store i8* %call.i, i8** %14, align 8, !tbaa !73
  br label %_ZN11LightMatrixIdE6resizeEii.exit

if.else.i63:                                      ; preds = %if.end.i
  %data_9.i = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 3
  store double* null, double** %data_9.i, align 8, !tbaa !73
  br label %_ZN11LightMatrixIdE6resizeEii.exit

_ZN11LightMatrixIdE6resizeEii.exit:               ; preds = %if.else.i63, %if.then6.i, %_ZNSt6vectorIiSaIiEE6resizeEm.exit
  store i32 %7, i32* %ncols_.i, align 8, !tbaa !72
  store i32 3, i32* %nrows_.i, align 4, !tbaa !71
  %15 = load i32, i32* %n_pts, align 4, !tbaa !59
  %cmp117 = icmp sgt i32 %15, 0
  br i1 %cmp117, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %_ZN11LightMatrixIdE6resizeEii.exit
  %data_.i65 = getelementptr inbounds %class.HandDataLightMatrix, %class.HandDataLightMatrix* %data, i64 0, i32 2, i32 3
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.cond.cleanup8, %_ZN11LightMatrixIdE6resizeEii.exit
  %.lcssa = phi i32 [ %15, %_ZN11LightMatrixIdE6resizeEii.exit ], [ %18, %for.cond.cleanup8 ]
  %cmp16.not = icmp eq %"class.std::vector.19"* %us, null
  br i1 %cmp16.not, label %if.end, label %if.then

for.body:                                         ; preds = %for.cond.cleanup8, %for.body.lr.ph
  %indvars.iv122 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next123, %for.cond.cleanup8 ]
  %16 = load i32*, i32** %_M_start.i.i, align 8, !tbaa !64
  %add.ptr.i64 = getelementptr inbounds i32, i32* %16, i64 %indvars.iv122
  %call5 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, i32* nonnull align 4 dereferenceable(4) %add.ptr.i64) #31
  %17 = trunc i64 %indvars.iv122 to i32
  br label %for.body9

for.cond.cleanup8:                                ; preds = %for.body9
  %indvars.iv.next123 = add nuw nsw i64 %indvars.iv122, 1
  %18 = load i32, i32* %n_pts, align 4, !tbaa !59
  %19 = sext i32 %18 to i64
  %cmp = icmp slt i64 %indvars.iv.next123, %19
  br i1 %cmp, label %for.body, label %for.cond.cleanup, !llvm.loop !117

for.body9:                                        ; preds = %for.body9, %for.body
  %j.0116 = phi i32 [ 0, %for.body ], [ %inc, %for.body9 ]
  %20 = load double*, double** %data_.i65, align 8, !tbaa !73
  %21 = load i32, i32* %nrows_.i, align 4, !tbaa !71
  %mul.i67 = mul nsw i32 %21, %17
  %add.i = add nsw i32 %mul.i67, %j.0116
  %idxprom.i = sext i32 %add.i to i64
  %arrayidx.i = getelementptr inbounds double, double* %20, i64 %idxprom.i
  %call.i69 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIdEERSiRT_(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, double* nonnull align 8 dereferenceable(8) %arrayidx.i) #31
  %inc = add nuw nsw i32 %j.0116, 1
  %exitcond.not = icmp eq i32 %inc, 3
  br i1 %exitcond.not, label %for.cond.cleanup8, label %for.body9, !llvm.loop !118

if.then:                                          ; preds = %for.cond.cleanup
  %mul = shl nsw i32 %.lcssa, 1
  %conv17 = sext i32 %mul to i64
  %_M_finish.i.i70 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %us, i64 0, i32 0, i32 0, i32 0, i32 1
  %22 = load double*, double** %_M_finish.i.i70, align 8, !tbaa !119
  %_M_start.i.i71 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %us, i64 0, i32 0, i32 0, i32 0, i32 0
  %23 = load double*, double** %_M_start.i.i71, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i.i72 = ptrtoint double* %22 to i64
  %sub.ptr.rhs.cast.i.i73 = ptrtoint double* %23 to i64
  %sub.ptr.sub.i.i74 = sub i64 %sub.ptr.lhs.cast.i.i72, %sub.ptr.rhs.cast.i.i73
  %sub.ptr.div.i.i75 = ashr exact i64 %sub.ptr.sub.i.i74, 3
  %cmp.i76 = icmp ult i64 %sub.ptr.div.i.i75, %conv17
  br i1 %cmp.i76, label %if.then.i78, label %if.else.i83

if.then.i78:                                      ; preds = %if.then
  %sub.i77 = sub nsw i64 %conv17, %sub.ptr.div.i.i75
  call void @_ZNSt6vectorIdSaIdEE17_M_default_appendEm(%"class.std::vector.19"* nonnull dereferenceable(24) %us, i64 %sub.i77) #31
  %.pre124 = load i32, i32* %n_pts, align 4, !tbaa !59
  br label %_ZNSt6vectorIdSaIdEE6resizeEm.exit

if.else.i83:                                      ; preds = %if.then
  %cmp4.i79 = icmp ule i64 %sub.ptr.div.i.i75, %conv17
  %add.ptr.i80 = getelementptr inbounds double, double* %23, i64 %conv17
  %tobool.not.i.i81 = icmp eq double* %22, %add.ptr.i80
  %or.cond.i82 = or i1 %tobool.not.i.i81, %cmp4.i79
  br i1 %or.cond.i82, label %_ZNSt6vectorIdSaIdEE6resizeEm.exit, label %if.then.i.i84

if.then.i.i84:                                    ; preds = %if.else.i83
  store double* %add.ptr.i80, double** %_M_finish.i.i70, align 8, !tbaa !119
  br label %_ZNSt6vectorIdSaIdEE6resizeEm.exit

_ZNSt6vectorIdSaIdEE6resizeEm.exit:               ; preds = %if.then.i.i84, %if.else.i83, %if.then.i78
  %24 = phi i32 [ %.pre124, %if.then.i78 ], [ %.lcssa, %if.else.i83 ], [ %.lcssa, %if.then.i.i84 ]
  %cmp21114 = icmp sgt i32 %24, 0
  br i1 %cmp21114, label %for.body23, label %if.end

for.body23:                                       ; preds = %for.body23, %_ZNSt6vectorIdSaIdEE6resizeEm.exit
  %indvars.iv120 = phi i64 [ %indvars.iv.next121, %for.body23 ], [ 0, %_ZNSt6vectorIdSaIdEE6resizeEm.exit ]
  %25 = load double*, double** %_M_start.i.i71, align 8, !tbaa !121
  %add.ptr.i86 = getelementptr inbounds double, double* %25, i64 %indvars.iv120
  %call.i89 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIdEERSiRT_(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, double* nonnull align 8 dereferenceable(8) %add.ptr.i86) #31
  %indvars.iv.next121 = add nuw nsw i64 %indvars.iv120, 1
  %26 = load i32, i32* %n_pts, align 4, !tbaa !59
  %mul20 = shl nsw i32 %26, 1
  %27 = sext i32 %mul20 to i64
  %cmp21 = icmp slt i64 %indvars.iv.next121, %27
  br i1 %cmp21, label %for.body23, label %if.end, !llvm.loop !122

if.end:                                           ; preds = %for.body23, %_ZNSt6vectorIdSaIdEE6resizeEm.exit, %for.cond.cleanup
  %28 = load i32, i32* %n_theta, align 4, !tbaa !59
  %conv30 = sext i32 %28 to i64
  %_M_finish.i.i90 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %theta, i64 0, i32 0, i32 0, i32 0, i32 1
  %29 = load double*, double** %_M_finish.i.i90, align 8, !tbaa !119
  %_M_start.i.i91 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %theta, i64 0, i32 0, i32 0, i32 0, i32 0
  %30 = load double*, double** %_M_start.i.i91, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i.i92 = ptrtoint double* %29 to i64
  %sub.ptr.rhs.cast.i.i93 = ptrtoint double* %30 to i64
  %sub.ptr.sub.i.i94 = sub i64 %sub.ptr.lhs.cast.i.i92, %sub.ptr.rhs.cast.i.i93
  %sub.ptr.div.i.i95 = ashr exact i64 %sub.ptr.sub.i.i94, 3
  %cmp.i96 = icmp ult i64 %sub.ptr.div.i.i95, %conv30
  br i1 %cmp.i96, label %if.then.i98, label %if.else.i103

if.then.i98:                                      ; preds = %if.end
  %sub.i97 = sub nsw i64 %conv30, %sub.ptr.div.i.i95
  call void @_ZNSt6vectorIdSaIdEE17_M_default_appendEm(%"class.std::vector.19"* nonnull dereferenceable(24) %theta, i64 %sub.i97) #31
  %.pre125 = load i32, i32* %n_theta, align 4, !tbaa !59
  br label %_ZNSt6vectorIdSaIdEE6resizeEm.exit105

if.else.i103:                                     ; preds = %if.end
  %cmp4.i99 = icmp ule i64 %sub.ptr.div.i.i95, %conv30
  %add.ptr.i100 = getelementptr inbounds double, double* %30, i64 %conv30
  %tobool.not.i.i101 = icmp eq double* %29, %add.ptr.i100
  %or.cond.i102 = or i1 %tobool.not.i.i101, %cmp4.i99
  br i1 %or.cond.i102, label %_ZNSt6vectorIdSaIdEE6resizeEm.exit105, label %if.then.i.i104

if.then.i.i104:                                   ; preds = %if.else.i103
  store double* %add.ptr.i100, double** %_M_finish.i.i90, align 8, !tbaa !119
  br label %_ZNSt6vectorIdSaIdEE6resizeEm.exit105

_ZNSt6vectorIdSaIdEE6resizeEm.exit105:            ; preds = %if.then.i.i104, %if.else.i103, %if.then.i98
  %31 = phi i32 [ %.pre125, %if.then.i98 ], [ %28, %if.else.i103 ], [ %28, %if.then.i.i104 ]
  %cmp33111 = icmp sgt i32 %31, 0
  br i1 %cmp33111, label %for.body35, label %for.cond.cleanup34

for.cond.cleanup34:                               ; preds = %for.body35, %_ZNSt6vectorIdSaIdEE6resizeEm.exit105
  %_M_filebuf.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 1
  %call.i106 = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i) #31
  %tobool.not.i107 = icmp eq %"class.std::basic_filebuf"* %call.i106, null
  br i1 %tobool.not.i107, label %if.then.i109, label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit

if.then.i109:                                     ; preds = %for.cond.cleanup34
  %32 = bitcast %"class.std::basic_ifstream"* %in to i8**
  %vtable.i = load i8*, i8** %32, align 8, !tbaa !50
  %vbase.offset.ptr.i = getelementptr i8, i8* %vtable.i, i64 -24
  %33 = bitcast i8* %vbase.offset.ptr.i to i64*
  %vbase.offset.i = load i64, i64* %33, align 8
  %add.ptr.i108 = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i
  %34 = bitcast i8* %add.ptr.i108 to %"class.std::basic_ios"*
  %_M_streambuf_state.i.i.i = getelementptr inbounds i8, i8* %add.ptr.i108, i64 32
  %35 = bitcast i8* %_M_streambuf_state.i.i.i to i32*
  %36 = load i32, i32* %35, align 8, !tbaa !52
  %or.i.i.i = or i32 %36, 4
  call void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264) %34, i32 %or.i.i.i) #31
  br label %_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit

_ZNSt14basic_ifstreamIcSt11char_traitsIcEE5closeEv.exit: ; preds = %if.then.i109, %for.cond.cleanup34
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %2) #31
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %1) #31
  %37 = load i32 (...)**, i32 (...)*** bitcast ([4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE to i32 (...)***), align 8
  %38 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 0, i32 0
  store i32 (...)** %37, i32 (...)*** %38, align 8, !tbaa !50
  %39 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 3) to i32 (...)***), align 8
  %vbase.offset.ptr3.i.i = getelementptr i32 (...)*, i32 (...)** %37, i64 -3
  %40 = bitcast i32 (...)** %vbase.offset.ptr3.i.i to i64*
  %vbase.offset.i.i = load i64, i64* %40, align 8
  %add.ptr.i.i = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i.i
  %41 = bitcast i8* %add.ptr.i.i to i32 (...)***
  store i32 (...)** %39, i32 (...)*** %41, align 8, !tbaa !50
  %42 = getelementptr inbounds %"class.std::basic_filebuf", %"class.std::basic_filebuf"* %_M_filebuf.i, i64 0, i32 0, i32 0
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt13basic_filebufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %42, align 8, !tbaa !50
  %call.i.i.i = call %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240) %_M_filebuf.i) #31
  %_M_file.i.i.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 1, i32 2
  call void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9) %_M_file.i.i.i) #31
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [16 x i8*] }, { [16 x i8*] }* @_ZTVSt15basic_streambufIcSt11char_traitsIcEE, i64 0, inrange i32 0, i64 2) to i32 (...)**), i32 (...)*** %42, align 8, !tbaa !50
  %_M_buf_locale.i.i.i.i = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 1, i32 0, i32 7
  call void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8) %_M_buf_locale.i.i.i.i) #31
  %43 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 1) to i32 (...)***), align 8
  store i32 (...)** %43, i32 (...)*** %38, align 8, !tbaa !50
  %44 = load i32 (...)**, i32 (...)*** bitcast (i8** getelementptr inbounds ([4 x i8*], [4 x i8*]* @_ZTTSt14basic_ifstreamIcSt11char_traitsIcEE, i64 0, i64 2) to i32 (...)***), align 8
  %vbase.offset.ptr3.i.i.i = getelementptr i32 (...)*, i32 (...)** %43, i64 -3
  %45 = bitcast i32 (...)** %vbase.offset.ptr3.i.i.i to i64*
  %vbase.offset.i.i.i = load i64, i64* %45, align 8
  %add.ptr.i.i.i = getelementptr inbounds i8, i8* %0, i64 %vbase.offset.i.i.i
  %46 = bitcast i8* %add.ptr.i.i.i to i32 (...)***
  store i32 (...)** %44, i32 (...)*** %46, align 8, !tbaa !50
  %47 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 0, i32 1
  store i64 0, i64* %47, align 8, !tbaa !96
  %48 = getelementptr inbounds %"class.std::basic_ifstream", %"class.std::basic_ifstream"* %in, i64 0, i32 2, i32 0
  call void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216) %48) #31
  call void @llvm.lifetime.end.p0i8(i64 520, i8* nonnull %0) #31
  ret void

for.body35:                                       ; preds = %for.body35, %_ZNSt6vectorIdSaIdEE6resizeEm.exit105
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body35 ], [ 0, %_ZNSt6vectorIdSaIdEE6resizeEm.exit105 ]
  %49 = load double*, double** %_M_start.i.i91, align 8, !tbaa !121
  %add.ptr.i88 = getelementptr inbounds double, double* %49, i64 %indvars.iv
  %call.i68 = call nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIdEERSiRT_(%"class.std::basic_istream"* nonnull dereferenceable(16) %3, double* nonnull align 8 dereferenceable(8) %add.ptr.i88) #31
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %50 = load i32, i32* %n_theta, align 4, !tbaa !59
  %51 = sext i32 %50 to i64
  %cmp33 = icmp slt i64 %indvars.iv.next, %51
  br i1 %cmp33, label %for.body35, label %for.cond.cleanup34, !llvm.loop !123
}

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSirsERi(%"class.std::basic_istream"* nonnull dereferenceable(16), i32* nonnull align 4 dereferenceable(4)) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define dso_local void @_Z25calculate_jacobian_simpleIXadL_Z15dhand_objectiveEEEvP17HandObjectiveDataR9HandInputR10HandOutputRSt6vectorIdSaIdEES9_S9_(%struct.HandObjectiveData* %objective_input, %struct.HandInput* nocapture nonnull readonly align 8 dereferenceable(272) %input, %struct.HandOutput* nocapture nonnull readonly align 8 dereferenceable(56) %result, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %theta_d, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %us_d, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %us_jacobian_column) local_unnamed_addr #0 {
entry:
  %puts = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([20 x i8], [20 x i8]* @str, i64 0, i64 0))
  %_M_finish.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %0 = load double*, double** %_M_finish.i, align 8, !tbaa !119
  %_M_start.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1 = load double*, double** %_M_start.i, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i = ptrtoint double* %0 to i64
  %sub.ptr.rhs.cast.i = ptrtoint double* %1 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 3
  %cmp.i.i = icmp ugt i64 %sub.ptr.div.i, 1152921504606846975
  br i1 %cmp.i.i, label %if.then.i.i, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i

if.then.i.i:                                      ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i: ; preds = %entry
  %cmp.not.i.i.i.i = icmp eq i64 %sub.ptr.sub.i, 0
  br i1 %cmp.not.i.i.i.i, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit, label %for.body.i.i.preheader.i.i.i.i.i

for.body.i.i.preheader.i.i.i.i.i:                 ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %call2.i.i.i.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i) #35
  %2 = bitcast i8* %call2.i.i.i.i.i.i to double*
  %add.ptr.i.i.i = getelementptr double, double* %2, i64 %sub.ptr.div.i
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i, i8 0, i64 %sub.ptr.sub.i, i1 false) #31
  %phi.cast = ptrtoint double* %add.ptr.i.i.i to i64
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit:               ; preds = %for.body.i.i.preheader.i.i.i.i.i, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %cond.i.i.i.i51 = phi double* [ %2, %for.body.i.i.preheader.i.i.i.i.i ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i ]
  %__first.addr.0.lcssa.i.i.i.i.i.i.i = phi i64 [ %phi.cast, %for.body.i.i.preheader.i.i.i.i.i ], [ 0, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i ]
  %sub.ptr.rhs.cast.i30 = ptrtoint double* %cond.i.i.i.i51 to i64
  %sub.ptr.sub.i31 = sub i64 %__first.addr.0.lcssa.i.i.i.i.i.i.i, %sub.ptr.rhs.cast.i30
  %cmp52.not = icmp eq i64 %sub.ptr.sub.i31, 0
  br i1 %cmp52.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  %3 = icmp sgt i64 %sub.ptr.sub.i31, -1
  %smax = select i1 %3, i64 %sub.ptr.sub.i31, i64 -1
  %4 = icmp slt i64 %smax, 1
  %smin = select i1 %4, i64 %smax, i64 1
  %5 = sub i64 %sub.ptr.rhs.cast.i30, %__first.addr.0.lcssa.i.i.i.i.i.i.i
  %6 = icmp sgt i64 %5, %sub.ptr.sub.i31
  %smax55 = select i1 %6, i64 %5, i64 %sub.ptr.sub.i31
  %7 = lshr i64 %smax55, 3
  %8 = mul nsw i64 %smin, %7
  %9 = icmp ugt i64 %8, 1
  %umax = select i1 %9, i64 %8, i64 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  %_M_start.i36 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load double*, double** %_M_start.i36, align 8, !tbaa !121
  %_M_start.i35 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %11 = load double*, double** %_M_start.i35, align 8, !tbaa !121
  %bone_count = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 0
  %12 = load i32, i32* %bone_count, align 8, !tbaa !124
  %bone_names = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 1
  %13 = load i8**, i8*** %bone_names, align 8, !tbaa !127
  %parents = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 2
  %14 = load i32*, i32** %parents, align 8, !tbaa !128
  %base_relatives = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 3
  %15 = load %struct.Matrix*, %struct.Matrix** %base_relatives, align 8, !tbaa !129
  %inverse_base_absolutes = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 4
  %16 = load %struct.Matrix*, %struct.Matrix** %inverse_base_absolutes, align 8, !tbaa !130
  %base_positions = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 5
  %weights = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 6
  %triangles = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 7
  %17 = load %struct.Triangle*, %struct.Triangle** %triangles, align 8, !tbaa !131
  %is_mirrored = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 8
  %18 = load i32, i32* %is_mirrored, align 8, !tbaa !132
  %corresp_count = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 9
  %19 = load i32, i32* %corresp_count, align 4, !tbaa !133
  %correspondences = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 10
  %20 = load i32*, i32** %correspondences, align 8, !tbaa !134
  %points = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 11
  %21 = load double*, double** %_M_start.i, align 8, !tbaa !121
  call void @diffehand_objective(double* %10, double* %11, i32 %12, i8** %13, i32* %14, %struct.Matrix* %15, %struct.Matrix* %16, %struct.Matrix* nonnull %base_positions, %struct.Matrix* nonnull %weights, %struct.Triangle* %17, i32 %18, i32 %19, i32* %20, %struct.Matrix* nonnull %points, double* %21, double* %cond.i.i.i.i51)
  %tobool.not.i.i.i = icmp eq double* %cond.i.i.i.i51, null
  br i1 %tobool.not.i.i.i, label %_ZNSt6vectorIdSaIdEED2Ev.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.cond.cleanup
  %22 = bitcast double* %cond.i.i.i.i51 to i8*
  tail call void @_ZdlPv(i8* nonnull %22) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit

_ZNSt6vectorIdSaIdEED2Ev.exit:                    ; preds = %if.then.i.i.i, %for.cond.cleanup
  ret void

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %add.ptr.i = getelementptr inbounds double, double* %cond.i.i.i.i51, i64 %indvars.iv
  store double 1.000000e+00, double* %add.ptr.i, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %umax
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !135
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @printf(i8* nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @dhand_objective(double* %theta, double* %dtheta, i32 %bone_count, i8** %bone_names, i32* %parents, %struct.Matrix* %base_relatives, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, %struct.Triangle* %triangles, i32 %is_mirrored, i32 %corresp_count, i32* %correspondences, %struct.Matrix* %points, double* %err, double* %derr) local_unnamed_addr #5 {
entry:
  call void @diffehand_objective(double* %theta, double* %dtheta, i32 %bone_count, i8** %bone_names, i32* %parents, %struct.Matrix* %base_relatives, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, %struct.Triangle* %triangles, i32 %is_mirrored, i32 %corresp_count, i32* %correspondences, %struct.Matrix* %points, double* %err, double* %derr)
  ret void
}

; Function Attrs: nounwind uwtable
define dso_local void @_Z25calculate_jacobian_simpleIXadL_Z16hand_objective_dEEEvP17HandObjectiveDataR9HandInputR10HandOutputRSt6vectorIdSaIdEES9_S9_(%struct.HandObjectiveData* nocapture readonly %objective_input, %struct.HandInput* nocapture nonnull readonly align 8 dereferenceable(272) %input, %struct.HandOutput* nocapture nonnull readonly align 8 dereferenceable(56) %result, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %theta_d, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %us_d, %"class.std::vector.19"* nocapture nonnull readnone align 8 dereferenceable(24) %us_jacobian_column) local_unnamed_addr #0 {
entry:
  %puts = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @str.31, i64 0, i64 0))
  %_M_finish.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %0 = load double*, double** %_M_finish.i, align 8, !tbaa !119
  %_M_start.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %1 = load double*, double** %_M_start.i, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i = ptrtoint double* %0 to i64
  %sub.ptr.rhs.cast.i = ptrtoint double* %1 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 3
  %cmp.i.i = icmp ugt i64 %sub.ptr.div.i, 1152921504606846975
  br i1 %cmp.i.i, label %if.then.i.i, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i

if.then.i.i:                                      ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i: ; preds = %entry
  %cmp.not.i.i.i.i = icmp eq i64 %sub.ptr.sub.i, 0
  br i1 %cmp.not.i.i.i.i, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit, label %for.body.i.i.preheader.i.i.i.i.i

for.body.i.i.preheader.i.i.i.i.i:                 ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %call2.i.i.i.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i) #35
  %2 = bitcast i8* %call2.i.i.i.i.i.i to double*
  %add.ptr.i.i.i = getelementptr double, double* %2, i64 %sub.ptr.div.i
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i, i8 0, i64 %sub.ptr.sub.i, i1 false) #31
  %phi.cast = ptrtoint double* %add.ptr.i.i.i to i64
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit:               ; preds = %for.body.i.i.preheader.i.i.i.i.i, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %cond.i.i.i.i51 = phi double* [ %2, %for.body.i.i.preheader.i.i.i.i.i ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i ]
  %__first.addr.0.lcssa.i.i.i.i.i.i.i = phi i64 [ %phi.cast, %for.body.i.i.preheader.i.i.i.i.i ], [ 0, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i ]
  %sub.ptr.rhs.cast.i30 = ptrtoint double* %cond.i.i.i.i51 to i64
  %sub.ptr.sub.i31 = sub i64 %__first.addr.0.lcssa.i.i.i.i.i.i.i, %sub.ptr.rhs.cast.i30
  %cmp52.not = icmp eq i64 %sub.ptr.sub.i31, 0
  br i1 %cmp52.not, label %for.cond.cleanup, label %for.body.preheader

for.body.preheader:                               ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  %3 = icmp sgt i64 %sub.ptr.sub.i31, -1
  %smax = select i1 %3, i64 %sub.ptr.sub.i31, i64 -1
  %4 = icmp slt i64 %smax, 1
  %smin = select i1 %4, i64 %smax, i64 1
  %5 = sub i64 %sub.ptr.rhs.cast.i30, %__first.addr.0.lcssa.i.i.i.i.i.i.i
  %6 = icmp sgt i64 %5, %sub.ptr.sub.i31
  %smax55 = select i1 %6, i64 %5, i64 %sub.ptr.sub.i31
  %7 = lshr i64 %smax55, 3
  %8 = mul nsw i64 %smin, %7
  %9 = icmp ugt i64 %8, 1
  %umax = select i1 %9, i64 %8, i64 1
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  %_M_start.i36 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load double*, double** %_M_start.i36, align 8, !tbaa !121
  %_M_start.i35 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %11 = load double*, double** %_M_start.i35, align 8, !tbaa !121
  %bone_count = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 0
  %12 = load i32, i32* %bone_count, align 8, !tbaa !124
  %bone_names = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 1
  %13 = load i8**, i8*** %bone_names, align 8, !tbaa !127
  %parents = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 2
  %14 = load i32*, i32** %parents, align 8, !tbaa !128
  %base_relatives = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 3
  %15 = load %struct.Matrix*, %struct.Matrix** %base_relatives, align 8, !tbaa !129
  %inverse_base_absolutes = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 4
  %16 = load %struct.Matrix*, %struct.Matrix** %inverse_base_absolutes, align 8, !tbaa !130
  %base_positions = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 5
  %weights = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 6
  %is_mirrored = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 8
  %17 = load i32, i32* %is_mirrored, align 8, !tbaa !132
  %corresp_count = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 9
  %18 = load i32, i32* %corresp_count, align 4, !tbaa !133
  %correspondences = getelementptr inbounds %struct.HandObjectiveData, %struct.HandObjectiveData* %objective_input, i64 0, i32 10
  %19 = load i32*, i32** %correspondences, align 8, !tbaa !134
  tail call void @hand_objective_b(double* %10, double* %11, i32 %12, i8** %13, i32* %14, %struct.Matrix* %15, %struct.Matrix* %16, %struct.Matrix* nonnull %base_positions, %struct.Matrix* nonnull %weights, %struct.Triangle* undef, i32 %17, i32 %18, i32* %19, %struct.Matrix* undef, double* undef, double* %cond.i.i.i.i51)
  %tobool.not.i.i.i = icmp eq double* %cond.i.i.i.i51, null
  br i1 %tobool.not.i.i.i, label %_ZNSt6vectorIdSaIdEED2Ev.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %for.cond.cleanup
  %20 = bitcast double* %cond.i.i.i.i51 to i8*
  tail call void @_ZdlPv(i8* nonnull %20) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit

_ZNSt6vectorIdSaIdEED2Ev.exit:                    ; preds = %if.then.i.i.i, %for.cond.cleanup
  ret void

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %add.ptr.i = getelementptr inbounds double, double* %cond.i.i.i.i51, i64 %indvars.iv
  store double 1.000000e+00, double* %add.ptr.i, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %umax
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !136
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @hand_objective_b(double* nocapture readonly %theta, double* nocapture %thetab, i32 %bone_count, i8** nocapture readnone %bone_names, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix* nocapture readonly %weights, %struct.Triangle* nocapture readnone %triangles, i32 %is_mirrored, i32 %corresp_count, i32* nocapture readnone %correspondences, %struct.Matrix* nocapture readnone %points, double* nocapture readnone %err, double* nocapture readnone %errb) local_unnamed_addr #5 {
if.end:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #31
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %1 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #31
  %nrows = bitcast i8* %call.i to i32*
  tail call void @pushInteger4(i32 0) #31
  %ncols = getelementptr inbounds i8, i8* %call.i, i64 4
  %2 = bitcast i8* %ncols to i32*
  tail call void @pushInteger4(i32 0) #31
  %data = getelementptr inbounds i8, i8* %call.i, i64 8
  %3 = bitcast i8* %data to double**
  %4 = bitcast i8* %data to i8**
  tail call void @pushPointer8(i8* null) #31
  tail call void @to_pose_params_c(i32 %bone_count, double* %theta, i8** undef, %struct.Matrix* %1)
  %call.i131 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %5 = bitcast i8* %call.i131 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i131, i8 0, i64 16, i1 false) #31
  tail call void @pushInteger4(i32 0) #31
  tail call void @pushInteger4(i32 0) #31
  %data4 = getelementptr inbounds i8, i8* %call.i131, i64 8
  %6 = bitcast i8* %data4 to double**
  tail call void @pushControl1b(i32 0) #31
  %.phi.trans.insert = bitcast i8* %data4 to i8**
  %.pre = load i8*, i8** %.phi.trans.insert, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %.pre) #31
  %7 = load i32, i32* %nrows, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %7) #31
  %8 = load i32, i32* %2, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %8) #31
  %9 = load double*, double** %3, align 8, !tbaa !137
  %tobool10.not = icmp eq double* %9, null
  br i1 %tobool10.not, label %for.cond, label %if.then11

if.then11:                                        ; preds = %if.end
  %10 = load double, double* %9, align 8, !tbaa !75
  tail call void @pushReal8(double %10) #31
  br label %for.cond

for.cond:                                         ; preds = %if.then11, %if.end
  %.sink = phi i32 [ 1, %if.then11 ], [ 0, %if.end ]
  tail call void @pushControl1b(i32 %.sink) #31
  %11 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %11) #31
  tail call void @get_skinned_vertex_positions_c(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %5, i32 1)
  %cmp = icmp sgt i32 %corresp_count, 0
  br i1 %cmp, label %for.body18, label %for.end42

for.body18:                                       ; preds = %for.cond
  tail call void @llvm.trap()
  unreachable

for.end42:                                        ; preds = %for.cond
  tail call void @popPointer8(i8** nonnull %4) #31
  call void @popControl1b(i32* nonnull %branch) #31
  %12 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp44 = icmp eq i32 %12, 1
  br i1 %cmp44, label %if.then45, label %if.end47

if.then45:                                        ; preds = %for.end42
  %13 = load double*, double** %3, align 8, !tbaa !137
  call void @popReal8(double* %13) #31
  br label %if.end47

if.end47:                                         ; preds = %if.then45, %for.end42
  call void @popInteger4(i32* nonnull %2) #31
  call void @popInteger4(i32* nonnull %nrows) #31
  call void @popPointer8(i8** nonnull %.phi.trans.insert) #31
  call void @popControl1b(i32* nonnull %branch) #31
  %14 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp51 = icmp eq i32 %14, 1
  br i1 %cmp51, label %if.then52, label %if.end54

if.then52:                                        ; preds = %if.end47
  %15 = load double*, double** %6, align 8, !tbaa !137
  call void @popReal8(double* %15) #31
  br label %if.end54

if.end54:                                         ; preds = %if.then52, %if.end47
  %ncols3 = getelementptr inbounds i8, i8* %call.i131, i64 4
  %16 = bitcast i8* %ncols3 to i32*
  %nrows2 = bitcast i8* %call.i131 to i32*
  call void @popInteger4(i32* nonnull %16) #31
  call void @popInteger4(i32* nonnull %nrows2) #31
  call void @get_skinned_vertex_positions_b(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix_diff* undef, %struct.Matrix* %base_positions, %struct.Matrix_diff* undef, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %1, %struct.Matrix_diff* undef, %struct.Matrix* nonnull %5, %struct.Matrix_diff* undef, i32 1)
  call void @popPointer8(i8** nonnull %4) #31
  call void @popInteger4(i32* nonnull %2) #31
  call void @popInteger4(i32* nonnull %nrows) #31
  call void @to_pose_params_b(i32 %bone_count, double* %theta, double* %thetab, i8** undef, %struct.Matrix* nonnull %1, %struct.Matrix_diff* undef)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #31
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
define dso_local { i64, double* } @_Z17convert_to_matrixRK11LightMatrixIdE(%class.LightMatrix* nocapture nonnull readonly align 8 dereferenceable(24) %mat) local_unnamed_addr #8 {
entry:
  %nrows_ = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %nrows_, align 4, !tbaa !71
  %ncols_ = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %mat, i64 0, i32 2
  %1 = load i32, i32* %ncols_, align 8, !tbaa !72
  %data_ = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %mat, i64 0, i32 3
  %2 = load double*, double** %data_, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext = zext i32 %1 to i64
  %retval.sroa.2.0.insert.shift = shl nuw i64 %retval.sroa.2.0.insert.ext, 32
  %retval.sroa.0.0.insert.ext = zext i32 %0 to i64
  %retval.sroa.0.0.insert.insert = or i64 %retval.sroa.2.0.insert.shift, %retval.sroa.0.0.insert.ext
  %.fca.0.insert = insertvalue { i64, double* } undef, i64 %retval.sroa.0.0.insert.insert, 0
  %.fca.1.insert = insertvalue { i64, double* } %.fca.0.insert, double* %2, 1
  ret { i64, double* } %.fca.1.insert
}

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local noalias nonnull %struct.HandObjectiveData* @_Z30convert_to_hand_objective_dataRK9HandInput(%struct.HandInput* nocapture nonnull readonly align 8 dereferenceable(272) %input) local_unnamed_addr #9 {
entry:
  %call = tail call noalias nonnull dereferenceable(112) i8* @_Znwm(i64 112) #36
  %_M_start.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %0 = load i32*, i32** %_M_start.i, align 8, !tbaa !64
  %correspondences2 = getelementptr inbounds i8, i8* %call, i64 88
  %1 = bitcast i8* %correspondences2 to i32**
  store i32* %0, i32** %1, align 8, !tbaa !134
  %_M_finish.i159 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1
  %2 = load i32*, i32** %_M_finish.i159, align 8, !tbaa !61
  %sub.ptr.lhs.cast.i161 = ptrtoint i32* %2 to i64
  %sub.ptr.rhs.cast.i162 = ptrtoint i32* %0 to i64
  %sub.ptr.sub.i163 = sub i64 %sub.ptr.lhs.cast.i161, %sub.ptr.rhs.cast.i162
  %3 = lshr exact i64 %sub.ptr.sub.i163, 2
  %conv = trunc i64 %3 to i32
  %corresp_count = getelementptr inbounds i8, i8* %call, i64 84
  %4 = bitcast i8* %corresp_count to i32*
  store i32 %conv, i32* %4, align 4, !tbaa !133
  %nrows_.i150 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 1
  %5 = load i32, i32* %nrows_.i150, align 4, !tbaa !71
  %ncols_.i151 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 2
  %6 = load i32, i32* %ncols_.i151, align 8, !tbaa !72
  %data_.i152 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 3
  %7 = load double*, double** %data_.i152, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i153 = zext i32 %6 to i64
  %retval.sroa.2.0.insert.shift.i154 = shl nuw i64 %retval.sroa.2.0.insert.ext.i153, 32
  %retval.sroa.0.0.insert.ext.i155 = zext i32 %5 to i64
  %retval.sroa.0.0.insert.insert.i156 = or i64 %retval.sroa.2.0.insert.shift.i154, %retval.sroa.0.0.insert.ext.i155
  %ref.tmp.sroa.0.0..sroa_idx = getelementptr inbounds i8, i8* %call, i64 96
  %ref.tmp.sroa.0.0..sroa_cast88 = bitcast i8* %ref.tmp.sroa.0.0..sroa_idx to i64*
  store i64 %retval.sroa.0.0.insert.insert.i156, i64* %ref.tmp.sroa.0.0..sroa_cast88, align 8, !tbaa.struct !140
  %ref.tmp.sroa.4.0..sroa_idx90 = getelementptr inbounds i8, i8* %call, i64 104
  %8 = bitcast i8* %ref.tmp.sroa.4.0..sroa_idx90 to double**
  store double* %7, double** %8, align 8, !tbaa.struct !141
  %_M_finish.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %9 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i, align 8, !tbaa !32
  %_M_start.i149 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %10 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i149, align 8, !tbaa !81
  %sub.ptr.lhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %9 to i64
  %sub.ptr.rhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %10 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %11 = lshr exact i64 %sub.ptr.sub.i, 5
  %conv11 = trunc i64 %11 to i32
  %bone_count = bitcast i8* %call to i32*
  store i32 %conv11, i32* %bone_count, align 8, !tbaa !124
  %_M_start.i148 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %12 = load i32*, i32** %_M_start.i148, align 8, !tbaa !64
  %parents13 = getelementptr inbounds i8, i8* %call, i64 16
  %13 = bitcast i8* %parents13 to i32**
  store i32* %12, i32** %13, align 8, !tbaa !128
  %nrows_.i139 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 1
  %14 = load i32, i32* %nrows_.i139, align 4, !tbaa !71
  %ncols_.i140 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 2
  %15 = load i32, i32* %ncols_.i140, align 8, !tbaa !72
  %data_.i141 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 3
  %16 = load double*, double** %data_.i141, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i142 = zext i32 %15 to i64
  %retval.sroa.2.0.insert.shift.i143 = shl nuw i64 %retval.sroa.2.0.insert.ext.i142, 32
  %retval.sroa.0.0.insert.ext.i144 = zext i32 %14 to i64
  %retval.sroa.0.0.insert.insert.i145 = or i64 %retval.sroa.2.0.insert.shift.i143, %retval.sroa.0.0.insert.ext.i144
  %ref.tmp14.sroa.0.0..sroa_idx = getelementptr inbounds i8, i8* %call, i64 40
  %ref.tmp14.sroa.0.0..sroa_cast75 = bitcast i8* %ref.tmp14.sroa.0.0..sroa_idx to i64*
  store i64 %retval.sroa.0.0.insert.insert.i145, i64* %ref.tmp14.sroa.0.0..sroa_cast75, align 8, !tbaa.struct !140
  %ref.tmp14.sroa.4.0..sroa_idx77 = getelementptr inbounds i8, i8* %call, i64 48
  %17 = bitcast i8* %ref.tmp14.sroa.4.0..sroa_idx77 to double**
  store double* %16, double** %17, align 8, !tbaa.struct !141
  %nrows_.i130 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 1
  %18 = load i32, i32* %nrows_.i130, align 4, !tbaa !71
  %ncols_.i131 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 2
  %19 = load i32, i32* %ncols_.i131, align 8, !tbaa !72
  %data_.i132 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 3
  %20 = load double*, double** %data_.i132, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i133 = zext i32 %19 to i64
  %retval.sroa.2.0.insert.shift.i134 = shl nuw i64 %retval.sroa.2.0.insert.ext.i133, 32
  %retval.sroa.0.0.insert.ext.i135 = zext i32 %18 to i64
  %retval.sroa.0.0.insert.insert.i136 = or i64 %retval.sroa.2.0.insert.shift.i134, %retval.sroa.0.0.insert.ext.i135
  %ref.tmp17.sroa.0.0..sroa_idx = getelementptr inbounds i8, i8* %call, i64 56
  %ref.tmp17.sroa.0.0..sroa_cast71 = bitcast i8* %ref.tmp17.sroa.0.0..sroa_idx to i64*
  store i64 %retval.sroa.0.0.insert.insert.i136, i64* %ref.tmp17.sroa.0.0..sroa_cast71, align 8, !tbaa.struct !140
  %ref.tmp17.sroa.4.0..sroa_idx73 = getelementptr inbounds i8, i8* %call, i64 64
  %21 = bitcast i8* %ref.tmp17.sroa.4.0..sroa_idx73 to double**
  store double* %20, double** %21, align 8, !tbaa.struct !141
  %_M_start.i129 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %22 = load %struct.Triangle*, %struct.Triangle** %_M_start.i129, align 8, !tbaa !142
  %triangles21 = getelementptr inbounds i8, i8* %call, i64 72
  %23 = bitcast i8* %triangles21 to %struct.Triangle**
  store %struct.Triangle* %22, %struct.Triangle** %23, align 8, !tbaa !131
  %is_mirrored = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 7
  %24 = load i8, i8* %is_mirrored, align 8, !tbaa !111, !range !90
  %25 = zext i8 %24 to i32
  %is_mirrored22 = getelementptr inbounds i8, i8* %call, i64 80
  %26 = bitcast i8* %is_mirrored22 to i32*
  store i32 %25, i32* %26, align 8, !tbaa !132
  %sext = shl i64 %sub.ptr.sub.i, 27
  %conv24 = ashr i64 %sext, 32
  %27 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv24, i64 8)
  %28 = extractvalue { i64, i1 } %27, 1
  %29 = extractvalue { i64, i1 } %27, 0
  %30 = select i1 %28, i64 -1, i64 %29
  %call25 = tail call noalias nonnull i8* @_Znam(i64 %30) #36
  %bone_names26 = getelementptr inbounds i8, i8* %call, i64 8
  %31 = bitcast i8* %bone_names26 to i8**
  store i8* %call25, i8** %31, align 8, !tbaa !127
  %32 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv24, i64 16)
  %33 = extractvalue { i64, i1 } %32, 1
  %34 = extractvalue { i64, i1 } %32, 0
  %35 = select i1 %33, i64 -1, i64 %34
  %call29 = tail call noalias nonnull i8* @_Znam(i64 %35) #36
  %base_relatives = getelementptr inbounds i8, i8* %call, i64 24
  %36 = bitcast i8* %base_relatives to i8**
  store i8* %call29, i8** %36, align 8, !tbaa !129
  %call32 = tail call noalias nonnull i8* @_Znam(i64 %35) #36
  %inverse_base_absolutes = getelementptr inbounds i8, i8* %call, i64 32
  %37 = bitcast i8* %inverse_base_absolutes to i8**
  store i8* %call32, i8** %37, align 8, !tbaa !130
  %cmp165 = icmp sgt i32 %conv11, 0
  %38 = bitcast i8* %call25 to i8**
  %39 = bitcast i8* %call29 to %struct.Matrix*
  %40 = bitcast i8* %call32 to %struct.Matrix*
  br i1 %cmp165, label %for.body.lr.ph, label %for.cond.cleanup

for.body.lr.ph:                                   ; preds = %entry
  %_M_start.i125 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %_M_start.i115 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %wide.trip.count = and i64 %11, 4294967295
  %.pre = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i125, align 8, !tbaa !143
  %.pre167 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i115, align 8, !tbaa !143
  br label %for.body

for.cond.cleanup:                                 ; preds = %for.body, %entry
  %41 = bitcast i8* %call to %struct.HandObjectiveData*
  ret %struct.HandObjectiveData* %41

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %_M_p.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %10, i64 %indvars.iv, i32 0, i32 0
  %42 = load i8*, i8** %_M_p.i.i, align 8, !tbaa !17
  %arrayidx = getelementptr inbounds i8*, i8** %38, i64 %indvars.iv
  store i8* %42, i8** %arrayidx, align 8, !tbaa !60
  %nrows_.i116 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre, i64 %indvars.iv, i32 1
  %43 = load i32, i32* %nrows_.i116, align 4, !tbaa !71
  %ncols_.i117 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre, i64 %indvars.iv, i32 2
  %44 = load i32, i32* %ncols_.i117, align 8, !tbaa !72
  %data_.i118 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre, i64 %indvars.iv, i32 3
  %45 = load double*, double** %data_.i118, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i119 = zext i32 %44 to i64
  %retval.sroa.2.0.insert.shift.i120 = shl nuw i64 %retval.sroa.2.0.insert.ext.i119, 32
  %retval.sroa.0.0.insert.ext.i121 = zext i32 %43 to i64
  %retval.sroa.0.0.insert.insert.i122 = or i64 %retval.sroa.2.0.insert.shift.i120, %retval.sroa.0.0.insert.ext.i121
  %arrayidx46 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %39, i64 %indvars.iv
  %ref.tmp39.sroa.0.0..sroa_cast59 = bitcast %struct.Matrix* %arrayidx46 to i64*
  store i64 %retval.sroa.0.0.insert.insert.i122, i64* %ref.tmp39.sroa.0.0..sroa_cast59, align 8, !tbaa.struct !140
  %ref.tmp39.sroa.4.0..sroa_idx61 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %39, i64 %indvars.iv, i32 2
  store double* %45, double** %ref.tmp39.sroa.4.0..sroa_idx61, align 8, !tbaa.struct !141
  %nrows_.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre167, i64 %indvars.iv, i32 1
  %46 = load i32, i32* %nrows_.i, align 4, !tbaa !71
  %ncols_.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre167, i64 %indvars.iv, i32 2
  %47 = load i32, i32* %ncols_.i, align 8, !tbaa !72
  %data_.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %.pre167, i64 %indvars.iv, i32 3
  %48 = load double*, double** %data_.i, align 8, !tbaa !73
  %retval.sroa.2.0.insert.ext.i = zext i32 %47 to i64
  %retval.sroa.2.0.insert.shift.i = shl nuw i64 %retval.sroa.2.0.insert.ext.i, 32
  %retval.sroa.0.0.insert.ext.i = zext i32 %46 to i64
  %retval.sroa.0.0.insert.insert.i = or i64 %retval.sroa.2.0.insert.shift.i, %retval.sroa.0.0.insert.ext.i
  %arrayidx54 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %40, i64 %indvars.iv
  %ref.tmp47.sroa.0.0..sroa_cast55 = bitcast %struct.Matrix* %arrayidx54 to i64*
  store i64 %retval.sroa.0.0.insert.insert.i, i64* %ref.tmp47.sroa.0.0..sroa_cast55, align 8, !tbaa.struct !140
  %ref.tmp47.sroa.4.0..sroa_idx57 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %40, i64 %indvars.iv, i32 2
  store double* %48, double** %ref.tmp47.sroa.4.0..sroa_idx57, align 8, !tbaa.struct !141
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.cond.cleanup, label %for.body, !llvm.loop !144
}

; Function Attrs: nobuiltin nofree allocsize(0)
declare dso_local nonnull i8* @_Znwm(i64) local_unnamed_addr #10

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare { i64, i1 } @llvm.umul.with.overflow.i64(i64, i64) #11

; Function Attrs: nobuiltin nofree allocsize(0)
declare dso_local nonnull i8* @_Znam(i64) local_unnamed_addr #10

; Function Attrs: norecurse nounwind uwtable
define dso_local i32 @main(i32 %argc, i8** nocapture readnone %argv) local_unnamed_addr #12 {
entry:
  %__dnew.i.i.i.i.i.i364 = alloca i64, align 8
  %__dnew.i.i.i.i.i.i = alloca i64, align 8
  %__dnew.i.i.i.i147 = alloca i64, align 8
  %__dnew.i.i.i.i.i.i.i.i.i = alloca i64, align 8
  %__dnew.i.i.i.i = alloca i64, align 8
  %ref.tmp = alloca [1 x %"class.std::__cxx11::basic_string"], align 8
  %path = alloca %"class.std::__cxx11::basic_string", align 8
  %input = alloca %struct.HandInput, align 8
  %model_dir = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp11 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp12 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp13 = alloca %"class.std::__cxx11::basic_string", align 8
  %result = alloca %struct.HandOutput, align 8
  %start = alloca %struct.timeval, align 8
  %end = alloca %struct.timeval, align 8
  %input45 = alloca %struct.HandInput, align 8
  %model_dir46 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp47 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp48 = alloca %"class.std::__cxx11::basic_string", align 8
  %ref.tmp49 = alloca %"class.std::__cxx11::basic_string", align 8
  %result64 = alloca %struct.HandOutput, align 8
  %start85 = alloca %struct.timeval, align 8
  %end86 = alloca %struct.timeval, align 8
  %puts = tail call i32 @puts(i8* nonnull dereferenceable(1) getelementptr inbounds ([14 x i8], [14 x i8]* @str.32, i64 0, i64 0))
  %0 = bitcast [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp to i8*
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %0) #31
  %arrayinit.begin = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0
  %1 = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0, i32 2
  %2 = bitcast [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp to %union.anon**
  store %union.anon* %1, %union.anon** %2, align 8, !tbaa !14
  %3 = bitcast i64* %__dnew.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %3) #31
  store i64 31, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  %call5.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %arrayinit.begin, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i, i64 0) #31
  %_M_p.i13.i.i.i.i = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i, i8** %_M_p.i13.i.i.i.i, align 8, !tbaa !17
  %4 = load i64, i64* %__dnew.i.i.i.i, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i.i.i = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0, i32 2, i32 0
  store i64 %4, i64* %_M_allocated_capacity.i.i.i.i.i, align 8, !tbaa !21
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(31) %call5.i.i.i.i, i8* nonnull align 1 dereferenceable(31) getelementptr inbounds ([32 x i8], [32 x i8]* @.str.13, i64 0, i64 0), i64 31, i1 false) #31
  %_M_string_length.i.i.i.i.i.i = getelementptr inbounds [1 x %"class.std::__cxx11::basic_string"], [1 x %"class.std::__cxx11::basic_string"]* %ref.tmp, i64 0, i64 0, i32 1
  store i64 %4, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  %5 = load i8*, i8** %_M_p.i13.i.i.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i = getelementptr inbounds i8, i8* %5, i64 %4
  store i8 0, i8* %arrayidx.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %3) #31
  %call2.i.i.i.i = call noalias nonnull i8* @_Znwm(i64 32) #35
  %6 = bitcast i8* %call2.i.i.i.i to %"class.std::__cxx11::basic_string"*
  %7 = bitcast i64* %__dnew.i.i.i.i.i.i.i.i.i to i8*
  %8 = getelementptr inbounds i8, i8* %call2.i.i.i.i, i64 16
  %9 = bitcast i8* %call2.i.i.i.i to i8**
  store i8* %8, i8** %9, align 8, !tbaa !14
  %10 = load i8*, i8** %_M_p.i13.i.i.i.i, align 8, !tbaa !17
  %11 = load i64, i64* %_M_string_length.i.i.i.i.i.i, align 8, !tbaa !19
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #31
  store i64 %11, i64* %__dnew.i.i.i.i.i.i.i.i.i, align 8, !tbaa !20
  %cmp3.i.i.i.i.i.i.i.i.i = icmp ugt i64 %11, 15
  br i1 %cmp3.i.i.i.i.i.i.i.i.i, label %if.then4.i.i.i.i.i.i.i.i.i, label %if.end6.i.i.i.i.i.i.i.i.i

if.then4.i.i.i.i.i.i.i.i.i:                       ; preds = %entry
  %call5.i.i.i.i.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %6, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i.i.i.i.i, i64 0) #31
  store i8* %call5.i.i.i.i.i.i.i.i.i, i8** %9, align 8, !tbaa !17
  %12 = load i64, i64* %__dnew.i.i.i.i.i.i.i.i.i, align 8, !tbaa !20
  %13 = bitcast i8* %8 to i64*
  store i64 %12, i64* %13, align 8, !tbaa !21
  br label %if.end6.i.i.i.i.i.i.i.i.i

if.end6.i.i.i.i.i.i.i.i.i:                        ; preds = %if.then4.i.i.i.i.i.i.i.i.i, %entry
  %14 = phi i8* [ %call5.i.i.i.i.i.i.i.i.i, %if.then4.i.i.i.i.i.i.i.i.i ], [ %8, %entry ]
  switch i64 %11, label %if.end.i.i.i.i.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i.i.i.i.i
    i64 0, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit
  ]

if.then.i.i.i.i.i.i.i.i.i.i.i:                    ; preds = %if.end6.i.i.i.i.i.i.i.i.i
  %15 = load i8, i8* %10, align 1, !tbaa !21
  store i8 %15, i8* %14, align 1, !tbaa !21
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit

if.end.i.i.i.i.i.i.i.i.i.i.i.i:                   ; preds = %if.end6.i.i.i.i.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %14, i8* align 1 %10, i64 %11, i1 false) #31
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit: ; preds = %if.end.i.i.i.i.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i.i.i.i.i
  %16 = load i64, i64* %__dnew.i.i.i.i.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %call2.i.i.i.i, i64 8
  %17 = bitcast i8* %_M_string_length.i.i.i.i.i.i.i.i.i.i.i to i64*
  store i64 %16, i64* %17, align 8, !tbaa !19
  %18 = load i8*, i8** %9, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %18, i64 %16
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #31
  %19 = load i8*, i8** %_M_p.i13.i.i.i.i, align 8, !tbaa !17
  %arraydecay.i.i.i.i134 = bitcast %union.anon* %1 to i8*
  %cmp.i.i.i135 = icmp eq i8* %19, %arraydecay.i.i.i.i134
  br i1 %cmp.i.i.i135, label %for.body.lr.ph, label %if.then.i.i136

if.then.i.i136:                                   ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit
  call void @_ZdlPv(i8* %19) #31
  br label %for.body.lr.ph

for.body.lr.ph:                                   ; preds = %if.then.i.i136, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE19_M_range_initializeIPKS5_EEvT_SB_St20forward_iterator_tag.exit
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %0) #31
  %20 = bitcast %"class.std::__cxx11::basic_string"* %path to i8*
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 2
  %22 = bitcast %"class.std::__cxx11::basic_string"* %path to %union.anon**
  %23 = bitcast i64* %__dnew.i.i.i.i147 to i8*
  %24 = bitcast %union.anon* %21 to i8*
  %_M_p.i13.i.i.i.i150 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i.i151 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i.i157 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %path, i64 0, i32 1
  %25 = bitcast %struct.HandInput* %input to i8*
  %is_data_owner_.i2.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 0
  %nrows_.i3.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 1
  %ncols_.i4.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 2
  %data_.i5.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 4, i32 3
  %is_data_owner_.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 0
  %nrows_.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 1
  %ncols_.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 2
  %data_.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0, i32 5, i32 3
  %26 = bitcast double** %data_.i.i.i.i to i8*
  %correspondences.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1
  %27 = bitcast %"class.std::vector.3"* %correspondences.i.i to i8*
  %is_data_owner_.i.i.i159 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 0
  %nrows_.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 1
  %ncols_.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 2
  %data_.i.i.i160 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 2, i32 3
  %28 = bitcast double** %data_.i.i.i160 to i8*
  %29 = bitcast %"class.std::__cxx11::basic_string"* %model_dir to i8*
  %30 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp11 to i8*
  %31 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp12 to i8*
  %32 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp12, i64 0, i32 2
  %33 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp12 to %union.anon**
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp12, i64 0, i32 1
  %.cast.i.i = bitcast %union.anon* %32 to i8*
  %34 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp11, i64 0, i32 2
  %35 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp11 to %union.anon**
  %36 = bitcast %union.anon* %34 to i8*
  %_M_p.i13.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp12, i64 0, i32 0, i32 0
  %37 = bitcast i64* %__dnew.i.i.i.i.i.i to i8*
  %_M_p.i13.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp11, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp11, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp11, i64 0, i32 1
  %38 = bitcast %union.anon* %34 to i16*
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds i8, i8* %36, i64 2
  %39 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir, i64 0, i32 2
  %40 = bitcast %"class.std::__cxx11::basic_string"* %model_dir to %union.anon**
  %_M_p.i21.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir, i64 0, i32 2, i32 0
  %arraydecay.i.i.i = bitcast %union.anon* %39 to i8*
  %_M_string_length.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir, i64 0, i32 1
  %41 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp13 to i8*
  %42 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp13, i64 0, i32 2
  %43 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp13 to %union.anon**
  %_M_string_length.i.i.i.i191 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp13, i64 0, i32 1
  %.cast.i.i192 = bitcast %union.anon* %42 to i8*
  %theta = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0
  %data = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1
  %_M_p.i.i.i.i202 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp13, i64 0, i32 0, i32 0
  %_M_finish.i207 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1
  %_M_start.i208 = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %correspondences.i.i, i64 0, i32 0, i32 0, i32 0, i32 0
  %_M_finish.i209 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %_M_start.i210 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %44 = bitcast %struct.HandOutput* %result to i8*
  %45 = bitcast %struct.HandOutput* %result to i8**
  %_M_end_of_storage.i.i.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %_M_start.i.i.i217646 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_finish.i.i.i = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %jacobian_ncols = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 1
  %jacobian_nrows = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 2
  %jacobian = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3
  %46 = bitcast %"class.std::vector.19"* %jacobian to i8*
  %47 = bitcast %"class.std::vector.19"* %jacobian to i8**
  %_M_end_of_storage.i.i.i228 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2
  %_M_start.i.i.i226650 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %jacobian, i64 0, i32 0, i32 0, i32 0, i32 0
  %_M_finish.i.i.i233 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %_M_finish.i257 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %_M_start.i258 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %48 = bitcast %struct.timeval* %start to i8*
  %49 = bitcast %struct.timeval* %end to i8*
  %tv_sec.i = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 0
  %tv_sec1.i = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 0
  %tv_usec.i = getelementptr inbounds %struct.timeval, %struct.timeval* %end, i64 0, i32 1
  %tv_usec2.i = getelementptr inbounds %struct.timeval, %struct.timeval* %start, i64 0, i32 1
  %_M_start.i.i.i.i329 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %model.i.i333 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input, i64 0, i32 1, i32 0
  %50 = bitcast %struct.HandInput* %input45 to i8*
  %is_data_owner_.i2.i.i.i339 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 0, i32 4, i32 0
  %nrows_.i3.i.i.i340 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 0, i32 4, i32 1
  %ncols_.i4.i.i.i341 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 0, i32 4, i32 2
  %data_.i5.i.i.i342 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 0, i32 4, i32 3
  %is_data_owner_.i.i.i.i343 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 0, i32 5, i32 0
  %nrows_.i.i.i.i344 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 0, i32 5, i32 1
  %ncols_.i.i.i.i345 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 0, i32 5, i32 2
  %data_.i.i.i.i346 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 0, i32 5, i32 3
  %51 = bitcast double** %data_.i.i.i.i346 to i8*
  %correspondences.i.i347 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 1
  %52 = bitcast %"class.std::vector.3"* %correspondences.i.i347 to i8*
  %is_data_owner_.i.i.i348 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 2, i32 0
  %nrows_.i.i.i349 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 2, i32 1
  %ncols_.i.i.i350 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 2, i32 2
  %data_.i.i.i351 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 2, i32 3
  %53 = bitcast double** %data_.i.i.i351 to i8*
  %54 = bitcast %"class.std::__cxx11::basic_string"* %model_dir46 to i8*
  %55 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp47 to i8*
  %56 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp48 to i8*
  %57 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp48, i64 0, i32 2
  %58 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp48 to %union.anon**
  %_M_string_length.i.i.i.i353 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp48, i64 0, i32 1
  %.cast.i.i354 = bitcast %union.anon* %57 to i8*
  %59 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp47, i64 0, i32 2
  %60 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp47 to %union.anon**
  %61 = bitcast %union.anon* %59 to i8*
  %_M_p.i13.i.i.i373 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp48, i64 0, i32 0, i32 0
  %62 = bitcast i64* %__dnew.i.i.i.i.i.i364 to i8*
  %_M_p.i13.i.i.i.i.i.i379 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp47, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i.i.i.i.i380 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp47, i64 0, i32 2, i32 0
  %_M_string_length.i.i.i.i.i.i.i.i386 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp47, i64 0, i32 1
  %63 = bitcast %union.anon* %59 to i16*
  %arrayidx.i.i.i.i.i.i369 = getelementptr inbounds i8, i8* %61, i64 2
  %64 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir46, i64 0, i32 2
  %65 = bitcast %"class.std::__cxx11::basic_string"* %model_dir46 to %union.anon**
  %_M_p.i21.i.i402 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir46, i64 0, i32 0, i32 0
  %_M_allocated_capacity.i.i.i404 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir46, i64 0, i32 2, i32 0
  %arraydecay.i.i.i400 = bitcast %union.anon* %64 to i8*
  %_M_string_length.i.i.i407 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %model_dir46, i64 0, i32 1
  %66 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp49 to i8*
  %67 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp49, i64 0, i32 2
  %68 = bitcast %"class.std::__cxx11::basic_string"* %ref.tmp49 to %union.anon**
  %_M_string_length.i.i.i.i420 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp49, i64 0, i32 1
  %.cast.i.i421 = bitcast %union.anon* %67 to i8*
  %theta50 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 0
  %data51 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1
  %_M_p.i.i.i.i431 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %ref.tmp49, i64 0, i32 0, i32 0
  %_M_finish.i436 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 1
  %_M_start.i437 = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %correspondences.i.i347, i64 0, i32 0, i32 0, i32 0, i32 0
  %_M_finish.i442 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %_M_start.i443 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %69 = bitcast %struct.HandOutput* %result64 to i8*
  %70 = bitcast %struct.HandOutput* %result64 to i8**
  %_M_end_of_storage.i.i.i458 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result64, i64 0, i32 0, i32 0, i32 0, i32 0, i32 2
  %_M_start.i.i.i456670 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result64, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %_M_finish.i.i.i463 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result64, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %jacobian_ncols68 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result64, i64 0, i32 1
  %jacobian_nrows69 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result64, i64 0, i32 2
  %jacobian70 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result64, i64 0, i32 3
  %71 = bitcast %"class.std::vector.19"* %jacobian70 to i8*
  %72 = bitcast %"class.std::vector.19"* %jacobian70 to i8**
  %_M_end_of_storage.i.i.i475 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result64, i64 0, i32 3, i32 0, i32 0, i32 0, i32 2
  %_M_start.i.i.i473674 = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %jacobian70, i64 0, i32 0, i32 0, i32 0, i32 0
  %_M_finish.i.i.i480 = getelementptr inbounds %struct.HandOutput, %struct.HandOutput* %result64, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %_M_finish.i504 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %_M_start.i505 = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %73 = bitcast %struct.timeval* %start85 to i8*
  %74 = bitcast %struct.timeval* %end86 to i8*
  %tv_sec.i543 = getelementptr inbounds %struct.timeval, %struct.timeval* %end86, i64 0, i32 0
  %tv_sec1.i544 = getelementptr inbounds %struct.timeval, %struct.timeval* %start85, i64 0, i32 0
  %tv_usec.i547 = getelementptr inbounds %struct.timeval, %struct.timeval* %end86, i64 0, i32 1
  %tv_usec2.i548 = getelementptr inbounds %struct.timeval, %struct.timeval* %start85, i64 0, i32 1
  %_M_start.i.i.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0
  %model.i.i = getelementptr inbounds %struct.HandInput, %struct.HandInput* %input45, i64 0, i32 1, i32 0
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %20) #31
  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !14
  %_M_p.i9.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 0, i32 0
  %75 = load i8*, i8** %_M_p.i9.i, align 8, !tbaa !17
  %_M_string_length.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 1
  %76 = load i64, i64* %_M_string_length.i.i, align 8, !tbaa !19
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %23) #31
  store i64 %76, i64* %__dnew.i.i.i.i147, align 8, !tbaa !20
  %cmp3.i.i.i.i148 = icmp ugt i64 %76, 15
  br i1 %cmp3.i.i.i.i148, label %if.then4.i.i.i.i152, label %if.end6.i.i.i.i153

if.then.i.i.i.i.i.i.i:                            ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit
  call void @_ZdlPv(i8* %205) #31
  br label %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i

_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, %if.then.i.i.i.i.i.i.i
  %incdec.ptr.i.i.i.i143 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 1
  call void @_ZdlPv(i8* nonnull %call2.i.i.i.i) #31
  ret i32 0

if.then4.i.i.i.i152:                              ; preds = %for.body.lr.ph
  %call5.i.i.i.i149 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %path, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i147, i64 0) #31
  store i8* %call5.i.i.i.i149, i8** %_M_p.i13.i.i.i.i150, align 8, !tbaa !17
  %77 = load i64, i64* %__dnew.i.i.i.i147, align 8, !tbaa !20
  store i64 %77, i64* %_M_allocated_capacity.i.i.i.i.i151, align 8, !tbaa !21
  br label %if.end6.i.i.i.i153

if.end6.i.i.i.i153:                               ; preds = %if.then4.i.i.i.i152, %for.body.lr.ph
  %78 = phi i8* [ %call5.i.i.i.i149, %if.then4.i.i.i.i152 ], [ %24, %for.body.lr.ph ]
  switch i64 %76, label %if.end.i.i.i.i.i.i.i155 [
    i64 1, label %if.then.i.i.i.i.i.i154
    i64 0, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  ]

if.then.i.i.i.i.i.i154:                           ; preds = %if.end6.i.i.i.i153
  %79 = load i8, i8* %75, align 1, !tbaa !21
  store i8 %79, i8* %78, align 1, !tbaa !21
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit

if.end.i.i.i.i.i.i.i155:                          ; preds = %if.end6.i.i.i.i153
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %78, i8* align 1 %75, i64 %76, i1 false) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit: ; preds = %if.end.i.i.i.i.i.i.i155, %if.then.i.i.i.i.i.i154, %if.end6.i.i.i.i153
  %80 = load i64, i64* %__dnew.i.i.i.i147, align 8, !tbaa !20
  store i64 %80, i64* %_M_string_length.i.i.i.i.i.i157, align 8, !tbaa !19
  %81 = load i8*, i8** %_M_p.i13.i.i.i.i150, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i158 = getelementptr inbounds i8, i8* %81, i64 %80
  store i8 0, i8* %arrayidx.i.i.i.i.i158, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %23) #31
  %82 = load i8*, i8** %_M_p.i13.i.i.i.i150, align 8, !tbaa !17
  %call10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([18 x i8], [18 x i8]* @.str.14, i64 0, i64 0), i8* %82)
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %25) #31
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %25, i8 0, i64 120, i1 false) #31
  store i8 1, i8* %is_data_owner_.i2.i.i.i, align 8, !tbaa !68
  store i32 0, i32* %nrows_.i3.i.i.i, align 4, !tbaa !71
  store i32 0, i32* %ncols_.i4.i.i.i, align 8, !tbaa !72
  store double* null, double** %data_.i5.i.i.i, align 8, !tbaa !73
  store i8 1, i8* %is_data_owner_.i.i.i.i, align 8, !tbaa !68
  store i32 0, i32* %nrows_.i.i.i.i, align 4, !tbaa !71
  store i32 0, i32* %ncols_.i.i.i.i, align 8, !tbaa !72
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(32) %26, i8 0, i64 32, i1 false) #31
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %27, i8 0, i64 24, i1 false) #31
  store i8 1, i8* %is_data_owner_.i.i.i159, align 8, !tbaa !68
  store i32 0, i32* %nrows_.i.i.i, align 4, !tbaa !71
  store i32 0, i32* %ncols_.i.i.i, align 8, !tbaa !72
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(32) %28, i8 0, i64 32, i1 false) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %29) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %30) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %31) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !145)
  store %union.anon* %32, %union.anon** %33, align 8, !tbaa !14, !alias.scope !145
  store i64 0, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19, !alias.scope !145
  store i8 0, i8* %.cast.i.i, align 8, !tbaa !21, !alias.scope !145
  %83 = load i64, i64* %_M_string_length.i.i.i.i.i.i157, align 8, !tbaa !19, !noalias !145
  %add.i = add i64 %83, 5
  call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp12, i64 %add.i) #31
  %84 = load i64, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19, !alias.scope !145
  %sub3.i.i.i = sub i64 4611686018427387903, %84
  %cmp.i.i.i168 = icmp ult i64 %sub3.i.i.i, 5
  br i1 %cmp.i.i.i168, label %if.then.i.i.i169, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit

if.then.i.i.i169:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC2ERKS4_.exit
  %call.i9.i = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp12, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i64 5) #31
  %85 = load i8*, i8** %_M_p.i13.i.i.i.i150, align 8, !tbaa !17, !noalias !145
  %86 = load i64, i64* %_M_string_length.i.i.i.i.i.i157, align 8, !tbaa !19, !noalias !145
  %call3.i.i = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp12, i8* %85, i64 %86) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !148)
  %call2.i.i.i = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp12, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 -1, i64 2) #31, !noalias !148
  %cmp.i170 = icmp eq i64 %call2.i.i.i, -1
  br i1 %cmp.i170, label %cond.true.i, label %cond.false.i

cond.true.i:                                      ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit
  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !14, !alias.scope !148
  store i16 12078, i16* %38, align 8, !alias.scope !148
  store i64 2, i64* %_M_string_length.i.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !148
  store i8 0, i8* %arrayidx.i.i.i.i.i.i, align 2, !tbaa !21, !alias.scope !148
  br label %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit

cond.false.i:                                     ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit
  %add.i172 = add nuw i64 %call2.i.i.i, 1
  call void @llvm.experimental.noalias.scope.decl(metadata !151) #31
  %87 = load i64, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19, !noalias !154
  store %union.anon* %34, %union.anon** %35, align 8, !tbaa !14, !alias.scope !154
  %88 = load i8*, i8** %_M_p.i13.i.i.i, align 8, !tbaa !17, !noalias !154
  %cmp.i.i.i.i = icmp ugt i64 %87, %add.i172
  %spec.select.i.i.i.i = select i1 %cmp.i.i.i.i, i64 %add.i172, i64 %87
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37) #31, !noalias !154
  store i64 %spec.select.i.i.i.i, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20, !noalias !154
  %cmp3.i.i.i.i.i.i = icmp ugt i64 %spec.select.i.i.i.i, 15
  br i1 %cmp3.i.i.i.i.i.i, label %if.then4.i.i.i.i.i.i, label %if.end6.i.i.i.i.i.i

if.then4.i.i.i.i.i.i:                             ; preds = %cond.false.i
  %call5.i.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp11, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i.i, i64 0) #31
  store i8* %call5.i.i.i.i.i.i, i8** %_M_p.i13.i.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !154
  %89 = load i64, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20, !noalias !154
  store i64 %89, i64* %_M_allocated_capacity.i.i.i.i.i.i.i, align 8, !tbaa !21, !alias.scope !154
  br label %if.end6.i.i.i.i.i.i

if.end6.i.i.i.i.i.i:                              ; preds = %if.then4.i.i.i.i.i.i, %cond.false.i
  %90 = phi i8* [ %call5.i.i.i.i.i.i, %if.then4.i.i.i.i.i.i ], [ %36, %cond.false.i ]
  switch i64 %spec.select.i.i.i.i, label %if.end.i.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i.i
    i64 0, label %cond.end.i
  ]

if.then.i.i.i.i.i.i.i.i:                          ; preds = %if.end6.i.i.i.i.i.i
  %91 = load i8, i8* %88, align 1, !tbaa !21
  store i8 %91, i8* %90, align 1, !tbaa !21
  br label %cond.end.i

if.end.i.i.i.i.i.i.i.i.i:                         ; preds = %if.end6.i.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %90, i8* align 1 %88, i64 %spec.select.i.i.i.i, i1 false) #31
  br label %cond.end.i

cond.end.i:                                       ; preds = %if.end.i.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i, %if.end6.i.i.i.i.i.i
  %92 = load i64, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20, !noalias !154
  store i64 %92, i64* %_M_string_length.i.i.i.i.i.i.i.i, align 8, !tbaa !19, !alias.scope !154
  %93 = load i8*, i8** %_M_p.i13.i.i.i.i.i.i, align 8, !tbaa !17, !alias.scope !154
  %arrayidx.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %93, i64 %92
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37) #31, !noalias !154
  %.pre = load i64, i64* %_M_string_length.i.i.i.i.i.i.i.i, align 8, !tbaa !19, !noalias !155
  br label %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit

_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit: ; preds = %cond.end.i, %cond.true.i
  %94 = phi i64 [ 2, %cond.true.i ], [ %.pre, %cond.end.i ]
  call void @llvm.experimental.noalias.scope.decl(metadata !155)
  %sub3.i.i.i175 = sub i64 4611686018427387903, %94
  %cmp.i.i.i176 = icmp ult i64 %sub3.i.i.i175, 6
  br i1 %cmp.i.i.i176, label %if.then.i.i.i177, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i

if.then.i.i.i177:                                 ; preds = %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i: ; preds = %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit
  %call2.i.i = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp11, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i64 0, i64 0), i64 6) #31, !noalias !155
  store %union.anon* %39, %union.anon** %40, align 8, !tbaa !14, !alias.scope !155
  %_M_p.i.i23.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i, i64 0, i32 0, i32 0
  %95 = load i8*, i8** %_M_p.i.i23.i.i, align 8, !tbaa !17
  %96 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i, i64 0, i32 2
  %arraydecay.i.i.i.i178 = bitcast %union.anon* %96 to i8*
  %cmp.i.i2.i = icmp eq i8* %95, %arraydecay.i.i.i.i178
  br i1 %cmp.i.i2.i, label %if.then.i.i179, label %if.else.i.i

if.then.i.i179:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %arraydecay.i.i.i, i8* nonnull align 8 dereferenceable(16) %95, i64 16, i1 false) #31
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit

if.else.i.i:                                      ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i
  store i8* %95, i8** %_M_p.i21.i.i, align 8, !tbaa !17, !alias.scope !155
  %_M_allocated_capacity.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i, i64 0, i32 2, i32 0
  %97 = load i64, i64* %_M_allocated_capacity.i.i, align 8, !tbaa !21
  store i64 %97, i64* %_M_allocated_capacity.i.i.i, align 8, !tbaa !21, !alias.scope !155
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit: ; preds = %if.else.i.i, %if.then.i.i179
  %_M_string_length.i20.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i, i64 0, i32 1
  %98 = load i64, i64* %_M_string_length.i20.i.i, align 8, !tbaa !19
  store i64 %98, i64* %_M_string_length.i.i.i, align 8, !tbaa !19, !alias.scope !155
  %99 = bitcast %"class.std::__cxx11::basic_string"* %call2.i.i to %union.anon**
  store %union.anon* %96, %union.anon** %99, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i20.i.i, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i178, align 8, !tbaa !21
  %100 = load i8*, i8** %_M_p.i13.i.i.i.i.i.i, align 8, !tbaa !17
  %cmp.i.i.i182 = icmp eq i8* %100, %36
  br i1 %cmp.i.i.i182, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit184, label %if.then.i.i183

if.then.i.i183:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit
  call void @_ZdlPv(i8* %100) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit184

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit184: ; preds = %if.then.i.i183, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit
  %101 = load i8*, i8** %_M_p.i13.i.i.i, align 8, !tbaa !17
  %cmp.i.i.i187 = icmp eq i8* %101, %.cast.i.i
  br i1 %cmp.i.i.i187, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit189, label %if.then.i.i188

if.then.i.i188:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit184
  call void @_ZdlPv(i8* %101) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit189

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit189: ; preds = %if.then.i.i188, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit184
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %31) #31
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %30) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %41) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !158)
  store %union.anon* %42, %union.anon** %43, align 8, !tbaa !14, !alias.scope !158
  store i64 0, i64* %_M_string_length.i.i.i.i191, align 8, !tbaa !19, !alias.scope !158
  store i8 0, i8* %.cast.i.i192, align 8, !tbaa !21, !alias.scope !158
  %102 = load i64, i64* %_M_string_length.i.i.i.i.i.i157, align 8, !tbaa !19, !noalias !158
  %add.i194 = add i64 %102, 5
  call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp13, i64 %add.i194) #31
  %103 = load i64, i64* %_M_string_length.i.i.i.i191, align 8, !tbaa !19, !alias.scope !158
  %sub3.i.i.i195 = sub i64 4611686018427387903, %103
  %cmp.i.i.i196 = icmp ult i64 %sub3.i.i.i195, 5
  br i1 %cmp.i.i.i196, label %if.then.i.i.i197, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit201

if.then.i.i.i197:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit189
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit201: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit189
  %call.i9.i198 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp13, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i64 5) #31
  %104 = load i8*, i8** %_M_p.i13.i.i.i.i150, align 8, !tbaa !17, !noalias !158
  %105 = load i64, i64* %_M_string_length.i.i.i.i.i.i157, align 8, !tbaa !19, !noalias !158
  %call3.i.i200 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp13, i8* %104, i64 %105) #31
  call void @_Z18read_hand_instanceRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PSt6vectorIdSaIdEEP19HandDataLightMatrixSA_(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %model_dir, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp13, %"class.std::vector.19"* nonnull %theta, %class.HandDataLightMatrix* nonnull %data, %"class.std::vector.19"* null)
  %106 = load i8*, i8** %_M_p.i.i.i.i202, align 8, !tbaa !17
  %cmp.i.i.i204 = icmp eq i8* %106, %.cast.i.i192
  br i1 %cmp.i.i.i204, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit206, label %if.then.i.i205

if.then.i.i205:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit201
  call void @_ZdlPv(i8* %106) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit206

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit206: ; preds = %if.then.i.i205, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit201
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %41) #31
  %call14 = call %struct.HandObjectiveData* @_Z30convert_to_hand_objective_dataRK9HandInput(%struct.HandInput* nonnull align 8 dereferenceable(272) %input)
  %107 = load i32*, i32** %_M_finish.i207, align 8, !tbaa !61
  %108 = load i32*, i32** %_M_start.i208, align 8, !tbaa !64
  %sub.ptr.lhs.cast.i = ptrtoint i32* %107 to i64
  %sub.ptr.rhs.cast.i = ptrtoint i32* %108 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %109 = lshr exact i64 %sub.ptr.sub.i, 2
  %110 = trunc i64 %109 to i32
  %conv = mul i32 %110, 3
  %111 = load double*, double** %_M_finish.i209, align 8, !tbaa !119
  %112 = load double*, double** %_M_start.i210, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i211 = ptrtoint double* %111 to i64
  %sub.ptr.rhs.cast.i212 = ptrtoint double* %112 to i64
  %sub.ptr.sub.i213 = sub i64 %sub.ptr.lhs.cast.i211, %sub.ptr.rhs.cast.i212
  %113 = lshr exact i64 %sub.ptr.sub.i213, 3
  %conv19 = trunc i64 %113 to i32
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %44) #31
  %conv20 = sext i32 %conv to i64
  %cmp.i.i = icmp slt i32 %conv, 0
  br i1 %cmp.i.i, label %if.then.i.i215, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i

if.then.i.i215:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit206
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit206
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %44, i8 0, i64 24, i1 false) #31
  %cmp.not.i.i.i.i216 = icmp eq i32 %conv, 0
  br i1 %cmp.not.i.i.i.i216, label %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread, label %for.body.i.i.preheader.i.i.i.i.i

_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread: ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  store double* null, double** %_M_start.i.i.i217646, align 8, !tbaa !121
  %add.ptr.i.i.i647 = getelementptr double, double* null, i64 %conv20
  store double* %add.ptr.i.i.i647, double** %_M_end_of_storage.i.i.i, align 8, !tbaa !161
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit

for.body.i.i.preheader.i.i.i.i.i:                 ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i
  %mul.i.i.i.i.i.i = shl nuw nsw i64 %conv20, 3
  %call2.i.i.i.i.i.i = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i.i.i) #35
  %114 = bitcast i8* %call2.i.i.i.i.i.i to double*
  store i8* %call2.i.i.i.i.i.i, i8** %45, align 8, !tbaa !121
  %add.ptr.i.i.i = getelementptr double, double* %114, i64 %conv20
  store double* %add.ptr.i.i.i, double** %_M_end_of_storage.i.i.i, align 8, !tbaa !161
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i, i8 0, i64 %mul.i.i.i.i.i.i, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit:               ; preds = %for.body.i.i.preheader.i.i.i.i.i, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread
  %115 = phi double* [ %114, %for.body.i.i.preheader.i.i.i.i.i ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread ]
  %__first.addr.0.lcssa.i.i.i.i.i.i.i = phi double* [ %add.ptr.i.i.i, %for.body.i.i.preheader.i.i.i.i.i ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i.thread ]
  store double* %__first.addr.0.lcssa.i.i.i.i.i.i.i, double** %_M_finish.i.i.i, align 8, !tbaa !119
  store i32 %conv19, i32* %jacobian_ncols, align 8, !tbaa !162
  store i32 %conv, i32* %jacobian_nrows, align 4, !tbaa !165
  %mul22 = mul nsw i32 %conv, %conv19
  %conv23 = sext i32 %mul22 to i64
  %cmp.i.i218 = icmp slt i32 %mul22, 0
  br i1 %cmp.i.i218, label %if.then.i.i219, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i221

if.then.i.i219:                                   ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i221: ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %46, i8 0, i64 24, i1 false) #31
  %cmp.not.i.i.i.i220 = icmp eq i32 %mul22, 0
  br i1 %cmp.not.i.i.i.i220, label %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i229.thread, label %for.body.i.i.preheader.i.i.i.i.i231

_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i229.thread: ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i221
  store double* null, double** %_M_start.i.i.i226650, align 8, !tbaa !121
  %add.ptr.i.i.i227651 = getelementptr double, double* null, i64 %conv23
  store double* %add.ptr.i.i.i227651, double** %_M_end_of_storage.i.i.i228, align 8, !tbaa !161
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit234

for.body.i.i.preheader.i.i.i.i.i231:              ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i221
  %mul.i.i.i.i.i.i222 = shl nuw nsw i64 %conv23, 3
  %call2.i.i.i.i.i.i223 = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i.i.i222) #35
  %116 = bitcast i8* %call2.i.i.i.i.i.i223 to double*
  store i8* %call2.i.i.i.i.i.i223, i8** %47, align 8, !tbaa !121
  %add.ptr.i.i.i227 = getelementptr double, double* %116, i64 %conv23
  store double* %add.ptr.i.i.i227, double** %_M_end_of_storage.i.i.i228, align 8, !tbaa !161
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i223, i8 0, i64 %mul.i.i.i.i.i.i222, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit234

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit234:            ; preds = %for.body.i.i.preheader.i.i.i.i.i231, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i229.thread
  %cond.i.i.i.i225653 = phi double* [ %116, %for.body.i.i.preheader.i.i.i.i.i231 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i229.thread ]
  %__first.addr.0.lcssa.i.i.i.i.i.i.i232 = phi double* [ %add.ptr.i.i.i227, %for.body.i.i.preheader.i.i.i.i.i231 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i229.thread ]
  store double* %__first.addr.0.lcssa.i.i.i.i.i.i.i232, double** %_M_finish.i.i.i233, align 8, !tbaa !119
  %117 = load double*, double** %_M_finish.i209, align 8, !tbaa !119
  %118 = load double*, double** %_M_start.i210, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i237 = ptrtoint double* %117 to i64
  %sub.ptr.rhs.cast.i238 = ptrtoint double* %118 to i64
  %sub.ptr.sub.i239 = sub i64 %sub.ptr.lhs.cast.i237, %sub.ptr.rhs.cast.i238
  %sub.ptr.div.i240 = ashr exact i64 %sub.ptr.sub.i239, 3
  %cmp.i.i241 = icmp ugt i64 %sub.ptr.div.i240, 1152921504606846975
  br i1 %cmp.i.i241, label %if.then.i.i242, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i244

if.then.i.i242:                                   ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit234
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i244: ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit234
  %cmp.not.i.i.i.i243 = icmp eq i64 %sub.ptr.sub.i239, 0
  br i1 %cmp.not.i.i.i.i243, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256, label %for.body.i.i.preheader.i.i.i.i.i253

for.body.i.i.preheader.i.i.i.i.i253:              ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i244
  %call2.i.i.i.i.i.i245 = call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i239) #35
  %119 = bitcast i8* %call2.i.i.i.i.i.i245 to double*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i245, i8 0, i64 %sub.ptr.sub.i239, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256:            ; preds = %for.body.i.i.preheader.i.i.i.i.i253, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i244
  %cond.i.i.i.i247656 = phi double* [ %119, %for.body.i.i.preheader.i.i.i.i.i253 ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i244 ]
  %120 = load double*, double** %_M_finish.i257, align 8, !tbaa !119
  %121 = load double*, double** %_M_start.i258, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i259 = ptrtoint double* %120 to i64
  %sub.ptr.rhs.cast.i260 = ptrtoint double* %121 to i64
  %sub.ptr.sub.i261 = sub i64 %sub.ptr.lhs.cast.i259, %sub.ptr.rhs.cast.i260
  %sub.ptr.div.i262 = ashr exact i64 %sub.ptr.sub.i261, 3
  %cmp.i.i263 = icmp ugt i64 %sub.ptr.div.i262, 1152921504606846975
  br i1 %cmp.i.i263, label %if.then.i.i264, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i266

if.then.i.i264:                                   ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i266: ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit256
  %cmp.not.i.i.i.i265 = icmp eq i64 %sub.ptr.sub.i261, 0
  br i1 %cmp.not.i.i.i.i265, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i282, label %for.body.i.i.preheader.i.i.i.i.i275

for.body.i.i.preheader.i.i.i.i.i275:              ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i266
  %call2.i.i.i.i.i.i267 = call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i261) #35
  %122 = bitcast i8* %call2.i.i.i.i.i.i267 to double*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i267, i8 0, i64 %sub.ptr.sub.i261, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i282

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i282: ; preds = %for.body.i.i.preheader.i.i.i.i.i275, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i266
  %cond.i.i.i.i269661 = phi double* [ %122, %for.body.i.i.preheader.i.i.i.i.i275 ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i266 ]
  br i1 %cmp.not.i.i.i.i216, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit295, label %for.body.i.i.preheader.i.i.i.i.i292

for.body.i.i.preheader.i.i.i.i.i292:              ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i282
  %mul.i.i.i.i.i.i283 = shl nuw nsw i64 %conv20, 3
  %call2.i.i.i.i.i.i284 = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i.i.i283) #35
  %123 = bitcast i8* %call2.i.i.i.i.i.i284 to double*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i284, i8 0, i64 %mul.i.i.i.i.i.i283, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit295

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit295:            ; preds = %for.body.i.i.preheader.i.i.i.i.i292, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i282
  %cond.i.i.i.i286666 = phi double* [ %123, %for.body.i.i.preheader.i.i.i.i.i292 ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i282 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %48) #31
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %49) #31
  %call32 = call i32 @gettimeofday(%struct.timeval* nonnull %start, i8* null) #31
  call void @_Z25calculate_jacobian_simpleIXadL_Z16hand_objective_dEEEvP17HandObjectiveDataR9HandInputR10HandOutputRSt6vectorIdSaIdEES9_S9_(%struct.HandObjectiveData* nonnull %call14, %struct.HandInput* nonnull align 8 dereferenceable(272) %input, %struct.HandOutput* nonnull align 8 dereferenceable(56) %result, %"class.std::vector.19"* nonnull align 8 dereferenceable(24) undef, %"class.std::vector.19"* nonnull align 8 dereferenceable(24) undef, %"class.std::vector.19"* nonnull align 8 dereferenceable(24) undef) #31
  %call33 = call i32 @gettimeofday(%struct.timeval* nonnull %end, i8* null) #31
  %124 = load i64, i64* %tv_sec.i, align 8, !tbaa !44
  %125 = load i64, i64* %tv_sec1.i, align 8, !tbaa !44
  %sub.i = sub nsw i64 %124, %125
  %conv.i = sitofp i64 %sub.i to double
  %126 = load i64, i64* %tv_usec.i, align 8, !tbaa !46
  %127 = load i64, i64* %tv_usec2.i, align 8, !tbaa !46
  %sub3.i = sub nsw i64 %126, %127
  %conv4.i = sitofp i64 %sub3.i to double
  %mul.i = fmul fast double %conv4.i, 0x3EB0C6F7A0B5ED8D
  %add.i296 = fadd fast double %mul.i, %conv.i
  %conv5.i = fptrunc double %add.i296 to float
  %conv35 = fpext float %conv5.i to double
  %call36 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([25 x i8], [25 x i8]* @.str.17, i64 0, i64 0), double %conv35)
  br label %for.body39

for.cond.cleanup38:                               ; preds = %for.body39
  %putchar = call i32 @putchar(i32 10)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %49) #31
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %48) #31
  %tobool.not.i.i.i297 = icmp eq double* %cond.i.i.i.i286666, null
  br i1 %tobool.not.i.i.i297, label %_ZNSt6vectorIdSaIdEED2Ev.exit, label %if.then.i.i.i298

if.then.i.i.i298:                                 ; preds = %for.cond.cleanup38
  %128 = bitcast double* %cond.i.i.i.i286666 to i8*
  call void @_ZdlPv(i8* nonnull %128) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit

_ZNSt6vectorIdSaIdEED2Ev.exit:                    ; preds = %if.then.i.i.i298, %for.cond.cleanup38
  %tobool.not.i.i.i300 = icmp eq double* %cond.i.i.i.i269661, null
  br i1 %tobool.not.i.i.i300, label %_ZNSt6vectorIdSaIdEED2Ev.exit302, label %if.then.i.i.i301

if.then.i.i.i301:                                 ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit
  %129 = bitcast double* %cond.i.i.i.i269661 to i8*
  call void @_ZdlPv(i8* nonnull %129) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit302

_ZNSt6vectorIdSaIdEED2Ev.exit302:                 ; preds = %if.then.i.i.i301, %_ZNSt6vectorIdSaIdEED2Ev.exit
  %tobool.not.i.i.i304 = icmp eq double* %cond.i.i.i.i247656, null
  br i1 %tobool.not.i.i.i304, label %_ZNSt6vectorIdSaIdEED2Ev.exit.i312, label %if.then.i.i.i305

if.then.i.i.i305:                                 ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit302
  %130 = bitcast double* %cond.i.i.i.i247656 to i8*
  call void @_ZdlPv(i8* nonnull %130) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit.i312

_ZNSt6vectorIdSaIdEED2Ev.exit.i312:               ; preds = %if.then.i.i.i305, %_ZNSt6vectorIdSaIdEED2Ev.exit302
  %131 = bitcast double* %cond.i.i.i.i225653 to i8*
  call void @_ZdlPv(i8* nonnull %131) #31
  %tobool.not.i.i.i3.i311 = icmp eq double* %115, null
  br i1 %tobool.not.i.i.i3.i311, label %_ZN10HandOutputD2Ev.exit, label %if.then.i.i.i4.i313

if.then.i.i.i4.i313:                              ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit.i312
  %132 = bitcast double* %115 to i8*
  call void @_ZdlPv(i8* nonnull %132) #31
  br label %_ZN10HandOutputD2Ev.exit

_ZN10HandOutputD2Ev.exit:                         ; preds = %if.then.i.i.i4.i313, %_ZNSt6vectorIdSaIdEED2Ev.exit.i312
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %44) #31
  %133 = load i8*, i8** %_M_p.i21.i.i, align 8, !tbaa !17
  %cmp.i.i.i316 = icmp eq i8* %133, %arraydecay.i.i.i
  br i1 %cmp.i.i.i316, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit318, label %if.then.i.i317

if.then.i.i317:                                   ; preds = %_ZN10HandOutputD2Ev.exit
  call void @_ZdlPv(i8* %133) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit318

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit318: ; preds = %if.then.i.i317, %_ZN10HandOutputD2Ev.exit
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %29) #31
  %134 = load double*, double** %_M_start.i258, align 8, !tbaa !121
  %tobool.not.i.i.i.i320 = icmp eq double* %134, null
  br i1 %tobool.not.i.i.i.i320, label %_ZNSt6vectorIdSaIdEED2Ev.exit.i324, label %if.then.i.i.i.i321

if.then.i.i.i.i321:                               ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit318
  %135 = bitcast double* %134 to i8*
  call void @_ZdlPv(i8* nonnull %135) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit.i324

_ZNSt6vectorIdSaIdEED2Ev.exit.i324:               ; preds = %if.then.i.i.i.i321, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit318
  %136 = load i8, i8* %is_data_owner_.i.i.i159, align 8, !tbaa !68, !range !90
  %tobool.not.i.i.i323 = icmp eq i8 %136, 0
  %137 = load double*, double** %data_.i.i.i160, align 8
  %cmp.not.i.i.i326 = icmp eq double* %137, null
  %or.cond = or i1 %tobool.not.i.i.i323, %cmp.not.i.i.i326
  br i1 %or.cond, label %_ZN11LightMatrixIdED2Ev.exit.i.i331, label %delete.notnull.i.i.i328

delete.notnull.i.i.i328:                          ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit.i324
  %138 = bitcast double* %137 to i8*
  call void @_ZdaPv(i8* %138) #37
  br label %_ZN11LightMatrixIdED2Ev.exit.i.i331

_ZN11LightMatrixIdED2Ev.exit.i.i331:              ; preds = %delete.notnull.i.i.i328, %_ZNSt6vectorIdSaIdEED2Ev.exit.i324
  %139 = load i32*, i32** %_M_start.i.i.i.i329, align 8, !tbaa !64
  %tobool.not.i.i.i.i.i330 = icmp eq i32* %139, null
  br i1 %tobool.not.i.i.i.i.i330, label %_ZN19HandDataLightMatrixD2Ev.exit.i336, label %if.then.i.i.i.i.i332

if.then.i.i.i.i.i332:                             ; preds = %_ZN11LightMatrixIdED2Ev.exit.i.i331
  %140 = bitcast i32* %139 to i8*
  call void @_ZdlPv(i8* nonnull %140) #31
  br label %_ZN19HandDataLightMatrixD2Ev.exit.i336

_ZN19HandDataLightMatrixD2Ev.exit.i336:           ; preds = %if.then.i.i.i.i.i332, %_ZN11LightMatrixIdED2Ev.exit.i.i331
  call void @_ZN20HandModelLightMatrixD2Ev(%class.HandModelLightMatrix* nonnull dereferenceable(169) %model.i.i333) #31
  %141 = load double*, double** %_M_start.i210, align 8, !tbaa !121
  %tobool.not.i.i.i3.i335 = icmp eq double* %141, null
  br i1 %tobool.not.i.i.i3.i335, label %_ZN9HandInputD2Ev.exit338, label %if.then.i.i.i4.i337

if.then.i.i.i4.i337:                              ; preds = %_ZN19HandDataLightMatrixD2Ev.exit.i336
  %142 = bitcast double* %141 to i8*
  call void @_ZdlPv(i8* nonnull %142) #31
  br label %_ZN9HandInputD2Ev.exit338

_ZN9HandInputD2Ev.exit338:                        ; preds = %if.then.i.i.i4.i337, %_ZN19HandDataLightMatrixD2Ev.exit.i336
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %25) #31
  call void @llvm.lifetime.start.p0i8(i64 272, i8* nonnull %50) #31
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(120) %50, i8 0, i64 120, i1 false) #31
  store i8 1, i8* %is_data_owner_.i2.i.i.i339, align 8, !tbaa !68
  store i32 0, i32* %nrows_.i3.i.i.i340, align 4, !tbaa !71
  store i32 0, i32* %ncols_.i4.i.i.i341, align 8, !tbaa !72
  store double* null, double** %data_.i5.i.i.i342, align 8, !tbaa !73
  store i8 1, i8* %is_data_owner_.i.i.i.i343, align 8, !tbaa !68
  store i32 0, i32* %nrows_.i.i.i.i344, align 4, !tbaa !71
  store i32 0, i32* %ncols_.i.i.i.i345, align 8, !tbaa !72
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(32) %51, i8 0, i64 32, i1 false) #31
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %52, i8 0, i64 24, i1 false) #31
  store i8 1, i8* %is_data_owner_.i.i.i348, align 8, !tbaa !68
  store i32 0, i32* %nrows_.i.i.i349, align 4, !tbaa !71
  store i32 0, i32* %ncols_.i.i.i350, align 8, !tbaa !72
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(32) %53, i8 0, i64 32, i1 false) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %54) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %55) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %56) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !166)
  store %union.anon* %57, %union.anon** %58, align 8, !tbaa !14, !alias.scope !166
  store i64 0, i64* %_M_string_length.i.i.i.i353, align 8, !tbaa !19, !alias.scope !166
  store i8 0, i8* %.cast.i.i354, align 8, !tbaa !21, !alias.scope !166
  %143 = load i64, i64* %_M_string_length.i.i.i.i.i.i157, align 8, !tbaa !19, !noalias !166
  %add.i356 = add i64 %143, 5
  call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp48, i64 %add.i356) #31
  %144 = load i64, i64* %_M_string_length.i.i.i.i353, align 8, !tbaa !19, !alias.scope !166
  %sub3.i.i.i357 = sub i64 4611686018427387903, %144
  %cmp.i.i.i358 = icmp ult i64 %sub3.i.i.i357, 5
  br i1 %cmp.i.i.i358, label %if.then.i.i.i359, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit363

if.then.i.i.i359:                                 ; preds = %_ZN9HandInputD2Ev.exit338
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit363: ; preds = %_ZN9HandInputD2Ev.exit338
  %call.i9.i360 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp48, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i64 5) #31
  %145 = load i8*, i8** %_M_p.i13.i.i.i.i150, align 8, !tbaa !17, !noalias !166
  %146 = load i64, i64* %_M_string_length.i.i.i.i.i.i157, align 8, !tbaa !19, !noalias !166
  %call3.i.i362 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp48, i8* %145, i64 %146) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !169)
  %call2.i.i.i365 = call i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp48, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.5, i64 0, i64 0), i64 -1, i64 2) #31, !noalias !169
  %cmp.i366 = icmp eq i64 %call2.i.i.i365, -1
  br i1 %cmp.i366, label %cond.true.i370, label %cond.false.i377

cond.true.i370:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit363
  store %union.anon* %59, %union.anon** %60, align 8, !tbaa !14, !alias.scope !169
  store i16 12078, i16* %63, align 8, !alias.scope !169
  store i64 2, i64* %_M_string_length.i.i.i.i.i.i.i.i386, align 8, !tbaa !19, !alias.scope !169
  store i8 0, i8* %arrayidx.i.i.i.i.i.i369, align 2, !tbaa !21, !alias.scope !169
  br label %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit389

cond.false.i377:                                  ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit363
  %add.i371 = add nuw i64 %call2.i.i.i365, 1
  call void @llvm.experimental.noalias.scope.decl(metadata !172) #31
  %147 = load i64, i64* %_M_string_length.i.i.i.i353, align 8, !tbaa !19, !noalias !175
  store %union.anon* %59, %union.anon** %60, align 8, !tbaa !14, !alias.scope !175
  %148 = load i8*, i8** %_M_p.i13.i.i.i373, align 8, !tbaa !17, !noalias !175
  %cmp.i.i.i.i374 = icmp ugt i64 %147, %add.i371
  %spec.select.i.i.i.i375 = select i1 %cmp.i.i.i.i374, i64 %add.i371, i64 %147
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %62) #31, !noalias !175
  store i64 %spec.select.i.i.i.i375, i64* %__dnew.i.i.i.i.i.i364, align 8, !tbaa !20, !noalias !175
  %cmp3.i.i.i.i.i.i376 = icmp ugt i64 %spec.select.i.i.i.i375, 15
  br i1 %cmp3.i.i.i.i.i.i376, label %if.then4.i.i.i.i.i.i381, label %if.end6.i.i.i.i.i.i382

if.then4.i.i.i.i.i.i381:                          ; preds = %cond.false.i377
  %call5.i.i.i.i.i.i378 = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp47, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i.i364, i64 0) #31
  store i8* %call5.i.i.i.i.i.i378, i8** %_M_p.i13.i.i.i.i.i.i379, align 8, !tbaa !17, !alias.scope !175
  %149 = load i64, i64* %__dnew.i.i.i.i.i.i364, align 8, !tbaa !20, !noalias !175
  store i64 %149, i64* %_M_allocated_capacity.i.i.i.i.i.i.i380, align 8, !tbaa !21, !alias.scope !175
  br label %if.end6.i.i.i.i.i.i382

if.end6.i.i.i.i.i.i382:                           ; preds = %if.then4.i.i.i.i.i.i381, %cond.false.i377
  %150 = phi i8* [ %call5.i.i.i.i.i.i378, %if.then4.i.i.i.i.i.i381 ], [ %61, %cond.false.i377 ]
  switch i64 %spec.select.i.i.i.i375, label %if.end.i.i.i.i.i.i.i.i.i384 [
    i64 1, label %if.then.i.i.i.i.i.i.i.i383
    i64 0, label %cond.end.i388
  ]

if.then.i.i.i.i.i.i.i.i383:                       ; preds = %if.end6.i.i.i.i.i.i382
  %151 = load i8, i8* %148, align 1, !tbaa !21
  store i8 %151, i8* %150, align 1, !tbaa !21
  br label %cond.end.i388

if.end.i.i.i.i.i.i.i.i.i384:                      ; preds = %if.end6.i.i.i.i.i.i382
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %150, i8* align 1 %148, i64 %spec.select.i.i.i.i375, i1 false) #31
  br label %cond.end.i388

cond.end.i388:                                    ; preds = %if.end.i.i.i.i.i.i.i.i.i384, %if.then.i.i.i.i.i.i.i.i383, %if.end6.i.i.i.i.i.i382
  %152 = load i64, i64* %__dnew.i.i.i.i.i.i364, align 8, !tbaa !20, !noalias !175
  store i64 %152, i64* %_M_string_length.i.i.i.i.i.i.i.i386, align 8, !tbaa !19, !alias.scope !175
  %153 = load i8*, i8** %_M_p.i13.i.i.i.i.i.i379, align 8, !tbaa !17, !alias.scope !175
  %arrayidx.i.i.i.i.i.i.i387 = getelementptr inbounds i8, i8* %153, i64 %152
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i387, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %62) #31, !noalias !175
  %.pre701 = load i64, i64* %_M_string_length.i.i.i.i.i.i.i.i386, align 8, !tbaa !19, !noalias !176
  br label %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit389

_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit389: ; preds = %cond.end.i388, %cond.true.i370
  %154 = phi i64 [ 2, %cond.true.i370 ], [ %.pre701, %cond.end.i388 ]
  call void @llvm.experimental.noalias.scope.decl(metadata !176)
  %sub3.i.i.i392 = sub i64 4611686018427387903, %154
  %cmp.i.i.i393 = icmp ult i64 %sub3.i.i.i392, 6
  br i1 %cmp.i.i.i393, label %if.then.i.i.i394, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i399

if.then.i.i.i394:                                 ; preds = %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit389
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i399: ; preds = %_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE.exit389
  %call2.i.i395 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp47, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.16, i64 0, i64 0), i64 6) #31, !noalias !176
  store %union.anon* %64, %union.anon** %65, align 8, !tbaa !14, !alias.scope !176
  %_M_p.i.i23.i.i396 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i395, i64 0, i32 0, i32 0
  %155 = load i8*, i8** %_M_p.i.i23.i.i396, align 8, !tbaa !17
  %156 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i395, i64 0, i32 2
  %arraydecay.i.i.i.i397 = bitcast %union.anon* %156 to i8*
  %cmp.i.i2.i398 = icmp eq i8* %155, %arraydecay.i.i.i.i397
  br i1 %cmp.i.i2.i398, label %if.then.i.i401, label %if.else.i.i405

if.then.i.i401:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i399
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %arraydecay.i.i.i400, i8* nonnull align 8 dereferenceable(16) %155, i64 16, i1 false) #31
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit408

if.else.i.i405:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc.exit.i399
  store i8* %155, i8** %_M_p.i21.i.i402, align 8, !tbaa !17, !alias.scope !176
  %_M_allocated_capacity.i.i403 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i395, i64 0, i32 2, i32 0
  %157 = load i64, i64* %_M_allocated_capacity.i.i403, align 8, !tbaa !21
  store i64 %157, i64* %_M_allocated_capacity.i.i.i404, align 8, !tbaa !21, !alias.scope !176
  br label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit408

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit408: ; preds = %if.else.i.i405, %if.then.i.i401
  %_M_string_length.i20.i.i406 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %call2.i.i395, i64 0, i32 1
  %158 = load i64, i64* %_M_string_length.i20.i.i406, align 8, !tbaa !19
  store i64 %158, i64* %_M_string_length.i.i.i407, align 8, !tbaa !19, !alias.scope !176
  %159 = bitcast %"class.std::__cxx11::basic_string"* %call2.i.i395 to %union.anon**
  store %union.anon* %156, %union.anon** %159, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i20.i.i406, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i397, align 8, !tbaa !21
  %160 = load i8*, i8** %_M_p.i13.i.i.i.i.i.i379, align 8, !tbaa !17
  %cmp.i.i.i411 = icmp eq i8* %160, %61
  br i1 %cmp.i.i.i411, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit413, label %if.then.i.i412

if.then.i.i412:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit408
  call void @_ZdlPv(i8* %160) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit413

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit413: ; preds = %if.then.i.i412, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_.exit408
  %161 = load i8*, i8** %_M_p.i13.i.i.i373, align 8, !tbaa !17
  %cmp.i.i.i416 = icmp eq i8* %161, %.cast.i.i354
  br i1 %cmp.i.i.i416, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit418, label %if.then.i.i417

if.then.i.i417:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit413
  call void @_ZdlPv(i8* %161) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit418

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit418: ; preds = %if.then.i.i417, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit413
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %56) #31
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %55) #31
  call void @llvm.lifetime.start.p0i8(i64 32, i8* nonnull %66) #31
  call void @llvm.experimental.noalias.scope.decl(metadata !179)
  store %union.anon* %67, %union.anon** %68, align 8, !tbaa !14, !alias.scope !179
  store i64 0, i64* %_M_string_length.i.i.i.i420, align 8, !tbaa !19, !alias.scope !179
  store i8 0, i8* %.cast.i.i421, align 8, !tbaa !21, !alias.scope !179
  %162 = load i64, i64* %_M_string_length.i.i.i.i.i.i157, align 8, !tbaa !19, !noalias !179
  %add.i423 = add i64 %162, 5
  call void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp49, i64 %add.i423) #31
  %163 = load i64, i64* %_M_string_length.i.i.i.i420, align 8, !tbaa !19, !alias.scope !179
  %sub3.i.i.i424 = sub i64 4611686018427387903, %163
  %cmp.i.i.i425 = icmp ult i64 %sub3.i.i.i424, 5
  br i1 %cmp.i.i.i425, label %if.then.i.i.i426, label %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit430

if.then.i.i.i426:                                 ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit418
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.23, i64 0, i64 0)) #33
  unreachable

_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit430: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit418
  %call.i9.i427 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp49, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.15, i64 0, i64 0), i64 5) #31
  %164 = load i8*, i8** %_M_p.i13.i.i.i.i150, align 8, !tbaa !17, !noalias !179
  %165 = load i64, i64* %_M_string_length.i.i.i.i.i.i157, align 8, !tbaa !19, !noalias !179
  %call3.i.i429 = call nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %ref.tmp49, i8* %164, i64 %165) #31
  call void @_Z18read_hand_instanceRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES6_PSt6vectorIdSaIdEEP19HandDataLightMatrixSA_(%"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %model_dir46, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %ref.tmp49, %"class.std::vector.19"* nonnull %theta50, %class.HandDataLightMatrix* nonnull %data51, %"class.std::vector.19"* null)
  %166 = load i8*, i8** %_M_p.i.i.i.i431, align 8, !tbaa !17
  %cmp.i.i.i433 = icmp eq i8* %166, %.cast.i.i421
  br i1 %cmp.i.i.i433, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit435, label %if.then.i.i434

if.then.i.i434:                                   ; preds = %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit430
  call void @_ZdlPv(i8* %166) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit435

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit435: ; preds = %if.then.i.i434, %_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_.exit430
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %66) #31
  %call53 = call %struct.HandObjectiveData* @_Z30convert_to_hand_objective_dataRK9HandInput(%struct.HandInput* nonnull align 8 dereferenceable(272) %input45)
  %167 = load i32*, i32** %_M_finish.i436, align 8, !tbaa !61
  %168 = load i32*, i32** %_M_start.i437, align 8, !tbaa !64
  %sub.ptr.lhs.cast.i438 = ptrtoint i32* %167 to i64
  %sub.ptr.rhs.cast.i439 = ptrtoint i32* %168 to i64
  %sub.ptr.sub.i440 = sub i64 %sub.ptr.lhs.cast.i438, %sub.ptr.rhs.cast.i439
  %169 = lshr exact i64 %sub.ptr.sub.i440, 2
  %170 = trunc i64 %169 to i32
  %conv59 = mul i32 %170, 3
  %171 = load double*, double** %_M_finish.i442, align 8, !tbaa !119
  %172 = load double*, double** %_M_start.i443, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i444 = ptrtoint double* %171 to i64
  %sub.ptr.rhs.cast.i445 = ptrtoint double* %172 to i64
  %sub.ptr.sub.i446 = sub i64 %sub.ptr.lhs.cast.i444, %sub.ptr.rhs.cast.i445
  %173 = lshr exact i64 %sub.ptr.sub.i446, 3
  %conv63 = trunc i64 %173 to i32
  call void @llvm.lifetime.start.p0i8(i64 56, i8* nonnull %69) #31
  %conv66 = sext i32 %conv59 to i64
  %cmp.i.i448 = icmp slt i32 %conv59, 0
  br i1 %cmp.i.i448, label %if.then.i.i449, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i451

if.then.i.i449:                                   ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit435
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i451: ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit435
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %69, i8 0, i64 24, i1 false) #31
  %cmp.not.i.i.i.i450 = icmp eq i32 %conv59, 0
  br i1 %cmp.not.i.i.i.i450, label %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i459.thread, label %for.body.i.i.preheader.i.i.i.i.i461

_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i459.thread: ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i451
  store double* null, double** %_M_start.i.i.i456670, align 8, !tbaa !121
  %add.ptr.i.i.i457671 = getelementptr double, double* null, i64 %conv66
  store double* %add.ptr.i.i.i457671, double** %_M_end_of_storage.i.i.i458, align 8, !tbaa !161
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit464

for.body.i.i.preheader.i.i.i.i.i461:              ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i451
  %mul.i.i.i.i.i.i452 = shl nuw nsw i64 %conv66, 3
  %call2.i.i.i.i.i.i453 = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i.i.i452) #35
  %174 = bitcast i8* %call2.i.i.i.i.i.i453 to double*
  store i8* %call2.i.i.i.i.i.i453, i8** %70, align 8, !tbaa !121
  %add.ptr.i.i.i457 = getelementptr double, double* %174, i64 %conv66
  store double* %add.ptr.i.i.i457, double** %_M_end_of_storage.i.i.i458, align 8, !tbaa !161
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i453, i8 0, i64 %mul.i.i.i.i.i.i452, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit464

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit464:            ; preds = %for.body.i.i.preheader.i.i.i.i.i461, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i459.thread
  %175 = phi double* [ %174, %for.body.i.i.preheader.i.i.i.i.i461 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i459.thread ]
  %__first.addr.0.lcssa.i.i.i.i.i.i.i462 = phi double* [ %add.ptr.i.i.i457, %for.body.i.i.preheader.i.i.i.i.i461 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i459.thread ]
  store double* %__first.addr.0.lcssa.i.i.i.i.i.i.i462, double** %_M_finish.i.i.i463, align 8, !tbaa !119
  store i32 %conv63, i32* %jacobian_ncols68, align 8, !tbaa !162
  store i32 %conv59, i32* %jacobian_nrows69, align 4, !tbaa !165
  %mul71 = mul nsw i32 %conv59, %conv63
  %conv72 = sext i32 %mul71 to i64
  %cmp.i.i465 = icmp slt i32 %mul71, 0
  br i1 %cmp.i.i465, label %if.then.i.i466, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i468

if.then.i.i466:                                   ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit464
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i468: ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit464
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %71, i8 0, i64 24, i1 false) #31
  %cmp.not.i.i.i.i467 = icmp eq i32 %mul71, 0
  br i1 %cmp.not.i.i.i.i467, label %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i476.thread, label %for.body.i.i.preheader.i.i.i.i.i478

_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i476.thread: ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i468
  store double* null, double** %_M_start.i.i.i473674, align 8, !tbaa !121
  %add.ptr.i.i.i474675 = getelementptr double, double* null, i64 %conv72
  store double* %add.ptr.i.i.i474675, double** %_M_end_of_storage.i.i.i475, align 8, !tbaa !161
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit481

for.body.i.i.preheader.i.i.i.i.i478:              ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i468
  %mul.i.i.i.i.i.i469 = shl nuw nsw i64 %conv72, 3
  %call2.i.i.i.i.i.i470 = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i.i.i469) #35
  %176 = bitcast i8* %call2.i.i.i.i.i.i470 to double*
  store i8* %call2.i.i.i.i.i.i470, i8** %72, align 8, !tbaa !121
  %add.ptr.i.i.i474 = getelementptr double, double* %176, i64 %conv72
  store double* %add.ptr.i.i.i474, double** %_M_end_of_storage.i.i.i475, align 8, !tbaa !161
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i470, i8 0, i64 %mul.i.i.i.i.i.i469, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit481

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit481:            ; preds = %for.body.i.i.preheader.i.i.i.i.i478, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i476.thread
  %cond.i.i.i.i472677 = phi double* [ %176, %for.body.i.i.preheader.i.i.i.i.i478 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i476.thread ]
  %__first.addr.0.lcssa.i.i.i.i.i.i.i479 = phi double* [ %add.ptr.i.i.i474, %for.body.i.i.preheader.i.i.i.i.i478 ], [ null, %_ZNSt12_Vector_baseIdSaIdEEC2EmRKS0_.exit.i476.thread ]
  store double* %__first.addr.0.lcssa.i.i.i.i.i.i.i479, double** %_M_finish.i.i.i480, align 8, !tbaa !119
  %177 = load double*, double** %_M_finish.i442, align 8, !tbaa !119
  %178 = load double*, double** %_M_start.i443, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i484 = ptrtoint double* %177 to i64
  %sub.ptr.rhs.cast.i485 = ptrtoint double* %178 to i64
  %sub.ptr.sub.i486 = sub i64 %sub.ptr.lhs.cast.i484, %sub.ptr.rhs.cast.i485
  %sub.ptr.div.i487 = ashr exact i64 %sub.ptr.sub.i486, 3
  %cmp.i.i488 = icmp ugt i64 %sub.ptr.div.i487, 1152921504606846975
  br i1 %cmp.i.i488, label %if.then.i.i489, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i491

if.then.i.i489:                                   ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit481
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i491: ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit481
  %cmp.not.i.i.i.i490 = icmp eq i64 %sub.ptr.sub.i486, 0
  br i1 %cmp.not.i.i.i.i490, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit503, label %for.body.i.i.preheader.i.i.i.i.i500

for.body.i.i.preheader.i.i.i.i.i500:              ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i491
  %call2.i.i.i.i.i.i492 = call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i486) #35
  %179 = bitcast i8* %call2.i.i.i.i.i.i492 to double*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i492, i8 0, i64 %sub.ptr.sub.i486, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit503

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit503:            ; preds = %for.body.i.i.preheader.i.i.i.i.i500, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i491
  %cond.i.i.i.i494680 = phi double* [ %179, %for.body.i.i.preheader.i.i.i.i.i500 ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i491 ]
  %180 = load double*, double** %_M_finish.i504, align 8, !tbaa !119
  %181 = load double*, double** %_M_start.i505, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i506 = ptrtoint double* %180 to i64
  %sub.ptr.rhs.cast.i507 = ptrtoint double* %181 to i64
  %sub.ptr.sub.i508 = sub i64 %sub.ptr.lhs.cast.i506, %sub.ptr.rhs.cast.i507
  %sub.ptr.div.i509 = ashr exact i64 %sub.ptr.sub.i508, 3
  %cmp.i.i510 = icmp ugt i64 %sub.ptr.div.i509, 1152921504606846975
  br i1 %cmp.i.i510, label %if.then.i.i511, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i513

if.then.i.i511:                                   ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit503
  call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.30, i64 0, i64 0)) #33
  unreachable

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i513: ; preds = %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit503
  %cmp.not.i.i.i.i512 = icmp eq i64 %sub.ptr.sub.i508, 0
  br i1 %cmp.not.i.i.i.i512, label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i529, label %for.body.i.i.preheader.i.i.i.i.i522

for.body.i.i.preheader.i.i.i.i.i522:              ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i513
  %call2.i.i.i.i.i.i514 = call noalias nonnull i8* @_Znwm(i64 %sub.ptr.sub.i508) #35
  %182 = bitcast i8* %call2.i.i.i.i.i.i514 to double*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i514, i8 0, i64 %sub.ptr.sub.i508, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i529

_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i529: ; preds = %for.body.i.i.preheader.i.i.i.i.i522, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i513
  %cond.i.i.i.i516685 = phi double* [ %182, %for.body.i.i.preheader.i.i.i.i.i522 ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i513 ]
  br i1 %cmp.not.i.i.i.i450, label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit542, label %for.body.i.i.preheader.i.i.i.i.i539

for.body.i.i.preheader.i.i.i.i.i539:              ; preds = %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i529
  %mul.i.i.i.i.i.i530 = shl nuw nsw i64 %conv66, 3
  %call2.i.i.i.i.i.i531 = call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i.i.i.i530) #35
  %183 = bitcast i8* %call2.i.i.i.i.i.i531 to double*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 %call2.i.i.i.i.i.i531, i8 0, i64 %mul.i.i.i.i.i.i530, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit542

_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit542:            ; preds = %for.body.i.i.preheader.i.i.i.i.i539, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i529
  %cond.i.i.i.i533690 = phi double* [ %183, %for.body.i.i.preheader.i.i.i.i.i539 ], [ null, %_ZNSt6vectorIdSaIdEE17_S_check_init_lenEmRKS0_.exit.i529 ]
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %73) #31
  call void @llvm.lifetime.start.p0i8(i64 16, i8* nonnull %74) #31
  %call87 = call i32 @gettimeofday(%struct.timeval* nonnull %start85, i8* null) #31
  call void @_Z25calculate_jacobian_simpleIXadL_Z15dhand_objectiveEEEvP17HandObjectiveDataR9HandInputR10HandOutputRSt6vectorIdSaIdEES9_S9_(%struct.HandObjectiveData* nonnull %call53, %struct.HandInput* nonnull align 8 dereferenceable(272) %input45, %struct.HandOutput* nonnull align 8 dereferenceable(56) %result64, %"class.std::vector.19"* nonnull align 8 dereferenceable(24) undef, %"class.std::vector.19"* nonnull align 8 dereferenceable(24) undef, %"class.std::vector.19"* nonnull align 8 dereferenceable(24) undef) #31
  %call88 = call i32 @gettimeofday(%struct.timeval* nonnull %end86, i8* null) #31
  %184 = load i64, i64* %tv_sec.i543, align 8, !tbaa !44
  %185 = load i64, i64* %tv_sec1.i544, align 8, !tbaa !44
  %sub.i545 = sub nsw i64 %184, %185
  %conv.i546 = sitofp i64 %sub.i545 to double
  %186 = load i64, i64* %tv_usec.i547, align 8, !tbaa !46
  %187 = load i64, i64* %tv_usec2.i548, align 8, !tbaa !46
  %sub3.i549 = sub nsw i64 %186, %187
  %conv4.i550 = sitofp i64 %sub3.i549 to double
  %mul.i551 = fmul fast double %conv4.i550, 0x3EB0C6F7A0B5ED8D
  %add.i552 = fadd fast double %mul.i551, %conv.i546
  %conv5.i553 = fptrunc double %add.i552 to float
  %conv90 = fpext float %conv5.i553 to double
  %call91 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([23 x i8], [23 x i8]* @.str.20, i64 0, i64 0), double %conv90)
  br label %for.body96

for.body39:                                       ; preds = %for.body39, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit295
  %indvars.iv = phi i64 [ 0, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit295 ], [ %indvars.iv.next, %for.body39 ]
  %add.ptr.i555 = getelementptr inbounds double, double* %cond.i.i.i.i225653, i64 %indvars.iv
  %188 = load double, double* %add.ptr.i555, align 8, !tbaa !75
  %call43 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), double %188)
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 5
  br i1 %exitcond.not, label %for.cond.cleanup38, label %for.body39, !llvm.loop !182

for.cond.cleanup95:                               ; preds = %for.body96
  %putchar130 = call i32 @putchar(i32 10)
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %74) #31
  call void @llvm.lifetime.end.p0i8(i64 16, i8* nonnull %73) #31
  %tobool.not.i.i.i557 = icmp eq double* %cond.i.i.i.i533690, null
  br i1 %tobool.not.i.i.i557, label %_ZNSt6vectorIdSaIdEED2Ev.exit559, label %if.then.i.i.i558

if.then.i.i.i558:                                 ; preds = %for.cond.cleanup95
  %189 = bitcast double* %cond.i.i.i.i533690 to i8*
  call void @_ZdlPv(i8* nonnull %189) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit559

_ZNSt6vectorIdSaIdEED2Ev.exit559:                 ; preds = %if.then.i.i.i558, %for.cond.cleanup95
  %tobool.not.i.i.i561 = icmp eq double* %cond.i.i.i.i516685, null
  br i1 %tobool.not.i.i.i561, label %_ZNSt6vectorIdSaIdEED2Ev.exit563, label %if.then.i.i.i562

if.then.i.i.i562:                                 ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit559
  %190 = bitcast double* %cond.i.i.i.i516685 to i8*
  call void @_ZdlPv(i8* nonnull %190) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit563

_ZNSt6vectorIdSaIdEED2Ev.exit563:                 ; preds = %if.then.i.i.i562, %_ZNSt6vectorIdSaIdEED2Ev.exit559
  %tobool.not.i.i.i565 = icmp eq double* %cond.i.i.i.i494680, null
  br i1 %tobool.not.i.i.i565, label %_ZNSt6vectorIdSaIdEED2Ev.exit.i573, label %if.then.i.i.i566

if.then.i.i.i566:                                 ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit563
  %191 = bitcast double* %cond.i.i.i.i494680 to i8*
  call void @_ZdlPv(i8* nonnull %191) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit.i573

_ZNSt6vectorIdSaIdEED2Ev.exit.i573:               ; preds = %if.then.i.i.i566, %_ZNSt6vectorIdSaIdEED2Ev.exit563
  %192 = bitcast double* %cond.i.i.i.i472677 to i8*
  call void @_ZdlPv(i8* nonnull %192) #31
  %tobool.not.i.i.i3.i572 = icmp eq double* %175, null
  br i1 %tobool.not.i.i.i3.i572, label %_ZN10HandOutputD2Ev.exit575, label %if.then.i.i.i4.i574

if.then.i.i.i4.i574:                              ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit.i573
  %193 = bitcast double* %175 to i8*
  call void @_ZdlPv(i8* nonnull %193) #31
  br label %_ZN10HandOutputD2Ev.exit575

_ZN10HandOutputD2Ev.exit575:                      ; preds = %if.then.i.i.i4.i574, %_ZNSt6vectorIdSaIdEED2Ev.exit.i573
  call void @llvm.lifetime.end.p0i8(i64 56, i8* nonnull %69) #31
  %194 = load i8*, i8** %_M_p.i21.i.i402, align 8, !tbaa !17
  %cmp.i.i.i163 = icmp eq i8* %194, %arraydecay.i.i.i400
  br i1 %cmp.i.i.i163, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit165, label %if.then.i.i164

if.then.i.i164:                                   ; preds = %_ZN10HandOutputD2Ev.exit575
  call void @_ZdlPv(i8* %194) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit165

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit165: ; preds = %if.then.i.i164, %_ZN10HandOutputD2Ev.exit575
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %54) #31
  %195 = load double*, double** %_M_start.i505, align 8, !tbaa !121
  %tobool.not.i.i.i.i = icmp eq double* %195, null
  br i1 %tobool.not.i.i.i.i, label %_ZNSt6vectorIdSaIdEED2Ev.exit.i, label %if.then.i.i.i.i

if.then.i.i.i.i:                                  ; preds = %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit165
  %196 = bitcast double* %195 to i8*
  call void @_ZdlPv(i8* nonnull %196) #31
  br label %_ZNSt6vectorIdSaIdEED2Ev.exit.i

_ZNSt6vectorIdSaIdEED2Ev.exit.i:                  ; preds = %if.then.i.i.i.i, %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit165
  %197 = load i8, i8* %is_data_owner_.i.i.i348, align 8, !tbaa !68, !range !90
  %tobool.not.i.i.i = icmp eq i8 %197, 0
  %198 = load double*, double** %data_.i.i.i351, align 8
  %cmp.not.i.i.i = icmp eq double* %198, null
  %or.cond693 = or i1 %tobool.not.i.i.i, %cmp.not.i.i.i
  br i1 %or.cond693, label %_ZN11LightMatrixIdED2Ev.exit.i.i, label %delete.notnull.i.i.i

delete.notnull.i.i.i:                             ; preds = %_ZNSt6vectorIdSaIdEED2Ev.exit.i
  %199 = bitcast double* %198 to i8*
  call void @_ZdaPv(i8* %199) #37
  br label %_ZN11LightMatrixIdED2Ev.exit.i.i

_ZN11LightMatrixIdED2Ev.exit.i.i:                 ; preds = %delete.notnull.i.i.i, %_ZNSt6vectorIdSaIdEED2Ev.exit.i
  %200 = load i32*, i32** %_M_start.i.i.i.i, align 8, !tbaa !64
  %tobool.not.i.i.i.i.i = icmp eq i32* %200, null
  br i1 %tobool.not.i.i.i.i.i, label %_ZN19HandDataLightMatrixD2Ev.exit.i, label %if.then.i.i.i.i.i

if.then.i.i.i.i.i:                                ; preds = %_ZN11LightMatrixIdED2Ev.exit.i.i
  %201 = bitcast i32* %200 to i8*
  call void @_ZdlPv(i8* nonnull %201) #31
  br label %_ZN19HandDataLightMatrixD2Ev.exit.i

_ZN19HandDataLightMatrixD2Ev.exit.i:              ; preds = %if.then.i.i.i.i.i, %_ZN11LightMatrixIdED2Ev.exit.i.i
  call void @_ZN20HandModelLightMatrixD2Ev(%class.HandModelLightMatrix* nonnull dereferenceable(169) %model.i.i) #31
  %202 = load double*, double** %_M_start.i443, align 8, !tbaa !121
  %tobool.not.i.i.i3.i = icmp eq double* %202, null
  br i1 %tobool.not.i.i.i3.i, label %_ZN9HandInputD2Ev.exit, label %if.then.i.i.i4.i

if.then.i.i.i4.i:                                 ; preds = %_ZN19HandDataLightMatrixD2Ev.exit.i
  %203 = bitcast double* %202 to i8*
  call void @_ZdlPv(i8* nonnull %203) #31
  br label %_ZN9HandInputD2Ev.exit

_ZN9HandInputD2Ev.exit:                           ; preds = %if.then.i.i.i4.i, %_ZN19HandDataLightMatrixD2Ev.exit.i
  call void @llvm.lifetime.end.p0i8(i64 272, i8* nonnull %50) #31
  %204 = load i8*, i8** %_M_p.i13.i.i.i.i150, align 8, !tbaa !17
  %cmp.i.i.i = icmp eq i8* %204, %24
  br i1 %cmp.i.i.i, label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit, label %if.then.i.i

if.then.i.i:                                      ; preds = %_ZN9HandInputD2Ev.exit
  call void @_ZdlPv(i8* %204) #31
  br label %_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit

_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED2Ev.exit: ; preds = %if.then.i.i, %_ZN9HandInputD2Ev.exit
  call void @llvm.lifetime.end.p0i8(i64 32, i8* nonnull %20) #31
  %incdec.ptr.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 1
  %_M_p.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 0, i32 0
  %205 = load i8*, i8** %_M_p.i.i.i.i.i.i.i.i.i, align 8, !tbaa !17
  %206 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %6, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %206 to i8*
  %cmp.i.i.i.i.i.i.i.i = icmp eq i8* %205, %arraydecay.i.i.i.i.i.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i.i, label %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i, label %if.then.i.i.i.i.i.i.i

for.body96:                                       ; preds = %for.body96, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit542
  %indvars.iv698 = phi i64 [ 0, %_ZNSt6vectorIdSaIdEEC2EmRKS0_.exit542 ], [ %indvars.iv.next699, %for.body96 ]
  %add.ptr.i = getelementptr inbounds double, double* %cond.i.i.i.i472677, i64 %indvars.iv698
  %207 = load double, double* %add.ptr.i, align 8, !tbaa !75
  %call100 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([4 x i8], [4 x i8]* @.str.18, i64 0, i64 0), double %207)
  %indvars.iv.next699 = add nuw nsw i64 %indvars.iv698, 1
  %exitcond700.not = icmp eq i64 %indvars.iv.next699, 5
  br i1 %exitcond700.not, label %for.cond.cleanup95, label %for.body96, !llvm.loop !183
}

; Function Attrs: nofree nounwind
declare dso_local noundef i32 @gettimeofday(%struct.timeval* nocapture noundef, i8* nocapture noundef) local_unnamed_addr #2

; Function Attrs: nofree nounwind uwtable willreturn mustprogress
define dso_local noalias %struct.Matrix* @get_new_matrix(i32 %nrows, i32 %ncols) local_unnamed_addr #13 {
entry:
  %call = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call to %struct.Matrix*
  %nrows1 = bitcast i8* %call to i32*
  store i32 %nrows, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds i8, i8* %call, i64 4
  %1 = bitcast i8* %ncols2 to i32*
  store i32 %ncols, i32* %1, align 4, !tbaa !139
  %mul = mul nsw i32 %ncols, %nrows
  %conv = sext i32 %mul to i64
  %mul3 = shl nsw i64 %conv, 3
  %call4 = tail call noalias i8* @malloc(i64 %mul3) #31
  %data = getelementptr inbounds i8, i8* %call, i64 8
  %2 = bitcast i8* %data to i8**
  store i8* %call4, i8** %2, align 8, !tbaa !137
  ret %struct.Matrix* %0
}

; Function Attrs: inaccessiblememonly nofree nounwind willreturn
declare dso_local noalias noundef i8* @malloc(i64) local_unnamed_addr #14

; Function Attrs: nounwind uwtable willreturn mustprogress
define dso_local void @delete_matrix(%struct.Matrix* nocapture %mat) local_unnamed_addr #15 {
entry:
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %0 = load double*, double** %data, align 8, !tbaa !137
  %cmp.not = icmp eq double* %0, null
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = bitcast double* %0 to i8*
  tail call void @free(i8* %1) #31
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = bitcast %struct.Matrix* %mat to i8*
  tail call void @free(i8* %2) #31
  ret void
}

; Function Attrs: inaccessiblemem_or_argmemonly nounwind willreturn
declare dso_local void @free(i8* nocapture noundef) local_unnamed_addr #16

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local noalias %struct.Matrix* @get_matrix_array(i32 %count) local_unnamed_addr #9 {
entry:
  %conv = sext i32 %count to i64
  %mul = shl nsw i64 %conv, 4
  %call = tail call noalias i8* @malloc(i64 %mul) #31
  %cmp15 = icmp sgt i32 %count, 0
  br i1 %cmp15, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %0 = zext i32 %count to i64
  %1 = shl nuw nsw i64 %0, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %call, i8 0, i64 %1, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.preheader, %entry
  %2 = bitcast i8* %call to %struct.Matrix*
  ret %struct.Matrix* %2
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @delete_light_matrix_array(%struct.Matrix* nocapture %matricies, i32 %count) local_unnamed_addr #5 {
entry:
  %cmp11 = icmp sgt i32 %count, 0
  br i1 %cmp11, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %matricies, i64 %indvars.iv, i32 2
  %0 = load double*, double** %data, align 8, !tbaa !137
  %cmp1.not = icmp eq double* %0, null
  br i1 %cmp1.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  %1 = bitcast double* %0 to i8*
  tail call void @free(i8* %1) #31
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !184

for.end:                                          ; preds = %for.inc, %entry
  %2 = bitcast %struct.Matrix* %matricies to i8*
  tail call void @free(i8* %2) #31
  ret void
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define dso_local void @resize(%struct.Matrix* nocapture %mat, i32 %nrows, i32 %ncols) local_unnamed_addr #15 {
entry:
  %nrows1 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %0 = load i32, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %1 = load i32, i32* %ncols2, align 4, !tbaa !139
  %mul = mul nsw i32 %1, %0
  %mul3 = mul nsw i32 %ncols, %nrows
  %cmp.not = icmp eq i32 %mul, %mul3
  br i1 %cmp.not, label %if.end15, label %if.then

if.then:                                          ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %2 = load double*, double** %data, align 8, !tbaa !137
  %cmp4.not = icmp eq double* %2, null
  br i1 %cmp4.not, label %if.end, label %if.then5

if.then5:                                         ; preds = %if.then
  %3 = bitcast double* %2 to i8*
  tail call void @free(i8* %3) #31
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  %cmp8 = icmp sgt i32 %mul3, 0
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end
  %conv31 = zext i32 %mul3 to i64
  %mul11 = shl nuw nsw i64 %conv31, 3
  %call = tail call noalias i8* @malloc(i64 %mul11) #31
  %4 = bitcast double** %data to i8**
  store i8* %call, i8** %4, align 8, !tbaa !137
  br label %if.end15

if.else:                                          ; preds = %if.end
  store double* null, double** %data, align 8, !tbaa !137
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then9, %entry
  store i32 %ncols, i32* %ncols2, align 4, !tbaa !139
  store i32 %nrows, i32* %nrows1, align 8, !tbaa !138
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @mat_mult(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out) local_unnamed_addr #5 {
entry:
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %0 = load i32, i32* %nrows, align 8, !tbaa !138
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %1 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %2 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %3 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %3, %2
  %mul3.i = mul nsw i32 %1, %0
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %4 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %4, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  %5 = bitcast double* %4 to i8*
  tail call void @free(i8* %5) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %6 = bitcast double** %data.i to i8**
  store i8* %call.i, i8** %6, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %1, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %0, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %0, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %1, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %7 = zext i32 %0 to i64
  %wide.trip.count96 = zext i32 %1 to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %indvars.iv98 = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %indvars.iv.next99, %for.inc47 ]
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %8 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %8, i64 %indvars.iv98
  %9 = load double*, double** %data7, align 8, !tbaa !137
  %10 = load i32, i32* %nrows8, align 8, !tbaa !138
  %11 = load double*, double** %data14, align 8, !tbaa !137
  %12 = load i32, i32* %ncols21, align 4, !tbaa !139
  %cmp2281 = icmp sgt i32 %12, 1
  %13 = sext i32 %10 to i64
  %wide.trip.count = zext i32 %12 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %indvars.iv91 = phi i64 [ 0, %for.body5.lr.ph ], [ %indvars.iv.next92, %for.inc44 ]
  %14 = load double, double* %arrayidx, align 8, !tbaa !75
  %15 = mul nsw i64 %indvars.iv91, %13
  %arrayidx12 = getelementptr inbounds double, double* %9, i64 %15
  %16 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %16, %14
  %17 = mul nuw nsw i64 %indvars.iv91, %7
  %18 = add nuw nsw i64 %17, %indvars.iv98
  %arrayidx19 = getelementptr inbounds double, double* %11, i64 %18
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %19 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body23 ], [ 1, %for.body5 ]
  %20 = mul nuw nsw i64 %indvars.iv, %7
  %21 = add nuw nsw i64 %20, %indvars.iv98
  %arrayidx29 = getelementptr inbounds double, double* %8, i64 %21
  %22 = load double, double* %arrayidx29, align 8, !tbaa !75
  %23 = add nsw i64 %indvars.iv, %15
  %arrayidx35 = getelementptr inbounds double, double* %9, i64 %23
  %24 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %24, %22
  %add43 = fadd fast double %19, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %indvars.iv.next92 = add nuw nsw i64 %indvars.iv91, 1
  %exitcond97.not = icmp eq i64 %indvars.iv.next92, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %indvars.iv.next99 = add nuw nsw i64 %indvars.iv98, 1
  %exitcond101.not = icmp eq i64 %indvars.iv.next99, %7
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !187

for.end49:                                        ; preds = %for.inc47, %resize.exit
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_identity(%struct.Matrix* nocapture readonly %mat) local_unnamed_addr #17 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end14

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp230 = icmp sgt i32 %1, 0
  %data6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %for.cond1.preheader.lr.ph
  %i_col.034 = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %inc13, %for.inc12 ]
  br i1 %cmp230, label %for.body3.lr.ph, label %for.inc12

for.body3.lr.ph:                                  ; preds = %for.cond1.preheader
  %mul8 = mul nsw i32 %1, %i_col.034
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body3.lr.ph
  %i_row.031 = phi i32 [ 0, %for.body3.lr.ph ], [ %inc, %for.body3 ]
  %cmp4 = icmp eq i32 %i_col.034, %i_row.031
  %2 = load double*, double** %data6, align 8, !tbaa !137
  %idxprom.sink.v = add nsw i32 %mul8, %i_row.031
  %idxprom.sink = sext i32 %idxprom.sink.v to i64
  %.sink = select i1 %cmp4, double 1.000000e+00, double 0.000000e+00
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom.sink
  store double %.sink, double* %arrayidx, align 8, !tbaa !75
  %inc = add nuw nsw i32 %i_row.031, 1
  %exitcond.not = icmp eq i32 %inc, %1
  br i1 %exitcond.not, label %for.inc12, label %for.body3, !llvm.loop !188

for.inc12:                                        ; preds = %for.body3, %for.cond1.preheader
  %inc13 = add nuw nsw i32 %i_col.034, 1
  %exitcond37.not = icmp eq i32 %inc13, %0
  br i1 %exitcond37.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !189

for.end14:                                        ; preds = %for.inc12, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @fill(%struct.Matrix* nocapture readonly %mat, double %val) local_unnamed_addr #17 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul6 = mul i32 %1, %0
  %cmp7 = icmp sgt i32 %mul6, 0
  br i1 %cmp7, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %2 = load double*, double** %data, align 8, !tbaa !137
  %wide.trip.count = zext i32 %mul6 to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %2, i64 %indvars.iv
  store double %val, double* %arrayidx, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !190

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_block(%struct.Matrix* nocapture readonly %mat, i32 %row_off, i32 %col_off, %struct.Matrix* nocapture readonly %block) local_unnamed_addr #17 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end15

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp228 = icmp sgt i32 %1, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 2
  %data5 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %2 = sext i32 %row_off to i64
  %wide.trip.count = zext i32 %1 to i64
  %3 = sext i32 %col_off to i64
  %4 = sext i32 %1 to i64
  %5 = zext i32 %0 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc13, %for.cond1.preheader.lr.ph
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc13 ], [ 0, %for.cond1.preheader.lr.ph ]
  br i1 %cmp228, label %for.body3.lr.ph, label %for.inc13

for.body3.lr.ph:                                  ; preds = %for.cond1.preheader
  %6 = load double*, double** %data, align 8, !tbaa !137
  %7 = load double*, double** %data5, align 8, !tbaa !137
  %8 = add nsw i64 %indvars.iv1, %3
  %9 = load i32, i32* %nrows8, align 8, !tbaa !138
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %8, %10
  %12 = mul nsw i64 %indvars.iv1, %4
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body3.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body3.lr.ph ], [ %indvars.iv.next, %for.body3 ]
  %13 = add nsw i64 %indvars.iv, %12
  %arrayidx = getelementptr inbounds double, double* %6, i64 %13
  %14 = load double, double* %arrayidx, align 8, !tbaa !75
  %15 = add nsw i64 %indvars.iv, %2
  %16 = add nsw i64 %15, %11
  %arrayidx12 = getelementptr inbounds double, double* %7, i64 %16
  store double %14, double* %arrayidx12, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc13, label %for.body3, !llvm.loop !191

for.inc13:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond37.not = icmp eq i64 %indvars.iv.next2, %5
  br i1 %exitcond37.not, label %for.end15, label %for.cond1.preheader, !llvm.loop !192

for.end15:                                        ; preds = %for.inc13, %entry
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @copy(%struct.Matrix* nocapture %dst, %struct.Matrix* nocapture readonly %src) local_unnamed_addr #5 {
entry:
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 2
  %0 = load double*, double** %data, align 8, !tbaa !137
  %cmp.not = icmp eq double* %0, null
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = bitcast double* %0 to i8*
  tail call void @free(i8* %1) #31
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 1
  store i32 %2, i32* %ncols2, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 0
  %3 = load i32, i32* %nrows, align 8, !tbaa !138
  %nrows3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 0
  store i32 %3, i32* %nrows3, align 8, !tbaa !138
  %mul = mul i32 %3, %2
  %conv = sext i32 %mul to i64
  %mul6 = shl nsw i64 %conv, 3
  %call = tail call noalias i8* @malloc(i64 %mul6) #31
  %4 = bitcast double** %data to i8**
  store i8* %call, i8** %4, align 8, !tbaa !137
  %cmp1131 = icmp sgt i32 %mul, 0
  %5 = bitcast i8* %call to double*
  br i1 %cmp1131, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end
  %data12 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 2
  %6 = load double*, double** %data12, align 8, !tbaa !137
  %wide.trip.count = zext i32 %mul to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %6, i64 %indvars.iv
  %7 = load double, double* %arrayidx, align 8, !tbaa !75
  %arrayidx15 = getelementptr inbounds double, double* %5, i64 %indvars.iv
  store double %7, double* %arrayidx15, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !193

for.end:                                          ; preds = %for.body, %if.end
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
define dso_local double @square_sum(i32 %n, double* nocapture readonly %x) local_unnamed_addr #8 {
entry:
  %0 = load double, double* %x, align 8, !tbaa !75
  %mul = fmul fast double %0, %0
  %cmp15 = icmp sgt i32 %n, 1
  br i1 %cmp15, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 1, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %res.017 = phi double [ %mul, %for.body.preheader ], [ %add, %for.body ]
  %arrayidx2 = getelementptr inbounds double, double* %x, i64 %indvars.iv
  %1 = load double, double* %arrayidx2, align 8, !tbaa !75
  %mul5 = fmul fast double %1, %1
  %add = fadd fast double %mul5, %res.017
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !194

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi double [ %mul, %entry ], [ %add, %for.body ]
  ret double %res.0.lcssa
}

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local void @angle_axis_to_rotation_matrix(double* nocapture readonly %angle_axis, %struct.Matrix* nocapture readonly %R) local_unnamed_addr #9 {
entry:
  %0 = load double, double* %angle_axis, align 8, !tbaa !75
  %mul.i = fmul fast double %0, %0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 1, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %res.017.i = phi double [ %mul.i, %entry ], [ %add.i, %for.body.i ]
  %arrayidx2.i = getelementptr inbounds double, double* %angle_axis, i64 %indvars.iv.i
  %1 = load double, double* %arrayidx2.i, align 8, !tbaa !75
  %mul5.i = fmul fast double %1, %1
  %add.i = fadd fast double %mul5.i, %res.017.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 3
  br i1 %exitcond.not.i, label %square_sum.exit, label %for.body.i, !llvm.loop !194

square_sum.exit:                                  ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %2 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %cmp = fcmp fast olt double %2, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %square_sum.exit
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %cmp33.i = icmp sgt i32 %3, 0
  br i1 %cmp33.i, label %for.cond1.preheader.lr.ph.i, label %cleanup

for.cond1.preheader.lr.ph.i:                      ; preds = %if.then
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %cmp230.i = icmp sgt i32 %4, 0
  %data6.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %5 = zext i32 %4 to i64
  %6 = zext i32 %3 to i64
  %7 = sext i32 %4 to i64
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv174 = phi i64 [ %indvars.iv.next175, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  br i1 %cmp230.i, label %for.body3.lr.ph.i, label %for.inc12.i

for.body3.lr.ph.i:                                ; preds = %for.cond1.preheader.i
  %8 = mul nsw i64 %indvars.iv174, %7
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv174, %indvars.iv
  %9 = load double*, double** %data6.i, align 8, !tbaa !137
  %.sink178 = add nsw i64 %indvars.iv, %8
  %.sink = select i1 %cmp4.i, double 1.000000e+00, double 0.000000e+00
  %arrayidx11.i = getelementptr inbounds double, double* %9, i64 %.sink178
  store double %.sink, double* %arrayidx11.i, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i172 = icmp eq i64 %indvars.iv.next, %5
  br i1 %exitcond.not.i172, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.body3.i, %for.cond1.preheader.i
  %indvars.iv.next175 = add nuw nsw i64 %indvars.iv174, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next175, %6
  br i1 %exitcond37.not.i, label %cleanup, label %for.cond1.preheader.i, !llvm.loop !189

if.end:                                           ; preds = %square_sum.exit
  %div = fdiv fast double %0, %2
  %arrayidx1 = getelementptr inbounds double, double* %angle_axis, i64 1
  %10 = load double, double* %arrayidx1, align 8, !tbaa !75
  %div2 = fdiv fast double %10, %2
  %arrayidx3 = getelementptr inbounds double, double* %angle_axis, i64 2
  %11 = load double, double* %arrayidx3, align 8, !tbaa !75
  %div4 = fdiv fast double %11, %2
  %12 = tail call fast double @llvm.sin.f64(double %2)
  %13 = tail call fast double @llvm.cos.f64(double %2)
  %mul = fmul fast double %div, %div
  %sub = fsub fast double 1.000000e+00, %mul
  %mul6 = fmul fast double %sub, %13
  %add = fadd fast double %mul6, %mul
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %14 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  store double %add, double* %14, align 8, !tbaa !75
  %sub11 = fsub fast double 1.000000e+00, %13
  %mul10 = fmul fast double %sub11, %div
  %mul12 = fmul fast double %mul10, %div2
  %mul13 = fmul fast double %div4, %12
  %sub14 = fsub fast double %mul12, %mul13
  %15 = load i32, i32* %nrows, align 8, !tbaa !138
  %idxprom19 = sext i32 %15 to i64
  %arrayidx20 = getelementptr inbounds double, double* %14, i64 %idxprom19
  store double %sub14, double* %arrayidx20, align 8, !tbaa !75
  %mul23 = fmul fast double %mul10, %div4
  %mul24 = fmul fast double %div2, %12
  %add25 = fadd fast double %mul23, %mul24
  %mul28 = shl nsw i32 %15, 1
  %idxprom30 = sext i32 %mul28 to i64
  %arrayidx31 = getelementptr inbounds double, double* %14, i64 %idxprom30
  store double %add25, double* %arrayidx31, align 8, !tbaa !75
  %add36 = fadd fast double %mul12, %mul13
  %arrayidx42 = getelementptr inbounds double, double* %14, i64 1
  store double %add36, double* %arrayidx42, align 8, !tbaa !75
  %mul43 = fmul fast double %div2, %div2
  %sub45 = fsub fast double 1.000000e+00, %mul43
  %mul46 = fmul fast double %sub45, %13
  %add47 = fadd fast double %mul46, %mul43
  %add51 = add nsw i32 %15, 1
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %14, i64 %idxprom52
  store double %add47, double* %arrayidx53, align 8, !tbaa !75
  %mul54 = fmul fast double %div2, %sub11
  %mul56 = fmul fast double %mul54, %div4
  %mul57 = fmul fast double %div, %12
  %sub58 = fsub fast double %mul56, %mul57
  %add62 = or i32 %mul28, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds double, double* %14, i64 %idxprom63
  store double %sub58, double* %arrayidx64, align 8, !tbaa !75
  %sub69 = fsub fast double %mul23, %mul24
  %arrayidx75 = getelementptr inbounds double, double* %14, i64 2
  store double %sub69, double* %arrayidx75, align 8, !tbaa !75
  %add80 = fadd fast double %mul56, %mul57
  %add84 = add nsw i32 %15, 2
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds double, double* %14, i64 %idxprom85
  store double %add80, double* %arrayidx86, align 8, !tbaa !75
  %mul87 = fmul fast double %div4, %div4
  %sub89 = fsub fast double 1.000000e+00, %mul87
  %mul90 = fmul fast double %sub89, %13
  %add91 = fadd fast double %mul90, %mul87
  %add95 = add nsw i32 %mul28, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds double, double* %14, i64 %idxprom96
  store double %add91, double* %arrayidx97, align 8, !tbaa !75
  br label %cleanup

cleanup:                                          ; preds = %if.end, %for.inc12.i, %if.then
  ret void
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.sqrt.f64(double) #11

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.sin.f64(double) #11

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare double @llvm.cos.f64(double) #11

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @apply_global_transform(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture readonly %positions) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %3 = load double*, double** %data, align 8, !tbaa !137
  tail call void @angle_axis_to_rotation_matrix(double* %3, %struct.Matrix* %0)
  %4 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %5 = load i32, i32* %nrows, align 8, !tbaa !138
  %6 = bitcast i8* %call4.i to double*
  %7 = sext i32 %5 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %indvars.iv103 = phi i64 [ 0, %entry ], [ %indvars.iv.next104, %for.inc12 ]
  %8 = add nsw i64 %indvars.iv103, %7
  %arrayidx = getelementptr inbounds double, double* %4, i64 %8
  %9 = mul nuw nsw i64 %indvars.iv103, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv99 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next100, %for.body3 ]
  %10 = load double, double* %arrayidx, align 8, !tbaa !75
  %11 = add nuw nsw i64 %9, %indvars.iv99
  %arrayidx10 = getelementptr inbounds double, double* %6, i64 %11
  %12 = load double, double* %arrayidx10, align 8, !tbaa !75
  %mul11 = fmul fast double %12, %10
  store double %mul11, double* %arrayidx10, align 8, !tbaa !75
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %exitcond102.not = icmp eq i64 %indvars.iv.next100, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !195

for.inc12:                                        ; preds = %for.body3
  %indvars.iv.next104 = add nuw nsw i64 %indvars.iv103, 1
  %exitcond107.not = icmp eq i64 %indvars.iv.next104, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !196

for.end14:                                        ; preds = %for.inc12
  %call.i81 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %13 = bitcast i8* %call.i81 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i81, i8 0, i64 16, i1 false) #31
  tail call void @mat_mult(%struct.Matrix* %0, %struct.Matrix* %positions, %struct.Matrix* %13)
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %14 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp1789 = icmp sgt i32 %14, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %if.then.i

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %15 = load i32, i32* %nrows20, align 8, !tbaa !138
  %cmp2187 = icmp sgt i32 %15, 0
  %data23 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %16 = bitcast i8* %data23 to double**
  %nrows24 = bitcast i8* %call.i81 to i32*
  %data36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count = zext i32 %15 to i64
  %17 = sext i32 %15 to i64
  %18 = zext i32 %14 to i64
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc45 ], [ 0, %for.cond19.preheader.lr.ph ]
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %19 = load double*, double** %16, align 8, !tbaa !137
  %20 = load i32, i32* %nrows24, align 8, !tbaa !138
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %indvars.iv1, %21
  %23 = load double*, double** %data, align 8, !tbaa !137
  %24 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul31 = shl nsw i32 %24, 1
  %25 = load double*, double** %data36, align 8, !tbaa !137
  %26 = sext i32 %mul31 to i64
  %27 = mul nsw i64 %indvars.iv1, %17
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body22.lr.ph ], [ %indvars.iv.next, %for.body22 ]
  %28 = add nsw i64 %indvars.iv, %22
  %arrayidx28 = getelementptr inbounds double, double* %19, i64 %28
  %29 = load double, double* %arrayidx28, align 8, !tbaa !75
  %30 = add nsw i64 %indvars.iv, %26
  %arrayidx34 = getelementptr inbounds double, double* %23, i64 %30
  %31 = load double, double* %arrayidx34, align 8, !tbaa !75
  %add35 = fadd fast double %31, %29
  %32 = add nsw i64 %indvars.iv, %27
  %arrayidx41 = getelementptr inbounds double, double* %25, i64 %32
  store double %add35, double* %arrayidx41, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !197

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond98.not = icmp eq i64 %indvars.iv.next2, %18
  br i1 %exitcond98.not, label %for.end47, label %for.cond19.preheader, !llvm.loop !198

for.end47:                                        ; preds = %for.inc45
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end47, %for.end14
  tail call void @free(i8* nonnull %call4.i) #31
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i, %for.end47
  tail call void @free(i8* nonnull %call.i) #31
  %data.i83 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %33 = bitcast i8* %data.i83 to double**
  %34 = load double*, double** %33, align 8, !tbaa !137
  %cmp.not.i84 = icmp eq double* %34, null
  br i1 %cmp.not.i84, label %delete_matrix.exit86, label %if.then.i85

if.then.i85:                                      ; preds = %delete_matrix.exit
  %35 = bitcast double* %34 to i8*
  tail call void @free(i8* %35) #31
  br label %delete_matrix.exit86

delete_matrix.exit86:                             ; preds = %if.then.i85, %delete_matrix.exit
  tail call void @free(i8* nonnull %call.i81) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @relatives_to_absolutes(i32 %count, %struct.Matrix* nocapture readonly %relatives, i32* nocapture readonly %parents, %struct.Matrix* nocapture %absolutes) local_unnamed_addr #5 {
entry:
  %cmp26 = icmp sgt i32 %count, 0
  br i1 %cmp26, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i32, i32* %parents, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %0, -1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 2
  %1 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp.not.i = icmp eq double* %1, null
  br i1 %cmp.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %2 = bitcast double* %1 to i8*
  tail call void @free(i8* %2) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 1
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 1
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %nrows3.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 0
  store i32 %4, i32* %nrows3.i, align 8, !tbaa !138
  %mul.i = mul i32 %4, %3
  %conv.i = sext i32 %mul.i to i64
  %mul6.i = shl nsw i64 %conv.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul6.i) #31
  %5 = bitcast double** %data.i to i8**
  store i8* %call.i, i8** %5, align 8, !tbaa !137
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %6 = bitcast i8* %call.i to double*
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %data12.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 2
  %7 = load double*, double** %data12.i, align 8, !tbaa !137
  %wide.trip.count.i = zext i32 %mul.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds double, double* %7, i64 %indvars.iv.i
  %8 = load double, double* %arrayidx.i, align 8, !tbaa !75
  %arrayidx15.i = getelementptr inbounds double, double* %6, i64 %indvars.iv.i
  store double %8, double* %arrayidx15.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !193

if.else:                                          ; preds = %for.body
  %idxprom8 = sext i32 %0 to i64
  %arrayidx9 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom8
  %arrayidx11 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv
  tail call void @mat_mult(%struct.Matrix* %arrayidx9, %struct.Matrix* %arrayidx11, %struct.Matrix* %arrayidx13)
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.end.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !199

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @euler_angles_to_rotation_matrix(double* noalias nocapture readonly %xzy, %struct.Matrix* noalias nocapture %R) local_unnamed_addr #5 {
for.cond1.preheader.lr.ph.i:
  %0 = load double, double* %xzy, align 8, !tbaa !75
  %arrayidx1 = getelementptr inbounds double, double* %xzy, i64 2
  %1 = load double, double* %arrayidx1, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %xzy, i64 1
  %2 = load double, double* %arrayidx2, align 8, !tbaa !75
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %3 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %3, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %4 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %4, align 8, !tbaa !137
  %call.i167 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i168 = bitcast i8* %call.i167 to i32*
  store i32 3, i32* %nrows1.i168, align 8, !tbaa !138
  %ncols2.i169 = getelementptr inbounds i8, i8* %call.i167, i64 4
  %5 = bitcast i8* %ncols2.i169 to i32*
  store i32 3, i32* %5, align 4, !tbaa !139
  %call4.i170 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i171 = getelementptr inbounds i8, i8* %call.i167, i64 8
  %6 = bitcast i8* %data.i171 to i8**
  store i8* %call4.i170, i8** %6, align 8, !tbaa !137
  %call.i172 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i173 = bitcast i8* %call.i172 to i32*
  store i32 3, i32* %nrows1.i173, align 8, !tbaa !138
  %ncols2.i174 = getelementptr inbounds i8, i8* %call.i172, i64 4
  %7 = bitcast i8* %ncols2.i174 to i32*
  store i32 3, i32* %7, align 4, !tbaa !139
  %call4.i175 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i176 = getelementptr inbounds i8, i8* %call.i172, i64 8
  %8 = bitcast i8* %data.i176 to i8**
  store i8* %call4.i175, i8** %8, align 8, !tbaa !137
  %9 = bitcast i8* %call4.i to double*
  %10 = bitcast i8* %call4.i170 to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv265 = phi i64 [ %indvars.iv.next266, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %11 = mul nuw nsw i64 %indvars.iv265, 3
  %12 = shl nuw nsw i64 %indvars.iv265, 2
  %arrayidx.i = getelementptr inbounds double, double* %9, i64 %12
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv262 = phi i64 [ %indvars.iv.next263, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv265, %indvars.iv262
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %13 = add nuw nsw i64 %indvars.iv262, %11
  %arrayidx11.i = getelementptr inbounds double, double* %9, i64 %13
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next263 = add nuw nsw i64 %indvars.iv262, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next263, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next266 = add nuw nsw i64 %indvars.iv265, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next266, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i182, label %for.body3.lr.ph.i, !llvm.loop !189

for.cond1.preheader.lr.ph.i182:                   ; preds = %for.inc12.i
  %14 = bitcast i8* %call.i to %struct.Matrix*
  %15 = bitcast i8* %call.i167 to %struct.Matrix*
  %16 = bitcast i8* %call.i172 to %struct.Matrix*
  %17 = bitcast i8* %call4.i175 to double*
  %18 = tail call fast double @llvm.cos.f64(double %0)
  %arrayidx5 = getelementptr inbounds i8, i8* %call4.i, i64 32
  %19 = bitcast i8* %arrayidx5 to double*
  store double %18, double* %19, align 8, !tbaa !75
  %20 = tail call fast double @llvm.sin.f64(double %0)
  %arrayidx11 = getelementptr inbounds i8, i8* %call4.i, i64 40
  %21 = bitcast i8* %arrayidx11 to double*
  store double %20, double* %21, align 8, !tbaa !75
  %fneg = fneg fast double %20
  %arrayidx23 = getelementptr inbounds i8, i8* %call4.i, i64 56
  %22 = bitcast i8* %arrayidx23 to double*
  store double %fneg, double* %22, align 8, !tbaa !75
  %arrayidx35 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %23 = bitcast i8* %arrayidx35 to double*
  store double %18, double* %23, align 8, !tbaa !75
  br label %for.body3.lr.ph.i189

for.body3.lr.ph.i189:                             ; preds = %for.inc12.i204, %for.cond1.preheader.lr.ph.i182
  %indvars.iv258 = phi i64 [ %indvars.iv.next259, %for.inc12.i204 ], [ 0, %for.cond1.preheader.lr.ph.i182 ]
  %24 = mul nuw nsw i64 %indvars.iv258, 3
  %25 = shl nuw nsw i64 %indvars.iv258, 2
  %arrayidx.i193 = getelementptr inbounds double, double* %10, i64 %25
  br label %for.body3.i192

for.body3.i192:                                   ; preds = %for.inc.i201, %for.body3.lr.ph.i189
  %indvars.iv255 = phi i64 [ %indvars.iv.next256, %for.inc.i201 ], [ 0, %for.body3.lr.ph.i189 ]
  %cmp4.i191 = icmp eq i64 %indvars.iv258, %indvars.iv255
  br i1 %cmp4.i191, label %if.then.i194, label %if.else.i198

if.then.i194:                                     ; preds = %for.body3.i192
  store double 1.000000e+00, double* %arrayidx.i193, align 8, !tbaa !75
  br label %for.inc.i201

if.else.i198:                                     ; preds = %for.body3.i192
  %26 = add nuw nsw i64 %indvars.iv255, %24
  %arrayidx11.i197 = getelementptr inbounds double, double* %10, i64 %26
  store double 0.000000e+00, double* %arrayidx11.i197, align 8, !tbaa !75
  br label %for.inc.i201

for.inc.i201:                                     ; preds = %if.else.i198, %if.then.i194
  %indvars.iv.next256 = add nuw nsw i64 %indvars.iv255, 1
  %exitcond.not.i200 = icmp eq i64 %indvars.iv.next256, 3
  br i1 %exitcond.not.i200, label %for.inc12.i204, label %for.body3.i192, !llvm.loop !188

for.inc12.i204:                                   ; preds = %for.inc.i201
  %indvars.iv.next259 = add nuw nsw i64 %indvars.iv258, 1
  %exitcond37.not.i203 = icmp eq i64 %indvars.iv.next259, 3
  br i1 %exitcond37.not.i203, label %for.cond1.preheader.lr.ph.i211, label %for.body3.lr.ph.i189, !llvm.loop !189

for.cond1.preheader.lr.ph.i211:                   ; preds = %for.inc12.i204
  %27 = tail call fast double @llvm.cos.f64(double %1)
  store double %27, double* %10, align 8, !tbaa !75
  %28 = tail call fast double @llvm.sin.f64(double %1)
  %arrayidx47 = getelementptr inbounds i8, i8* %call4.i170, i64 48
  %29 = bitcast i8* %arrayidx47 to double*
  store double %28, double* %29, align 8, !tbaa !75
  %fneg54 = fneg fast double %28
  %arrayidx60 = getelementptr inbounds i8, i8* %call4.i170, i64 16
  %30 = bitcast i8* %arrayidx60 to double*
  store double %fneg54, double* %30, align 8, !tbaa !75
  %arrayidx72 = getelementptr inbounds i8, i8* %call4.i170, i64 64
  %31 = bitcast i8* %arrayidx72 to double*
  store double %27, double* %31, align 8, !tbaa !75
  br label %for.body3.lr.ph.i218

for.body3.lr.ph.i218:                             ; preds = %for.inc12.i233, %for.cond1.preheader.lr.ph.i211
  %indvars.iv251 = phi i64 [ %indvars.iv.next252, %for.inc12.i233 ], [ 0, %for.cond1.preheader.lr.ph.i211 ]
  %32 = mul nuw nsw i64 %indvars.iv251, 3
  %33 = shl nuw nsw i64 %indvars.iv251, 2
  %arrayidx.i222 = getelementptr inbounds double, double* %17, i64 %33
  br label %for.body3.i221

for.body3.i221:                                   ; preds = %for.inc.i230, %for.body3.lr.ph.i218
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i230 ], [ 0, %for.body3.lr.ph.i218 ]
  %cmp4.i220 = icmp eq i64 %indvars.iv251, %indvars.iv
  br i1 %cmp4.i220, label %if.then.i223, label %if.else.i227

if.then.i223:                                     ; preds = %for.body3.i221
  store double 1.000000e+00, double* %arrayidx.i222, align 8, !tbaa !75
  br label %for.inc.i230

if.else.i227:                                     ; preds = %for.body3.i221
  %34 = add nuw nsw i64 %indvars.iv, %32
  %arrayidx11.i226 = getelementptr inbounds double, double* %17, i64 %34
  store double 0.000000e+00, double* %arrayidx11.i226, align 8, !tbaa !75
  br label %for.inc.i230

for.inc.i230:                                     ; preds = %if.else.i227, %if.then.i223
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i229 = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not.i229, label %for.inc12.i233, label %for.body3.i221, !llvm.loop !188

for.inc12.i233:                                   ; preds = %for.inc.i230
  %indvars.iv.next252 = add nuw nsw i64 %indvars.iv251, 1
  %exitcond37.not.i232 = icmp eq i64 %indvars.iv.next252, 3
  br i1 %exitcond37.not.i232, label %set_identity.exit234, label %for.body3.lr.ph.i218, !llvm.loop !189

set_identity.exit234:                             ; preds = %for.inc12.i233
  %35 = tail call fast double @llvm.cos.f64(double %2)
  store double %35, double* %17, align 8, !tbaa !75
  %36 = tail call fast double @llvm.sin.f64(double %2)
  %arrayidx84 = getelementptr inbounds i8, i8* %call4.i175, i64 8
  %37 = bitcast i8* %arrayidx84 to double*
  store double %36, double* %37, align 8, !tbaa !75
  %fneg91 = fneg fast double %36
  %arrayidx97 = getelementptr inbounds i8, i8* %call4.i175, i64 24
  %38 = bitcast i8* %arrayidx97 to double*
  store double %fneg91, double* %38, align 8, !tbaa !75
  %arrayidx109 = getelementptr inbounds i8, i8* %call4.i175, i64 32
  %39 = bitcast i8* %arrayidx109 to double*
  store double %35, double* %39, align 8, !tbaa !75
  %call.i235 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %40 = bitcast i8* %call.i235 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i235, i8 0, i64 16, i1 false) #31
  tail call void @mat_mult(%struct.Matrix* %16, %struct.Matrix* %15, %struct.Matrix* %40)
  tail call void @mat_mult(%struct.Matrix* %40, %struct.Matrix* %14, %struct.Matrix* %R)
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix.exit245, label %if.then.i237

if.then.i237:                                     ; preds = %set_identity.exit234
  tail call void @free(i8* nonnull %call4.i) #31
  br label %delete_matrix.exit245

delete_matrix.exit245:                            ; preds = %if.then.i237, %set_identity.exit234
  tail call void @free(i8* %call.i) #31
  tail call void @free(i8* %call4.i170) #31
  tail call void @free(i8* %call.i167) #31
  tail call void @free(i8* nonnull %call4.i175) #31
  tail call void @free(i8* nonnull %call.i172) #31
  %data.i246 = getelementptr inbounds i8, i8* %call.i235, i64 8
  %41 = bitcast i8* %data.i246 to double**
  %42 = load double*, double** %41, align 8, !tbaa !137
  %cmp.not.i247 = icmp eq double* %42, null
  br i1 %cmp.not.i247, label %delete_matrix.exit249, label %if.then.i248

if.then.i248:                                     ; preds = %delete_matrix.exit245
  %43 = bitcast double* %42 to i8*
  tail call void @free(i8* %43) #31
  br label %delete_matrix.exit249

delete_matrix.exit249:                            ; preds = %if.then.i248, %delete_matrix.exit245
  tail call void @free(i8* nonnull %call.i235) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_posed_relatives(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* noalias nocapture %relatives) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 128) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %call.i18 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %3 = bitcast i8* %call.i18 to %struct.Matrix*
  %nrows1.i19 = bitcast i8* %call.i18 to i32*
  store i32 3, i32* %nrows1.i19, align 8, !tbaa !138
  %ncols2.i20 = getelementptr inbounds i8, i8* %call.i18, i64 4
  %4 = bitcast i8* %ncols2.i20 to i32*
  store i32 3, i32* %4, align 4, !tbaa !139
  %call4.i21 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i22 = getelementptr inbounds i8, i8* %call.i18, i64 8
  %5 = bitcast i8* %data.i22 to i8**
  store i8* %call4.i21, i8** %5, align 8, !tbaa !137
  %cmp40 = icmp sgt i32 %bone_count, 0
  %6 = bitcast i8* %call4.i to double*
  br i1 %cmp40, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %7 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %8 = load i32, i32* %nrows, align 8, !tbaa !138
  %9 = bitcast i8* %data.i22 to double**
  %wide.trip.count = zext i32 %bone_count to i64
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %set_block.exit, %for.body.lr.ph
  %indvars.iv52 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next53, %set_block.exit ]
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv43 = phi i64 [ %indvars.iv.next44, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %10 = shl nsw i64 %indvars.iv43, 2
  %11 = mul nsw i64 %indvars.iv43, 5
  %arrayidx.i = getelementptr inbounds double, double* %6, i64 %11
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv43, %indvars.iv
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %12 = add nuw nsw i64 %indvars.iv, %10
  %arrayidx11.i = getelementptr inbounds double, double* %6, i64 %12
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next44, 4
  br i1 %exitcond37.not.i, label %set_identity.exit, label %for.body3.lr.ph.i, !llvm.loop !189

set_identity.exit:                                ; preds = %for.inc12.i
  %13 = trunc i64 %indvars.iv52 to i32
  %14 = add i32 %13, 3
  %mul = mul nsw i32 %8, %14
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds double, double* %7, i64 %idx.ext
  tail call void @euler_angles_to_rotation_matrix(double* %add.ptr, %struct.Matrix* %3)
  %15 = load i32, i32* %4, align 4, !tbaa !139
  %cmp30.i = icmp sgt i32 %15, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i26, label %set_block.exit

for.cond1.preheader.lr.ph.i26:                    ; preds = %set_identity.exit
  %16 = load i32, i32* %nrows1.i19, align 8, !tbaa !138
  %cmp228.i = icmp sgt i32 %16, 0
  %wide.trip.count.i = zext i32 %16 to i64
  %17 = zext i32 %15 to i64
  %18 = sext i32 %16 to i64
  br label %for.cond1.preheader.i27

for.cond1.preheader.i27:                          ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i26
  %indvars.iv48 = phi i64 [ %indvars.iv.next49, %for.inc13.i ], [ 0, %for.cond1.preheader.lr.ph.i26 ]
  br i1 %cmp228.i, label %for.body3.lr.ph.i29, label %for.inc13.i

for.body3.lr.ph.i29:                              ; preds = %for.cond1.preheader.i27
  %19 = load double*, double** %9, align 8, !tbaa !137
  %20 = shl nsw i64 %indvars.iv48, 2
  %21 = mul nsw i64 %indvars.iv48, %18
  br label %for.body3.i32

for.body3.i32:                                    ; preds = %for.body3.i32, %for.body3.lr.ph.i29
  %indvars.iv.i = phi i64 [ 0, %for.body3.lr.ph.i29 ], [ %indvars.iv.next.i, %for.body3.i32 ]
  %22 = add nsw i64 %indvars.iv.i, %21
  %arrayidx.i30 = getelementptr inbounds double, double* %19, i64 %22
  %23 = load double, double* %arrayidx.i30, align 8, !tbaa !75
  %24 = add nuw nsw i64 %indvars.iv.i, %20
  %arrayidx12.i = getelementptr inbounds double, double* %6, i64 %24
  store double %23, double* %arrayidx12.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i31 = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i31, label %for.inc13.i, label %for.body3.i32, !llvm.loop !191

for.inc13.i:                                      ; preds = %for.body3.i32, %for.cond1.preheader.i27
  %indvars.iv.next49 = add nuw nsw i64 %indvars.iv48, 1
  %exitcond37.not.i33 = icmp eq i64 %indvars.iv.next49, %17
  br i1 %exitcond37.not.i33, label %set_block.exit, label %for.cond1.preheader.i27, !llvm.loop !192

set_block.exit:                                   ; preds = %for.inc13.i, %set_identity.exit
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %indvars.iv52
  %arrayidx3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv52
  tail call void @mat_mult(%struct.Matrix* %arrayidx, %struct.Matrix* %0, %struct.Matrix* %arrayidx3)
  %indvars.iv.next53 = add nuw nsw i64 %indvars.iv52, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next53, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.cond1.preheader.lr.ph.i, !llvm.loop !200

for.end:                                          ; preds = %set_block.exit, %entry
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix.exit, label %if.then.i35

if.then.i35:                                      ; preds = %for.end
  tail call void @free(i8* nonnull %call4.i) #31
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i35, %for.end
  tail call void @free(i8* nonnull %call.i) #31
  %25 = bitcast i8* %data.i22 to double**
  %26 = load double*, double** %25, align 8, !tbaa !137
  %cmp.not.i37 = icmp eq double* %26, null
  br i1 %cmp.not.i37, label %delete_matrix.exit39, label %if.then.i38

if.then.i38:                                      ; preds = %delete_matrix.exit
  %27 = bitcast double* %26 to i8*
  tail call void @free(i8* %27) #31
  br label %delete_matrix.exit39

delete_matrix.exit39:                             ; preds = %if.then.i38, %delete_matrix.exit
  tail call void @free(i8* nonnull %call.i18) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @hand_objective(double* noalias nocapture readonly %theta, i32 %bone_count, i8** noalias nocapture readnone %bone_names, i32* noalias nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, %struct.Triangle* noalias nocapture readnone %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* noalias nocapture %err) #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #31
  tail call void @llvm.experimental.noalias.scope.decl(metadata !201)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !204)
  %theta99.i = bitcast double* %theta to i8*
  %add.i = add nsw i32 %bone_count, 3
  %nrows1.i.i = bitcast i8* %call.i to i32*
  %ncols2.i.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i.i to i32*
  %mul3.i.i = mul i32 %add.i, 3
  %cmp.not.i.i = icmp eq i32 %mul3.i.i, 0
  br i1 %cmp.not.i.i, label %resize.exit.fill.exit_crit_edge.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  %data.i.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %cmp8.i.i = icmp sgt i32 %mul3.i.i, 0
  br i1 %cmp8.i.i, label %for.body.lr.ph.i.i, label %resize.exit.thread87.i

resize.exit.thread87.i:                           ; preds = %if.end.i.i
  %2 = bitcast i8* %data.i.i to double**
  store double* null, double** %2, align 8, !tbaa !137, !alias.scope !204, !noalias !201
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !204, !noalias !201
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !204, !noalias !201
  br label %fill.exit.i

resize.exit.fill.exit_crit_edge.i:                ; preds = %entry
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !204, !noalias !201
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !204, !noalias !201
  br label %fill.exit.i

for.body.lr.ph.i.i:                               ; preds = %if.end.i.i
  %conv31.i.i = zext i32 %mul3.i.i to i64
  %mul11.i.i = shl nuw nsw i64 %conv31.i.i, 3
  %call.i.i = tail call noalias i8* @malloc(i64 %mul11.i.i) #31, !noalias !206
  %3 = bitcast i8* %data.i.i to i8**
  store i8* %call.i.i, i8** %3, align 8, !tbaa !137, !alias.scope !204, !noalias !201
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !204, !noalias !201
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !204, !noalias !201
  %4 = bitcast i8* %call.i.i to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i.i, i8 0, i64 %mul11.i.i, i1 false) #31, !noalias !206
  br label %fill.exit.i

fill.exit.i:                                      ; preds = %for.body.lr.ph.i.i, %resize.exit.fill.exit_crit_edge.i, %resize.exit.thread87.i
  %5 = phi double* [ null, %resize.exit.fill.exit_crit_edge.i ], [ %4, %for.body.lr.ph.i.i ], [ null, %resize.exit.thread87.i ]
  %6 = bitcast double* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %6, i8* nonnull align 8 dereferenceable(24) %theta99.i, i64 24, i1 false) #31, !noalias !204
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %fill.exit.i
  %indvars.iv101.i = phi i64 [ 0, %fill.exit.i ], [ %indvars.iv.next102.i, %for.body.i ]
  %7 = add nuw nsw i64 %indvars.iv101.i, 3
  %arrayidx7.i = getelementptr inbounds double, double* %5, i64 %7
  store double 1.000000e+00, double* %arrayidx7.i, align 8, !tbaa !75, !noalias !206
  %arrayidx10.i = getelementptr inbounds double, double* %theta, i64 %7
  %8 = load double, double* %arrayidx10.i, align 8, !tbaa !75, !alias.scope !201, !noalias !204
  %9 = add nuw nsw i64 %indvars.iv101.i, 6
  %arrayidx16.i = getelementptr inbounds double, double* %5, i64 %9
  store double %8, double* %arrayidx16.i, align 8, !tbaa !75, !noalias !206
  %indvars.iv.next102.i = add nuw nsw i64 %indvars.iv101.i, 1
  %exitcond105.not.i = icmp eq i64 %indvars.iv.next102.i, 3
  br i1 %exitcond105.not.i, label %for.cond20.preheader.i, label %for.body.i, !llvm.loop !207

for.cond20.preheader.i:                           ; preds = %for.end45.i, %for.body.i
  %i_finger.094.i = phi i32 [ %inc48.i, %for.end45.i ], [ 0, %for.body.i ]
  %i_pose_params.093.i = phi i32 [ %inc46.i, %for.end45.i ], [ 5, %for.body.i ]
  %i_theta.092.i = phi i32 [ %i_theta.2.i.lcssa, %for.end45.i ], [ 6, %for.body.i ]
  %10 = sext i32 %i_pose_params.093.i to i64
  %11 = add i32 %i_pose_params.093.i, 3
  br label %for.body22.i

for.body22.i:                                     ; preds = %if.end.i, %for.cond20.preheader.i
  %indvars.iv.i = phi i64 [ %10, %for.cond20.preheader.i ], [ %indvars.iv.next.i, %if.end.i ]
  %i.191.i = phi i32 [ 2, %for.cond20.preheader.i ], [ %inc44.i, %if.end.i ]
  %i_theta.189.i = phi i32 [ %i_theta.092.i, %for.cond20.preheader.i ], [ %i_theta.2.i, %if.end.i ]
  %idxprom23.i = sext i32 %i_theta.189.i to i64
  %arrayidx24.i = getelementptr inbounds double, double* %theta, i64 %idxprom23.i
  %12 = load double, double* %arrayidx24.i, align 8, !tbaa !75, !alias.scope !201, !noalias !204
  %13 = mul nsw i64 %indvars.iv.i, 3
  %arrayidx30.i = getelementptr inbounds double, double* %5, i64 %13
  store double %12, double* %arrayidx30.i, align 8, !tbaa !75, !noalias !206
  %inc31.i = add nsw i32 %i_theta.189.i, 1
  %cmp32.i = icmp eq i32 %i.191.i, 2
  br i1 %cmp32.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body22.i
  %idxprom33.i = sext i32 %inc31.i to i64
  %arrayidx34.i = getelementptr inbounds double, double* %theta, i64 %idxprom33.i
  %14 = load double, double* %arrayidx34.i, align 8, !tbaa !75, !alias.scope !201, !noalias !204
  %15 = add nsw i64 %13, 1
  %arrayidx40.i = getelementptr inbounds double, double* %5, i64 %15
  store double %14, double* %arrayidx40.i, align 8, !tbaa !75, !noalias !206
  %inc41.i = add nsw i32 %i_theta.189.i, 2
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body22.i
  %i_theta.2.i = phi i32 [ %inc41.i, %if.then.i ], [ %inc31.i, %for.body22.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, 1
  %inc44.i = add nuw nsw i32 %i.191.i, 1
  %lftr.wideiv1 = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %11, %lftr.wideiv1
  br i1 %exitcond, label %for.end45.i, label %for.body22.i, !llvm.loop !208

for.end45.i:                                      ; preds = %if.end.i
  %i_theta.2.i.lcssa = phi i32 [ %i_theta.2.i, %if.end.i ]
  %indvars.iv.i.lcssa = phi i64 [ %indvars.iv.i, %if.end.i ]
  %16 = trunc i64 %indvars.iv.i.lcssa to i32
  %inc46.i = add nsw i32 %16, 2
  %inc48.i = add nuw nsw i32 %i_finger.094.i, 1
  %exitcond98.not.i = icmp eq i32 %inc48.i, 5
  br i1 %exitcond98.not.i, label %to_pose_params.exit, label %for.cond20.preheader.i, !llvm.loop !209

to_pose_params.exit:                              ; preds = %for.end45.i
  %call.i39 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %17 = bitcast i8* %call.i39 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i39, i8 0, i64 16, i1 false) #31
  tail call fastcc void @_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* %0, %struct.Matrix* %17)
  %cmp49 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp49, label %for.cond2.preheader.lr.ph, label %if.then.i41

for.cond2.preheader.lr.ph:                        ; preds = %to_pose_params.exit
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 2
  %18 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 0
  %19 = load i32, i32* %nrows, align 8, !tbaa !138
  %data5 = getelementptr inbounds i8, i8* %call.i39, i64 8
  %20 = bitcast i8* %data5 to double**
  %21 = load double*, double** %20, align 8, !tbaa !137
  %nrows8 = bitcast i8* %call.i39 to i32*
  %22 = load i32, i32* %nrows8, align 8, !tbaa !138
  %23 = sext i32 %19 to i64
  %wide.trip.count = zext i32 %corresp_count to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc17, %for.cond2.preheader.lr.ph
  %indvars.iv54 = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %indvars.iv.next55, %for.inc17 ]
  %24 = mul nsw i64 %indvars.iv54, %23
  %arrayidx7 = getelementptr inbounds i32, i32* %correspondences, i64 %indvars.iv54
  %25 = load i32, i32* %arrayidx7, align 4, !tbaa !59
  %mul9 = mul nsw i32 %22, %25
  %26 = mul nuw nsw i64 %indvars.iv54, 3
  %27 = sext i32 %mul9 to i64
  br label %for.body4

for.body4:                                        ; preds = %for.body4, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body4 ]
  %28 = add nsw i64 %24, %indvars.iv
  %arrayidx = getelementptr inbounds double, double* %18, i64 %28
  %29 = load double, double* %arrayidx, align 8, !tbaa !75
  %30 = add nsw i64 %indvars.iv, %27
  %arrayidx12 = getelementptr inbounds double, double* %21, i64 %30
  %31 = load double, double* %arrayidx12, align 8, !tbaa !75
  %sub = fsub fast double %29, %31
  %32 = add nuw nsw i64 %indvars.iv, %26
  %arrayidx16 = getelementptr inbounds double, double* %err, i64 %32
  store double %sub, double* %arrayidx16, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.inc17, label %for.body4, !llvm.loop !210

for.inc17:                                        ; preds = %for.body4
  %indvars.iv.next55 = add nuw nsw i64 %indvars.iv54, 1
  %exitcond58.not = icmp eq i64 %indvars.iv.next55, %wide.trip.count
  br i1 %exitcond58.not, label %for.end19, label %for.cond2.preheader, !llvm.loop !211

for.end19:                                        ; preds = %for.inc17
  %cmp.not.i = icmp eq double* %5, null
  br i1 %cmp.not.i, label %delete_matrix.exit, label %if.then.i41

if.then.i41:                                      ; preds = %for.end19, %to_pose_params.exit
  tail call void @free(i8* %6) #31
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i41, %for.end19
  tail call void @free(i8* %call.i) #31
  %data.i43 = getelementptr inbounds i8, i8* %call.i39, i64 8
  %33 = bitcast i8* %data.i43 to double**
  %34 = load double*, double** %33, align 8, !tbaa !137
  %cmp.not.i44 = icmp eq double* %34, null
  br i1 %cmp.not.i44, label %delete_matrix.exit47, label %if.then.i45

if.then.i45:                                      ; preds = %delete_matrix.exit
  %35 = bitcast double* %34 to i8*
  tail call void @free(i8* %35) #31
  br label %delete_matrix.exit47

delete_matrix.exit47:                             ; preds = %if.then.i45, %delete_matrix.exit
  tail call void @free(i8* nonnull %call.i39) #31
  ret void
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define internal fastcc void @_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* noalias nocapture %positions) unnamed_addr #18 {
entry:
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #31
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %call.i9 = tail call noalias i8* @malloc(i64 %mul.i) #31
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %0 = zext i32 %bone_count to i64
  %1 = shl nuw nsw i64 %0, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %1, i1 false) #31
  %call.i359 = tail call noalias i8* @malloc(i64 %mul.i) #31
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i359, i8 0, i64 %1, i1 false) #31
  %call.i963 = tail call noalias i8* @malloc(i64 %mul.i) #31
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i963, i8 0, i64 %1, i1 false) #31
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %2 = bitcast i8* %call.i to %struct.Matrix*
  %3 = bitcast i8* %call.i36064 to %struct.Matrix*
  %4 = bitcast i8* %call.i966 to %struct.Matrix*
  tail call void @get_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %2)
  tail call void @relatives_to_absolutes(i32 %bone_count, %struct.Matrix* %2, i32* %parents, %struct.Matrix* %3)
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv99 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next100, %for.body ]
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %indvars.iv99
  %arrayidx4 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %indvars.iv99
  %arrayidx6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv99
  tail call void @mat_mult(%struct.Matrix* %arrayidx, %struct.Matrix* %arrayidx4, %struct.Matrix* %arrayidx6)
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %exitcond102.not = icmp eq i64 %indvars.iv.next100, %wide.trip.count101
  br i1 %exitcond102.not, label %for.end, label %for.body, !llvm.loop !212

for.end:                                          ; preds = %for.body, %get_matrix_array.exit12
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %5 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %6 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %7 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i13 = mul nsw i32 %7, %6
  %mul3.i = mul i32 %5, 3
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %8 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %8, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  %9 = bitcast double* %8 to i8*
  tail call void @free(i8* %9) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread69

resize.exit.thread:                               ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i14 = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %10 = bitcast double** %data.i to i8**
  store i8* %call.i14, i8** %10, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize.exit.thread69:                             ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill.exit

resize.exit:                                      ; preds = %for.end
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %data.i15.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %11 = bitcast double** %data.i15.phi.trans.insert to i8**
  %.pre105 = load i8*, i8** %11, align 8, !tbaa !137
  %.pre103 = zext i32 %mul3.i to i64
  %.pre104 = shl nuw nsw i64 %.pre103, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre104, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %12 = phi i8* [ %.pre105, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %call.i14, %resize.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 %.pre-phi, i1 false)
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread69
  %call.i16 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %13 = bitcast i8* %call.i16 to %struct.Matrix*
  %nrows1.i17 = bitcast i8* %call.i16 to i32*
  store i32 4, i32* %nrows1.i17, align 8, !tbaa !138
  %ncols2.i18 = getelementptr inbounds i8, i8* %call.i16, i64 4
  %14 = bitcast i8* %ncols2.i18 to i32*
  store i32 %5, i32* %14, align 4, !tbaa !139
  %mul.i19 = shl nsw i32 %5, 2
  %conv.i20 = sext i32 %mul.i19 to i64
  %mul3.i21 = shl nsw i64 %conv.i20, 3
  %call4.i = tail call noalias i8* @malloc(i64 %mul3.i21) #31
  %data.i22 = getelementptr inbounds i8, i8* %call.i16, i64 8
  %15 = bitcast i8* %data.i22 to i8**
  store i8* %call4.i, i8** %15, align 8, !tbaa !137
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %5, 0
  %16 = bitcast i8* %data.i22 to double**
  %data23 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 2
  %nrows24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 0
  %data30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count97 = zext i32 %bone_count to i64
  %wide.trip.count93 = zext i32 %5 to i64
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %indvars.iv95 = phi i64 [ 0, %for.body11.lr.ph ], [ %indvars.iv.next96, %for.inc43 ]
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv95
  tail call void @mat_mult(%struct.Matrix* %arrayidx13, %struct.Matrix* %base_positions, %struct.Matrix* %13)
  br i1 %cmp1674, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %17 = load double*, double** %16, align 8, !tbaa !137
  %18 = load i32, i32* %nrows1.i17, align 8, !tbaa !138
  %19 = load double*, double** %data23, align 8, !tbaa !137
  %20 = load i32, i32* %nrows24, align 8, !tbaa !138
  %21 = load double*, double** %data30, align 8, !tbaa !137
  %22 = sext i32 %18 to i64
  %23 = sext i32 %20 to i64
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %indvars.iv87 = phi i64 [ 0, %for.cond18.preheader.lr.ph ], [ %indvars.iv.next88, %for.inc40 ]
  %24 = mul nsw i64 %indvars.iv87, %22
  %25 = mul nsw i64 %indvars.iv87, %23
  %26 = add nsw i64 %25, %indvars.iv95
  %arrayidx28 = getelementptr inbounds double, double* %19, i64 %26
  %27 = mul nuw nsw i64 %indvars.iv87, 3
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %indvars.iv82 = phi i64 [ 0, %for.cond18.preheader ], [ %indvars.iv.next83, %for.body20 ]
  %28 = add nsw i64 %24, %indvars.iv82
  %arrayidx22 = getelementptr inbounds double, double* %17, i64 %28
  %29 = load double, double* %arrayidx22, align 8, !tbaa !75
  %30 = load double, double* %arrayidx28, align 8, !tbaa !75
  %mul29 = fmul fast double %30, %29
  %31 = add nuw nsw i64 %indvars.iv82, %27
  %arrayidx35 = getelementptr inbounds double, double* %21, i64 %31
  %32 = load double, double* %arrayidx35, align 8, !tbaa !75
  %add36 = fadd fast double %32, %mul29
  store double %add36, double* %arrayidx35, align 8, !tbaa !75
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %exitcond86.not = icmp eq i64 %indvars.iv.next83, 3
  br i1 %exitcond86.not, label %for.inc40, label %for.body20, !llvm.loop !213

for.inc40:                                        ; preds = %for.body20
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv87, 1
  %exitcond94.not = icmp eq i64 %indvars.iv.next88, %wide.trip.count93
  br i1 %exitcond94.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !214

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %indvars.iv.next96 = add nuw nsw i64 %indvars.iv95, 1
  %exitcond98.not = icmp eq i64 %indvars.iv.next96, %wide.trip.count97
  br i1 %exitcond98.not, label %for.end45, label %for.body11, !llvm.loop !215

for.end45:                                        ; preds = %for.inc43, %fill.exit
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %5, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %data50 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %33 = load double*, double** %data50, align 8, !tbaa !137
  %wide.trip.count = zext i32 %5 to i64
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body49.lr.ph ], [ %indvars.iv.next, %for.body49 ]
  %34 = mul nuw nsw i64 %indvars.iv, 3
  %arrayidx55 = getelementptr inbounds double, double* %33, i64 %34
  %35 = load double, double* %arrayidx55, align 8, !tbaa !75
  %mul56 = fneg fast double %35
  store double %mul56, double* %arrayidx55, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.then61, label %for.body49, !llvm.loop !216

if.then61:                                        ; preds = %for.body49, %for.end45
  tail call void @apply_global_transform(%struct.Matrix* %pose_params, %struct.Matrix* %positions)
  %36 = bitcast i8* %data.i22 to double**
  %37 = load double*, double** %36, align 8, !tbaa !137
  %cmp.not.i24 = icmp eq double* %37, null
  br i1 %cmp.not.i24, label %delete_matrix.exit, label %if.then.i25

if.then.i25:                                      ; preds = %if.then61
  %38 = bitcast double* %37 to i8*
  tail call void @free(i8* %38) #31
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i25, %if.then61
  tail call void @free(i8* nonnull %call.i16) #31
  br i1 %cmp15.i, label %for.body.preheader.i28, label %delete_light_matrix_array.exit46.thread

for.body.preheader.i28:                           ; preds = %delete_matrix.exit
  %wide.trip.count.i27 = zext i32 %bone_count to i64
  br label %for.body.i31

for.body.i31:                                     ; preds = %for.inc.i, %for.body.preheader.i28
  %indvars.iv.i29 = phi i64 [ 0, %for.body.preheader.i28 ], [ %indvars.iv.next.i33, %for.inc.i ]
  %data.i30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %2, i64 %indvars.iv.i29, i32 2
  %39 = load double*, double** %data.i30, align 8, !tbaa !137
  %cmp1.not.i = icmp eq double* %39, null
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i32

if.then.i32:                                      ; preds = %for.body.i31
  %40 = bitcast double* %39 to i8*
  tail call void @free(i8* %40) #31
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i32, %for.body.i31
  %indvars.iv.next.i33 = add nuw nsw i64 %indvars.iv.i29, 1
  %exitcond.not.i34 = icmp eq i64 %indvars.iv.next.i33, %wide.trip.count.i27
  br i1 %exitcond.not.i34, label %for.body.preheader.i37, label %for.body.i31, !llvm.loop !184

for.body.preheader.i37:                           ; preds = %for.inc.i
  tail call void @free(i8* nonnull %call.i) #31
  br label %for.body.i41

for.body.i41:                                     ; preds = %for.inc.i45, %for.body.preheader.i37
  %indvars.iv.i38 = phi i64 [ 0, %for.body.preheader.i37 ], [ %indvars.iv.next.i43, %for.inc.i45 ]
  %data.i39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %indvars.iv.i38, i32 2
  %41 = load double*, double** %data.i39, align 8, !tbaa !137
  %cmp1.not.i40 = icmp eq double* %41, null
  br i1 %cmp1.not.i40, label %for.inc.i45, label %if.then.i42

if.then.i42:                                      ; preds = %for.body.i41
  %42 = bitcast double* %41 to i8*
  tail call void @free(i8* %42) #31
  br label %for.inc.i45

for.inc.i45:                                      ; preds = %if.then.i42, %for.body.i41
  %indvars.iv.next.i43 = add nuw nsw i64 %indvars.iv.i38, 1
  %exitcond.not.i44 = icmp eq i64 %indvars.iv.next.i43, %wide.trip.count.i27
  br i1 %exitcond.not.i44, label %for.body.preheader.i49, label %for.body.i41, !llvm.loop !184

delete_light_matrix_array.exit46.thread:          ; preds = %delete_matrix.exit
  tail call void @free(i8* %call.i) #31
  tail call void @free(i8* %call.i36064) #31
  br label %delete_light_matrix_array.exit58

for.body.preheader.i49:                           ; preds = %for.inc.i45
  tail call void @free(i8* nonnull %call.i36064) #31
  br label %for.body.i53

for.body.i53:                                     ; preds = %for.inc.i57, %for.body.preheader.i49
  %indvars.iv.i50 = phi i64 [ 0, %for.body.preheader.i49 ], [ %indvars.iv.next.i55, %for.inc.i57 ]
  %data.i51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv.i50, i32 2
  %43 = load double*, double** %data.i51, align 8, !tbaa !137
  %cmp1.not.i52 = icmp eq double* %43, null
  br i1 %cmp1.not.i52, label %for.inc.i57, label %if.then.i54

if.then.i54:                                      ; preds = %for.body.i53
  %44 = bitcast double* %43 to i8*
  tail call void @free(i8* %44) #31
  br label %for.inc.i57

for.inc.i57:                                      ; preds = %if.then.i54, %for.body.i53
  %indvars.iv.next.i55 = add nuw nsw i64 %indvars.iv.i50, 1
  %exitcond.not.i56 = icmp eq i64 %indvars.iv.next.i55, %wide.trip.count.i27
  br i1 %exitcond.not.i56, label %delete_light_matrix_array.exit58, label %for.body.i53, !llvm.loop !184

delete_light_matrix_array.exit58:                 ; preds = %for.inc.i57, %delete_light_matrix_array.exit46.thread
  tail call void @free(i8* %call.i966) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @hand_objective_complicated(double* nocapture readonly %theta, double* nocapture readonly %us, i32 %bone_count, i8** nocapture readnone %bone_names, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix* nocapture readonly %weights, %struct.Triangle* nocapture readonly %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* nocapture %err) #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #31
  tail call void @llvm.experimental.noalias.scope.decl(metadata !217)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !220)
  %theta99.i = bitcast double* %theta to i8*
  %add.i = add nsw i32 %bone_count, 3
  %nrows1.i.i = bitcast i8* %call.i to i32*
  %ncols2.i.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i.i to i32*
  %mul3.i.i = mul i32 %add.i, 3
  %cmp.not.i.i = icmp eq i32 %mul3.i.i, 0
  br i1 %cmp.not.i.i, label %resize.exit.fill.exit_crit_edge.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  %data.i.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %cmp8.i.i = icmp sgt i32 %mul3.i.i, 0
  br i1 %cmp8.i.i, label %for.body.lr.ph.i.i, label %resize.exit.thread87.i

resize.exit.thread87.i:                           ; preds = %if.end.i.i
  %2 = bitcast i8* %data.i.i to double**
  store double* null, double** %2, align 8, !tbaa !137, !alias.scope !220, !noalias !217
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !220, !noalias !217
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !220, !noalias !217
  br label %fill.exit.i

resize.exit.fill.exit_crit_edge.i:                ; preds = %entry
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !220, !noalias !217
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !220, !noalias !217
  br label %fill.exit.i

for.body.lr.ph.i.i:                               ; preds = %if.end.i.i
  %conv31.i.i = zext i32 %mul3.i.i to i64
  %mul11.i.i = shl nuw nsw i64 %conv31.i.i, 3
  %call.i.i = tail call noalias i8* @malloc(i64 %mul11.i.i) #31, !noalias !222
  %3 = bitcast i8* %data.i.i to i8**
  store i8* %call.i.i, i8** %3, align 8, !tbaa !137, !alias.scope !220, !noalias !217
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !220, !noalias !217
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !220, !noalias !217
  %4 = bitcast i8* %call.i.i to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i.i, i8 0, i64 %mul11.i.i, i1 false) #31, !noalias !222
  br label %fill.exit.i

fill.exit.i:                                      ; preds = %for.body.lr.ph.i.i, %resize.exit.fill.exit_crit_edge.i, %resize.exit.thread87.i
  %5 = phi double* [ null, %resize.exit.fill.exit_crit_edge.i ], [ %4, %for.body.lr.ph.i.i ], [ null, %resize.exit.thread87.i ]
  %6 = bitcast double* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %6, i8* nonnull align 8 dereferenceable(24) %theta99.i, i64 24, i1 false) #31, !noalias !220
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %fill.exit.i
  %indvars.iv101.i = phi i64 [ 0, %fill.exit.i ], [ %indvars.iv.next102.i, %for.body.i ]
  %7 = add nuw nsw i64 %indvars.iv101.i, 3
  %arrayidx7.i = getelementptr inbounds double, double* %5, i64 %7
  store double 1.000000e+00, double* %arrayidx7.i, align 8, !tbaa !75, !noalias !222
  %arrayidx10.i = getelementptr inbounds double, double* %theta, i64 %7
  %8 = load double, double* %arrayidx10.i, align 8, !tbaa !75, !alias.scope !217, !noalias !220
  %9 = add nuw nsw i64 %indvars.iv101.i, 6
  %arrayidx16.i = getelementptr inbounds double, double* %5, i64 %9
  store double %8, double* %arrayidx16.i, align 8, !tbaa !75, !noalias !222
  %indvars.iv.next102.i = add nuw nsw i64 %indvars.iv101.i, 1
  %exitcond105.not.i = icmp eq i64 %indvars.iv.next102.i, 3
  br i1 %exitcond105.not.i, label %for.cond20.preheader.i, label %for.body.i, !llvm.loop !207

for.cond20.preheader.i:                           ; preds = %for.end45.i, %for.body.i
  %i_finger.094.i = phi i32 [ %inc48.i, %for.end45.i ], [ 0, %for.body.i ]
  %i_pose_params.093.i = phi i32 [ %inc46.i, %for.end45.i ], [ 5, %for.body.i ]
  %i_theta.092.i = phi i32 [ %i_theta.2.i.lcssa, %for.end45.i ], [ 6, %for.body.i ]
  %10 = sext i32 %i_pose_params.093.i to i64
  %11 = add i32 %i_pose_params.093.i, 3
  br label %for.body22.i

for.body22.i:                                     ; preds = %if.end.i, %for.cond20.preheader.i
  %indvars.iv.i = phi i64 [ %10, %for.cond20.preheader.i ], [ %indvars.iv.next.i, %if.end.i ]
  %i.191.i = phi i32 [ 2, %for.cond20.preheader.i ], [ %inc44.i, %if.end.i ]
  %i_theta.189.i = phi i32 [ %i_theta.092.i, %for.cond20.preheader.i ], [ %i_theta.2.i, %if.end.i ]
  %idxprom23.i = sext i32 %i_theta.189.i to i64
  %arrayidx24.i = getelementptr inbounds double, double* %theta, i64 %idxprom23.i
  %12 = load double, double* %arrayidx24.i, align 8, !tbaa !75, !alias.scope !217, !noalias !220
  %13 = mul nsw i64 %indvars.iv.i, 3
  %arrayidx30.i = getelementptr inbounds double, double* %5, i64 %13
  store double %12, double* %arrayidx30.i, align 8, !tbaa !75, !noalias !222
  %inc31.i = add nsw i32 %i_theta.189.i, 1
  %cmp32.i = icmp eq i32 %i.191.i, 2
  br i1 %cmp32.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body22.i
  %idxprom33.i = sext i32 %inc31.i to i64
  %arrayidx34.i = getelementptr inbounds double, double* %theta, i64 %idxprom33.i
  %14 = load double, double* %arrayidx34.i, align 8, !tbaa !75, !alias.scope !217, !noalias !220
  %15 = add nsw i64 %13, 1
  %arrayidx40.i = getelementptr inbounds double, double* %5, i64 %15
  store double %14, double* %arrayidx40.i, align 8, !tbaa !75, !noalias !222
  %inc41.i = add nsw i32 %i_theta.189.i, 2
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body22.i
  %i_theta.2.i = phi i32 [ %inc41.i, %if.then.i ], [ %inc31.i, %for.body22.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, 1
  %inc44.i = add nuw nsw i32 %i.191.i, 1
  %lftr.wideiv1 = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %11, %lftr.wideiv1
  br i1 %exitcond, label %for.end45.i, label %for.body22.i, !llvm.loop !208

for.end45.i:                                      ; preds = %if.end.i
  %i_theta.2.i.lcssa = phi i32 [ %i_theta.2.i, %if.end.i ]
  %indvars.iv.i.lcssa = phi i64 [ %indvars.iv.i, %if.end.i ]
  %16 = trunc i64 %indvars.iv.i.lcssa to i32
  %inc46.i = add nsw i32 %16, 2
  %inc48.i = add nuw nsw i32 %i_finger.094.i, 1
  %exitcond98.not.i = icmp eq i32 %inc48.i, 5
  br i1 %exitcond98.not.i, label %to_pose_params.exit, label %for.cond20.preheader.i, !llvm.loop !209

to_pose_params.exit:                              ; preds = %for.end45.i
  %call.i84 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %17 = bitcast i8* %call.i84 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i84, i8 0, i64 16, i1 false) #31
  tail call fastcc void @_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* %0, %struct.Matrix* %17)
  %cmp89 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp89, label %for.body.lr.ph, label %for.end51

for.body.lr.ph:                                   ; preds = %to_pose_params.exit
  %data = getelementptr inbounds i8, i8* %call.i84, i64 8
  %18 = bitcast i8* %data to double**
  %19 = load double*, double** %18, align 8, !tbaa !137
  %nrows = bitcast i8* %call.i84 to i32*
  %20 = load i32, i32* %nrows, align 8, !tbaa !138
  %data38 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 2
  %21 = load double*, double** %data38, align 8, !tbaa !137
  %nrows39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 0
  %22 = load i32, i32* %nrows39, align 8, !tbaa !138
  %23 = sext i32 %22 to i64
  %wide.trip.count = zext i32 %corresp_count to i64
  br label %for.body

for.body:                                         ; preds = %for.end, %for.body.lr.ph
  %indvars.iv96 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next97, %for.end ]
  %arrayidx = getelementptr inbounds i32, i32* %correspondences, i64 %indvars.iv96
  %24 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %idxprom2 = sext i32 %24 to i64
  %arraydecay = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 0
  %25 = shl nuw nsw i64 %indvars.iv96, 1
  %arrayidx6 = getelementptr inbounds double, double* %us, i64 %25
  %26 = load i32, i32* %arraydecay, align 4, !tbaa !59
  %mul12 = mul nsw i32 %20, %26
  %arrayidx16 = getelementptr inbounds double, double* %arrayidx6, i64 1
  %arrayidx18 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 1
  %27 = load i32, i32* %arrayidx18, align 4, !tbaa !59
  %mul20 = mul nsw i32 %27, %20
  %arrayidx30 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 2
  %28 = load i32, i32* %arrayidx30, align 4, !tbaa !59
  %mul32 = mul nsw i32 %28, %20
  %29 = mul nsw i64 %indvars.iv96, %23
  %30 = mul nuw nsw i64 %indvars.iv96, 3
  %31 = sext i32 %mul12 to i64
  %32 = sext i32 %mul20 to i64
  %33 = sext i32 %mul32 to i64
  br label %for.body9

for.body9:                                        ; preds = %for.body9, %for.body
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next, %for.body9 ]
  %34 = load double, double* %arrayidx6, align 8, !tbaa !75
  %35 = add nsw i64 %indvars.iv, %31
  %arrayidx14 = getelementptr inbounds double, double* %19, i64 %35
  %36 = load double, double* %arrayidx14, align 8, !tbaa !75
  %37 = load double, double* %arrayidx16, align 8, !tbaa !75
  %38 = add nsw i64 %indvars.iv, %32
  %arrayidx23 = getelementptr inbounds double, double* %19, i64 %38
  %39 = load double, double* %arrayidx23, align 8, !tbaa !75
  %40 = fadd fast double %34, %37
  %sub28 = fsub fast double 1.000000e+00, %40
  %41 = add nsw i64 %indvars.iv, %33
  %arrayidx35 = getelementptr inbounds double, double* %19, i64 %41
  %42 = load double, double* %arrayidx35, align 8, !tbaa !75
  %43 = add nsw i64 %29, %indvars.iv
  %arrayidx43 = getelementptr inbounds double, double* %21, i64 %43
  %44 = load double, double* %arrayidx43, align 8, !tbaa !75
  %mul15.neg = fmul fast double %36, %34
  %mul24.neg = fmul fast double %39, %37
  %mul36.neg = fmul fast double %42, %sub28
  %reass.add = fadd fast double %mul24.neg, %mul15.neg
  %reass.add87 = fadd fast double %reass.add, %mul36.neg
  %sub44 = fsub fast double %44, %reass.add87
  %45 = add nuw nsw i64 %indvars.iv, %30
  %arrayidx48 = getelementptr inbounds double, double* %err, i64 %45
  store double %sub44, double* %arrayidx48, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.end, label %for.body9, !llvm.loop !223

for.end:                                          ; preds = %for.body9
  %indvars.iv.next97 = add nuw nsw i64 %indvars.iv96, 1
  %exitcond101.not = icmp eq i64 %indvars.iv.next97, %wide.trip.count
  br i1 %exitcond101.not, label %for.end51, label %for.body, !llvm.loop !224

for.end51:                                        ; preds = %for.end, %to_pose_params.exit
  ret void
}

; Function Attrs: nounwind
declare dso_local void @__enzyme_autodiff(...) local_unnamed_addr #6

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @dhand_objective_complicated(double* %theta, double* %dtheta, double* %us, double* %dus, i32 %bone_count, i8** %bone_names, i32* %parents, %struct.Matrix* %base_relatives, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, %struct.Triangle* %triangles, i32 %is_mirrored, i32 %corresp_count, i32* %correspondences, %struct.Matrix* %points, double* %err, double* %derr) local_unnamed_addr #5 {
entry:
  call void @diffehand_objective_complicated(double* %theta, double* %dtheta, double* %us, double* %dus, i32 %bone_count, i8** %bone_names, i32* %parents, %struct.Matrix* %base_relatives, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, %struct.Triangle* %triangles, i32 %is_mirrored, i32 %corresp_count, i32* %correspondences, %struct.Matrix* %points, double* %err, double* %derr)
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_new_matrix_b(i32 %nrows, i32 %ncols, %struct.Matrix_diff* nocapture readnone %get_new_matrixb) local_unnamed_addr #5 {
entry:
  %call = tail call noalias dereferenceable_or_null(8) i8* @malloc(i64 8) #31
  %data = bitcast i8* %call to double**
  store double* null, double** %data, align 8, !tbaa !225
  %call1 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  tail call void @pushPointer8(i8* null) #31
  %mul = mul i32 %ncols, %nrows
  %conv = sext i32 %mul to i64
  %mul3 = shl nsw i64 %conv, 3
  %call4 = tail call noalias i8* @malloc(i64 %mul3) #31
  %0 = bitcast i8* %call to i8**
  store i8* %call4, i8** %0, align 8, !tbaa !225
  %cmp39 = icmp sgt i32 %mul, 0
  br i1 %cmp39, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %1 = zext i32 %mul to i64
  %2 = shl nuw nsw i64 %1, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %call4, i8 0, i64 %2, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.lr.ph, %entry
  %data8 = getelementptr inbounds i8, i8* %call1, i64 8
  %3 = bitcast i8* %data8 to i8**
  tail call void @pushPointer8(i8* undef) #31
  %call12 = tail call noalias i8* @malloc(i64 %mul3) #31
  store i8* %call12, i8** %3, align 8, !tbaa !137
  tail call void @free(i8* %call12) #31
  tail call void @popPointer8(i8** nonnull %3) #31
  tail call void @free(i8* %call4) #31
  tail call void @popPointer8(i8** nonnull %0) #31
  tail call void @free(i8* %call1) #31
  tail call void @free(i8* nonnull %call) #31
  ret void
}

declare dso_local void @pushPointer8(i8*) local_unnamed_addr #3

declare dso_local void @popPointer8(i8**) local_unnamed_addr #3

; Function Attrs: nofree nounwind uwtable willreturn mustprogress
define dso_local noalias %struct.Matrix* @get_new_matrix_c(i32 %nrows, i32 %ncols) local_unnamed_addr #13 {
entry:
  %call = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call to %struct.Matrix*
  %nrows1 = bitcast i8* %call to i32*
  store i32 %nrows, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds i8, i8* %call, i64 4
  %1 = bitcast i8* %ncols2 to i32*
  store i32 %ncols, i32* %1, align 4, !tbaa !139
  %mul = mul nsw i32 %ncols, %nrows
  %conv = sext i32 %mul to i64
  %mul3 = shl nsw i64 %conv, 3
  %call4 = tail call noalias i8* @malloc(i64 %mul3) #31
  %data = getelementptr inbounds i8, i8* %call, i64 8
  %2 = bitcast i8* %data to i8**
  store i8* %call4, i8** %2, align 8, !tbaa !137
  ret %struct.Matrix* %0
}

; Function Attrs: norecurse nounwind readnone uwtable willreturn mustprogress
define dso_local void @get_new_empty_matrix_b(%struct.Matrix_diff* nocapture %get_new_empty_matrixb) local_unnamed_addr #19 {
entry:
  ret void
}

; Function Attrs: nofree nounwind uwtable willreturn mustprogress
define dso_local noalias %struct.Matrix* @get_new_empty_matrix_c() local_unnamed_addr #13 {
entry:
  %call = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call to %struct.Matrix*
  call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call, i8 0, i64 16, i1 false)
  ret %struct.Matrix* %0
}

; Function Attrs: norecurse nounwind readnone uwtable willreturn mustprogress
define dso_local void @delete_matrix_b(%struct.Matrix* nocapture %mat, %struct.Matrix_diff* nocapture %matb) local_unnamed_addr #19 {
entry:
  ret void
}

; Function Attrs: nounwind uwtable willreturn mustprogress
define dso_local void @delete_matrix_c(%struct.Matrix* nocapture %mat) local_unnamed_addr #15 {
entry:
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %0 = load double*, double** %data, align 8, !tbaa !137
  %cmp.not = icmp eq double* %0, null
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %1 = bitcast double* %0 to i8*
  tail call void @free(i8* %1) #31
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %2 = bitcast %struct.Matrix* %mat to i8*
  tail call void @free(i8* %2) #31
  ret void
}

; Function Attrs: norecurse nounwind readnone uwtable willreturn mustprogress
define dso_local void @get_matrix_array_b(i32 %count, %struct.Matrix_diff* nocapture %get_matrix_arrayb) local_unnamed_addr #19 {
entry:
  ret void
}

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local noalias %struct.Matrix* @get_matrix_array_c(i32 %count) local_unnamed_addr #9 {
entry:
  %conv = sext i32 %count to i64
  %mul = shl nsw i64 %conv, 4
  %call = tail call noalias i8* @malloc(i64 %mul) #31
  %cmp20 = icmp sgt i32 %count, 0
  br i1 %cmp20, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %0 = zext i32 %count to i64
  %1 = shl nuw nsw i64 %0, 4
  call void @llvm.memset.p0i8.i64(i8* align 8 %call, i8 0, i64 %1, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.preheader, %entry
  %2 = bitcast i8* %call to %struct.Matrix*
  ret %struct.Matrix* %2
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @delete_light_matrix_array_b(%struct.Matrix* %matricies, %struct.Matrix_diff* %matriciesb, i32 %count) local_unnamed_addr #5 {
entry:
  %matricies.addr = alloca %struct.Matrix*, align 8
  %matriciesb.addr = alloca %struct.Matrix_diff*, align 8
  store %struct.Matrix* %matricies, %struct.Matrix** %matricies.addr, align 8, !tbaa !60
  store %struct.Matrix_diff* %matriciesb, %struct.Matrix_diff** %matriciesb.addr, align 8, !tbaa !60
  %0 = bitcast %struct.Matrix_diff* %matriciesb to i8*
  tail call void @pushPointer8(i8* %0) #31
  %1 = bitcast %struct.Matrix** %matricies.addr to i8**
  %.cast = bitcast %struct.Matrix* %matricies to i8*
  tail call void @pushPointer8(i8* %.cast) #31
  call void @popPointer8(i8** nonnull %1) #31
  %2 = bitcast %struct.Matrix_diff** %matriciesb.addr to i8**
  call void @popPointer8(i8** nonnull %2) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @delete_light_matrix_array_c(%struct.Matrix* nocapture %matricies, i32 %count) local_unnamed_addr #5 {
entry:
  %cmp11 = icmp sgt i32 %count, 0
  br i1 %cmp11, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %matricies, i64 %indvars.iv, i32 2
  %0 = bitcast double** %data to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !137
  %cmp1.not = icmp eq i8* %1, null
  br i1 %cmp1.not, label %for.inc, label %if.then

if.then:                                          ; preds = %for.body
  tail call void @free(i8* nonnull %1) #31
  br label %for.inc

for.inc:                                          ; preds = %if.then, %for.body
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !227

for.end:                                          ; preds = %for.inc, %entry
  %2 = bitcast %struct.Matrix* %matricies to i8*
  tail call void @free(i8* %2) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @resize_b(%struct.Matrix* %mat, %struct.Matrix_diff* %matb, i32 %nrows, i32 %ncols) local_unnamed_addr #5 {
entry:
  %chunklength = alloca i32, align 4
  %diffchunkold = alloca i8*, align 8
  %chunkold = alloca i8*, align 8
  %branch = alloca i32, align 4
  %0 = bitcast i32* %chunklength to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #31
  %1 = bitcast i8** %diffchunkold to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #31
  %2 = bitcast i8** %chunkold to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #31
  %3 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #31
  %nrows1 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %4 = load i32, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %5 = load i32, i32* %ncols2, align 4, !tbaa !139
  %mul = mul nsw i32 %5, %4
  %mul3 = mul i32 %ncols, %nrows
  %cmp.not = icmp eq i32 %mul, %mul3
  br i1 %cmp.not, label %if.end46, label %if.then

if.then:                                          ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %6 = bitcast double** %data to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !137
  %cmp4.not = icmp eq i8* %7, null
  br i1 %cmp4.not, label %if.end, label %if.then5

if.then5:                                         ; preds = %if.then
  %8 = bitcast %struct.Matrix_diff* %matb to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !225
  tail call void @pushPointer8(i8* %9) #31
  %10 = load i8*, i8** %8, align 8, !tbaa !225
  tail call void @free(i8* %10) #31
  %11 = load i8*, i8** %6, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %11) #31
  %12 = load i8*, i8** %6, align 8, !tbaa !137
  tail call void @free(i8* %12) #31
  tail call void @pushInteger4(i32 undef) #31
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  %.sink = phi i32 [ 0, %if.then5 ], [ 1, %if.then ]
  tail call void @pushControl1b(i32 %.sink) #31
  %cmp11 = icmp sgt i32 %mul3, 0
  br i1 %cmp11, label %if.then12, label %if.else30

if.then12:                                        ; preds = %if.end
  %13 = bitcast %struct.Matrix_diff* %matb to i8**
  %14 = load i8*, i8** %13, align 8, !tbaa !225
  tail call void @pushPointer8(i8* %14) #31
  %conv77 = zext i32 %mul3 to i64
  %mul15 = shl nuw nsw i64 %conv77, 3
  %call = tail call noalias i8* @malloc(i64 %mul15) #31
  store i8* %call, i8** %13, align 8, !tbaa !225
  call void @llvm.memset.p0i8.i64(i8* align 8 %call, i8 0, i64 %mul15, i1 false)
  %15 = load i8*, i8** %6, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %15) #31
  %call24 = tail call noalias i8* @malloc(i64 %mul15) #31
  store i8* %call24, i8** %6, align 8, !tbaa !137
  tail call void @free(i8* %call24) #31
  tail call void @popPointer8(i8** nonnull %6) #31
  %16 = load i8*, i8** %13, align 8, !tbaa !225
  tail call void @free(i8* %16) #31
  br label %if.end34

if.else30:                                        ; preds = %if.end
  %data31 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %matb, i64 0, i32 0
  %17 = bitcast %struct.Matrix_diff* %matb to i8**
  %18 = load i8*, i8** %17, align 8, !tbaa !225
  tail call void @pushPointer8(i8* %18) #31
  store double* null, double** %data31, align 8, !tbaa !225
  br label %if.end34

if.end34:                                         ; preds = %if.else30, %if.then12
  %.sink80 = phi i8** [ %17, %if.else30 ], [ %13, %if.then12 ]
  tail call void @popPointer8(i8** nonnull %.sink80) #31
  call void @popControl1b(i32* nonnull %branch) #31
  %19 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp35 = icmp eq i32 %19, 0
  br i1 %cmp35, label %if.then36, label %if.end46

if.then36:                                        ; preds = %if.end34
  call void @popInteger4(i32* nonnull %chunklength) #31
  %20 = load i32, i32* %chunklength, align 4, !tbaa !59
  %mul37 = shl nsw i32 %20, 3
  %conv38 = sext i32 %mul37 to i64
  %call39 = call noalias i8* @malloc(i64 %conv38) #31
  store i8* %call39, i8** %6, align 8, !tbaa !137
  call void @popPointer8(i8** nonnull %chunkold) #31
  %21 = load i32, i32* %chunklength, align 4, !tbaa !59
  %mul41 = shl nsw i32 %21, 3
  %conv42 = sext i32 %mul41 to i64
  %call43 = call noalias i8* @malloc(i64 %conv42) #31
  %22 = bitcast %struct.Matrix_diff* %matb to i8**
  store i8* %call43, i8** %22, align 8, !tbaa !225
  call void @popPointer8(i8** nonnull %diffchunkold) #31
  br label %if.end46

if.end46:                                         ; preds = %if.then36, %if.end34, %entry
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #31
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #31
  ret void
}

declare dso_local void @pushInteger4(i32) local_unnamed_addr #3

declare dso_local void @pushControl1b(i32) local_unnamed_addr #3

declare dso_local void @popControl1b(i32*) local_unnamed_addr #3

declare dso_local void @popInteger4(i32*) local_unnamed_addr #3

; Function Attrs: nounwind uwtable willreturn mustprogress
define dso_local void @resize_c(%struct.Matrix* nocapture %mat, i32 %nrows, i32 %ncols) local_unnamed_addr #15 {
entry:
  %nrows1 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %0 = load i32, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %1 = load i32, i32* %ncols2, align 4, !tbaa !139
  %mul = mul nsw i32 %1, %0
  %mul3 = mul nsw i32 %ncols, %nrows
  %cmp.not = icmp eq i32 %mul, %mul3
  br i1 %cmp.not, label %if.end15, label %if.then

if.then:                                          ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %2 = bitcast double** %data to i8**
  %3 = load i8*, i8** %2, align 8, !tbaa !137
  %cmp4.not = icmp eq i8* %3, null
  br i1 %cmp4.not, label %if.end, label %if.then5

if.then5:                                         ; preds = %if.then
  tail call void @free(i8* nonnull %3) #31
  br label %if.end

if.end:                                           ; preds = %if.then5, %if.then
  %cmp8 = icmp sgt i32 %mul3, 0
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end
  %conv31 = zext i32 %mul3 to i64
  %mul11 = shl nuw nsw i64 %conv31, 3
  %call = tail call noalias i8* @malloc(i64 %mul11) #31
  store i8* %call, i8** %2, align 8, !tbaa !137
  br label %if.end15

if.else:                                          ; preds = %if.end
  store double* null, double** %data, align 8, !tbaa !137
  br label %if.end15

if.end15:                                         ; preds = %if.else, %if.then9, %entry
  store i32 %ncols, i32* %ncols2, align 4, !tbaa !139
  store i32 %nrows, i32* %nrows1, align 8, !tbaa !138
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @mat_mult_b(%struct.Matrix* nocapture readonly %lhs, %struct.Matrix_diff* nocapture readonly %lhsb, %struct.Matrix* nocapture readonly %rhs, %struct.Matrix_diff* nocapture readonly %rhsb, %struct.Matrix* %out, %struct.Matrix_diff* %outb) local_unnamed_addr #5 {
entry:
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %0 = load i32, i32* %nrows, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %0) #31
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %1 = load i32, i32* %ncols, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %1) #31
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %2 = bitcast double** %data to i8**
  %3 = load i8*, i8** %2, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %3) #31
  %nrows1 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %4 = load i32, i32* %nrows1, align 8, !tbaa !138
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %5 = load i32, i32* %ncols2, align 4, !tbaa !139
  %6 = load i32, i32* %nrows, align 8, !tbaa !138
  %7 = load i32, i32* %ncols, align 4, !tbaa !139
  %mul.i = mul nsw i32 %7, %6
  %mul3.i = mul nsw i32 %5, %4
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %8 = load i8*, i8** %2, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %8, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %8) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  store i8* %call.i, i8** %2, align 8, !tbaa !137
  br label %resize_c.exit

if.else.i:                                        ; preds = %if.end.i
  store double* null, double** %data, align 8, !tbaa !137
  br label %resize_c.exit

resize_c.exit:                                    ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %5, i32* %ncols, align 4, !tbaa !139
  store i32 %4, i32* %nrows, align 8, !tbaa !138
  %9 = load i32, i32* %nrows1, align 8, !tbaa !138
  %cmp322 = icmp sgt i32 %9, 0
  br i1 %cmp322, label %for.cond4.preheader.lr.ph, label %for.end190

for.cond4.preheader.lr.ph:                        ; preds = %resize_c.exit
  %10 = load i32, i32* %ncols2, align 4, !tbaa !139
  %cmp6320 = icmp sgt i32 %10, 0
  %data8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data10 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows11 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %ncols24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %11 = sext i32 %4 to i64
  %wide.trip.count354 = zext i32 %9 to i64
  %12 = sext i32 %9 to i64
  %wide.trip.count349 = zext i32 %10 to i64
  br label %for.cond4.preheader

for.cond4.preheader:                              ; preds = %for.inc56, %for.cond4.preheader.lr.ph
  %indvars.iv351 = phi i64 [ 0, %for.cond4.preheader.lr.ph ], [ %indvars.iv.next352, %for.inc56 ]
  br i1 %cmp6320, label %for.body7.lr.ph, label %for.inc56

for.body7.lr.ph:                                  ; preds = %for.cond4.preheader
  %13 = load double*, double** %data8, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %13, i64 %indvars.iv351
  %14 = load double*, double** %data10, align 8, !tbaa !137
  %15 = load i32, i32* %nrows11, align 8, !tbaa !138
  %16 = load double*, double** %data, align 8, !tbaa !137
  %17 = load i32, i32* %ncols24, align 4, !tbaa !139
  %cmp25318 = icmp sgt i32 %17, 1
  %18 = sext i32 %15 to i64
  %wide.trip.count = zext i32 %17 to i64
  br label %for.body7

for.body62.lr.ph:                                 ; preds = %for.inc56
  %19 = load i32, i32* %ncols2, align 4, !tbaa !139
  %cmp66313 = icmp sgt i32 %19, 0
  %data73 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %lhsb, i64 0, i32 0
  %data85 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %outb, i64 0, i32 0
  %data99 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %rhsb, i64 0, i32 0
  %20 = sext i32 %19 to i64
  br label %for.body62

for.body7:                                        ; preds = %for.inc53, %for.body7.lr.ph
  %indvars.iv343 = phi i64 [ 0, %for.body7.lr.ph ], [ %indvars.iv.next344, %for.inc53 ]
  %21 = load double, double* %arrayidx, align 8, !tbaa !75
  %22 = mul nsw i64 %indvars.iv343, %18
  %arrayidx15 = getelementptr inbounds double, double* %14, i64 %22
  %23 = load double, double* %arrayidx15, align 8, !tbaa !75
  %mul16 = fmul fast double %23, %21
  %24 = mul nsw i64 %indvars.iv343, %11
  %25 = add nsw i64 %24, %indvars.iv351
  %arrayidx22 = getelementptr inbounds double, double* %16, i64 %25
  store double %mul16, double* %arrayidx22, align 8, !tbaa !75
  br i1 %cmp25318, label %for.body26, label %for.inc53

for.body26:                                       ; preds = %for.body26, %for.body7
  %26 = phi double [ %add46, %for.body26 ], [ %mul16, %for.body7 ]
  %indvars.iv338 = phi i64 [ %indvars.iv.next339, %for.body26 ], [ 1, %for.body7 ]
  %27 = mul nsw i64 %indvars.iv338, %12
  %28 = add nsw i64 %27, %indvars.iv351
  %arrayidx38 = getelementptr inbounds double, double* %13, i64 %28
  %29 = load double, double* %arrayidx38, align 8, !tbaa !75
  %30 = add nsw i64 %indvars.iv338, %22
  %arrayidx44 = getelementptr inbounds double, double* %14, i64 %30
  %31 = load double, double* %arrayidx44, align 8, !tbaa !75
  %mul45 = fmul fast double %31, %29
  %add46 = fadd fast double %mul45, %26
  store double %add46, double* %arrayidx22, align 8, !tbaa !75
  %indvars.iv.next339 = add nuw nsw i64 %indvars.iv338, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next339, %wide.trip.count
  br i1 %exitcond.not, label %for.inc53, label %for.body26, !llvm.loop !228

for.inc53:                                        ; preds = %for.body26, %for.body7
  %indvars.iv.next344 = add nuw nsw i64 %indvars.iv343, 1
  %exitcond350.not = icmp eq i64 %indvars.iv.next344, %wide.trip.count349
  br i1 %exitcond350.not, label %for.inc56, label %for.body7, !llvm.loop !229

for.inc56:                                        ; preds = %for.inc53, %for.cond4.preheader
  %indvars.iv.next352 = add nuw nsw i64 %indvars.iv351, 1
  %exitcond355.not = icmp eq i64 %indvars.iv.next352, %wide.trip.count354
  br i1 %exitcond355.not, label %for.body62.lr.ph, label %for.cond4.preheader, !llvm.loop !230

for.cond60.loopexit:                              ; preds = %for.end126, %for.body62
  %cmp61 = icmp sgt i64 %indvars.iv336, 1
  br i1 %cmp61, label %for.body62, label %for.end190, !llvm.loop !231

for.body62:                                       ; preds = %for.cond60.loopexit, %for.body62.lr.ph
  %indvars.iv336 = phi i64 [ %wide.trip.count354, %for.body62.lr.ph ], [ %indvars.iv.next337, %for.cond60.loopexit ]
  %indvars.iv.next337 = add nsw i64 %indvars.iv336, -1
  br i1 %cmp66313, label %for.body67.lr.ph, label %for.cond60.loopexit

for.body67.lr.ph:                                 ; preds = %for.body62
  %32 = load i32, i32* %ncols24, align 4, !tbaa !139
  %cmp71310 = icmp sgt i32 %32, 1
  %33 = load double*, double** %data73, align 8, !tbaa !225
  %arrayidx132 = getelementptr inbounds double, double* %33, i64 %indvars.iv.next337
  %34 = load double*, double** %data10, align 8, !tbaa !137
  %35 = load i32, i32* %nrows11, align 8, !tbaa !138
  %36 = load double*, double** %data85, align 8, !tbaa !225
  %37 = load double*, double** %data99, align 8, !tbaa !225
  %38 = load double*, double** %data8, align 8, !tbaa !137
  %arrayidx164 = getelementptr inbounds double, double* %38, i64 %indvars.iv.next337
  %39 = sext i32 %32 to i64
  %40 = sext i32 %35 to i64
  br label %for.body67

for.body67:                                       ; preds = %for.end126, %for.body67.lr.ph
  %indvars.iv328 = phi i64 [ %20, %for.body67.lr.ph ], [ %indvars.iv.next329, %for.end126 ]
  %indvars.iv.next329 = add nsw i64 %indvars.iv328, -1
  %41 = mul nsw i64 %indvars.iv.next329, %40
  %42 = mul nsw i64 %indvars.iv.next329, %11
  %43 = add nsw i64 %42, %indvars.iv.next337
  br i1 %cmp71310, label %for.body72.lr.ph, label %for.end126

for.body72.lr.ph:                                 ; preds = %for.body67
  %arrayidx90 = getelementptr inbounds double, double* %36, i64 %43
  br label %for.body72

for.body72:                                       ; preds = %for.body72, %for.body72.lr.ph
  %indvars.iv = phi i64 [ %39, %for.body72.lr.ph ], [ %indvars.iv.next, %for.body72 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %44 = mul nsw i64 %indvars.iv.next, %wide.trip.count354
  %45 = add nsw i64 %44, %indvars.iv.next337
  %arrayidx78 = getelementptr inbounds double, double* %33, i64 %45
  %46 = load double, double* %arrayidx78, align 8, !tbaa !75
  %47 = add nsw i64 %41, %indvars.iv.next
  %arrayidx84 = getelementptr inbounds double, double* %34, i64 %47
  %48 = load double, double* %arrayidx84, align 8, !tbaa !75
  %49 = load double, double* %arrayidx90, align 8, !tbaa !75
  %mul91 = fmul fast double %49, %48
  %add92 = fadd fast double %mul91, %46
  store double %add92, double* %arrayidx78, align 8, !tbaa !75
  %arrayidx104 = getelementptr inbounds double, double* %37, i64 %47
  %50 = load double, double* %arrayidx104, align 8, !tbaa !75
  %arrayidx110 = getelementptr inbounds double, double* %38, i64 %45
  %51 = load double, double* %arrayidx110, align 8, !tbaa !75
  %52 = load double, double* %arrayidx90, align 8, !tbaa !75
  %mul117 = fmul fast double %52, %51
  %add118 = fadd fast double %mul117, %50
  store double %add118, double* %arrayidx104, align 8, !tbaa !75
  %cmp71 = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp71, label %for.body72, label %for.end126, !llvm.loop !232

for.end126:                                       ; preds = %for.body72, %for.body67
  %53 = load double, double* %arrayidx132, align 8, !tbaa !75
  %arrayidx138 = getelementptr inbounds double, double* %34, i64 %41
  %54 = load double, double* %arrayidx138, align 8, !tbaa !75
  %arrayidx144 = getelementptr inbounds double, double* %36, i64 %43
  %55 = load double, double* %arrayidx144, align 8, !tbaa !75
  %mul145 = fmul fast double %55, %54
  %add146 = fadd fast double %mul145, %53
  store double %add146, double* %arrayidx132, align 8, !tbaa !75
  %arrayidx158 = getelementptr inbounds double, double* %37, i64 %41
  %56 = load double, double* %arrayidx158, align 8, !tbaa !75
  %57 = load double, double* %arrayidx164, align 8, !tbaa !75
  %58 = load double, double* %arrayidx144, align 8, !tbaa !75
  %mul171 = fmul fast double %58, %57
  %add172 = fadd fast double %mul171, %56
  store double %add172, double* %arrayidx158, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx144, align 8, !tbaa !75
  %cmp66 = icmp sgt i64 %indvars.iv328, 1
  br i1 %cmp66, label %for.body67, label %for.cond60.loopexit, !llvm.loop !233

for.end190:                                       ; preds = %for.cond60.loopexit, %resize_c.exit
  tail call void @popPointer8(i8** nonnull %2) #31
  tail call void @popInteger4(i32* nonnull %ncols) #31
  tail call void @popInteger4(i32* nonnull %nrows) #31
  %59 = load i32, i32* %nrows1, align 8, !tbaa !138
  %60 = load i32, i32* %ncols2, align 4, !tbaa !139
  tail call void @resize_b(%struct.Matrix* %out, %struct.Matrix_diff* %outb, i32 %59, i32 %60)
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @mat_mult_c(%struct.Matrix* nocapture readonly %lhs, %struct.Matrix* nocapture readonly %rhs, %struct.Matrix* nocapture %out) local_unnamed_addr #5 {
entry:
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %0 = load i32, i32* %nrows, align 8, !tbaa !138
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %1 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %2 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %3 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %3, %2
  %mul3.i = mul nsw i32 %1, %0
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %4 = bitcast double** %data.i to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %5, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %5) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  store i8* %call.i, i8** %4, align 8, !tbaa !137
  br label %resize_c.exit

if.else.i:                                        ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize_c.exit

resize_c.exit:                                    ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %1, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %0, i32* %nrows1.i, align 8, !tbaa !138
  %6 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %6, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize_c.exit
  %7 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp483 = icmp sgt i32 %7, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %8 = sext i32 %0 to i64
  %wide.trip.count102 = zext i32 %6 to i64
  %9 = sext i32 %6 to i64
  %wide.trip.count97 = zext i32 %7 to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %indvars.iv99 = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %indvars.iv.next100, %for.inc47 ]
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %10 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %10, i64 %indvars.iv99
  %11 = load double*, double** %data7, align 8, !tbaa !137
  %12 = load i32, i32* %nrows8, align 8, !tbaa !138
  %13 = load double*, double** %data14, align 8, !tbaa !137
  %14 = load i32, i32* %ncols21, align 4, !tbaa !139
  %cmp2281 = icmp sgt i32 %14, 1
  %15 = sext i32 %12 to i64
  %wide.trip.count = zext i32 %14 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %indvars.iv91 = phi i64 [ 0, %for.body5.lr.ph ], [ %indvars.iv.next92, %for.inc44 ]
  %16 = load double, double* %arrayidx, align 8, !tbaa !75
  %17 = mul nsw i64 %indvars.iv91, %15
  %arrayidx12 = getelementptr inbounds double, double* %11, i64 %17
  %18 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %18, %16
  %19 = mul nsw i64 %indvars.iv91, %8
  %20 = add nsw i64 %19, %indvars.iv99
  %arrayidx19 = getelementptr inbounds double, double* %13, i64 %20
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %21 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body23 ], [ 1, %for.body5 ]
  %22 = mul nsw i64 %indvars.iv, %9
  %23 = add nsw i64 %22, %indvars.iv99
  %arrayidx29 = getelementptr inbounds double, double* %10, i64 %23
  %24 = load double, double* %arrayidx29, align 8, !tbaa !75
  %25 = add nsw i64 %indvars.iv, %17
  %arrayidx35 = getelementptr inbounds double, double* %11, i64 %25
  %26 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %26, %24
  %add43 = fadd fast double %21, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !234

for.inc44:                                        ; preds = %for.body23, %for.body5
  %indvars.iv.next92 = add nuw nsw i64 %indvars.iv91, 1
  %exitcond98.not = icmp eq i64 %indvars.iv.next92, %wide.trip.count97
  br i1 %exitcond98.not, label %for.inc47, label %for.body5, !llvm.loop !235

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %exitcond103.not = icmp eq i64 %indvars.iv.next100, %wide.trip.count102
  br i1 %exitcond103.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !236

for.end49:                                        ; preds = %for.inc47, %resize_c.exit
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @set_identity_b(%struct.Matrix* nocapture readonly %mat, %struct.Matrix_diff* nocapture readonly %matb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #31
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %1 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp61 = icmp sgt i32 %1, 0
  br i1 %cmp61, label %for.cond1.preheader.lr.ph, label %for.end32

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %.pre = load i32, i32* %nrows, align 8, !tbaa !138
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc5, %for.cond1.preheader.lr.ph
  %2 = phi i32 [ %1, %for.cond1.preheader.lr.ph ], [ %5, %for.inc5 ]
  %3 = phi i32 [ %.pre, %for.cond1.preheader.lr.ph ], [ %6, %for.inc5 ]
  %i_col.062 = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %inc6, %for.inc5 ]
  %cmp259 = icmp sgt i32 %3, 0
  br i1 %cmp259, label %for.body3, label %for.inc5

for.cond9.preheader:                              ; preds = %for.inc5
  %.lcssa4 = phi i32 [ %5, %for.inc5 ]
  %cmp1057 = icmp sgt i32 %.lcssa4, 0
  br i1 %cmp1057, label %for.body11.lr.ph, label %for.end32

for.body11.lr.ph:                                 ; preds = %for.cond9.preheader
  %data21 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %matb, i64 0, i32 0
  %.pre66 = load i32, i32* %nrows, align 8, !tbaa !138
  br label %for.body11

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %i_row.060 = phi i32 [ %inc, %for.body3 ], [ 0, %for.cond1.preheader ]
  %cmp4 = icmp eq i32 %i_col.062, %i_row.060
  %.sink = zext i1 %cmp4 to i32
  tail call void @pushControl1b(i32 %.sink) #31
  %inc = add nuw nsw i32 %i_row.060, 1
  %4 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp2 = icmp slt i32 %inc, %4
  br i1 %cmp2, label %for.body3, label %for.inc5.loopexit, !llvm.loop !237

for.inc5.loopexit:                                ; preds = %for.body3
  %.lcssa3 = phi i32 [ %4, %for.body3 ]
  %.pre65 = load i32, i32* %ncols, align 4, !tbaa !139
  br label %for.inc5

for.inc5:                                         ; preds = %for.inc5.loopexit, %for.cond1.preheader
  %5 = phi i32 [ %.pre65, %for.inc5.loopexit ], [ %2, %for.cond1.preheader ]
  %6 = phi i32 [ %.lcssa3, %for.inc5.loopexit ], [ %3, %for.cond1.preheader ]
  %inc6 = add nuw nsw i32 %i_col.062, 1
  %cmp = icmp slt i32 %inc6, %5
  br i1 %cmp, label %for.cond1.preheader, label %for.cond9.preheader, !llvm.loop !238

for.cond9.loopexit:                               ; preds = %for.body16, %for.body11
  %7 = phi i32 [ %8, %for.body11 ], [ %10, %for.body16 ]
  %cmp10 = icmp sgt i32 %i_col.158.in, 1
  br i1 %cmp10, label %for.body11, label %for.end32, !llvm.loop !239

for.body11:                                       ; preds = %for.cond9.loopexit, %for.body11.lr.ph
  %8 = phi i32 [ %.pre66, %for.body11.lr.ph ], [ %7, %for.cond9.loopexit ]
  %i_col.158.in = phi i32 [ %.lcssa4, %for.body11.lr.ph ], [ %i_col.158, %for.cond9.loopexit ]
  %i_col.158 = add nsw i32 %i_col.158.in, -1
  %cmp1554 = icmp sgt i32 %8, 0
  br i1 %cmp1554, label %for.body16, label %for.cond9.loopexit

for.body16:                                       ; preds = %for.body16, %for.body11
  %i_row.155.in = phi i32 [ %i_row.155, %for.body16 ], [ %8, %for.body11 ]
  %i_row.155 = add nsw i32 %i_row.155.in, -1
  call void @popControl1b(i32* nonnull %branch) #31
  %9 = load double*, double** %data21, align 8, !tbaa !225
  %10 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul = mul nsw i32 %10, %i_col.158
  %add = add nsw i32 %mul, %i_row.155
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds double, double* %9, i64 %idxprom
  store double 0.000000e+00, double* %arrayidx, align 8, !tbaa !75
  %cmp15 = icmp sgt i32 %i_row.155.in, 1
  br i1 %cmp15, label %for.body16, label %for.cond9.loopexit, !llvm.loop !240

for.end32:                                        ; preds = %for.cond9.loopexit, %for.cond9.preheader, %entry
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #31
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_identity_c(%struct.Matrix* nocapture readonly %mat) local_unnamed_addr #17 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp33 = icmp sgt i32 %0, 0
  br i1 %cmp33, label %for.cond1.preheader.lr.ph, label %for.end14

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp230 = icmp sgt i32 %1, 0
  %data6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %for.cond1.preheader.lr.ph
  %i_col.034 = phi i32 [ 0, %for.cond1.preheader.lr.ph ], [ %inc13, %for.inc12 ]
  br i1 %cmp230, label %for.body3.lr.ph, label %for.inc12

for.body3.lr.ph:                                  ; preds = %for.cond1.preheader
  %mul8 = mul nsw i32 %1, %i_col.034
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body3.lr.ph
  %i_row.031 = phi i32 [ 0, %for.body3.lr.ph ], [ %inc, %for.body3 ]
  %cmp4 = icmp eq i32 %i_col.034, %i_row.031
  %2 = load double*, double** %data6, align 8, !tbaa !137
  %idxprom.sink.v = add nsw i32 %mul8, %i_row.031
  %idxprom.sink = sext i32 %idxprom.sink.v to i64
  %.sink = select i1 %cmp4, double 1.000000e+00, double 0.000000e+00
  %arrayidx = getelementptr inbounds double, double* %2, i64 %idxprom.sink
  store double %.sink, double* %arrayidx, align 8, !tbaa !75
  %inc = add nuw nsw i32 %i_row.031, 1
  %exitcond.not = icmp eq i32 %inc, %1
  br i1 %exitcond.not, label %for.inc12, label %for.body3, !llvm.loop !241

for.inc12:                                        ; preds = %for.body3, %for.cond1.preheader
  %inc13 = add nuw nsw i32 %i_col.034, 1
  %exitcond37.not = icmp eq i32 %inc13, %0
  br i1 %exitcond37.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !242

for.end14:                                        ; preds = %for.inc12, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @fill_b(%struct.Matrix* nocapture readonly %mat, %struct.Matrix_diff* nocapture readonly %matb, double %val) local_unnamed_addr #17 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul = mul i32 %1, %0
  %cmp6 = icmp sgt i32 %mul, 0
  br i1 %cmp6, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %matb, i64 0, i32 0
  %2 = load double*, double** %data, align 8, !tbaa !225
  %3 = zext i32 %mul to i64
  %4 = add nsw i32 %mul, -1
  %5 = zext i32 %4 to i64
  %6 = xor i64 %5, -1
  %7 = add nsw i64 %6, %3
  %scevgep = getelementptr double, double* %2, i64 %7
  %scevgep8 = bitcast double* %scevgep to i8*
  %8 = shl nuw nsw i64 %3, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %scevgep8, i8 0, i64 %8, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.lr.ph, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @fill_c(%struct.Matrix* nocapture readonly %mat, double %val) local_unnamed_addr #17 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul6 = mul i32 %1, %0
  %cmp7 = icmp sgt i32 %mul6, 0
  br i1 %cmp7, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %2 = load double*, double** %data, align 8, !tbaa !137
  %wide.trip.count = zext i32 %mul6 to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %2, i64 %indvars.iv
  store double %val, double* %arrayidx, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !243

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_block_b(%struct.Matrix* nocapture readonly %mat, %struct.Matrix_diff* nocapture readonly %matb, i32 %row_off, i32 %col_off, %struct.Matrix* nocapture readonly %block, %struct.Matrix_diff* nocapture readonly %blockb) local_unnamed_addr #17 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp56 = icmp sgt i32 %0, 0
  br i1 %cmp56, label %for.body.lr.ph, label %for.end31

for.body.lr.ph:                                   ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp353 = icmp sgt i32 %1, 0
  %data = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %blockb, i64 0, i32 0
  %data6 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %matb, i64 0, i32 0
  %nrows9 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %2 = sext i32 %1 to i64
  %3 = sext i32 %row_off to i64
  %4 = zext i32 %0 to i64
  %5 = sext i32 %col_off to i64
  br label %for.body

for.cond.loopexit:                                ; preds = %for.body4, %for.body
  %cmp = icmp sgt i64 %indvars.iv63, 1
  br i1 %cmp, label %for.body, label %for.end31, !llvm.loop !244

for.body:                                         ; preds = %for.cond.loopexit, %for.body.lr.ph
  %indvars.iv63 = phi i64 [ %4, %for.body.lr.ph ], [ %indvars.iv.next64, %for.cond.loopexit ]
  %indvars.iv.next64 = add nsw i64 %indvars.iv63, -1
  br i1 %cmp353, label %for.body4.lr.ph, label %for.cond.loopexit

for.body4.lr.ph:                                  ; preds = %for.body
  %6 = load double*, double** %data, align 8, !tbaa !225
  %7 = mul nsw i64 %indvars.iv.next64, %2
  %8 = load double*, double** %data6, align 8, !tbaa !225
  %9 = add nsw i64 %indvars.iv.next64, %5
  %10 = load i32, i32* %nrows9, align 8, !tbaa !138
  %11 = sext i32 %10 to i64
  %12 = mul nsw i64 %9, %11
  br label %for.body4

for.body4:                                        ; preds = %for.body4, %for.body4.lr.ph
  %indvars.iv = phi i64 [ %2, %for.body4.lr.ph ], [ %indvars.iv.next, %for.body4 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %13 = add nsw i64 %indvars.iv.next, %7
  %arrayidx = getelementptr inbounds double, double* %6, i64 %13
  %14 = load double, double* %arrayidx, align 8, !tbaa !75
  %15 = add nsw i64 %indvars.iv.next, %3
  %16 = add nsw i64 %15, %12
  %arrayidx13 = getelementptr inbounds double, double* %8, i64 %16
  %17 = load double, double* %arrayidx13, align 8, !tbaa !75
  %add14 = fadd fast double %17, %14
  store double %add14, double* %arrayidx, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx13, align 8, !tbaa !75
  %cmp3 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp3, label %for.body4, label %for.cond.loopexit, !llvm.loop !245

for.end31:                                        ; preds = %for.cond.loopexit, %entry
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @set_block_c(%struct.Matrix* nocapture readonly %mat, i32 %row_off, i32 %col_off, %struct.Matrix* nocapture readonly %block) local_unnamed_addr #17 {
entry:
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 1
  %0 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp30 = icmp sgt i32 %0, 0
  br i1 %cmp30, label %for.cond1.preheader.lr.ph, label %for.end15

for.cond1.preheader.lr.ph:                        ; preds = %entry
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %cmp228 = icmp sgt i32 %1, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %block, i64 0, i32 2
  %data5 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %mat, i64 0, i32 0
  %2 = sext i32 %row_off to i64
  %wide.trip.count = zext i32 %1 to i64
  %3 = sext i32 %col_off to i64
  %4 = sext i32 %1 to i64
  %5 = zext i32 %0 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc13, %for.cond1.preheader.lr.ph
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc13 ], [ 0, %for.cond1.preheader.lr.ph ]
  br i1 %cmp228, label %for.body3.lr.ph, label %for.inc13

for.body3.lr.ph:                                  ; preds = %for.cond1.preheader
  %6 = load double*, double** %data, align 8, !tbaa !137
  %7 = load double*, double** %data5, align 8, !tbaa !137
  %8 = add nsw i64 %indvars.iv1, %3
  %9 = load i32, i32* %nrows8, align 8, !tbaa !138
  %10 = sext i32 %9 to i64
  %11 = mul nsw i64 %8, %10
  %12 = mul nsw i64 %indvars.iv1, %4
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.body3.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body3.lr.ph ], [ %indvars.iv.next, %for.body3 ]
  %13 = add nsw i64 %indvars.iv, %12
  %arrayidx = getelementptr inbounds double, double* %6, i64 %13
  %14 = load double, double* %arrayidx, align 8, !tbaa !75
  %15 = add nsw i64 %indvars.iv, %2
  %16 = add nsw i64 %15, %11
  %arrayidx12 = getelementptr inbounds double, double* %7, i64 %16
  store double %14, double* %arrayidx12, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc13, label %for.body3, !llvm.loop !246

for.inc13:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond37.not = icmp eq i64 %indvars.iv.next2, %5
  br i1 %exitcond37.not, label %for.end15, label %for.cond1.preheader, !llvm.loop !247

for.end15:                                        ; preds = %for.inc13, %entry
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @copy_b(%struct.Matrix* %dst, %struct.Matrix_diff* nocapture %dstb, %struct.Matrix* nocapture readonly %src, %struct.Matrix_diff* nocapture readonly %srcb) local_unnamed_addr #5 {
entry:
  %chunklength = alloca i32, align 4
  %diffchunkold = alloca i8*, align 8
  %chunkold = alloca i8*, align 8
  %branch = alloca i32, align 4
  %0 = bitcast i32* %chunklength to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #31
  %1 = bitcast i8** %diffchunkold to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %1) #31
  %2 = bitcast i8** %chunkold to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %2) #31
  %3 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #31
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 2
  %4 = bitcast double** %data to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !137
  %cmp.not = icmp eq i8* %5, null
  br i1 %cmp.not, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %6 = bitcast %struct.Matrix_diff* %dstb to i8**
  %7 = load i8*, i8** %6, align 8, !tbaa !225
  tail call void @pushPointer8(i8* %7) #31
  %8 = load i8*, i8** %6, align 8, !tbaa !225
  tail call void @free(i8* %8) #31
  %9 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %9) #31
  %10 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @free(i8* %10) #31
  tail call void @pushInteger4(i32 undef) #31
  tail call void @pushControl1b(i32 0) #31
  br label %if.end

if.else:                                          ; preds = %entry
  tail call void @pushControl1b(i32 1) #31
  %.pre = bitcast %struct.Matrix_diff* %dstb to i8**
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %.pre-phi = phi i8** [ %.pre, %if.else ], [ %6, %if.then ]
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 1
  %11 = load i32, i32* %ncols, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %11) #31
  %ncols5 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 1
  %12 = load i32, i32* %ncols5, align 4, !tbaa !139
  store i32 %12, i32* %ncols, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 0
  %13 = load i32, i32* %nrows, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %13) #31
  %nrows7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 0
  %14 = load i32, i32* %nrows7, align 8, !tbaa !138
  store i32 %14, i32* %nrows, align 8, !tbaa !138
  %15 = load i32, i32* %ncols, align 4, !tbaa !139
  %mul = mul i32 %15, %14
  %conv = sext i32 %mul to i64
  %mul11 = shl nsw i64 %conv, 3
  %call = tail call noalias i8* @malloc(i64 %mul11) #31
  %data12 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %dstb, i64 0, i32 0
  store i8* %call, i8** %.pre-phi, align 8, !tbaa !225
  %cmp16119 = icmp sgt i32 %mul, 0
  br i1 %cmp16119, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end
  %16 = zext i32 %mul to i64
  %17 = shl nuw nsw i64 %16, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %call, i8 0, i64 %17, i1 false)
  br label %for.end

for.end:                                          ; preds = %for.body.lr.ph, %if.end
  %18 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %18) #31
  %19 = load i32, i32* %ncols, align 4, !tbaa !139
  %20 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul21 = mul i32 %20, %19
  %conv22 = sext i32 %mul21 to i64
  %mul23 = shl nsw i64 %conv22, 3
  %call24 = tail call noalias i8* @malloc(i64 %mul23) #31
  store i8* %call24, i8** %4, align 8, !tbaa !137
  %cmp30117 = icmp sgt i32 %mul21, 0
  br i1 %cmp30117, label %for.body31.lr.ph, label %for.end45

for.body31.lr.ph:                                 ; preds = %for.end
  %data32 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %srcb, i64 0, i32 0
  %21 = load double*, double** %data32, align 8, !tbaa !225
  %22 = load double*, double** %data12, align 8, !tbaa !225
  br label %for.body31

for.body31:                                       ; preds = %for.body31, %for.body31.lr.ph
  %indvars.iv = phi i64 [ %conv22, %for.body31.lr.ph ], [ %indvars.iv.next, %for.body31 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx34 = getelementptr inbounds double, double* %21, i64 %indvars.iv.next
  %23 = load double, double* %arrayidx34, align 8, !tbaa !75
  %arrayidx37 = getelementptr inbounds double, double* %22, i64 %indvars.iv.next
  %24 = load double, double* %arrayidx37, align 8, !tbaa !75
  %add = fadd fast double %24, %23
  store double %add, double* %arrayidx34, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx37, align 8, !tbaa !75
  %cmp30 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp30, label %for.body31, label %for.end45, !llvm.loop !248

for.end45:                                        ; preds = %for.body31, %for.end
  tail call void @free(i8* %call24) #31
  tail call void @popPointer8(i8** nonnull %4) #31
  %25 = load i8*, i8** %.pre-phi, align 8, !tbaa !225
  tail call void @free(i8* %25) #31
  tail call void @popInteger4(i32* nonnull %nrows) #31
  tail call void @popInteger4(i32* nonnull %ncols) #31
  call void @popControl1b(i32* nonnull %branch) #31
  %26 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp51 = icmp eq i32 %26, 0
  br i1 %cmp51, label %if.then52, label %if.end70

if.then52:                                        ; preds = %for.end45
  call void @popInteger4(i32* nonnull %chunklength) #31
  %27 = load i32, i32* %chunklength, align 4, !tbaa !59
  %mul53 = shl nsw i32 %27, 3
  %conv54 = sext i32 %mul53 to i64
  %call55 = call noalias i8* @malloc(i64 %conv54) #31
  store i8* %call55, i8** %4, align 8, !tbaa !137
  call void @popPointer8(i8** nonnull %chunkold) #31
  %28 = load i32, i32* %chunklength, align 4, !tbaa !59
  %mul57 = shl nsw i32 %28, 3
  %conv58 = sext i32 %mul57 to i64
  %call59 = call noalias i8* @malloc(i64 %conv58) #31
  store i8* %call59, i8** %.pre-phi, align 8, !tbaa !225
  call void @popPointer8(i8** nonnull %diffchunkold) #31
  %29 = load i32, i32* %chunklength, align 4, !tbaa !59
  %cmp62114 = icmp sgt i32 %29, 0
  br i1 %cmp62114, label %for.body63.lr.ph, label %if.end70

for.body63.lr.ph:                                 ; preds = %if.then52
  %30 = bitcast %struct.Matrix_diff* %dstb to i8**
  %31 = load i8*, i8** %30, align 8, !tbaa !225
  %32 = zext i32 %29 to i64
  %33 = shl nuw nsw i64 %32, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %31, i8 0, i64 %33, i1 false)
  br label %if.end70

if.end70:                                         ; preds = %for.body63.lr.ph, %if.then52, %for.end45
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %3) #31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %2) #31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %1) #31
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @copy_c(%struct.Matrix* nocapture %dst, %struct.Matrix* nocapture readonly %src) local_unnamed_addr #5 {
entry:
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 2
  %0 = bitcast double** %data to i8**
  %1 = load i8*, i8** %0, align 8, !tbaa !137
  %cmp.not = icmp eq i8* %1, null
  br i1 %cmp.not, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  tail call void @free(i8* nonnull %1) #31
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139
  %ncols2 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 1
  store i32 %2, i32* %ncols2, align 4, !tbaa !139
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 0
  %3 = load i32, i32* %nrows, align 8, !tbaa !138
  %nrows3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %dst, i64 0, i32 0
  store i32 %3, i32* %nrows3, align 8, !tbaa !138
  %mul = mul i32 %3, %2
  %conv = sext i32 %mul to i64
  %mul6 = shl nsw i64 %conv, 3
  %call = tail call noalias i8* @malloc(i64 %mul6) #31
  store i8* %call, i8** %0, align 8, !tbaa !137
  %cmp1131 = icmp sgt i32 %mul, 0
  %4 = bitcast i8* %call to double*
  br i1 %cmp1131, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %if.end
  %data12 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %src, i64 0, i32 2
  %5 = load double*, double** %data12, align 8, !tbaa !137
  %wide.trip.count = zext i32 %mul to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %5, i64 %indvars.iv
  %6 = load double, double* %arrayidx, align 8, !tbaa !75
  %arrayidx15 = getelementptr inbounds double, double* %4, i64 %indvars.iv
  store double %6, double* %arrayidx15, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !249

for.end:                                          ; preds = %for.body, %if.end
  ret void
}

; Function Attrs: nofree norecurse nounwind uwtable mustprogress
define dso_local void @square_sum_b(i32 %n, double* nocapture readonly %x, double* nocapture %xb, double %square_sumb) local_unnamed_addr #17 {
entry:
  %cmp31 = icmp sgt i32 %n, 1
  %mul5 = fmul fast double %square_sumb, 2.000000e+00
  br i1 %cmp31, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %0 = zext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.lr.ph
  %indvars.iv = phi i64 [ %0, %for.body.lr.ph ], [ %indvars.iv.next, %for.body ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %arrayidx2 = getelementptr inbounds double, double* %xb, i64 %indvars.iv.next
  %1 = load double, double* %arrayidx2, align 8, !tbaa !75
  %arrayidx4 = getelementptr inbounds double, double* %x, i64 %indvars.iv.next
  %2 = load double, double* %arrayidx4, align 8, !tbaa !75
  %mul6 = fmul fast double %mul5, %2
  %add = fadd fast double %mul6, %1
  store double %add, double* %arrayidx2, align 8, !tbaa !75
  %cmp = icmp sgt i64 %indvars.iv, 2
  br i1 %cmp, label %for.body, label %for.end, !llvm.loop !250

for.end:                                          ; preds = %for.body, %entry
  %3 = load double, double* %xb, align 8, !tbaa !75
  %4 = load double, double* %x, align 8, !tbaa !75
  %mul12 = fmul fast double %mul5, %4
  %add13 = fadd fast double %mul12, %3
  store double %add13, double* %xb, align 8, !tbaa !75
  ret void
}

; Function Attrs: norecurse nounwind readonly uwtable willreturn mustprogress
define dso_local double @square_sum_c(i32 %n, double* nocapture readonly %x) local_unnamed_addr #8 {
entry:
  %0 = load double, double* %x, align 8, !tbaa !75
  %mul = fmul fast double %0, %0
  %cmp15 = icmp sgt i32 %n, 1
  br i1 %cmp15, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %n to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv = phi i64 [ 1, %for.body.preheader ], [ %indvars.iv.next, %for.body ]
  %res.017 = phi double [ %mul, %for.body.preheader ], [ %add, %for.body ]
  %arrayidx2 = getelementptr inbounds double, double* %x, i64 %indvars.iv
  %1 = load double, double* %arrayidx2, align 8, !tbaa !75
  %mul5 = fmul fast double %1, %1
  %add = fadd fast double %mul5, %res.017
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !251

for.end:                                          ; preds = %for.body, %entry
  %res.0.lcssa = phi double [ %mul, %entry ], [ %add, %for.body ]
  ret double %res.0.lcssa
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @angle_axis_to_rotation_matrix_b(double* nocapture readonly %angle_axis, double* nocapture %angle_axisb, %struct.Matrix* nocapture readonly %R, %struct.Matrix_diff* nocapture readonly %Rb) local_unnamed_addr #5 {
entry:
  %0 = load double, double* %angle_axis, align 8, !tbaa !75
  %mul.i = fmul fast double %0, %0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 1, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %res.017.i = phi double [ %mul.i, %entry ], [ %add.i, %for.body.i ]
  %arrayidx2.i = getelementptr inbounds double, double* %angle_axis, i64 %indvars.iv.i
  %1 = load double, double* %arrayidx2.i, align 8, !tbaa !75
  %mul5.i = fmul fast double %1, %1
  %add.i = fadd fast double %mul5.i, %res.017.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 3
  br i1 %exitcond.not.i, label %square_sum_c.exit, label %for.body.i, !llvm.loop !251

square_sum_c.exit:                                ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %2 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %cmp = fcmp fast olt double %2, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %square_sum_c.exit
  tail call void @set_identity_b(%struct.Matrix* %R, %struct.Matrix_diff* %Rb)
  br label %if.end

if.else:                                          ; preds = %square_sum_c.exit
  %div = fdiv fast double %0, %2
  %arrayidx1 = getelementptr inbounds double, double* %angle_axis, i64 1
  %3 = load double, double* %arrayidx1, align 8, !tbaa !75
  %div2 = fdiv fast double %3, %2
  %arrayidx3 = getelementptr inbounds double, double* %angle_axis, i64 2
  %4 = load double, double* %arrayidx3, align 8, !tbaa !75
  %div4 = fdiv fast double %4, %2
  %5 = tail call fast double @llvm.sin.f64(double %2)
  %6 = tail call fast double @llvm.cos.f64(double %2)
  %mul = fmul fast double %div4, 2.000000e+00
  %mul6 = fmul fast double %mul, %6
  %sub = fsub fast double %mul, %mul6
  %data = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %Rb, i64 0, i32 0
  %7 = load double*, double** %data, align 8, !tbaa !225
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %8 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul7 = shl nsw i32 %8, 1
  %add = add nsw i32 %mul7, 2
  %idxprom = sext i32 %add to i64
  %arrayidx8 = getelementptr inbounds double, double* %7, i64 %idxprom
  %9 = load double, double* %arrayidx8, align 8, !tbaa !75
  %mul9 = fmul fast double %sub, %9
  %mul10 = fmul fast double %div4, %div4
  %sub11 = fsub fast double 1.000000e+00, %mul10
  %mul18 = fmul fast double %sub11, %9
  store double 0.000000e+00, double* %arrayidx8, align 8, !tbaa !75
  %sub25 = fsub fast double 1.000000e+00, %6
  %mul26 = fmul fast double %div2, %sub25
  %add30 = add nsw i32 %8, 2
  %idxprom31 = sext i32 %add30 to i64
  %arrayidx32 = getelementptr inbounds double, double* %7, i64 %idxprom31
  %10 = load double, double* %arrayidx32, align 8, !tbaa !75
  %mul36 = fmul fast double %div4, %sub25
  %mul44 = fmul fast double %div4, %div2
  %mul66 = fmul fast double %10, %div
  store double 0.000000e+00, double* %arrayidx32, align 8, !tbaa !75
  %arrayidx80 = getelementptr inbounds double, double* %7, i64 2
  %11 = load double, double* %arrayidx80, align 8, !tbaa !75
  %mul84 = fmul fast double %sub25, %div
  %mul93 = fmul fast double %div4, %div
  store double 0.000000e+00, double* %arrayidx80, align 8, !tbaa !75
  %add129 = or i32 %mul7, 1
  %idxprom130 = sext i32 %add129 to i64
  %arrayidx131 = getelementptr inbounds double, double* %7, i64 %idxprom130
  %12 = load double, double* %arrayidx131, align 8, !tbaa !75
  %mul116.neg = fmul fast double %11, %div2
  %mul167.neg = fmul fast double %12, %div
  store double 0.000000e+00, double* %arrayidx131, align 8, !tbaa !75
  %mul175 = fmul fast double %div2, 2.000000e+00
  %mul177 = fmul fast double %mul175, %6
  %sub178 = fsub fast double %mul175, %mul177
  %add182 = add nsw i32 %8, 1
  %idxprom183 = sext i32 %add182 to i64
  %arrayidx184 = getelementptr inbounds double, double* %7, i64 %idxprom183
  %13 = load double, double* %arrayidx184, align 8, !tbaa !75
  %mul185 = fmul fast double %13, %sub178
  %mul187 = fmul fast double %div2, %div2
  %sub188 = fsub fast double 1.000000e+00, %mul187
  %mul195 = fmul fast double %13, %sub188
  store double 0.000000e+00, double* %arrayidx184, align 8, !tbaa !75
  %arrayidx210 = getelementptr inbounds double, double* %7, i64 1
  %14 = load double, double* %arrayidx210, align 8, !tbaa !75
  %mul223 = fmul fast double %div2, %div
  %mul246 = fmul fast double %14, %div4
  store double 0.000000e+00, double* %arrayidx210, align 8, !tbaa !75
  %idxprom260 = sext i32 %mul7 to i64
  %arrayidx261 = getelementptr inbounds double, double* %7, i64 %idxprom260
  %15 = load double, double* %arrayidx261, align 8, !tbaa !75
  %mul297 = fmul fast double %15, %div2
  store double 0.000000e+00, double* %arrayidx261, align 8, !tbaa !75
  %idxprom311 = sext i32 %8 to i64
  %arrayidx312 = getelementptr inbounds double, double* %7, i64 %idxprom311
  %16 = load double, double* %arrayidx312, align 8, !tbaa !75
  %reass.add = fadd fast double %16, %14
  %reass.mul = fmul fast double %reass.add, %mul84
  %reass.add651 = fadd fast double %12, %10
  %reass.mul652 = fmul fast double %reass.add651, %mul36
  %reass.add669 = fsub fast double %15, %11
  %reass.mul670 = fmul fast double %reass.add669, %5
  %add222 = fadd fast double %mul185, %reass.mul652
  %add290 = fadd fast double %add222, %reass.mul
  %add324 = fadd fast double %add290, %reass.mul670
  %mul51.neg = fmul fast double %10, %mul44
  %mul100.neg = fmul fast double %11, %mul93
  %mul151.neg = fmul fast double %12, %mul44
  %mul281.neg = fmul fast double %15, %mul93
  %reass.add658 = fadd fast double %15, %11
  %reass.mul659 = fmul fast double %reass.add658, %mul84
  %reass.mul661 = fmul fast double %reass.add651, %mul26
  %reass.add679 = fsub fast double %14, %16
  %reass.mul680 = fmul fast double %reass.add679, %5
  %add239 = fadd fast double %reass.mul661, %mul9
  %add273 = fadd fast double %add239, %reass.mul659
  %sub341 = fadd fast double %add273, %reass.mul680
  %mul348.neg = fmul fast double %16, %div4
  %reass.add681 = fadd fast double %mul167.neg, %mul116.neg
  %reass.add682 = fadd fast double %reass.add681, %mul348.neg
  %add247 = fadd fast double %mul246, %mul66
  %add298 = fadd fast double %add247, %mul297
  %sub349 = fsub fast double %add298, %reass.add682
  store double 0.000000e+00, double* %arrayidx312, align 8, !tbaa !75
  %mul356 = fmul fast double %div, 2.000000e+00
  %mul358 = fmul fast double %mul356, %6
  %sub359 = fsub fast double %mul356, %mul358
  %17 = load double, double* %7, align 8, !tbaa !75
  %mul366 = fmul fast double %17, %sub359
  %reass.mul663 = fmul fast double %reass.add, %mul26
  %reass.mul665 = fmul fast double %reass.add658, %mul36
  %reass.add671 = fsub fast double %10, %12
  %reass.mul672 = fmul fast double %reass.add671, %5
  %add263 = fadd fast double %reass.mul663, %reass.mul665
  %add314 = fadd fast double %add263, %mul366
  %add367 = fadd fast double %add314, %reass.mul672
  %mul368 = fmul fast double %div, %div
  %sub369 = fsub fast double 1.000000e+00, %mul368
  %mul376 = fmul fast double %17, %sub369
  %reass.mul685 = fmul fast double %mul223, %reass.add
  %reass.add674 = fadd fast double %mul100.neg, %mul51.neg
  %reass.add675 = fadd fast double %reass.add674, %mul151.neg
  %reass.add676 = fadd fast double %reass.add675, %mul281.neg
  %reass.add677 = fadd fast double %reass.add676, %reass.mul685
  %18 = fadd fast double %mul195, %mul18
  %sub333 = fadd fast double %18, %mul376
  store double 0.000000e+00, double* %7, align 8, !tbaa !75
  %mul384 = fmul fast double %sub349, %6
  %19 = load double, double* %arrayidx3, align 8, !tbaa !75
  %20 = load double, double* %arrayidx1, align 8, !tbaa !75
  %21 = load double, double* %angle_axis, align 8, !tbaa !75
  %22 = fsub fast double %reass.add677, %sub333
  %mul385.neg = fmul fast double %22, %5
  %23 = fneg fast double %19
  %24 = fmul fast double %sub341, %23
  %div390.neg = fdiv fast double %24, %add.i.lcssa
  %25 = fneg fast double %20
  %26 = fmul fast double %add324, %25
  %div395.neg = fdiv fast double %26, %add.i.lcssa
  %27 = fneg fast double %21
  %28 = fmul fast double %add367, %27
  %div400.neg = fdiv fast double %28, %add.i.lcssa
  %.neg666 = fadd fast double %mul385.neg, %mul384
  %.neg667 = fadd fast double %.neg666, %div390.neg
  %.neg668 = fadd fast double %.neg667, %div395.neg
  %sub401 = fadd fast double %.neg668, %div400.neg
  %arrayidx402 = getelementptr inbounds double, double* %angle_axisb, i64 2
  %29 = load double, double* %arrayidx402, align 8, !tbaa !75
  %div403 = fdiv fast double %sub341, %2
  %add404 = fadd fast double %29, %div403
  store double %add404, double* %arrayidx402, align 8, !tbaa !75
  %arrayidx406 = getelementptr inbounds double, double* %angle_axisb, i64 1
  %30 = load double, double* %arrayidx406, align 8, !tbaa !75
  %div407 = fdiv fast double %add324, %2
  %add408 = fadd fast double %30, %div407
  store double %add408, double* %arrayidx406, align 8, !tbaa !75
  %31 = load double, double* %angle_axisb, align 8, !tbaa !75
  %div411 = fdiv fast double %add367, %2
  %add412 = fadd fast double %31, %div411
  store double %add412, double* %angle_axisb, align 8, !tbaa !75
  %phi.bo650 = fmul fast double %sub401, 2.000000e+00
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %normb.0 = phi double [ 0.000000e+00, %if.then ], [ %phi.bo650, %if.else ]
  %cmp414 = fcmp fast oeq double %add.i.lcssa, 0.000000e+00
  br i1 %cmp414, label %cond.end, label %cond.false

cond.false:                                       ; preds = %if.end
  %mul415 = fmul fast double %2, 2.000000e+00
  %phi.bo = fdiv fast double %normb.0, %mul415
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %if.end
  %cond = phi double [ %phi.bo, %cond.false ], [ 0.000000e+00, %if.end ]
  br label %for.body.i649

for.body.i649:                                    ; preds = %for.body.i649, %cond.end
  %indvars.iv.i645 = phi i64 [ 3, %cond.end ], [ %indvars.iv.next.i646, %for.body.i649 ]
  %indvars.iv.next.i646 = add nsw i64 %indvars.iv.i645, -1
  %arrayidx2.i647 = getelementptr inbounds double, double* %angle_axisb, i64 %indvars.iv.next.i646
  %32 = load double, double* %arrayidx2.i647, align 8, !tbaa !75
  %arrayidx4.i = getelementptr inbounds double, double* %angle_axis, i64 %indvars.iv.next.i646
  %33 = load double, double* %arrayidx4.i, align 8, !tbaa !75
  %mul6.i = fmul fast double %33, %cond
  %add.i648 = fadd fast double %mul6.i, %32
  store double %add.i648, double* %arrayidx2.i647, align 8, !tbaa !75
  %cmp.i = icmp ugt i64 %indvars.iv.i645, 2
  br i1 %cmp.i, label %for.body.i649, label %square_sum_b.exit, !llvm.loop !250

square_sum_b.exit:                                ; preds = %for.body.i649
  %34 = load double, double* %angle_axisb, align 8, !tbaa !75
  %35 = load double, double* %angle_axis, align 8, !tbaa !75
  %mul12.i = fmul fast double %35, %cond
  %add13.i = fadd fast double %mul12.i, %34
  store double %add13.i, double* %angle_axisb, align 8, !tbaa !75
  ret void
}

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local void @angle_axis_to_rotation_matrix_c(double* nocapture readonly %angle_axis, %struct.Matrix* nocapture readonly %R) local_unnamed_addr #9 {
entry:
  %0 = load double, double* %angle_axis, align 8, !tbaa !75
  %mul.i = fmul fast double %0, %0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %indvars.iv.i = phi i64 [ 1, %entry ], [ %indvars.iv.next.i, %for.body.i ]
  %res.017.i = phi double [ %mul.i, %entry ], [ %add.i, %for.body.i ]
  %arrayidx2.i = getelementptr inbounds double, double* %angle_axis, i64 %indvars.iv.i
  %1 = load double, double* %arrayidx2.i, align 8, !tbaa !75
  %mul5.i = fmul fast double %1, %1
  %add.i = fadd fast double %mul5.i, %res.017.i
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, 3
  br i1 %exitcond.not.i, label %square_sum_c.exit, label %for.body.i, !llvm.loop !251

square_sum_c.exit:                                ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %2 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %cmp = fcmp fast olt double %2, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %square_sum_c.exit
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %cmp33.i = icmp sgt i32 %3, 0
  br i1 %cmp33.i, label %for.cond1.preheader.lr.ph.i, label %cleanup

for.cond1.preheader.lr.ph.i:                      ; preds = %if.then
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %cmp230.i = icmp sgt i32 %4, 0
  %data6.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %5 = zext i32 %4 to i64
  %6 = zext i32 %3 to i64
  %7 = sext i32 %4 to i64
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv176 = phi i64 [ %indvars.iv.next177, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  br i1 %cmp230.i, label %for.body3.lr.ph.i, label %for.inc12.i

for.body3.lr.ph.i:                                ; preds = %for.cond1.preheader.i
  %8 = mul nsw i64 %indvars.iv176, %7
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv176, %indvars.iv
  %9 = load double*, double** %data6.i, align 8, !tbaa !137
  %.sink180 = add nsw i64 %indvars.iv, %8
  %.sink = select i1 %cmp4.i, double 1.000000e+00, double 0.000000e+00
  %arrayidx11.i = getelementptr inbounds double, double* %9, i64 %.sink180
  store double %.sink, double* %arrayidx11.i, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i174 = icmp eq i64 %indvars.iv.next, %5
  br i1 %exitcond.not.i174, label %for.inc12.i, label %for.body3.i, !llvm.loop !241

for.inc12.i:                                      ; preds = %for.body3.i, %for.cond1.preheader.i
  %indvars.iv.next177 = add nuw nsw i64 %indvars.iv176, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next177, %6
  br i1 %exitcond37.not.i, label %cleanup, label %for.cond1.preheader.i, !llvm.loop !242

if.else:                                          ; preds = %square_sum_c.exit
  %div = fdiv fast double %0, %2
  %arrayidx1 = getelementptr inbounds double, double* %angle_axis, i64 1
  %10 = load double, double* %arrayidx1, align 8, !tbaa !75
  %div2 = fdiv fast double %10, %2
  %arrayidx3 = getelementptr inbounds double, double* %angle_axis, i64 2
  %11 = load double, double* %arrayidx3, align 8, !tbaa !75
  %div4 = fdiv fast double %11, %2
  %12 = tail call fast double @llvm.sin.f64(double %2)
  %13 = tail call fast double @llvm.cos.f64(double %2)
  %mul = fmul fast double %div, %div
  %sub = fsub fast double 1.000000e+00, %mul
  %mul6 = fmul fast double %sub, %13
  %add = fadd fast double %mul6, %mul
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %14 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  store double %add, double* %14, align 8, !tbaa !75
  %sub11 = fsub fast double 1.000000e+00, %13
  %mul10 = fmul fast double %sub11, %div
  %mul12 = fmul fast double %mul10, %div2
  %mul13 = fmul fast double %div4, %12
  %sub14 = fsub fast double %mul12, %mul13
  %15 = load i32, i32* %nrows, align 8, !tbaa !138
  %idxprom19 = sext i32 %15 to i64
  %arrayidx20 = getelementptr inbounds double, double* %14, i64 %idxprom19
  store double %sub14, double* %arrayidx20, align 8, !tbaa !75
  %mul23 = fmul fast double %mul10, %div4
  %mul24 = fmul fast double %div2, %12
  %add25 = fadd fast double %mul23, %mul24
  %mul28 = shl nsw i32 %15, 1
  %idxprom30 = sext i32 %mul28 to i64
  %arrayidx31 = getelementptr inbounds double, double* %14, i64 %idxprom30
  store double %add25, double* %arrayidx31, align 8, !tbaa !75
  %add36 = fadd fast double %mul12, %mul13
  %arrayidx42 = getelementptr inbounds double, double* %14, i64 1
  store double %add36, double* %arrayidx42, align 8, !tbaa !75
  %mul43 = fmul fast double %div2, %div2
  %sub45 = fsub fast double 1.000000e+00, %mul43
  %mul46 = fmul fast double %sub45, %13
  %add47 = fadd fast double %mul46, %mul43
  %add51 = add nsw i32 %15, 1
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %14, i64 %idxprom52
  store double %add47, double* %arrayidx53, align 8, !tbaa !75
  %mul54 = fmul fast double %div2, %sub11
  %mul56 = fmul fast double %mul54, %div4
  %mul57 = fmul fast double %div, %12
  %sub58 = fsub fast double %mul56, %mul57
  %add62 = or i32 %mul28, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds double, double* %14, i64 %idxprom63
  store double %sub58, double* %arrayidx64, align 8, !tbaa !75
  %sub69 = fsub fast double %mul23, %mul24
  %arrayidx75 = getelementptr inbounds double, double* %14, i64 2
  store double %sub69, double* %arrayidx75, align 8, !tbaa !75
  %add80 = fadd fast double %mul56, %mul57
  %add84 = add nsw i32 %15, 2
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds double, double* %14, i64 %idxprom85
  store double %add80, double* %arrayidx86, align 8, !tbaa !75
  %mul87 = fmul fast double %div4, %div4
  %sub89 = fsub fast double 1.000000e+00, %mul87
  %mul90 = fmul fast double %sub89, %13
  %add91 = fadd fast double %mul90, %mul87
  %add95 = add nsw i32 %mul28, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds double, double* %14, i64 %idxprom96
  store double %add91, double* %arrayidx97, align 8, !tbaa !75
  br label %cleanup

cleanup:                                          ; preds = %if.else, %for.inc12.i, %if.then
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @apply_global_transform_b(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix_diff* nocapture readonly %pose_paramsb, %struct.Matrix* nocapture readonly %positions, %struct.Matrix_diff* nocapture readonly %positionsb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #31
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %1 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %2 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %2, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %3 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %3, align 8, !tbaa !137
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %4 = load double*, double** %data, align 8, !tbaa !137
  tail call void @angle_axis_to_rotation_matrix_c(double* %4, %struct.Matrix* %1)
  %.cast = bitcast i8* %call4.i to double*
  %nrows12 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc24, %entry
  %indvars.iv276 = phi i64 [ 0, %entry ], [ %indvars.iv.next277, %for.inc24 ]
  %5 = mul nuw nsw i64 %indvars.iv276, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next, %for.body3 ]
  %6 = add nuw nsw i64 %5, %indvars.iv
  %arrayidx = getelementptr inbounds double, double* %.cast, i64 %6
  %7 = load double, double* %arrayidx, align 8, !tbaa !75
  tail call void @pushReal8(double %7) #31
  %8 = load double, double* %arrayidx, align 8, !tbaa !75
  %9 = load double*, double** %data, align 8, !tbaa !137
  %10 = load i32, i32* %nrows12, align 8, !tbaa !138
  %11 = sext i32 %10 to i64
  %12 = add nsw i64 %indvars.iv276, %11
  %arrayidx16 = getelementptr inbounds double, double* %9, i64 %12
  %13 = load double, double* %arrayidx16, align 8, !tbaa !75
  %mul17 = fmul fast double %13, %8
  store double %mul17, double* %arrayidx, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.inc24, label %for.body3, !llvm.loop !252

for.inc24:                                        ; preds = %for.body3
  %indvars.iv.next277 = add nuw nsw i64 %indvars.iv276, 1
  %exitcond280.not = icmp eq i64 %indvars.iv.next277, 3
  br i1 %exitcond280.not, label %if.end, label %for.cond1.preheader, !llvm.loop !253

if.end:                                           ; preds = %for.inc24
  %call.i272 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %14 = bitcast i8* %call.i272 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i272, i8 0, i64 16, i1 false) #31
  tail call void @pushInteger4(i32 0) #31
  tail call void @pushInteger4(i32 0) #31
  %data29 = getelementptr inbounds i8, i8* %call.i272, i64 8
  %15 = bitcast i8* %data29 to double**
  tail call void @pushControl1b(i32 0) #31
  %.phi.trans.insert = bitcast i8* %data29 to i8**
  %.pre = load i8*, i8** %.phi.trans.insert, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %.pre) #31
  tail call void @mat_mult_c(%struct.Matrix* %1, %struct.Matrix* %positions, %struct.Matrix* nonnull %14)
  %ncols32 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %16 = load i32, i32* %ncols32, align 4, !tbaa !139
  %nrows36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  br label %for.cond33

for.cond33:                                       ; preds = %for.body35, %if.end
  %j.1.in = phi i32 [ %16, %if.end ], [ %j.1, %for.body35 ]
  %cmp34 = icmp sgt i32 %j.1.in, 0
  br i1 %cmp34, label %for.body35, label %for.end89

for.body35:                                       ; preds = %for.cond33
  %j.1 = add nsw i32 %j.1.in, -1
  %17 = load i32, i32* %nrows36, align 8, !tbaa !138
  %cmp39 = icmp sgt i32 %17, 0
  br i1 %cmp39, label %for.body40, label %for.cond33, !llvm.loop !254

for.body40:                                       ; preds = %for.body35
  tail call void @llvm.trap()
  unreachable

for.end89:                                        ; preds = %for.cond33
  tail call void @popPointer8(i8** nonnull %.phi.trans.insert) #31
  call void @popControl1b(i32* nonnull %branch) #31
  %18 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp91 = icmp eq i32 %18, 1
  br i1 %cmp91, label %if.then92, label %for.body102

if.then92:                                        ; preds = %for.end89
  %19 = load double*, double** %15, align 8, !tbaa !137
  call void @popReal8(double* %19) #31
  br label %for.body102

for.body102:                                      ; preds = %if.then92, %for.end89
  %ncols = getelementptr inbounds i8, i8* %call.i272, i64 4
  %20 = bitcast i8* %ncols to i32*
  %nrows28 = bitcast i8* %call.i272 to i32*
  call void @popInteger4(i32* nonnull %20) #31
  call void @popInteger4(i32* nonnull %nrows28) #31
  call void @mat_mult_b(%struct.Matrix* %1, %struct.Matrix_diff* undef, %struct.Matrix* nonnull %positions, %struct.Matrix_diff* %positionsb, %struct.Matrix* %14, %struct.Matrix_diff* undef)
  %arrayidx108 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %21 = bitcast i8* %arrayidx108 to double*
  call void @popReal8(double* nonnull %21) #31
  call void @llvm.trap()
  unreachable
}

declare dso_local void @pushReal8(double) local_unnamed_addr #3

declare dso_local void @popReal8(double*) local_unnamed_addr #3

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @apply_global_transform_c(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture readonly %positions) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %3 = load double*, double** %data, align 8, !tbaa !137
  tail call void @angle_axis_to_rotation_matrix_c(double* %3, %struct.Matrix* %0)
  %4 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %5 = load i32, i32* %nrows, align 8, !tbaa !138
  %6 = bitcast i8* %call4.i to double*
  %7 = sext i32 %5 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %indvars.iv103 = phi i64 [ 0, %entry ], [ %indvars.iv.next104, %for.inc12 ]
  %8 = add nsw i64 %indvars.iv103, %7
  %arrayidx = getelementptr inbounds double, double* %4, i64 %8
  %9 = mul nuw nsw i64 %indvars.iv103, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv99 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next100, %for.body3 ]
  %10 = load double, double* %arrayidx, align 8, !tbaa !75
  %11 = add nuw nsw i64 %9, %indvars.iv99
  %arrayidx10 = getelementptr inbounds double, double* %6, i64 %11
  %12 = load double, double* %arrayidx10, align 8, !tbaa !75
  %mul11 = fmul fast double %12, %10
  store double %mul11, double* %arrayidx10, align 8, !tbaa !75
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %exitcond102.not = icmp eq i64 %indvars.iv.next100, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !255

for.inc12:                                        ; preds = %for.body3
  %indvars.iv.next104 = add nuw nsw i64 %indvars.iv103, 1
  %exitcond107.not = icmp eq i64 %indvars.iv.next104, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !256

for.end14:                                        ; preds = %for.inc12
  %call.i81 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %13 = bitcast i8* %call.i81 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i81, i8 0, i64 16, i1 false) #31
  tail call void @mat_mult_c(%struct.Matrix* %0, %struct.Matrix* %positions, %struct.Matrix* %13)
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %14 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp1789 = icmp sgt i32 %14, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %if.then.i

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %15 = load i32, i32* %nrows20, align 8, !tbaa !138
  %cmp2187 = icmp sgt i32 %15, 0
  %data23 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %16 = bitcast i8* %data23 to double**
  %nrows24 = bitcast i8* %call.i81 to i32*
  %data36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count = zext i32 %15 to i64
  %17 = sext i32 %15 to i64
  %18 = zext i32 %14 to i64
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %indvars.iv1 = phi i64 [ %indvars.iv.next2, %for.inc45 ], [ 0, %for.cond19.preheader.lr.ph ]
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %19 = load double*, double** %16, align 8, !tbaa !137
  %20 = load i32, i32* %nrows24, align 8, !tbaa !138
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %indvars.iv1, %21
  %23 = load double*, double** %data, align 8, !tbaa !137
  %24 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul31 = shl nsw i32 %24, 1
  %25 = load double*, double** %data36, align 8, !tbaa !137
  %26 = sext i32 %mul31 to i64
  %27 = mul nsw i64 %indvars.iv1, %17
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body22.lr.ph ], [ %indvars.iv.next, %for.body22 ]
  %28 = add nsw i64 %indvars.iv, %22
  %arrayidx28 = getelementptr inbounds double, double* %19, i64 %28
  %29 = load double, double* %arrayidx28, align 8, !tbaa !75
  %30 = add nsw i64 %indvars.iv, %26
  %arrayidx34 = getelementptr inbounds double, double* %23, i64 %30
  %31 = load double, double* %arrayidx34, align 8, !tbaa !75
  %add35 = fadd fast double %31, %29
  %32 = add nsw i64 %indvars.iv, %27
  %arrayidx41 = getelementptr inbounds double, double* %25, i64 %32
  store double %add35, double* %arrayidx41, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !257

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %indvars.iv.next2 = add nuw nsw i64 %indvars.iv1, 1
  %exitcond98.not = icmp eq i64 %indvars.iv.next2, %18
  br i1 %exitcond98.not, label %for.end47, label %for.cond19.preheader, !llvm.loop !258

for.end47:                                        ; preds = %for.inc45
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix_c.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end47, %for.end14
  tail call void @free(i8* nonnull %call4.i) #31
  br label %delete_matrix_c.exit

delete_matrix_c.exit:                             ; preds = %if.then.i, %for.end47
  tail call void @free(i8* nonnull %call.i) #31
  %data.i83 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %33 = bitcast i8* %data.i83 to double**
  %34 = load double*, double** %33, align 8, !tbaa !137
  %cmp.not.i84 = icmp eq double* %34, null
  br i1 %cmp.not.i84, label %delete_matrix_c.exit86, label %if.then.i85

if.then.i85:                                      ; preds = %delete_matrix_c.exit
  %35 = bitcast double* %34 to i8*
  tail call void @free(i8* %35) #31
  br label %delete_matrix_c.exit86

delete_matrix_c.exit86:                           ; preds = %if.then.i85, %delete_matrix_c.exit
  tail call void @free(i8* nonnull %call.i81) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @relatives_to_absolutes_b(i32 %count, %struct.Matrix* nocapture readonly %relatives, %struct.Matrix_diff* nocapture readonly %relativesb, i32* nocapture readonly %parents, %struct.Matrix* %absolutes, %struct.Matrix_diff* %absolutesb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #31
  %cmp168 = icmp sgt i32 %count, 0
  br i1 %cmp168, label %for.body.preheader, label %for.end95

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv170 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next171, %for.inc ]
  %arrayidx = getelementptr inbounds i32, i32* %parents, i64 %indvars.iv170
  %1 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %1, -1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 0
  %2 = load i32, i32* %nrows, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %2) #31
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %3) #31
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 2
  %4 = bitcast double** %data to i8**
  %5 = load i8*, i8** %4, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %5) #31
  %6 = load i8*, i8** %4, align 8, !tbaa !137
  %cmp.not.i = icmp eq i8* %6, null
  br i1 %cmp.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  tail call void @free(i8* nonnull %6) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv170, i32 1
  %7 = load i32, i32* %ncols.i, align 4, !tbaa !139
  store i32 %7, i32* %ncols, align 4, !tbaa !139
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv170, i32 0
  %8 = load i32, i32* %nrows.i, align 8, !tbaa !138
  store i32 %8, i32* %nrows, align 8, !tbaa !138
  %mul.i = mul i32 %8, %7
  %conv.i = sext i32 %mul.i to i64
  %mul6.i = shl nsw i64 %conv.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul6.i) #31
  store i8* %call.i, i8** %4, align 8, !tbaa !137
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %9 = bitcast i8* %call.i to double*
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %data12.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv170, i32 2
  %10 = load double*, double** %data12.i, align 8, !tbaa !137
  %wide.trip.count.i = zext i32 %mul.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds double, double* %10, i64 %indvars.iv.i
  %11 = load double, double* %arrayidx.i, align 8, !tbaa !75
  %arrayidx15.i = getelementptr inbounds double, double* %9, i64 %indvars.iv.i
  store double %11, double* %arrayidx15.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !249

if.else:                                          ; preds = %for.body
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170
  %nrows14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx13, i64 0, i32 0
  %12 = load i32, i32* %nrows14, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %12) #31
  %ncols17 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 1
  %13 = load i32, i32* %ncols17, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %13) #31
  %data20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv170, i32 2
  %14 = load double*, double** %data20, align 8, !tbaa !137
  %15 = load double, double* %14, align 8, !tbaa !75
  tail call void @pushReal8(double %15) #31
  %16 = bitcast double** %data20 to i8**
  %17 = load i8*, i8** %16, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %17) #31
  %18 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %idxprom26 = sext i32 %18 to i64
  %data28 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom26, i32 2
  %19 = load double*, double** %data28, align 8, !tbaa !137
  %20 = load double, double* %19, align 8, !tbaa !75
  tail call void @pushReal8(double %20) #31
  %21 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %idxprom31 = sext i32 %21 to i64
  %arrayidx32 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom31
  %arrayidx34 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv170
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx32, %struct.Matrix* %arrayidx34, %struct.Matrix* %arrayidx13)
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.end.i
  %.sink = phi i32 [ 0, %if.else ], [ 1, %if.end.i ], [ 1, %for.body.i ]
  tail call void @pushControl1b(i32 %.sink) #31
  %indvars.iv.next171 = add nuw nsw i64 %indvars.iv170, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next171, %wide.trip.count
  br i1 %exitcond.not, label %for.body39, label %for.body, !llvm.loop !259

for.body39:                                       ; preds = %for.inc94, %for.inc
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc94 ], [ %wide.trip.count, %for.inc ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  call void @popControl1b(i32* nonnull %branch) #31
  %22 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp40 = icmp eq i32 %22, 0
  br i1 %cmp40, label %if.then41, label %if.else75

if.then41:                                        ; preds = %for.body39
  %arrayidx43 = getelementptr inbounds i32, i32* %parents, i64 %indvars.iv.next
  %23 = load i32, i32* %arrayidx43, align 4, !tbaa !59
  %idxprom44 = sext i32 %23 to i64
  %data46 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom44, i32 2
  %24 = load double*, double** %data46, align 8, !tbaa !137
  call void @popReal8(double* %24) #31
  %arrayidx48 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next
  %data49 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next, i32 2
  %25 = bitcast double** %data49 to i8**
  call void @popPointer8(i8** nonnull %25) #31
  %26 = load double*, double** %data49, align 8, !tbaa !137
  call void @popReal8(double* %26) #31
  %ncols55 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next, i32 1
  call void @popInteger4(i32* nonnull %ncols55) #31
  %nrows58 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx48, i64 0, i32 0
  call void @popInteger4(i32* %nrows58) #31
  %27 = load i32, i32* %arrayidx43, align 4, !tbaa !59
  %idxprom61 = sext i32 %27 to i64
  %arrayidx62 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom61
  %arrayidx66 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %absolutesb, i64 %idxprom61
  %arrayidx68 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv.next
  %arrayidx70 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %relativesb, i64 %indvars.iv.next
  %arrayidx74 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %absolutesb, i64 %indvars.iv.next
  call void @mat_mult_b(%struct.Matrix* %arrayidx62, %struct.Matrix_diff* %arrayidx66, %struct.Matrix* %arrayidx68, %struct.Matrix_diff* %arrayidx70, %struct.Matrix* %arrayidx48, %struct.Matrix_diff* %arrayidx74)
  br label %for.inc94

if.else75:                                        ; preds = %for.body39
  %arrayidx77 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next
  %data78 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next, i32 2
  %28 = bitcast double** %data78 to i8**
  call void @popPointer8(i8** nonnull %28) #31
  %ncols81 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv.next, i32 1
  call void @popInteger4(i32* nonnull %ncols81) #31
  %nrows84 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx77, i64 0, i32 0
  call void @popInteger4(i32* %nrows84) #31
  %arrayidx88 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %absolutesb, i64 %indvars.iv.next
  %arrayidx90 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv.next
  %arrayidx92 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %relativesb, i64 %indvars.iv.next
  call void @copy_b(%struct.Matrix* %arrayidx77, %struct.Matrix_diff* %arrayidx88, %struct.Matrix* %arrayidx90, %struct.Matrix_diff* %arrayidx92)
  br label %for.inc94

for.inc94:                                        ; preds = %if.else75, %if.then41
  %cmp38 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp38, label %for.body39, label %for.end95, !llvm.loop !260

for.end95:                                        ; preds = %for.inc94, %entry
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @relatives_to_absolutes_c(i32 %count, %struct.Matrix* nocapture readonly %relatives, i32* nocapture readonly %parents, %struct.Matrix* nocapture %absolutes) local_unnamed_addr #5 {
entry:
  %cmp26 = icmp sgt i32 %count, 0
  br i1 %cmp26, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %indvars.iv = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next, %for.inc ]
  %arrayidx = getelementptr inbounds i32, i32* %parents, i64 %indvars.iv
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %0, -1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 2
  %1 = bitcast double** %data.i to i8**
  %2 = load i8*, i8** %1, align 8, !tbaa !137
  %cmp.not.i = icmp eq i8* %2, null
  br i1 %cmp.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  tail call void @free(i8* nonnull %2) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 1
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 1
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 0
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %nrows3.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv, i32 0
  store i32 %4, i32* %nrows3.i, align 8, !tbaa !138
  %mul.i = mul i32 %4, %3
  %conv.i = sext i32 %mul.i to i64
  %mul6.i = shl nsw i64 %conv.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul6.i) #31
  store i8* %call.i, i8** %1, align 8, !tbaa !137
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %5 = bitcast i8* %call.i to double*
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %data12.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv, i32 2
  %6 = load double*, double** %data12.i, align 8, !tbaa !137
  %wide.trip.count.i = zext i32 %mul.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds double, double* %6, i64 %indvars.iv.i
  %7 = load double, double* %arrayidx.i, align 8, !tbaa !75
  %arrayidx15.i = getelementptr inbounds double, double* %5, i64 %indvars.iv.i
  store double %7, double* %arrayidx15.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !249

if.else:                                          ; preds = %for.body
  %idxprom8 = sext i32 %0 to i64
  %arrayidx9 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom8
  %arrayidx11 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %indvars.iv
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx9, %struct.Matrix* %arrayidx11, %struct.Matrix* %arrayidx13)
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.end.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !261

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: noreturn nounwind uwtable mustprogress
define dso_local void @euler_angles_to_rotation_matrix_b(double* nocapture readonly %xzy, %struct.Matrix* %R, %struct.Matrix_diff* %Rb) local_unnamed_addr #20 {
for.cond1.preheader.lr.ph.i:
  %branch = alloca i32, align 4
  %0 = load double, double* %xzy, align 8, !tbaa !75
  %arrayidx1 = getelementptr inbounds double, double* %xzy, i64 2
  %1 = load double, double* %arrayidx1, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %xzy, i64 1
  %2 = load double, double* %arrayidx2, align 8, !tbaa !75
  %3 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %3) #31
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %4 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %4, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %5 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %5, align 8, !tbaa !137
  %call.i415 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i416 = bitcast i8* %call.i415 to i32*
  store i32 3, i32* %nrows1.i416, align 8, !tbaa !138
  %ncols2.i417 = getelementptr inbounds i8, i8* %call.i415, i64 4
  %6 = bitcast i8* %ncols2.i417 to i32*
  store i32 3, i32* %6, align 4, !tbaa !139
  %call4.i418 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i419 = getelementptr inbounds i8, i8* %call.i415, i64 8
  %7 = bitcast i8* %data.i419 to i8**
  store i8* %call4.i418, i8** %7, align 8, !tbaa !137
  %call.i420 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i421 = bitcast i8* %call.i420 to i32*
  store i32 3, i32* %nrows1.i421, align 8, !tbaa !138
  %ncols2.i422 = getelementptr inbounds i8, i8* %call.i420, i64 4
  %8 = bitcast i8* %ncols2.i422 to i32*
  store i32 3, i32* %8, align 4, !tbaa !139
  %call4.i423 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i424 = getelementptr inbounds i8, i8* %call.i420, i64 8
  %9 = bitcast i8* %data.i424 to i8**
  store i8* %call4.i423, i8** %9, align 8, !tbaa !137
  %10 = bitcast i8* %call4.i to double*
  %11 = bitcast i8* %call4.i418 to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv499 = phi i64 [ %indvars.iv.next500, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %12 = mul nuw nsw i64 %indvars.iv499, 3
  %13 = shl nuw nsw i64 %indvars.iv499, 2
  %arrayidx.i = getelementptr inbounds double, double* %10, i64 %13
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv496 = phi i64 [ %indvars.iv.next497, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv499, %indvars.iv496
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %14 = add nuw nsw i64 %indvars.iv496, %12
  %arrayidx11.i = getelementptr inbounds double, double* %10, i64 %14
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next497 = add nuw nsw i64 %indvars.iv496, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next497, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !241

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next500 = add nuw nsw i64 %indvars.iv499, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next500, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i430, label %for.body3.lr.ph.i, !llvm.loop !242

for.cond1.preheader.lr.ph.i430:                   ; preds = %for.inc12.i
  %15 = bitcast i8* %call.i to %struct.Matrix*
  %16 = bitcast i8* %call.i415 to %struct.Matrix*
  %17 = bitcast i8* %call.i420 to %struct.Matrix*
  %18 = bitcast i8* %call4.i423 to double*
  %19 = tail call fast double @llvm.cos.f64(double %0)
  %arrayidx5 = getelementptr inbounds i8, i8* %call4.i, i64 32
  %20 = bitcast i8* %arrayidx5 to double*
  store double %19, double* %20, align 8, !tbaa !75
  %21 = tail call fast double @llvm.sin.f64(double %0)
  %arrayidx11 = getelementptr inbounds i8, i8* %call4.i, i64 40
  %22 = bitcast i8* %arrayidx11 to double*
  store double %21, double* %22, align 8, !tbaa !75
  %fneg = fneg fast double %21
  %arrayidx23 = getelementptr inbounds i8, i8* %call4.i, i64 56
  %23 = bitcast i8* %arrayidx23 to double*
  store double %fneg, double* %23, align 8, !tbaa !75
  %arrayidx35 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %24 = bitcast i8* %arrayidx35 to double*
  store double %19, double* %24, align 8, !tbaa !75
  br label %for.body3.lr.ph.i437

for.body3.lr.ph.i437:                             ; preds = %for.inc12.i452, %for.cond1.preheader.lr.ph.i430
  %indvars.iv492 = phi i64 [ %indvars.iv.next493, %for.inc12.i452 ], [ 0, %for.cond1.preheader.lr.ph.i430 ]
  %25 = mul nuw nsw i64 %indvars.iv492, 3
  %26 = shl nuw nsw i64 %indvars.iv492, 2
  %arrayidx.i441 = getelementptr inbounds double, double* %11, i64 %26
  br label %for.body3.i440

for.body3.i440:                                   ; preds = %for.inc.i449, %for.body3.lr.ph.i437
  %indvars.iv489 = phi i64 [ %indvars.iv.next490, %for.inc.i449 ], [ 0, %for.body3.lr.ph.i437 ]
  %cmp4.i439 = icmp eq i64 %indvars.iv492, %indvars.iv489
  br i1 %cmp4.i439, label %if.then.i442, label %if.else.i446

if.then.i442:                                     ; preds = %for.body3.i440
  store double 1.000000e+00, double* %arrayidx.i441, align 8, !tbaa !75
  br label %for.inc.i449

if.else.i446:                                     ; preds = %for.body3.i440
  %27 = add nuw nsw i64 %indvars.iv489, %25
  %arrayidx11.i445 = getelementptr inbounds double, double* %11, i64 %27
  store double 0.000000e+00, double* %arrayidx11.i445, align 8, !tbaa !75
  br label %for.inc.i449

for.inc.i449:                                     ; preds = %if.else.i446, %if.then.i442
  %indvars.iv.next490 = add nuw nsw i64 %indvars.iv489, 1
  %exitcond.not.i448 = icmp eq i64 %indvars.iv.next490, 3
  br i1 %exitcond.not.i448, label %for.inc12.i452, label %for.body3.i440, !llvm.loop !241

for.inc12.i452:                                   ; preds = %for.inc.i449
  %indvars.iv.next493 = add nuw nsw i64 %indvars.iv492, 1
  %exitcond37.not.i451 = icmp eq i64 %indvars.iv.next493, 3
  br i1 %exitcond37.not.i451, label %for.cond1.preheader.lr.ph.i459, label %for.body3.lr.ph.i437, !llvm.loop !242

for.cond1.preheader.lr.ph.i459:                   ; preds = %for.inc12.i452
  %28 = tail call fast double @llvm.cos.f64(double %1)
  store double %28, double* %11, align 8, !tbaa !75
  %29 = tail call fast double @llvm.sin.f64(double %1)
  %arrayidx47 = getelementptr inbounds i8, i8* %call4.i418, i64 48
  %30 = bitcast i8* %arrayidx47 to double*
  store double %29, double* %30, align 8, !tbaa !75
  %fneg54 = fneg fast double %29
  %arrayidx60 = getelementptr inbounds i8, i8* %call4.i418, i64 16
  %31 = bitcast i8* %arrayidx60 to double*
  store double %fneg54, double* %31, align 8, !tbaa !75
  %arrayidx72 = getelementptr inbounds i8, i8* %call4.i418, i64 64
  %32 = bitcast i8* %arrayidx72 to double*
  store double %28, double* %32, align 8, !tbaa !75
  br label %for.body3.lr.ph.i466

for.body3.lr.ph.i466:                             ; preds = %for.inc12.i481, %for.cond1.preheader.lr.ph.i459
  %indvars.iv485 = phi i64 [ %indvars.iv.next486, %for.inc12.i481 ], [ 0, %for.cond1.preheader.lr.ph.i459 ]
  %33 = mul nuw nsw i64 %indvars.iv485, 3
  %34 = shl nuw nsw i64 %indvars.iv485, 2
  %arrayidx.i470 = getelementptr inbounds double, double* %18, i64 %34
  br label %for.body3.i469

for.body3.i469:                                   ; preds = %for.inc.i478, %for.body3.lr.ph.i466
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i478 ], [ 0, %for.body3.lr.ph.i466 ]
  %cmp4.i468 = icmp eq i64 %indvars.iv485, %indvars.iv
  br i1 %cmp4.i468, label %if.then.i471, label %if.else.i475

if.then.i471:                                     ; preds = %for.body3.i469
  store double 1.000000e+00, double* %arrayidx.i470, align 8, !tbaa !75
  br label %for.inc.i478

if.else.i475:                                     ; preds = %for.body3.i469
  %35 = add nuw nsw i64 %indvars.iv, %33
  %arrayidx11.i474 = getelementptr inbounds double, double* %18, i64 %35
  store double 0.000000e+00, double* %arrayidx11.i474, align 8, !tbaa !75
  br label %for.inc.i478

for.inc.i478:                                     ; preds = %if.else.i475, %if.then.i471
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i477 = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not.i477, label %for.inc12.i481, label %for.body3.i469, !llvm.loop !241

for.inc12.i481:                                   ; preds = %for.inc.i478
  %indvars.iv.next486 = add nuw nsw i64 %indvars.iv485, 1
  %exitcond37.not.i480 = icmp eq i64 %indvars.iv.next486, 3
  br i1 %exitcond37.not.i480, label %if.end, label %for.body3.lr.ph.i466, !llvm.loop !242

if.end:                                           ; preds = %for.inc12.i481
  %36 = tail call fast double @llvm.cos.f64(double %2)
  store double %36, double* %18, align 8, !tbaa !75
  %37 = tail call fast double @llvm.sin.f64(double %2)
  %arrayidx84 = getelementptr inbounds i8, i8* %call4.i423, i64 8
  %38 = bitcast i8* %arrayidx84 to double*
  store double %37, double* %38, align 8, !tbaa !75
  %fneg91 = fneg fast double %37
  %arrayidx97 = getelementptr inbounds i8, i8* %call4.i423, i64 24
  %39 = bitcast i8* %arrayidx97 to double*
  store double %fneg91, double* %39, align 8, !tbaa !75
  %arrayidx109 = getelementptr inbounds i8, i8* %call4.i423, i64 32
  %40 = bitcast i8* %arrayidx109 to double*
  store double %36, double* %40, align 8, !tbaa !75
  %call.i483 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %41 = bitcast i8* %call.i483 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i483, i8 0, i64 16, i1 false) #31
  tail call void @pushInteger4(i32 0) #31
  tail call void @pushInteger4(i32 0) #31
  %data112 = getelementptr inbounds i8, i8* %call.i483, i64 8
  tail call void @pushControl1b(i32 0) #31
  %.phi.trans.insert = bitcast i8* %data112 to i8**
  %.pre = load i8*, i8** %.phi.trans.insert, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %.pre) #31
  tail call void @mat_mult_c(%struct.Matrix* nonnull %17, %struct.Matrix* %16, %struct.Matrix* nonnull %41)
  tail call void @mat_mult_b(%struct.Matrix* nonnull %41, %struct.Matrix_diff* undef, %struct.Matrix* %15, %struct.Matrix_diff* undef, %struct.Matrix* %R, %struct.Matrix_diff* %Rb)
  tail call void @popPointer8(i8** nonnull %.phi.trans.insert) #31
  call void @popControl1b(i32* nonnull %branch) #31
  %42 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp = icmp eq i32 %42, 1
  br i1 %cmp, label %if.then116, label %if.end118

if.then116:                                       ; preds = %if.end
  %43 = bitcast i8* %data112 to double**
  %44 = load double*, double** %43, align 8, !tbaa !137
  call void @popReal8(double* %44) #31
  br label %if.end118

if.end118:                                        ; preds = %if.then116, %if.end
  %ncols = getelementptr inbounds i8, i8* %call.i483, i64 4
  %45 = bitcast i8* %ncols to i32*
  %nrows111 = bitcast i8* %call.i483 to i32*
  call void @popInteger4(i32* nonnull %45) #31
  call void @popInteger4(i32* nonnull %nrows111) #31
  call void @mat_mult_b(%struct.Matrix* nonnull %17, %struct.Matrix_diff* undef, %struct.Matrix* %16, %struct.Matrix_diff* undef, %struct.Matrix* nonnull %41, %struct.Matrix_diff* undef)
  call void @llvm.trap()
  unreachable
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @euler_angles_to_rotation_matrix_c(double* nocapture readonly %xzy, %struct.Matrix* nocapture %R) local_unnamed_addr #5 {
for.cond1.preheader.lr.ph.i:
  %0 = load double, double* %xzy, align 8, !tbaa !75
  %arrayidx1 = getelementptr inbounds double, double* %xzy, i64 2
  %1 = load double, double* %arrayidx1, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %xzy, i64 1
  %2 = load double, double* %arrayidx2, align 8, !tbaa !75
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %3 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %3, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %4 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %4, align 8, !tbaa !137
  %call.i167 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i168 = bitcast i8* %call.i167 to i32*
  store i32 3, i32* %nrows1.i168, align 8, !tbaa !138
  %ncols2.i169 = getelementptr inbounds i8, i8* %call.i167, i64 4
  %5 = bitcast i8* %ncols2.i169 to i32*
  store i32 3, i32* %5, align 4, !tbaa !139
  %call4.i170 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i171 = getelementptr inbounds i8, i8* %call.i167, i64 8
  %6 = bitcast i8* %data.i171 to i8**
  store i8* %call4.i170, i8** %6, align 8, !tbaa !137
  %call.i172 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i173 = bitcast i8* %call.i172 to i32*
  store i32 3, i32* %nrows1.i173, align 8, !tbaa !138
  %ncols2.i174 = getelementptr inbounds i8, i8* %call.i172, i64 4
  %7 = bitcast i8* %ncols2.i174 to i32*
  store i32 3, i32* %7, align 4, !tbaa !139
  %call4.i175 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i176 = getelementptr inbounds i8, i8* %call.i172, i64 8
  %8 = bitcast i8* %data.i176 to i8**
  store i8* %call4.i175, i8** %8, align 8, !tbaa !137
  %9 = bitcast i8* %call4.i to double*
  %10 = bitcast i8* %call4.i170 to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv265 = phi i64 [ %indvars.iv.next266, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %11 = mul nuw nsw i64 %indvars.iv265, 3
  %12 = shl nuw nsw i64 %indvars.iv265, 2
  %arrayidx.i = getelementptr inbounds double, double* %9, i64 %12
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv262 = phi i64 [ %indvars.iv.next263, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv265, %indvars.iv262
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %13 = add nuw nsw i64 %indvars.iv262, %11
  %arrayidx11.i = getelementptr inbounds double, double* %9, i64 %13
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next263 = add nuw nsw i64 %indvars.iv262, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next263, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !241

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next266 = add nuw nsw i64 %indvars.iv265, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next266, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i182, label %for.body3.lr.ph.i, !llvm.loop !242

for.cond1.preheader.lr.ph.i182:                   ; preds = %for.inc12.i
  %14 = bitcast i8* %call.i to %struct.Matrix*
  %15 = bitcast i8* %call.i167 to %struct.Matrix*
  %16 = bitcast i8* %call.i172 to %struct.Matrix*
  %17 = bitcast i8* %call4.i175 to double*
  %18 = tail call fast double @llvm.cos.f64(double %0)
  %arrayidx5 = getelementptr inbounds i8, i8* %call4.i, i64 32
  %19 = bitcast i8* %arrayidx5 to double*
  store double %18, double* %19, align 8, !tbaa !75
  %20 = tail call fast double @llvm.sin.f64(double %0)
  %arrayidx11 = getelementptr inbounds i8, i8* %call4.i, i64 40
  %21 = bitcast i8* %arrayidx11 to double*
  store double %20, double* %21, align 8, !tbaa !75
  %fneg = fneg fast double %20
  %arrayidx23 = getelementptr inbounds i8, i8* %call4.i, i64 56
  %22 = bitcast i8* %arrayidx23 to double*
  store double %fneg, double* %22, align 8, !tbaa !75
  %arrayidx35 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %23 = bitcast i8* %arrayidx35 to double*
  store double %18, double* %23, align 8, !tbaa !75
  br label %for.body3.lr.ph.i189

for.body3.lr.ph.i189:                             ; preds = %for.inc12.i204, %for.cond1.preheader.lr.ph.i182
  %indvars.iv258 = phi i64 [ %indvars.iv.next259, %for.inc12.i204 ], [ 0, %for.cond1.preheader.lr.ph.i182 ]
  %24 = mul nuw nsw i64 %indvars.iv258, 3
  %25 = shl nuw nsw i64 %indvars.iv258, 2
  %arrayidx.i193 = getelementptr inbounds double, double* %10, i64 %25
  br label %for.body3.i192

for.body3.i192:                                   ; preds = %for.inc.i201, %for.body3.lr.ph.i189
  %indvars.iv255 = phi i64 [ %indvars.iv.next256, %for.inc.i201 ], [ 0, %for.body3.lr.ph.i189 ]
  %cmp4.i191 = icmp eq i64 %indvars.iv258, %indvars.iv255
  br i1 %cmp4.i191, label %if.then.i194, label %if.else.i198

if.then.i194:                                     ; preds = %for.body3.i192
  store double 1.000000e+00, double* %arrayidx.i193, align 8, !tbaa !75
  br label %for.inc.i201

if.else.i198:                                     ; preds = %for.body3.i192
  %26 = add nuw nsw i64 %indvars.iv255, %24
  %arrayidx11.i197 = getelementptr inbounds double, double* %10, i64 %26
  store double 0.000000e+00, double* %arrayidx11.i197, align 8, !tbaa !75
  br label %for.inc.i201

for.inc.i201:                                     ; preds = %if.else.i198, %if.then.i194
  %indvars.iv.next256 = add nuw nsw i64 %indvars.iv255, 1
  %exitcond.not.i200 = icmp eq i64 %indvars.iv.next256, 3
  br i1 %exitcond.not.i200, label %for.inc12.i204, label %for.body3.i192, !llvm.loop !241

for.inc12.i204:                                   ; preds = %for.inc.i201
  %indvars.iv.next259 = add nuw nsw i64 %indvars.iv258, 1
  %exitcond37.not.i203 = icmp eq i64 %indvars.iv.next259, 3
  br i1 %exitcond37.not.i203, label %for.cond1.preheader.lr.ph.i211, label %for.body3.lr.ph.i189, !llvm.loop !242

for.cond1.preheader.lr.ph.i211:                   ; preds = %for.inc12.i204
  %27 = tail call fast double @llvm.cos.f64(double %1)
  store double %27, double* %10, align 8, !tbaa !75
  %28 = tail call fast double @llvm.sin.f64(double %1)
  %arrayidx47 = getelementptr inbounds i8, i8* %call4.i170, i64 48
  %29 = bitcast i8* %arrayidx47 to double*
  store double %28, double* %29, align 8, !tbaa !75
  %fneg54 = fneg fast double %28
  %arrayidx60 = getelementptr inbounds i8, i8* %call4.i170, i64 16
  %30 = bitcast i8* %arrayidx60 to double*
  store double %fneg54, double* %30, align 8, !tbaa !75
  %arrayidx72 = getelementptr inbounds i8, i8* %call4.i170, i64 64
  %31 = bitcast i8* %arrayidx72 to double*
  store double %27, double* %31, align 8, !tbaa !75
  br label %for.body3.lr.ph.i218

for.body3.lr.ph.i218:                             ; preds = %for.inc12.i233, %for.cond1.preheader.lr.ph.i211
  %indvars.iv251 = phi i64 [ %indvars.iv.next252, %for.inc12.i233 ], [ 0, %for.cond1.preheader.lr.ph.i211 ]
  %32 = mul nuw nsw i64 %indvars.iv251, 3
  %33 = shl nuw nsw i64 %indvars.iv251, 2
  %arrayidx.i222 = getelementptr inbounds double, double* %17, i64 %33
  br label %for.body3.i221

for.body3.i221:                                   ; preds = %for.inc.i230, %for.body3.lr.ph.i218
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i230 ], [ 0, %for.body3.lr.ph.i218 ]
  %cmp4.i220 = icmp eq i64 %indvars.iv251, %indvars.iv
  br i1 %cmp4.i220, label %if.then.i223, label %if.else.i227

if.then.i223:                                     ; preds = %for.body3.i221
  store double 1.000000e+00, double* %arrayidx.i222, align 8, !tbaa !75
  br label %for.inc.i230

if.else.i227:                                     ; preds = %for.body3.i221
  %34 = add nuw nsw i64 %indvars.iv, %32
  %arrayidx11.i226 = getelementptr inbounds double, double* %17, i64 %34
  store double 0.000000e+00, double* %arrayidx11.i226, align 8, !tbaa !75
  br label %for.inc.i230

for.inc.i230:                                     ; preds = %if.else.i227, %if.then.i223
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i229 = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not.i229, label %for.inc12.i233, label %for.body3.i221, !llvm.loop !241

for.inc12.i233:                                   ; preds = %for.inc.i230
  %indvars.iv.next252 = add nuw nsw i64 %indvars.iv251, 1
  %exitcond37.not.i232 = icmp eq i64 %indvars.iv.next252, 3
  br i1 %exitcond37.not.i232, label %set_identity_c.exit234, label %for.body3.lr.ph.i218, !llvm.loop !242

set_identity_c.exit234:                           ; preds = %for.inc12.i233
  %35 = tail call fast double @llvm.cos.f64(double %2)
  store double %35, double* %17, align 8, !tbaa !75
  %36 = tail call fast double @llvm.sin.f64(double %2)
  %arrayidx84 = getelementptr inbounds i8, i8* %call4.i175, i64 8
  %37 = bitcast i8* %arrayidx84 to double*
  store double %36, double* %37, align 8, !tbaa !75
  %fneg91 = fneg fast double %36
  %arrayidx97 = getelementptr inbounds i8, i8* %call4.i175, i64 24
  %38 = bitcast i8* %arrayidx97 to double*
  store double %fneg91, double* %38, align 8, !tbaa !75
  %arrayidx109 = getelementptr inbounds i8, i8* %call4.i175, i64 32
  %39 = bitcast i8* %arrayidx109 to double*
  store double %35, double* %39, align 8, !tbaa !75
  %call.i235 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %40 = bitcast i8* %call.i235 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i235, i8 0, i64 16, i1 false) #31
  tail call void @mat_mult_c(%struct.Matrix* %16, %struct.Matrix* %15, %struct.Matrix* %40)
  tail call void @mat_mult_c(%struct.Matrix* %40, %struct.Matrix* %14, %struct.Matrix* %R)
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix_c.exit245, label %if.then.i237

if.then.i237:                                     ; preds = %set_identity_c.exit234
  tail call void @free(i8* nonnull %call4.i) #31
  br label %delete_matrix_c.exit245

delete_matrix_c.exit245:                          ; preds = %if.then.i237, %set_identity_c.exit234
  tail call void @free(i8* %call.i) #31
  tail call void @free(i8* %call4.i170) #31
  tail call void @free(i8* %call.i167) #31
  tail call void @free(i8* nonnull %call4.i175) #31
  tail call void @free(i8* nonnull %call.i172) #31
  %data.i246 = getelementptr inbounds i8, i8* %call.i235, i64 8
  %41 = bitcast i8* %data.i246 to double**
  %42 = load double*, double** %41, align 8, !tbaa !137
  %cmp.not.i247 = icmp eq double* %42, null
  br i1 %cmp.not.i247, label %delete_matrix_c.exit249, label %if.then.i248

if.then.i248:                                     ; preds = %delete_matrix_c.exit245
  %43 = bitcast double* %42 to i8*
  tail call void @free(i8* %43) #31
  br label %delete_matrix_c.exit249

delete_matrix_c.exit249:                          ; preds = %if.then.i248, %delete_matrix_c.exit245
  tail call void @free(i8* nonnull %call.i235) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_posed_relatives_b(i32 %bone_count, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix_diff* nocapture readonly %base_relativesb, %struct.Matrix* nocapture readonly %pose_params, %struct.Matrix_diff* nocapture readnone %pose_paramsb, %struct.Matrix* %relatives, %struct.Matrix_diff* %relativesb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #31
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %1 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %2 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %2, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 128) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %3 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %3, align 8, !tbaa !137
  %call.i152 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %4 = bitcast i8* %call.i152 to %struct.Matrix*
  %nrows1.i153 = bitcast i8* %call.i152 to i32*
  store i32 3, i32* %nrows1.i153, align 8, !tbaa !138
  %ncols2.i154 = getelementptr inbounds i8, i8* %call.i152, i64 4
  %5 = bitcast i8* %ncols2.i154 to i32*
  store i32 3, i32* %5, align 4, !tbaa !139
  %call4.i155 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i156 = getelementptr inbounds i8, i8* %call.i152, i64 8
  %6 = bitcast i8* %data.i156 to i8**
  store i8* %call4.i155, i8** %6, align 8, !tbaa !137
  %cmp173 = icmp sgt i32 %bone_count, 0
  %7 = bitcast i8* %call4.i to double*
  br i1 %cmp173, label %for.body.lr.ph, label %for.end75

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %8 = bitcast i8* %data.i156 to double**
  %wide.trip.count = zext i32 %bone_count to i64
  %tobool21.not = icmp eq i8* %call4.i, null
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %if.end25, %for.body.lr.ph
  %indvars.iv185 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next186, %if.end25 ]
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv176 = phi i64 [ %indvars.iv.next177, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %9 = shl nsw i64 %indvars.iv176, 2
  %10 = mul nsw i64 %indvars.iv176, 5
  %arrayidx.i = getelementptr inbounds double, double* %7, i64 %10
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv176, %indvars.iv
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %11 = add nuw nsw i64 %indvars.iv, %9
  %arrayidx11.i = getelementptr inbounds double, double* %7, i64 %11
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !241

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next177 = add nuw nsw i64 %indvars.iv176, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next177, 4
  br i1 %exitcond37.not.i, label %set_identity_c.exit, label %for.body3.lr.ph.i, !llvm.loop !242

set_identity_c.exit:                              ; preds = %for.inc12.i
  %12 = load double*, double** %data, align 8, !tbaa !137
  %13 = load i32, i32* %nrows, align 8, !tbaa !138
  %14 = trunc i64 %indvars.iv185 to i32
  %15 = add i32 %14, 3
  %mul = mul nsw i32 %13, %15
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds double, double* %12, i64 %idx.ext
  %tobool.not = icmp eq double* %12, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %set_identity_c.exit
  %16 = load double, double* %add.ptr, align 8, !tbaa !75
  tail call void @pushReal8(double %16) #31
  br label %if.end

if.end:                                           ; preds = %if.then, %set_identity_c.exit
  %.sink = phi i32 [ 1, %if.then ], [ 0, %set_identity_c.exit ]
  tail call void @pushControl1b(i32 %.sink) #31
  %17 = load i32, i32* %nrows1.i153, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %17) #31
  %18 = load i32, i32* %5, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %18) #31
  %19 = load double*, double** %8, align 8, !tbaa !137
  %tobool4.not = icmp eq double* %19, null
  br i1 %tobool4.not, label %if.end8, label %if.then5

if.then5:                                         ; preds = %if.end
  %20 = load double, double* %19, align 8, !tbaa !75
  tail call void @pushReal8(double %20) #31
  br label %if.end8

if.end8:                                          ; preds = %if.then5, %if.end
  %.sink189 = phi i32 [ 1, %if.then5 ], [ 0, %if.end ]
  tail call void @pushControl1b(i32 %.sink189) #31
  %21 = load i8*, i8** %6, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %21) #31
  tail call void @euler_angles_to_rotation_matrix_c(double* %add.ptr, %struct.Matrix* nonnull %4)
  %22 = load i32, i32* %5, align 4, !tbaa !139
  %cmp30.i = icmp sgt i32 %22, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i160, label %set_block_c.exit

for.cond1.preheader.lr.ph.i160:                   ; preds = %if.end8
  %23 = load i32, i32* %nrows1.i153, align 8, !tbaa !138
  %cmp228.i = icmp sgt i32 %23, 0
  %wide.trip.count.i = zext i32 %23 to i64
  %24 = zext i32 %22 to i64
  %25 = sext i32 %23 to i64
  br label %for.cond1.preheader.i161

for.cond1.preheader.i161:                         ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i160
  %indvars.iv181 = phi i64 [ %indvars.iv.next182, %for.inc13.i ], [ 0, %for.cond1.preheader.lr.ph.i160 ]
  br i1 %cmp228.i, label %for.body3.lr.ph.i163, label %for.inc13.i

for.body3.lr.ph.i163:                             ; preds = %for.cond1.preheader.i161
  %26 = load double*, double** %8, align 8, !tbaa !137
  %27 = shl nsw i64 %indvars.iv181, 2
  %28 = mul nsw i64 %indvars.iv181, %25
  br label %for.body3.i166

for.body3.i166:                                   ; preds = %for.body3.i166, %for.body3.lr.ph.i163
  %indvars.iv.i = phi i64 [ 0, %for.body3.lr.ph.i163 ], [ %indvars.iv.next.i, %for.body3.i166 ]
  %29 = add nsw i64 %indvars.iv.i, %28
  %arrayidx.i164 = getelementptr inbounds double, double* %26, i64 %29
  %30 = load double, double* %arrayidx.i164, align 8, !tbaa !75
  %31 = add nuw nsw i64 %indvars.iv.i, %27
  %arrayidx12.i = getelementptr inbounds double, double* %7, i64 %31
  store double %30, double* %arrayidx12.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i165 = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i165, label %for.inc13.i, label %for.body3.i166, !llvm.loop !246

for.inc13.i:                                      ; preds = %for.body3.i166, %for.cond1.preheader.i161
  %indvars.iv.next182 = add nuw nsw i64 %indvars.iv181, 1
  %exitcond37.not.i167 = icmp eq i64 %indvars.iv.next182, %24
  br i1 %exitcond37.not.i167, label %set_block_c.exit, label %for.cond1.preheader.i161, !llvm.loop !247

set_block_c.exit:                                 ; preds = %for.inc13.i, %if.end8
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv185
  %nrows10 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx, i64 0, i32 0
  %32 = load i32, i32* %nrows10, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %32) #31
  %ncols13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv185, i32 1
  %33 = load i32, i32* %ncols13, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %33) #31
  %data16 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv185, i32 2
  %34 = load double*, double** %data16, align 8, !tbaa !137
  %35 = load double, double* %34, align 8, !tbaa !75
  tail call void @pushReal8(double %35) #31
  %36 = bitcast double** %data16 to i8**
  %37 = load i8*, i8** %36, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %37) #31
  br i1 %tobool21.not, label %if.end25, label %if.then22

if.then22:                                        ; preds = %set_block_c.exit
  %38 = load double, double* %7, align 8, !tbaa !75
  tail call void @pushReal8(double %38) #31
  br label %if.end25

if.end25:                                         ; preds = %if.then22, %set_block_c.exit
  %.sink190 = phi i32 [ 1, %if.then22 ], [ 0, %set_block_c.exit ]
  tail call void @pushControl1b(i32 %.sink190) #31
  %arrayidx27 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %indvars.iv185
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx27, %struct.Matrix* nonnull %1, %struct.Matrix* nonnull %arrayidx)
  %indvars.iv.next186 = add nuw nsw i64 %indvars.iv185, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next186, %wide.trip.count
  br i1 %exitcond.not, label %for.cond30, label %for.cond1.preheader.lr.ph.i, !llvm.loop !262

for.cond30:                                       ; preds = %if.end25
  %i.1 = add nsw i32 %bone_count, -1
  call void @popControl1b(i32* nonnull %branch) #31
  %39 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp33 = icmp eq i32 %39, 1
  br i1 %cmp33, label %if.then34, label %if.end36

if.then34:                                        ; preds = %for.cond30
  call void @popReal8(double* %7) #31
  br label %if.end36

if.end36:                                         ; preds = %if.then34, %for.cond30
  %idxprom37 = sext i32 %i.1 to i64
  %arrayidx38 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %idxprom37
  %data39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %idxprom37, i32 2
  %40 = bitcast double** %data39 to i8**
  call void @popPointer8(i8** nonnull %40) #31
  %41 = load double*, double** %data39, align 8, !tbaa !137
  call void @popReal8(double* %41) #31
  %ncols45 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %idxprom37, i32 1
  call void @popInteger4(i32* nonnull %ncols45) #31
  %nrows48 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %arrayidx38, i64 0, i32 0
  call void @popInteger4(i32* %nrows48) #31
  %data49 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %base_relativesb, i64 0, i32 0
  %42 = load double*, double** %data49, align 8, !tbaa !225
  store double 0.000000e+00, double* %42, align 8, !tbaa !75
  %arrayidx51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %idxprom37
  %arrayidx53 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %base_relativesb, i64 %idxprom37
  %arrayidx57 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %relativesb, i64 %idxprom37
  call void @mat_mult_b(%struct.Matrix* %arrayidx51, %struct.Matrix_diff* %arrayidx53, %struct.Matrix* %1, %struct.Matrix_diff* undef, %struct.Matrix* %arrayidx38, %struct.Matrix_diff* %arrayidx57)
  %43 = load i32, i32* %5, align 4, !tbaa !139
  %cmp56.i = icmp sgt i32 %43, 0
  br i1 %cmp56.i, label %for.body.lr.ph.i, label %set_block_b.exit

for.body.lr.ph.i:                                 ; preds = %if.end36
  %44 = load i32, i32* %nrows1.i153, align 8, !tbaa !138
  %cmp353.i = icmp sgt i32 %44, 0
  br i1 %cmp353.i, label %for.body4.lr.ph.i.split, label %set_block_b.exit

for.body4.lr.ph.i.split:                          ; preds = %for.body.lr.ph.i
  call void @llvm.trap()
  unreachable

set_block_b.exit:                                 ; preds = %for.body.lr.ph.i, %if.end36
  %45 = load double*, double** %data, align 8, !tbaa !137
  %46 = load i32, i32* %nrows, align 8, !tbaa !138
  call void @popPointer8(i8** nonnull %6) #31
  call void @popControl1b(i32* nonnull %branch) #31
  %47 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp65 = icmp eq i32 %47, 1
  br i1 %cmp65, label %if.then66, label %if.end68

if.then66:                                        ; preds = %set_block_b.exit
  %48 = load double*, double** %8, align 8, !tbaa !137
  call void @popReal8(double* %48) #31
  br label %if.end68

if.end68:                                         ; preds = %if.then66, %set_block_b.exit
  %add59 = add nuw nsw i32 %bone_count, 2
  %mul61 = mul nsw i32 %46, %add59
  %idx.ext62 = sext i32 %mul61 to i64
  %add.ptr63 = getelementptr inbounds double, double* %45, i64 %idx.ext62
  call void @popInteger4(i32* nonnull %5) #31
  call void @popInteger4(i32* nonnull %nrows1.i153) #31
  call void @euler_angles_to_rotation_matrix_b(double* %add.ptr63, %struct.Matrix* nonnull %4, %struct.Matrix_diff* undef)
  unreachable

for.end75:                                        ; preds = %entry
  tail call void @get_new_matrix_b(i32 3, i32 3, %struct.Matrix_diff* undef)
  tail call void @get_new_matrix_b(i32 4, i32 4, %struct.Matrix_diff* undef)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_posed_relatives_c(i32 %bone_count, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %relatives) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 128) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %call.i19 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %3 = bitcast i8* %call.i19 to %struct.Matrix*
  %nrows1.i20 = bitcast i8* %call.i19 to i32*
  store i32 3, i32* %nrows1.i20, align 8, !tbaa !138
  %ncols2.i21 = getelementptr inbounds i8, i8* %call.i19, i64 4
  %4 = bitcast i8* %ncols2.i21 to i32*
  store i32 3, i32* %4, align 4, !tbaa !139
  %call4.i22 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i23 = getelementptr inbounds i8, i8* %call.i19, i64 8
  %5 = bitcast i8* %data.i23 to i8**
  store i8* %call4.i22, i8** %5, align 8, !tbaa !137
  %cmp41 = icmp sgt i32 %bone_count, 0
  %6 = bitcast i8* %call4.i to double*
  br i1 %cmp41, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %7 = bitcast i8* %data.i23 to double**
  %wide.trip.count = zext i32 %bone_count to i64
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %set_block_c.exit, %for.body.lr.ph
  %indvars.iv53 = phi i64 [ 0, %for.body.lr.ph ], [ %indvars.iv.next54, %set_block_c.exit ]
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv44 = phi i64 [ %indvars.iv.next45, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %8 = shl nsw i64 %indvars.iv44, 2
  %9 = mul nsw i64 %indvars.iv44, 5
  %arrayidx.i = getelementptr inbounds double, double* %6, i64 %9
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv44, %indvars.iv
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %10 = add nuw nsw i64 %indvars.iv, %8
  %arrayidx11.i = getelementptr inbounds double, double* %6, i64 %10
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !241

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next45 = add nuw nsw i64 %indvars.iv44, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next45, 4
  br i1 %exitcond37.not.i, label %set_identity_c.exit, label %for.body3.lr.ph.i, !llvm.loop !242

set_identity_c.exit:                              ; preds = %for.inc12.i
  %11 = load double*, double** %data, align 8, !tbaa !137
  %12 = load i32, i32* %nrows, align 8, !tbaa !138
  %13 = trunc i64 %indvars.iv53 to i32
  %14 = add i32 %13, 3
  %mul = mul nsw i32 %12, %14
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds double, double* %11, i64 %idx.ext
  tail call void @euler_angles_to_rotation_matrix_c(double* %add.ptr, %struct.Matrix* %3)
  %15 = load i32, i32* %4, align 4, !tbaa !139
  %cmp30.i = icmp sgt i32 %15, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i27, label %set_block_c.exit

for.cond1.preheader.lr.ph.i27:                    ; preds = %set_identity_c.exit
  %16 = load i32, i32* %nrows1.i20, align 8, !tbaa !138
  %cmp228.i = icmp sgt i32 %16, 0
  %wide.trip.count.i = zext i32 %16 to i64
  %17 = zext i32 %15 to i64
  %18 = sext i32 %16 to i64
  br label %for.cond1.preheader.i28

for.cond1.preheader.i28:                          ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i27
  %indvars.iv49 = phi i64 [ %indvars.iv.next50, %for.inc13.i ], [ 0, %for.cond1.preheader.lr.ph.i27 ]
  br i1 %cmp228.i, label %for.body3.lr.ph.i30, label %for.inc13.i

for.body3.lr.ph.i30:                              ; preds = %for.cond1.preheader.i28
  %19 = load double*, double** %7, align 8, !tbaa !137
  %20 = shl nsw i64 %indvars.iv49, 2
  %21 = mul nsw i64 %indvars.iv49, %18
  br label %for.body3.i33

for.body3.i33:                                    ; preds = %for.body3.i33, %for.body3.lr.ph.i30
  %indvars.iv.i = phi i64 [ 0, %for.body3.lr.ph.i30 ], [ %indvars.iv.next.i, %for.body3.i33 ]
  %22 = add nsw i64 %indvars.iv.i, %21
  %arrayidx.i31 = getelementptr inbounds double, double* %19, i64 %22
  %23 = load double, double* %arrayidx.i31, align 8, !tbaa !75
  %24 = add nuw nsw i64 %indvars.iv.i, %20
  %arrayidx12.i = getelementptr inbounds double, double* %6, i64 %24
  store double %23, double* %arrayidx12.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i32 = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i32, label %for.inc13.i, label %for.body3.i33, !llvm.loop !246

for.inc13.i:                                      ; preds = %for.body3.i33, %for.cond1.preheader.i28
  %indvars.iv.next50 = add nuw nsw i64 %indvars.iv49, 1
  %exitcond37.not.i34 = icmp eq i64 %indvars.iv.next50, %17
  br i1 %exitcond37.not.i34, label %set_block_c.exit, label %for.cond1.preheader.i28, !llvm.loop !247

set_block_c.exit:                                 ; preds = %for.inc13.i, %set_identity_c.exit
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %indvars.iv53
  %arrayidx3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %indvars.iv53
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx, %struct.Matrix* %0, %struct.Matrix* %arrayidx3)
  %indvars.iv.next54 = add nuw nsw i64 %indvars.iv53, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next54, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.cond1.preheader.lr.ph.i, !llvm.loop !263

for.end:                                          ; preds = %set_block_c.exit, %entry
  %cmp.not.i = icmp eq i8* %call4.i, null
  br i1 %cmp.not.i, label %delete_matrix_c.exit, label %if.then.i36

if.then.i36:                                      ; preds = %for.end
  tail call void @free(i8* nonnull %call4.i) #31
  br label %delete_matrix_c.exit

delete_matrix_c.exit:                             ; preds = %if.then.i36, %for.end
  tail call void @free(i8* nonnull %call.i) #31
  %25 = bitcast i8* %data.i23 to double**
  %26 = load double*, double** %25, align 8, !tbaa !137
  %cmp.not.i38 = icmp eq double* %26, null
  br i1 %cmp.not.i38, label %delete_matrix_c.exit40, label %if.then.i39

if.then.i39:                                      ; preds = %delete_matrix_c.exit
  %27 = bitcast double* %26 to i8*
  tail call void @free(i8* %27) #31
  br label %delete_matrix_c.exit40

delete_matrix_c.exit40:                           ; preds = %if.then.i39, %delete_matrix_c.exit
  tail call void @free(i8* nonnull %call.i19) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_skinned_vertex_positions_b(i32 %bone_count, %struct.Matrix* nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix_diff* nocapture readonly %inverse_base_absolutesb, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix_diff* nocapture readonly %base_positionsb, %struct.Matrix* nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* nocapture readonly %pose_params, %struct.Matrix_diff* nocapture readonly %pose_paramsb, %struct.Matrix* %positions, %struct.Matrix_diff* %positionsb, i32 %apply_global) local_unnamed_addr #5 {
entry:
  %matricies.addr.i539 = alloca %struct.Matrix*, align 8
  %matriciesb.addr.i540 = alloca %struct.Matrix_diff*, align 8
  %matricies.addr.i537 = alloca %struct.Matrix*, align 8
  %matriciesb.addr.i538 = alloca %struct.Matrix_diff*, align 8
  %matricies.addr.i = alloca %struct.Matrix*, align 8
  %matriciesb.addr.i = alloca %struct.Matrix_diff*, align 8
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #31
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #31
  %cmp20.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp20.i, label %for.body.preheader.i525, label %get_matrix_array_c.exit

get_matrix_array_c.exit:                          ; preds = %entry
  %call.i523 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %.pre571 = bitcast i8* %call.i to i32*
  br label %get_matrix_array_c.exit526

for.body.preheader.i525:                          ; preds = %entry
  %1 = zext i32 %bone_count to i64
  %2 = shl nuw nsw i64 %1, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %2, i1 false) #31
  %call.i523546 = tail call noalias i8* @malloc(i64 %mul.i) #31
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i523546, i8 0, i64 %2, i1 false) #31
  %nrows.phi.trans.insert = bitcast i8* %call.i to i32*
  %.pre = load i32, i32* %nrows.phi.trans.insert, align 8, !tbaa !138
  br label %get_matrix_array_c.exit526

get_matrix_array_c.exit526:                       ; preds = %for.body.preheader.i525, %get_matrix_array_c.exit
  %nrows.pre-phi = phi i32* [ %.pre571, %get_matrix_array_c.exit ], [ %nrows.phi.trans.insert, %for.body.preheader.i525 ]
  %3 = phi i32 [ undef, %get_matrix_array_c.exit ], [ %.pre, %for.body.preheader.i525 ]
  %call.i523547 = phi i8* [ %call.i523, %get_matrix_array_c.exit ], [ %call.i523546, %for.body.preheader.i525 ]
  %4 = bitcast i8* %call.i to %struct.Matrix*
  %5 = bitcast i8* %call.i523547 to %struct.Matrix*
  tail call void @pushInteger4(i32 %3) #31
  %ncols = getelementptr inbounds i8, i8* %call.i, i64 4
  %6 = bitcast i8* %ncols to i32*
  %7 = load i32, i32* %6, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %7) #31
  %data = getelementptr inbounds i8, i8* %call.i, i64 8
  %8 = bitcast i8* %data to double**
  %9 = load double*, double** %8, align 8, !tbaa !137
  %tobool.not = icmp eq double* %9, null
  br i1 %tobool.not, label %if.end, label %if.then

if.then:                                          ; preds = %get_matrix_array_c.exit526
  %10 = load double, double* %9, align 8, !tbaa !75
  tail call void @pushReal8(double %10) #31
  br label %if.end

if.end:                                           ; preds = %if.then, %get_matrix_array_c.exit526
  %.sink = phi i32 [ 1, %if.then ], [ 0, %get_matrix_array_c.exit526 ]
  tail call void @pushControl1b(i32 %.sink) #31
  %11 = bitcast i8* %data to i8**
  %12 = load i8*, i8** %11, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %12) #31
  tail call void @get_posed_relatives_c(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* nonnull %4)
  %nrows4 = bitcast i8* %call.i523547 to i32*
  %13 = load i32, i32* %nrows4, align 8, !tbaa !138
  tail call void @pushInteger4(i32 %13) #31
  %ncols5 = getelementptr inbounds i8, i8* %call.i523547, i64 4
  %14 = bitcast i8* %ncols5 to i32*
  %15 = load i32, i32* %14, align 4, !tbaa !139
  tail call void @pushInteger4(i32 %15) #31
  %data6 = getelementptr inbounds i8, i8* %call.i523547, i64 8
  %16 = bitcast i8* %data6 to double**
  %17 = load double*, double** %16, align 8, !tbaa !137
  %tobool7.not = icmp eq double* %17, null
  br i1 %tobool7.not, label %if.end11, label %if.then8

if.then8:                                         ; preds = %if.end
  %18 = load double, double* %17, align 8, !tbaa !75
  tail call void @pushReal8(double %18) #31
  br label %if.end11

if.end11:                                         ; preds = %if.then8, %if.end
  %.sink580 = phi i32 [ 1, %if.then8 ], [ 0, %if.end ]
  tail call void @pushControl1b(i32 %.sink580) #31
  %19 = bitcast i8* %data6 to i8**
  %20 = load i8*, i8** %19, align 8, !tbaa !137
  tail call void @pushPointer8(i8* %20) #31
  %21 = load double*, double** %8, align 8, !tbaa !137
  %tobool14.not = icmp eq double* %21, null
  br i1 %tobool14.not, label %for.cond, label %if.then15

if.then15:                                        ; preds = %if.end11
  %22 = load double, double* %21, align 8, !tbaa !75
  tail call void @pushReal8(double %22) #31
  br label %for.cond

for.cond:                                         ; preds = %if.then15, %if.end11
  %.sink581 = phi i32 [ 1, %if.then15 ], [ 0, %if.end11 ]
  tail call void @pushControl1b(i32 %.sink581) #31
  tail call void @relatives_to_absolutes_c(i32 %bone_count, %struct.Matrix* nonnull %4, i32* %parents, %struct.Matrix* nonnull %5)
  br i1 %cmp20.i, label %if.then27, label %for.end

if.then27:                                        ; preds = %for.cond
  tail call void @pushInteger4(i32 undef) #31
  tail call void @pushInteger4(i32 undef) #31
  tail call void @llvm.trap()
  unreachable

for.end:                                          ; preds = %for.cond
  %ncols52 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %23 = load i32, i32* %ncols52, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %24 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %25 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i527 = mul nsw i32 %25, %24
  %mul3.i = mul i32 %23, 3
  %cmp.not.i = icmp eq i32 %mul.i527, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %26 = bitcast double** %data.i to i8**
  %27 = load i8*, i8** %26, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %27, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %27) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize_c.exit.thread, label %resize_c.exit.thread550

resize_c.exit.thread:                             ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i528 = tail call noalias i8* @malloc(i64 %mul11.i) #31
  store i8* %call.i528, i8** %26, align 8, !tbaa !137
  store i32 %23, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize_c.exit.thread550:                          ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %23, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.end118

resize_c.exit:                                    ; preds = %for.end
  store i32 %23, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i527, 0
  br i1 %cmp7.i, label %resize_c.exit.for.body.lr.ph.i_crit_edge, label %for.end118

resize_c.exit.for.body.lr.ph.i_crit_edge:         ; preds = %resize_c.exit
  %data.i529.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %28 = bitcast double** %data.i529.phi.trans.insert to i8**
  %.pre569579 = load i8*, i8** %28, align 8, !tbaa !137
  %.pre572 = zext i32 %mul3.i to i64
  %.pre573 = shl nuw nsw i64 %.pre572, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize_c.exit.for.body.lr.ph.i_crit_edge, %resize_c.exit.thread
  %.pre-phi = phi i64 [ %.pre573, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize_c.exit.thread ]
  %29 = phi i8* [ %.pre569579, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %call.i528, %resize_c.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %29, i8 0, i64 %.pre-phi, i1 false)
  br label %for.end118

for.end118:                                       ; preds = %for.body.lr.ph.i, %resize_c.exit, %resize_c.exit.thread550
  %tobool119.not = icmp eq i32 %is_mirrored, 0
  br i1 %tobool119.not, label %if.end142, label %for.cond121.preheader

for.cond121.preheader:                            ; preds = %for.end118
  %30 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %cmp123561 = icmp sgt i32 %30, 0
  br i1 %cmp123561, label %for.body124.lr.ph, label %if.end142

for.body124.lr.ph:                                ; preds = %for.cond121.preheader
  %data125 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %31 = load double*, double** %data125, align 8, !tbaa !137
  %32 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %33 = sext i32 %32 to i64
  %wide.trip.count = zext i32 %30 to i64
  br label %for.body124

for.body124:                                      ; preds = %for.body124, %for.body124.lr.ph
  %indvars.iv566 = phi i64 [ 0, %for.body124.lr.ph ], [ %indvars.iv.next567, %for.body124 ]
  %34 = mul nsw i64 %indvars.iv566, %33
  %arrayidx130 = getelementptr inbounds double, double* %31, i64 %34
  %35 = load double, double* %arrayidx130, align 8, !tbaa !75
  %mul131 = fneg fast double %35
  store double %mul131, double* %arrayidx130, align 8, !tbaa !75
  %indvars.iv.next567 = add nuw nsw i64 %indvars.iv566, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next567, %wide.trip.count
  br i1 %exitcond.not, label %if.end142, label %for.body124, !llvm.loop !264

if.end142:                                        ; preds = %for.body124, %for.cond121.preheader, %for.end118
  %.sink582 = phi i32 [ 0, %for.cond121.preheader ], [ 1, %for.end118 ], [ 0, %for.body124 ]
  tail call void @pushControl1b(i32 %.sink582) #31
  %tobool143.not = icmp eq i32 %apply_global, 0
  %.sink583 = zext i1 %tobool143.not to i32
  tail call void @pushControl1b(i32 %.sink583) #31
  %36 = bitcast %struct.Matrix** %matricies.addr.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %36)
  %37 = bitcast %struct.Matrix_diff** %matriciesb.addr.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %37)
  tail call void @pushPointer8(i8* undef) #31
  %38 = bitcast %struct.Matrix** %matricies.addr.i to i8**
  tail call void @pushPointer8(i8* undef) #31
  call void @popPointer8(i8** nonnull %38) #31
  %39 = bitcast %struct.Matrix_diff** %matriciesb.addr.i to i8**
  call void @popPointer8(i8** nonnull %39) #31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %36)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %37)
  %40 = bitcast %struct.Matrix** %matricies.addr.i537 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %40)
  %41 = bitcast %struct.Matrix_diff** %matriciesb.addr.i538 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %41)
  %42 = bitcast %struct.Matrix** %matricies.addr.i537 to i8**
  store i8* %call.i523547, i8** %42, align 8, !tbaa !60
  call void @pushPointer8(i8* undef) #31
  call void @pushPointer8(i8* %call.i523547) #31
  call void @popPointer8(i8** nonnull %42) #31
  %43 = bitcast %struct.Matrix_diff** %matriciesb.addr.i538 to i8**
  call void @popPointer8(i8** nonnull %43) #31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %40)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %41)
  %44 = bitcast %struct.Matrix** %matricies.addr.i539 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %44)
  %45 = bitcast %struct.Matrix_diff** %matriciesb.addr.i540 to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %45)
  %46 = bitcast %struct.Matrix** %matricies.addr.i539 to i8**
  store i8* %call.i, i8** %46, align 8, !tbaa !60
  call void @pushPointer8(i8* undef) #31
  call void @pushPointer8(i8* %call.i) #31
  call void @popPointer8(i8** nonnull %46) #31
  %47 = bitcast %struct.Matrix_diff** %matriciesb.addr.i540 to i8**
  call void @popPointer8(i8** nonnull %47) #31
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %44)
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %45)
  call void @popControl1b(i32* nonnull %branch) #31
  %48 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp147 = icmp eq i32 %48, 0
  br i1 %cmp147, label %if.then148, label %if.end149

if.then148:                                       ; preds = %if.end142
  call void @apply_global_transform_b(%struct.Matrix* %pose_params, %struct.Matrix_diff* %pose_paramsb, %struct.Matrix* %positions, %struct.Matrix_diff* %positionsb)
  br label %if.end149

if.end149:                                        ; preds = %if.then148, %if.end142
  call void @popControl1b(i32* nonnull %branch) #31
  %49 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp150 = icmp eq i32 %49, 0
  br i1 %cmp150, label %if.then151, label %for.end241

if.then151:                                       ; preds = %if.end149
  %50 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %cmp154559 = icmp sgt i32 %50, 0
  br i1 %cmp154559, label %for.body155.lr.ph, label %for.end241

for.body155.lr.ph:                                ; preds = %if.then151
  %data156 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %positionsb, i64 0, i32 0
  %51 = load double*, double** %data156, align 8, !tbaa !225
  %52 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %53 = zext i32 %50 to i64
  %54 = sext i32 %52 to i64
  br label %for.body155

for.body155:                                      ; preds = %for.body155, %for.body155.lr.ph
  %indvars.iv563 = phi i64 [ %53, %for.body155.lr.ph ], [ %indvars.iv.next564, %for.body155 ]
  %indvars.iv.next564 = add nsw i64 %indvars.iv563, -1
  %55 = mul nsw i64 %indvars.iv.next564, %54
  %arrayidx161 = getelementptr inbounds double, double* %51, i64 %55
  %56 = load double, double* %arrayidx161, align 8, !tbaa !75
  %fneg = fneg fast double %56
  store double %fneg, double* %arrayidx161, align 8, !tbaa !75
  %cmp154 = icmp sgt i64 %indvars.iv563, 1
  br i1 %cmp154, label %for.body155, label %for.end241, !llvm.loop !265

for.end241:                                       ; preds = %for.body155, %if.then151, %if.end149
  %.pre570 = load i32, i32* %ncols52, align 4, !tbaa !139
  call void @get_new_matrix_b(i32 4, i32 %.pre570, %struct.Matrix_diff* undef)
  %57 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %58 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %mul.i543 = mul i32 %58, %57
  %cmp6.i = icmp sgt i32 %mul.i543, 0
  br i1 %cmp6.i, label %for.body.lr.ph.i545, label %for.end284

for.body.lr.ph.i545:                              ; preds = %for.end241
  %data.i544 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %positionsb, i64 0, i32 0
  %59 = load double*, double** %data.i544, align 8, !tbaa !225
  %60 = zext i32 %mul.i543 to i64
  %61 = add nsw i32 %mul.i543, -1
  %62 = zext i32 %61 to i64
  %63 = xor i64 %62, -1
  %64 = add nsw i64 %63, %60
  %scevgep.i = getelementptr double, double* %59, i64 %64
  %scevgep8.i = bitcast double* %scevgep.i to i8*
  %65 = shl nuw nsw i64 %60, 3
  call void @llvm.memset.p0i8.i64(i8* align 8 %scevgep8.i, i8 0, i64 %65, i1 false) #31
  br label %for.end284

for.end284:                                       ; preds = %for.body.lr.ph.i545, %for.end241
  %66 = load i32, i32* %ncols52, align 4, !tbaa !139
  call void @resize_b(%struct.Matrix* nonnull %positions, %struct.Matrix_diff* %positionsb, i32 3, i32 %66)
  call void @popControl1b(i32* nonnull %branch) #31
  %67 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp285 = icmp eq i32 %67, 1
  br i1 %cmp285, label %if.then286, label %if.end288

if.then286:                                       ; preds = %for.end284
  %68 = load double*, double** %8, align 8, !tbaa !137
  call void @popReal8(double* %68) #31
  br label %if.end288

if.end288:                                        ; preds = %if.then286, %for.end284
  call void @popPointer8(i8** nonnull %19) #31
  call void @popControl1b(i32* nonnull %branch) #31
  %69 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp290 = icmp eq i32 %69, 1
  br i1 %cmp290, label %if.then291, label %if.end293

if.then291:                                       ; preds = %if.end288
  %70 = load double*, double** %16, align 8, !tbaa !137
  call void @popReal8(double* %70) #31
  br label %if.end293

if.end293:                                        ; preds = %if.then291, %if.end288
  call void @popInteger4(i32* nonnull %14) #31
  call void @popInteger4(i32* nonnull %nrows4) #31
  call void @relatives_to_absolutes_b(i32 %bone_count, %struct.Matrix* %4, %struct.Matrix_diff* undef, i32* %parents, %struct.Matrix* %5, %struct.Matrix_diff* undef)
  call void @popPointer8(i8** nonnull %11) #31
  call void @popControl1b(i32* nonnull %branch) #31
  %71 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp297 = icmp eq i32 %71, 1
  br i1 %cmp297, label %if.then298, label %if.end300

if.then298:                                       ; preds = %if.end293
  %72 = load double*, double** %8, align 8, !tbaa !137
  call void @popReal8(double* %72) #31
  br label %if.end300

if.end300:                                        ; preds = %if.then298, %if.end293
  call void @popInteger4(i32* nonnull %6) #31
  call void @popInteger4(i32* nonnull %nrows.pre-phi) #31
  call void @get_posed_relatives_b(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix_diff* undef, %struct.Matrix* %pose_params, %struct.Matrix_diff* undef, %struct.Matrix* %4, %struct.Matrix_diff* undef)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @get_skinned_vertex_positions_c(i32 %bone_count, %struct.Matrix* nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix* nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %positions, i32 %apply_global) local_unnamed_addr #5 {
entry:
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #31
  %cmp20.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp20.i, label %for.body.preheader.i128, label %get_matrix_array_c.exit123

get_matrix_array_c.exit123:                       ; preds = %entry
  %call.i120 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %call.i126 = tail call noalias i8* @malloc(i64 %mul.i) #31
  br label %get_matrix_array_c.exit129

for.body.preheader.i128:                          ; preds = %entry
  %0 = zext i32 %bone_count to i64
  %1 = shl nuw nsw i64 %0, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %1, i1 false) #31
  %call.i120176 = tail call noalias i8* @malloc(i64 %mul.i) #31
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i120176, i8 0, i64 %1, i1 false) #31
  %call.i126180 = tail call noalias i8* @malloc(i64 %mul.i) #31
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i126180, i8 0, i64 %1, i1 false) #31
  br label %get_matrix_array_c.exit129

get_matrix_array_c.exit129:                       ; preds = %for.body.preheader.i128, %get_matrix_array_c.exit123
  %call.i126183 = phi i8* [ %call.i126, %get_matrix_array_c.exit123 ], [ %call.i126180, %for.body.preheader.i128 ]
  %call.i120177181 = phi i8* [ %call.i120, %get_matrix_array_c.exit123 ], [ %call.i120176, %for.body.preheader.i128 ]
  %2 = bitcast i8* %call.i to %struct.Matrix*
  %3 = bitcast i8* %call.i120177181 to %struct.Matrix*
  %4 = bitcast i8* %call.i126183 to %struct.Matrix*
  tail call void @get_posed_relatives_c(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %2)
  tail call void @relatives_to_absolutes_c(i32 %bone_count, %struct.Matrix* %2, i32* %parents, %struct.Matrix* %3)
  br i1 %cmp20.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array_c.exit129
  %wide.trip.count219 = zext i32 %bone_count to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %indvars.iv217 = phi i64 [ 0, %for.body.preheader ], [ %indvars.iv.next218, %for.body ]
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %indvars.iv217
  %arrayidx4 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %indvars.iv217
  %arrayidx6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv217
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx, %struct.Matrix* %arrayidx4, %struct.Matrix* %arrayidx6)
  %indvars.iv.next218 = add nuw nsw i64 %indvars.iv217, 1
  %exitcond220.not = icmp eq i64 %indvars.iv.next218, %wide.trip.count219
  br i1 %exitcond220.not, label %for.end, label %for.body, !llvm.loop !266

for.end:                                          ; preds = %for.body, %get_matrix_array_c.exit129
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %5 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %6 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %7 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i130 = mul nsw i32 %7, %6
  %mul3.i = mul i32 %5, 3
  %cmp.not.i = icmp eq i32 %mul.i130, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %8 = bitcast double** %data.i to i8**
  %9 = load i8*, i8** %8, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %9, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %9) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize_c.exit.thread, label %resize_c.exit.thread186

resize_c.exit.thread:                             ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i131 = tail call noalias i8* @malloc(i64 %mul11.i) #31
  store i8* %call.i131, i8** %8, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize_c.exit.thread186:                          ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill_c.exit

resize_c.exit:                                    ; preds = %for.end
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i130, 0
  br i1 %cmp7.i, label %resize_c.exit.for.body.lr.ph.i_crit_edge, label %fill_c.exit

resize_c.exit.for.body.lr.ph.i_crit_edge:         ; preds = %resize_c.exit
  %data.i132.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %10 = bitcast double** %data.i132.phi.trans.insert to i8**
  %.pre223 = load i8*, i8** %10, align 8, !tbaa !137
  %.pre221 = zext i32 %mul3.i to i64
  %.pre222 = shl nuw nsw i64 %.pre221, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize_c.exit.for.body.lr.ph.i_crit_edge, %resize_c.exit.thread
  %.pre-phi = phi i64 [ %.pre222, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize_c.exit.thread ]
  %11 = phi i8* [ %.pre223, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %call.i131, %resize_c.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %11, i8 0, i64 %.pre-phi, i1 false)
  br label %fill_c.exit

fill_c.exit:                                      ; preds = %for.body.lr.ph.i, %resize_c.exit, %resize_c.exit.thread186
  %12 = load i32, i32* %ncols, align 4, !tbaa !139
  %call.i133 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %13 = bitcast i8* %call.i133 to %struct.Matrix*
  %nrows1.i134 = bitcast i8* %call.i133 to i32*
  store i32 4, i32* %nrows1.i134, align 8, !tbaa !138
  %ncols2.i135 = getelementptr inbounds i8, i8* %call.i133, i64 4
  %14 = bitcast i8* %ncols2.i135 to i32*
  store i32 %12, i32* %14, align 4, !tbaa !139
  %mul.i136 = shl nsw i32 %12, 2
  %conv.i137 = sext i32 %mul.i136 to i64
  %mul3.i138 = shl nsw i64 %conv.i137, 3
  %call4.i = tail call noalias i8* @malloc(i64 %mul3.i138) #31
  %data.i139 = getelementptr inbounds i8, i8* %call.i133, i64 8
  %15 = bitcast i8* %data.i139 to i8**
  store i8* %call4.i, i8** %15, align 8, !tbaa !137
  br i1 %cmp20.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill_c.exit
  %16 = bitcast i8* %data.i139 to double**
  %data23 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 2
  %nrows24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 0
  %data30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count215 = zext i32 %bone_count to i64
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %indvars.iv213 = phi i64 [ 0, %for.body11.lr.ph ], [ %indvars.iv.next214, %for.inc43 ]
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv213
  tail call void @mat_mult_c(%struct.Matrix* %arrayidx13, %struct.Matrix* %base_positions, %struct.Matrix* %13)
  %17 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %cmp16191 = icmp sgt i32 %17, 0
  br i1 %cmp16191, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %18 = load double*, double** %16, align 8, !tbaa !137
  %19 = load i32, i32* %nrows1.i134, align 8, !tbaa !138
  %20 = load double*, double** %data23, align 8, !tbaa !137
  %21 = load i32, i32* %nrows24, align 8, !tbaa !138
  %22 = load double*, double** %data30, align 8, !tbaa !137
  %23 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %24 = sext i32 %19 to i64
  %25 = sext i32 %21 to i64
  %26 = sext i32 %23 to i64
  %wide.trip.count211 = zext i32 %17 to i64
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %indvars.iv204 = phi i64 [ 0, %for.cond18.preheader.lr.ph ], [ %indvars.iv.next205, %for.inc40 ]
  %27 = mul nsw i64 %indvars.iv204, %24
  %28 = mul nsw i64 %indvars.iv204, %25
  %29 = add nsw i64 %28, %indvars.iv213
  %arrayidx28 = getelementptr inbounds double, double* %20, i64 %29
  %30 = mul nsw i64 %indvars.iv204, %26
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %indvars.iv199 = phi i64 [ 0, %for.cond18.preheader ], [ %indvars.iv.next200, %for.body20 ]
  %31 = add nsw i64 %27, %indvars.iv199
  %arrayidx22 = getelementptr inbounds double, double* %18, i64 %31
  %32 = load double, double* %arrayidx22, align 8, !tbaa !75
  %33 = load double, double* %arrayidx28, align 8, !tbaa !75
  %mul29 = fmul fast double %33, %32
  %34 = add nsw i64 %30, %indvars.iv199
  %arrayidx35 = getelementptr inbounds double, double* %22, i64 %34
  %35 = load double, double* %arrayidx35, align 8, !tbaa !75
  %add36 = fadd fast double %35, %mul29
  store double %add36, double* %arrayidx35, align 8, !tbaa !75
  %indvars.iv.next200 = add nuw nsw i64 %indvars.iv199, 1
  %exitcond203.not = icmp eq i64 %indvars.iv.next200, 3
  br i1 %exitcond203.not, label %for.inc40, label %for.body20, !llvm.loop !267

for.inc40:                                        ; preds = %for.body20
  %indvars.iv.next205 = add nuw nsw i64 %indvars.iv204, 1
  %exitcond212.not = icmp eq i64 %indvars.iv.next205, %wide.trip.count211
  br i1 %exitcond212.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !268

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %indvars.iv.next214 = add nuw nsw i64 %indvars.iv213, 1
  %exitcond216.not = icmp eq i64 %indvars.iv.next214, %wide.trip.count215
  br i1 %exitcond216.not, label %for.end45, label %for.body11, !llvm.loop !269

for.end45:                                        ; preds = %for.inc43, %fill_c.exit
  %tobool.not = icmp eq i32 %is_mirrored, 0
  br i1 %tobool.not, label %if.end, label %for.cond46.preheader

for.cond46.preheader:                             ; preds = %for.end45
  %36 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %cmp48188 = icmp sgt i32 %36, 0
  br i1 %cmp48188, label %for.body49.lr.ph, label %if.end

for.body49.lr.ph:                                 ; preds = %for.cond46.preheader
  %data50 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %37 = load double*, double** %data50, align 8, !tbaa !137
  %38 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %39 = sext i32 %38 to i64
  %wide.trip.count = zext i32 %36 to i64
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body49.lr.ph ], [ %indvars.iv.next, %for.body49 ]
  %40 = mul nsw i64 %indvars.iv, %39
  %arrayidx55 = getelementptr inbounds double, double* %37, i64 %40
  %41 = load double, double* %arrayidx55, align 8, !tbaa !75
  %mul56 = fneg fast double %41
  store double %mul56, double* %arrayidx55, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.end, label %for.body49, !llvm.loop !270

if.end:                                           ; preds = %for.body49, %for.cond46.preheader, %for.end45
  %tobool60.not = icmp eq i32 %apply_global, 0
  br i1 %tobool60.not, label %if.end62, label %if.then61

if.then61:                                        ; preds = %if.end
  tail call void @apply_global_transform_c(%struct.Matrix* %pose_params, %struct.Matrix* %positions)
  br label %if.end62

if.end62:                                         ; preds = %if.then61, %if.end
  %42 = bitcast i8* %data.i139 to double**
  %43 = load double*, double** %42, align 8, !tbaa !137
  %cmp.not.i141 = icmp eq double* %43, null
  br i1 %cmp.not.i141, label %delete_matrix_c.exit, label %if.then.i142

if.then.i142:                                     ; preds = %if.end62
  %44 = bitcast double* %43 to i8*
  tail call void @free(i8* %44) #31
  br label %delete_matrix_c.exit

delete_matrix_c.exit:                             ; preds = %if.then.i142, %if.end62
  tail call void @free(i8* nonnull %call.i133) #31
  br i1 %cmp20.i, label %for.body.preheader.i145, label %delete_light_matrix_array_c.exit163.thread

for.body.preheader.i145:                          ; preds = %delete_matrix_c.exit
  %wide.trip.count.i144 = zext i32 %bone_count to i64
  br label %for.body.i148

for.body.i148:                                    ; preds = %for.inc.i, %for.body.preheader.i145
  %indvars.iv.i146 = phi i64 [ 0, %for.body.preheader.i145 ], [ %indvars.iv.next.i150, %for.inc.i ]
  %data.i147 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %2, i64 %indvars.iv.i146, i32 2
  %45 = bitcast double** %data.i147 to i8**
  %46 = load i8*, i8** %45, align 8, !tbaa !137
  %cmp1.not.i = icmp eq i8* %46, null
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i149

if.then.i149:                                     ; preds = %for.body.i148
  tail call void @free(i8* nonnull %46) #31
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i149, %for.body.i148
  %indvars.iv.next.i150 = add nuw nsw i64 %indvars.iv.i146, 1
  %exitcond.not.i151 = icmp eq i64 %indvars.iv.next.i150, %wide.trip.count.i144
  br i1 %exitcond.not.i151, label %for.body.preheader.i154, label %for.body.i148, !llvm.loop !227

for.body.preheader.i154:                          ; preds = %for.inc.i
  tail call void @free(i8* nonnull %call.i) #31
  br label %for.body.i158

for.body.i158:                                    ; preds = %for.inc.i162, %for.body.preheader.i154
  %indvars.iv.i155 = phi i64 [ 0, %for.body.preheader.i154 ], [ %indvars.iv.next.i160, %for.inc.i162 ]
  %data.i156 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %indvars.iv.i155, i32 2
  %47 = bitcast double** %data.i156 to i8**
  %48 = load i8*, i8** %47, align 8, !tbaa !137
  %cmp1.not.i157 = icmp eq i8* %48, null
  br i1 %cmp1.not.i157, label %for.inc.i162, label %if.then.i159

if.then.i159:                                     ; preds = %for.body.i158
  tail call void @free(i8* nonnull %48) #31
  br label %for.inc.i162

for.inc.i162:                                     ; preds = %if.then.i159, %for.body.i158
  %indvars.iv.next.i160 = add nuw nsw i64 %indvars.iv.i155, 1
  %exitcond.not.i161 = icmp eq i64 %indvars.iv.next.i160, %wide.trip.count.i144
  br i1 %exitcond.not.i161, label %for.body.preheader.i166, label %for.body.i158, !llvm.loop !227

delete_light_matrix_array_c.exit163.thread:       ; preds = %delete_matrix_c.exit
  tail call void @free(i8* %call.i) #31
  tail call void @free(i8* %call.i120177181) #31
  br label %delete_light_matrix_array_c.exit175

for.body.preheader.i166:                          ; preds = %for.inc.i162
  tail call void @free(i8* nonnull %call.i120177181) #31
  br label %for.body.i170

for.body.i170:                                    ; preds = %for.inc.i174, %for.body.preheader.i166
  %indvars.iv.i167 = phi i64 [ 0, %for.body.preheader.i166 ], [ %indvars.iv.next.i172, %for.inc.i174 ]
  %data.i168 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %indvars.iv.i167, i32 2
  %49 = bitcast double** %data.i168 to i8**
  %50 = load i8*, i8** %49, align 8, !tbaa !137
  %cmp1.not.i169 = icmp eq i8* %50, null
  br i1 %cmp1.not.i169, label %for.inc.i174, label %if.then.i171

if.then.i171:                                     ; preds = %for.body.i170
  tail call void @free(i8* nonnull %50) #31
  br label %for.inc.i174

for.inc.i174:                                     ; preds = %if.then.i171, %for.body.i170
  %indvars.iv.next.i172 = add nuw nsw i64 %indvars.iv.i167, 1
  %exitcond.not.i173 = icmp eq i64 %indvars.iv.next.i172, %wide.trip.count.i144
  br i1 %exitcond.not.i173, label %delete_light_matrix_array_c.exit175, label %for.body.i170, !llvm.loop !227

delete_light_matrix_array_c.exit175:              ; preds = %for.inc.i174, %delete_light_matrix_array_c.exit163.thread
  tail call void @free(i8* %call.i126183) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @to_pose_params_b(i32 %count, double* nocapture readonly %theta, double* nocapture %thetab, i8** nocapture readnone %bone_names, %struct.Matrix* %pose_params, %struct.Matrix_diff* %pose_paramsb) local_unnamed_addr #5 {
entry:
  %branch = alloca i32, align 4
  %0 = bitcast i32* %branch to i8*
  call void @llvm.lifetime.start.p0i8(i64 4, i8* nonnull %0) #31
  %add = add nsw i32 %count, 3
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %1 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 1
  %2 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %2, %1
  %mul3.i = mul nsw i32 %add, 3
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %data.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  br i1 %cmp.not.i, label %entry.resize_c.exit_crit_edge, label %if.then.i

entry.resize_c.exit_crit_edge:                    ; preds = %entry
  %.pre = load double*, double** %data.phi.trans.insert, align 8, !tbaa !137
  br label %resize_c.exit

if.then.i:                                        ; preds = %entry
  %3 = bitcast double** %data.phi.trans.insert to i8**
  %4 = load i8*, i8** %3, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %4, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %4) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %count, -3
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  store i8* %call.i, i8** %3, align 8, !tbaa !137
  %5 = bitcast i8* %call.i to double*
  br label %resize_c.exit

if.else.i:                                        ; preds = %if.end.i
  store double* null, double** %data.phi.trans.insert, align 8, !tbaa !137
  br label %resize_c.exit

resize_c.exit:                                    ; preds = %if.else.i, %if.then9.i, %entry.resize_c.exit_crit_edge
  %6 = phi double* [ %.pre, %entry.resize_c.exit_crit_edge ], [ %5, %if.then9.i ], [ null, %if.else.i ]
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body

for.body:                                         ; preds = %for.body, %resize_c.exit
  %indvars.iv246 = phi i64 [ 0, %resize_c.exit ], [ %indvars.iv.next247, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %theta, i64 %indvars.iv246
  %7 = load double, double* %arrayidx, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %6, i64 %indvars.iv246
  store double %7, double* %arrayidx2, align 8, !tbaa !75
  %8 = add nuw nsw i64 %indvars.iv246, 3
  %arrayidx7 = getelementptr inbounds double, double* %6, i64 %8
  store double 1.000000e+00, double* %arrayidx7, align 8, !tbaa !75
  %indvars.iv.next247 = add nuw nsw i64 %indvars.iv246, 1
  %exitcond249.not = icmp eq i64 %indvars.iv.next247, 3
  br i1 %exitcond249.not, label %for.cond11.preheader, label %for.body, !llvm.loop !271

for.cond11.preheader:                             ; preds = %for.end36, %for.body
  %i_finger.0237 = phi i32 [ %inc39, %for.end36 ], [ 0, %for.body ]
  %i_pose_params.0236 = phi i32 [ %inc37, %for.end36 ], [ 5, %for.body ]
  %i_theta.0235 = phi i32 [ %i_theta.2.lcssa, %for.end36 ], [ 6, %for.body ]
  br label %for.body13

for.body13:                                       ; preds = %if.end, %for.cond11.preheader
  %i.1234 = phi i32 [ 2, %for.cond11.preheader ], [ %inc35, %if.end ]
  %i_pose_params.1233 = phi i32 [ %i_pose_params.0236, %for.cond11.preheader ], [ %inc33, %if.end ]
  %i_theta.1232 = phi i32 [ %i_theta.0235, %for.cond11.preheader ], [ %i_theta.2, %if.end ]
  %idxprom14 = sext i32 %i_theta.1232 to i64
  %arrayidx15 = getelementptr inbounds double, double* %theta, i64 %idxprom14
  %9 = load double, double* %arrayidx15, align 8, !tbaa !75
  %10 = load double*, double** %data.phi.trans.insert, align 8, !tbaa !137
  %11 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %mul18 = mul nsw i32 %11, %i_pose_params.1233
  %idxprom20 = sext i32 %mul18 to i64
  %arrayidx21 = getelementptr inbounds double, double* %10, i64 %idxprom20
  store double %9, double* %arrayidx21, align 8, !tbaa !75
  %inc22 = add nsw i32 %i_theta.1232, 1
  %cmp23 = icmp eq i32 %i.1234, 2
  br i1 %cmp23, label %if.then, label %if.end

if.then:                                          ; preds = %for.body13
  %idxprom24 = sext i32 %inc22 to i64
  %arrayidx25 = getelementptr inbounds double, double* %theta, i64 %idxprom24
  %12 = load double, double* %arrayidx25, align 8, !tbaa !75
  %add29 = add nsw i32 %mul18, 1
  %idxprom30 = sext i32 %add29 to i64
  %arrayidx31 = getelementptr inbounds double, double* %10, i64 %idxprom30
  store double %12, double* %arrayidx31, align 8, !tbaa !75
  %inc32 = add nsw i32 %i_theta.1232, 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body13
  %.sink = phi i32 [ 0, %if.then ], [ 1, %for.body13 ]
  %i_theta.2 = phi i32 [ %inc32, %if.then ], [ %inc22, %for.body13 ]
  tail call void @pushControl1b(i32 %.sink) #31
  %inc33 = add nsw i32 %i_pose_params.1233, 1
  %inc35 = add nuw nsw i32 %i.1234, 1
  %exitcond.not = icmp eq i32 %inc35, 5
  br i1 %exitcond.not, label %for.end36, label %for.body13, !llvm.loop !272

for.end36:                                        ; preds = %if.end
  %i_theta.2.lcssa = phi i32 [ %i_theta.2, %if.end ]
  %i_pose_params.1233.lcssa = phi i32 [ %i_pose_params.1233, %if.end ]
  %inc37 = add nsw i32 %i_pose_params.1233.lcssa, 2
  %inc39 = add nuw nsw i32 %i_finger.0237, 1
  %exitcond245.not = icmp eq i32 %inc39, 5
  br i1 %exitcond245.not, label %for.end40, label %for.cond11.preheader, !llvm.loop !273

for.end40:                                        ; preds = %for.end36
  %inc37.lcssa = phi i32 [ %inc37, %for.end36 ]
  %i_theta.2.lcssa.lcssa = phi i32 [ %i_theta.2.lcssa, %for.end36 ]
  store double 0.000000e+00, double* %thetab, align 8, !tbaa !75
  %data53 = getelementptr inbounds %struct.Matrix_diff, %struct.Matrix_diff* %pose_paramsb, i64 0, i32 0
  br label %for.body43

for.body43:                                       ; preds = %for.inc90, %for.end40
  %i_finger.1231 = phi i32 [ 4, %for.end40 ], [ %dec91, %for.inc90 ]
  %i_pose_params.2230 = phi i32 [ %inc37.lcssa, %for.end40 ], [ %dec47.lcssa, %for.inc90 ]
  %i_theta.3229 = phi i32 [ %i_theta.2.lcssa.lcssa, %for.end40 ], [ %dec69.lcssa, %for.inc90 ]
  %dec = add nsw i32 %i_pose_params.2230, -1
  br label %for.body46

for.body46:                                       ; preds = %if.end68, %for.body43
  %i.2228 = phi i32 [ 4, %for.body43 ], [ %dec88, %if.end68 ]
  %i_pose_params.3227 = phi i32 [ %dec, %for.body43 ], [ %dec47, %if.end68 ]
  %i_theta.4226 = phi i32 [ %i_theta.3229, %for.body43 ], [ %dec69, %if.end68 ]
  %dec47 = add nsw i32 %i_pose_params.3227, -1
  call void @popControl1b(i32* nonnull %branch) #31
  %13 = load i32, i32* %branch, align 4, !tbaa !59
  %cmp48 = icmp eq i32 %13, 0
  br i1 %cmp48, label %if.then49, label %for.body46.if.end68_crit_edge

for.body46.if.end68_crit_edge:                    ; preds = %for.body46
  %.pre250 = load double*, double** %data53, align 8, !tbaa !225
  %.pre251 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %.pre252 = mul nsw i32 %.pre251, %dec47
  br label %if.end68

if.then49:                                        ; preds = %for.body46
  %dec50 = add nsw i32 %i_theta.4226, -1
  %idxprom51 = sext i32 %dec50 to i64
  %arrayidx52 = getelementptr inbounds double, double* %thetab, i64 %idxprom51
  %14 = load double, double* %arrayidx52, align 8, !tbaa !75
  %15 = load double*, double** %data53, align 8, !tbaa !225
  %16 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %mul55 = mul nsw i32 %16, %dec47
  %add56 = add nsw i32 %mul55, 1
  %idxprom57 = sext i32 %add56 to i64
  %arrayidx58 = getelementptr inbounds double, double* %15, i64 %idxprom57
  %17 = load double, double* %arrayidx58, align 8, !tbaa !75
  %add59 = fadd fast double %17, %14
  store double %add59, double* %arrayidx52, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx58, align 8, !tbaa !75
  br label %if.end68

if.end68:                                         ; preds = %if.then49, %for.body46.if.end68_crit_edge
  %mul74.pre-phi = phi i32 [ %.pre252, %for.body46.if.end68_crit_edge ], [ %mul55, %if.then49 ]
  %18 = phi i32 [ %.pre251, %for.body46.if.end68_crit_edge ], [ %16, %if.then49 ]
  %19 = phi double* [ %.pre250, %for.body46.if.end68_crit_edge ], [ %15, %if.then49 ]
  %i_theta.5 = phi i32 [ %i_theta.4226, %for.body46.if.end68_crit_edge ], [ %dec50, %if.then49 ]
  %dec69 = add nsw i32 %i_theta.5, -1
  %idxprom70 = sext i32 %dec69 to i64
  %arrayidx71 = getelementptr inbounds double, double* %thetab, i64 %idxprom70
  %20 = load double, double* %arrayidx71, align 8, !tbaa !75
  %idxprom76 = sext i32 %mul74.pre-phi to i64
  %arrayidx77 = getelementptr inbounds double, double* %19, i64 %idxprom76
  %21 = load double, double* %arrayidx77, align 8, !tbaa !75
  %add78 = fadd fast double %21, %20
  store double %add78, double* %arrayidx71, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx77, align 8, !tbaa !75
  %dec88 = add nsw i32 %i.2228, -1
  %cmp45 = icmp ugt i32 %i.2228, 2
  br i1 %cmp45, label %for.body46, label %for.inc90, !llvm.loop !274

for.inc90:                                        ; preds = %if.end68
  %.lcssa2 = phi i32 [ %18, %if.end68 ]
  %.lcssa = phi double* [ %19, %if.end68 ]
  %dec69.lcssa = phi i32 [ %dec69, %if.end68 ]
  %dec47.lcssa = phi i32 [ %dec47, %if.end68 ]
  %dec91 = add nsw i32 %i_finger.1231, -1
  %cmp42.not = icmp eq i32 %i_finger.1231, 0
  br i1 %cmp42.not, label %for.end92, label %for.body43, !llvm.loop !275

for.end92:                                        ; preds = %for.inc90
  %.lcssa2.lcssa = phi i32 [ %.lcssa2, %for.inc90 ]
  %.lcssa.lcssa = phi double* [ %.lcssa, %for.inc90 ]
  %cmp96223 = icmp sgt i32 %.lcssa2.lcssa, 0
  br i1 %cmp96223, label %for.body97.lr.ph, label %for.end136

for.body97.lr.ph:                                 ; preds = %for.end92
  %mul103 = shl nuw nsw i32 %.lcssa2.lcssa, 1
  %22 = zext i32 %.lcssa2.lcssa to i64
  %23 = sext i32 %mul103 to i64
  br label %for.body97

for.body97:                                       ; preds = %for.body97, %for.body97.lr.ph
  %indvars.iv = phi i64 [ %22, %for.body97.lr.ph ], [ %indvars.iv.next, %for.body97 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, -1
  %24 = add nuw nsw i64 %indvars.iv, 2
  %arrayidx100 = getelementptr inbounds double, double* %thetab, i64 %24
  %25 = load double, double* %arrayidx100, align 8, !tbaa !75
  %26 = add nsw i64 %indvars.iv.next, %23
  %arrayidx106 = getelementptr inbounds double, double* %.lcssa.lcssa, i64 %26
  %27 = load double, double* %arrayidx106, align 8, !tbaa !75
  %add107 = fadd fast double %27, %25
  store double %add107, double* %arrayidx100, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx106, align 8, !tbaa !75
  %28 = add nsw i64 %indvars.iv.next, %22
  %arrayidx122 = getelementptr inbounds double, double* %.lcssa.lcssa, i64 %28
  store double 0.000000e+00, double* %arrayidx122, align 8, !tbaa !75
  %arrayidx124 = getelementptr inbounds double, double* %thetab, i64 %indvars.iv.next
  %29 = load double, double* %arrayidx124, align 8, !tbaa !75
  %arrayidx127 = getelementptr inbounds double, double* %.lcssa.lcssa, i64 %indvars.iv.next
  %30 = load double, double* %arrayidx127, align 8, !tbaa !75
  %add128 = fadd fast double %30, %29
  store double %add128, double* %arrayidx124, align 8, !tbaa !75
  store double 0.000000e+00, double* %arrayidx127, align 8, !tbaa !75
  %cmp96 = icmp sgt i64 %indvars.iv, 1
  br i1 %cmp96, label %for.body97, label %for.end136, !llvm.loop !276

for.end136:                                       ; preds = %for.body97, %for.end92
  call void @resize_b(%struct.Matrix* %pose_params, %struct.Matrix_diff* %pose_paramsb, i32 3, i32 %add)
  call void @llvm.lifetime.end.p0i8(i64 4, i8* nonnull %0) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @to_pose_params_c(i32 %count, double* nocapture readonly %theta, i8** nocapture readnone %bone_names, %struct.Matrix* nocapture %pose_params) local_unnamed_addr #5 {
entry:
  %add = add nsw i32 %count, 3
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %0 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 1
  %1 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %1, %0
  %mul3.i = mul i32 %add, 3
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize_c.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %2 = bitcast double** %data.i to i8**
  %3 = load i8*, i8** %2, align 8, !tbaa !137
  %cmp4.not.i = icmp eq i8* %3, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  tail call void @free(i8* nonnull %3) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize_c.exit.thread, label %resize_c.exit.thread88

resize_c.exit.thread:                             ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  store i8* %call.i, i8** %2, align 8, !tbaa !137
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize_c.exit.thread88:                           ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill_c.exit

resize_c.exit:                                    ; preds = %entry
  store i32 %add, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i, 0
  br i1 %cmp7.i, label %resize_c.exit.for.body.lr.ph.i_crit_edge, label %fill_c.exit

resize_c.exit.for.body.lr.ph.i_crit_edge:         ; preds = %resize_c.exit
  %data.i86.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %4 = bitcast double** %data.i86.phi.trans.insert to i8**
  %.pre108 = load i8*, i8** %4, align 8, !tbaa !137
  %.pre106 = zext i32 %mul3.i to i64
  %.pre107 = shl nuw nsw i64 %.pre106, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize_c.exit.for.body.lr.ph.i_crit_edge, %resize_c.exit.thread
  %.pre-phi = phi i64 [ %.pre107, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize_c.exit.thread ]
  %5 = phi i8* [ %.pre108, %resize_c.exit.for.body.lr.ph.i_crit_edge ], [ %call.i, %resize_c.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %5, i8 0, i64 %.pre-phi, i1 false)
  br label %fill_c.exit

fill_c.exit:                                      ; preds = %for.body.lr.ph.i, %resize_c.exit, %resize_c.exit.thread88
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %6 = load double*, double** %data, align 8, !tbaa !137
  br label %for.body

for.body:                                         ; preds = %for.body, %fill_c.exit
  %indvars.iv101 = phi i64 [ 0, %fill_c.exit ], [ %indvars.iv.next102, %for.body ]
  %arrayidx = getelementptr inbounds double, double* %theta, i64 %indvars.iv101
  %7 = load double, double* %arrayidx, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %6, i64 %indvars.iv101
  store double %7, double* %arrayidx2, align 8, !tbaa !75
  %8 = add nuw nsw i64 %indvars.iv101, 3
  %arrayidx7 = getelementptr inbounds double, double* %6, i64 %8
  store double 1.000000e+00, double* %arrayidx7, align 8, !tbaa !75
  %arrayidx10 = getelementptr inbounds double, double* %theta, i64 %8
  %9 = load double, double* %arrayidx10, align 8, !tbaa !75
  %10 = add nuw nsw i64 %indvars.iv101, 6
  %arrayidx16 = getelementptr inbounds double, double* %6, i64 %10
  store double %9, double* %arrayidx16, align 8, !tbaa !75
  %indvars.iv.next102 = add nuw nsw i64 %indvars.iv101, 1
  %exitcond105.not = icmp eq i64 %indvars.iv.next102, 3
  br i1 %exitcond105.not, label %for.cond20.preheader, label %for.body, !llvm.loop !277

for.cond20.preheader:                             ; preds = %for.end45, %for.body
  %i_finger.095 = phi i32 [ %inc48, %for.end45 ], [ 0, %for.body ]
  %i_pose_params.094 = phi i32 [ %inc46, %for.end45 ], [ 5, %for.body ]
  %i_theta.093 = phi i32 [ %i_theta.2.lcssa, %for.end45 ], [ 6, %for.body ]
  %11 = sext i32 %i_pose_params.094 to i64
  %12 = add i32 %i_pose_params.094, 3
  br label %for.body22

for.body22:                                       ; preds = %if.end, %for.cond20.preheader
  %indvars.iv = phi i64 [ %11, %for.cond20.preheader ], [ %indvars.iv.next, %if.end ]
  %i.192 = phi i32 [ 2, %for.cond20.preheader ], [ %inc44, %if.end ]
  %i_theta.190 = phi i32 [ %i_theta.093, %for.cond20.preheader ], [ %i_theta.2, %if.end ]
  %idxprom23 = sext i32 %i_theta.190 to i64
  %arrayidx24 = getelementptr inbounds double, double* %theta, i64 %idxprom23
  %13 = load double, double* %arrayidx24, align 8, !tbaa !75
  %14 = mul nsw i64 %indvars.iv, 3
  %arrayidx30 = getelementptr inbounds double, double* %6, i64 %14
  store double %13, double* %arrayidx30, align 8, !tbaa !75
  %inc31 = add nsw i32 %i_theta.190, 1
  %cmp32 = icmp eq i32 %i.192, 2
  br i1 %cmp32, label %if.then, label %if.end

if.then:                                          ; preds = %for.body22
  %idxprom33 = sext i32 %inc31 to i64
  %arrayidx34 = getelementptr inbounds double, double* %theta, i64 %idxprom33
  %15 = load double, double* %arrayidx34, align 8, !tbaa !75
  %16 = add nsw i64 %14, 1
  %arrayidx40 = getelementptr inbounds double, double* %6, i64 %16
  store double %15, double* %arrayidx40, align 8, !tbaa !75
  %inc41 = add nsw i32 %i_theta.190, 2
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body22
  %i_theta.2 = phi i32 [ %inc41, %if.then ], [ %inc31, %for.body22 ]
  %indvars.iv.next = add nsw i64 %indvars.iv, 1
  %inc44 = add nuw nsw i32 %i.192, 1
  %lftr.wideiv1 = trunc i64 %indvars.iv.next to i32
  %exitcond = icmp eq i32 %12, %lftr.wideiv1
  br i1 %exitcond, label %for.end45, label %for.body22, !llvm.loop !278

for.end45:                                        ; preds = %if.end
  %i_theta.2.lcssa = phi i32 [ %i_theta.2, %if.end ]
  %indvars.iv.lcssa = phi i64 [ %indvars.iv, %if.end ]
  %17 = trunc i64 %indvars.iv.lcssa to i32
  %inc46 = add nsw i32 %17, 2
  %inc48 = add nuw nsw i32 %i_finger.095, 1
  %exitcond99.not = icmp eq i32 %inc48, 5
  br i1 %exitcond99.not, label %for.end49, label %for.cond20.preheader, !llvm.loop !279

for.end49:                                        ; preds = %for.end45
  ret void
}

; Function Attrs: nofree nounwind willreturn
declare dso_local i64 @strtol(i8* readonly, i8** nocapture, i32) local_unnamed_addr #21

; Function Attrs: noreturn
declare dso_local void @_ZSt24__throw_invalid_argumentPKc(i8*) local_unnamed_addr #22

; Function Attrs: nounwind readnone willreturn
declare dso_local i32* @__errno_location() local_unnamed_addr #23

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_out_of_rangePKc(i8*) local_unnamed_addr #22

; Function Attrs: nofree nounwind willreturn
declare dso_local double @strtod(i8* readonly, i8** nocapture) local_unnamed_addr #21

; Function Attrs: inlinehint nounwind uwtable
define linkonce_odr dso_local void @_ZN20HandModelLightMatrixD2Ev(%class.HandModelLightMatrix* nonnull dereferenceable(169) %this) unnamed_addr #24 comdat align 2 {
entry:
  %_M_start.i.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 6, i32 0, i32 0, i32 0, i32 0
  %0 = load %struct.Triangle*, %struct.Triangle** %_M_start.i.i, align 8, !tbaa !142
  %tobool.not.i.i.i = icmp eq %struct.Triangle* %0, null
  br i1 %tobool.not.i.i.i, label %_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit, label %if.then.i.i.i

if.then.i.i.i:                                    ; preds = %entry
  %1 = bitcast %struct.Triangle* %0 to i8*
  tail call void @_ZdlPv(i8* nonnull %1) #31
  br label %_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit

_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit:          ; preds = %if.then.i.i.i, %entry
  %is_data_owner_.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 5, i32 0
  %2 = load i8, i8* %is_data_owner_.i, align 8, !tbaa !68, !range !90
  %tobool.not.i = icmp eq i8 %2, 0
  br i1 %tobool.not.i, label %_ZN11LightMatrixIdED2Ev.exit, label %land.lhs.true.i

land.lhs.true.i:                                  ; preds = %_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit
  %data_.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 5, i32 3
  %3 = load double*, double** %data_.i, align 8, !tbaa !73
  %cmp.not.i = icmp eq double* %3, null
  br i1 %cmp.not.i, label %_ZN11LightMatrixIdED2Ev.exit, label %delete.notnull.i

delete.notnull.i:                                 ; preds = %land.lhs.true.i
  %4 = bitcast double* %3 to i8*
  tail call void @_ZdaPv(i8* %4) #37
  br label %_ZN11LightMatrixIdED2Ev.exit

_ZN11LightMatrixIdED2Ev.exit:                     ; preds = %delete.notnull.i, %land.lhs.true.i, %_ZNSt6vectorI8TriangleSaIS0_EED2Ev.exit
  %is_data_owner_.i2 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 4, i32 0
  %5 = load i8, i8* %is_data_owner_.i2, align 8, !tbaa !68, !range !90
  %tobool.not.i3 = icmp eq i8 %5, 0
  br i1 %tobool.not.i3, label %_ZN11LightMatrixIdED2Ev.exit8, label %land.lhs.true.i6

land.lhs.true.i6:                                 ; preds = %_ZN11LightMatrixIdED2Ev.exit
  %data_.i4 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 4, i32 3
  %6 = load double*, double** %data_.i4, align 8, !tbaa !73
  %cmp.not.i5 = icmp eq double* %6, null
  br i1 %cmp.not.i5, label %_ZN11LightMatrixIdED2Ev.exit8, label %delete.notnull.i7

delete.notnull.i7:                                ; preds = %land.lhs.true.i6
  %7 = bitcast double* %6 to i8*
  tail call void @_ZdaPv(i8* %7) #37
  br label %_ZN11LightMatrixIdED2Ev.exit8

_ZN11LightMatrixIdED2Ev.exit8:                    ; preds = %delete.notnull.i7, %land.lhs.true.i6, %_ZN11LightMatrixIdED2Ev.exit
  %_M_start.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 3, i32 0, i32 0, i32 0, i32 0
  %8 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i, align 8, !tbaa !143
  %_M_finish.i = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 3, i32 0, i32 0, i32 0, i32 1
  %9 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i, align 8, !tbaa !65
  %cmp.not3.i.i.i.i = icmp eq %class.LightMatrix* %8, %9
  br i1 %cmp.not3.i.i.i.i, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i, label %for.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i, %_ZN11LightMatrixIdED2Ev.exit8
  %__first.addr.04.i.i.i.i = phi %class.LightMatrix* [ %incdec.ptr.i.i.i.i, %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i ], [ %8, %_ZN11LightMatrixIdED2Ev.exit8 ]
  %is_data_owner_.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i, i64 0, i32 0
  %10 = load i8, i8* %is_data_owner_.i.i.i.i.i.i, align 8, !tbaa !68, !range !90
  %tobool.not.i.i.i.i.i.i = icmp eq i8 %10, 0
  br i1 %tobool.not.i.i.i.i.i.i, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i, label %land.lhs.true.i.i.i.i.i.i

land.lhs.true.i.i.i.i.i.i:                        ; preds = %for.body.i.i.i.i
  %data_.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i, i64 0, i32 3
  %11 = load double*, double** %data_.i.i.i.i.i.i, align 8, !tbaa !73
  %cmp.not.i.i.i.i.i.i = icmp eq double* %11, null
  br i1 %cmp.not.i.i.i.i.i.i, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i, label %delete.notnull.i.i.i.i.i.i

delete.notnull.i.i.i.i.i.i:                       ; preds = %land.lhs.true.i.i.i.i.i.i
  %12 = bitcast double* %11 to i8*
  tail call void @_ZdaPv(i8* %12) #37
  br label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i

_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i: ; preds = %delete.notnull.i.i.i.i.i.i, %land.lhs.true.i.i.i.i.i.i, %for.body.i.i.i.i
  %incdec.ptr.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i, i64 1
  %cmp.not.i.i.i.i = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i.i, %9
  br i1 %cmp.not.i.i.i.i, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i, label %for.body.i.i.i.i, !llvm.loop !280

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i: ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i
  %.pre.i = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i, align 8, !tbaa !143
  br label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i: ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i, %_ZN11LightMatrixIdED2Ev.exit8
  %13 = phi %class.LightMatrix* [ %.pre.i, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i ], [ %8, %_ZN11LightMatrixIdED2Ev.exit8 ]
  %tobool.not.i.i.i9 = icmp eq %class.LightMatrix* %13, null
  br i1 %tobool.not.i.i.i9, label %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit, label %if.then.i.i.i10

if.then.i.i.i10:                                  ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i
  %14 = getelementptr %class.LightMatrix, %class.LightMatrix* %13, i64 0, i32 0
  tail call void @_ZdlPv(i8* %14) #31
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit

_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit:   ; preds = %if.then.i.i.i10, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i
  %_M_start.i11 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 2, i32 0, i32 0, i32 0, i32 0
  %15 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i11, align 8, !tbaa !143
  %_M_finish.i12 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 2, i32 0, i32 0, i32 0, i32 1
  %16 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i12, align 8, !tbaa !65
  %cmp.not3.i.i.i.i13 = icmp eq %class.LightMatrix* %15, %16
  br i1 %cmp.not3.i.i.i.i13, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28, label %for.body.i.i.i.i17

for.body.i.i.i.i17:                               ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit
  %__first.addr.04.i.i.i.i14 = phi %class.LightMatrix* [ %incdec.ptr.i.i.i.i22, %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24 ], [ %15, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit ]
  %is_data_owner_.i.i.i.i.i.i15 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i14, i64 0, i32 0
  %17 = load i8, i8* %is_data_owner_.i.i.i.i.i.i15, align 8, !tbaa !68, !range !90
  %tobool.not.i.i.i.i.i.i16 = icmp eq i8 %17, 0
  br i1 %tobool.not.i.i.i.i.i.i16, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24, label %land.lhs.true.i.i.i.i.i.i20

land.lhs.true.i.i.i.i.i.i20:                      ; preds = %for.body.i.i.i.i17
  %data_.i.i.i.i.i.i18 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i14, i64 0, i32 3
  %18 = load double*, double** %data_.i.i.i.i.i.i18, align 8, !tbaa !73
  %cmp.not.i.i.i.i.i.i19 = icmp eq double* %18, null
  br i1 %cmp.not.i.i.i.i.i.i19, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24, label %delete.notnull.i.i.i.i.i.i21

delete.notnull.i.i.i.i.i.i21:                     ; preds = %land.lhs.true.i.i.i.i.i.i20
  %19 = bitcast double* %18 to i8*
  tail call void @_ZdaPv(i8* %19) #37
  br label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24

_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24: ; preds = %delete.notnull.i.i.i.i.i.i21, %land.lhs.true.i.i.i.i.i.i20, %for.body.i.i.i.i17
  %incdec.ptr.i.i.i.i22 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i.i14, i64 1
  %cmp.not.i.i.i.i23 = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i.i22, %16
  br i1 %cmp.not.i.i.i.i23, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i26, label %for.body.i.i.i.i17, !llvm.loop !280

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i26: ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i.i24
  %.pre.i25 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i11, align 8, !tbaa !143
  br label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28: ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i26, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit
  %20 = phi %class.LightMatrix* [ %.pre.i25, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.loopexit.i26 ], [ %15, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit ]
  %tobool.not.i.i.i27 = icmp eq %class.LightMatrix* %20, null
  br i1 %tobool.not.i.i.i27, label %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30, label %if.then.i.i.i29

if.then.i.i.i29:                                  ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28
  %21 = getelementptr %class.LightMatrix, %class.LightMatrix* %20, i64 0, i32 0
  tail call void @_ZdlPv(i8* %21) #31
  br label %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30

_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30: ; preds = %if.then.i.i.i29, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit.i28
  %_M_start.i.i31 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 1, i32 0, i32 0, i32 0, i32 0
  %22 = load i32*, i32** %_M_start.i.i31, align 8, !tbaa !64
  %tobool.not.i.i.i32 = icmp eq i32* %22, null
  br i1 %tobool.not.i.i.i32, label %_ZNSt6vectorIiSaIiEED2Ev.exit, label %if.then.i.i.i33

if.then.i.i.i33:                                  ; preds = %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30
  %23 = bitcast i32* %22 to i8*
  tail call void @_ZdlPv(i8* nonnull %23) #31
  br label %_ZNSt6vectorIiSaIiEED2Ev.exit

_ZNSt6vectorIiSaIiEED2Ev.exit:                    ; preds = %if.then.i.i.i33, %_ZNSt6vectorI11LightMatrixIdESaIS1_EED2Ev.exit30
  %_M_start.i34 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 0, i32 0, i32 0, i32 0, i32 0
  %24 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i34, align 8, !tbaa !81
  %_M_finish.i35 = getelementptr inbounds %class.HandModelLightMatrix, %class.HandModelLightMatrix* %this, i64 0, i32 0, i32 0, i32 0, i32 0, i32 1
  %25 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i35, align 8, !tbaa !32
  %cmp.not3.i.i.i.i36 = icmp eq %"class.std::__cxx11::basic_string"* %24, %25
  br i1 %cmp.not3.i.i.i.i36, label %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i, label %for.body.i.i.i.i38

for.body.i.i.i.i38:                               ; preds = %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i, %_ZNSt6vectorIiSaIiEED2Ev.exit
  %__first.addr.04.i.i.i.i37 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i39, %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i ], [ %24, %_ZNSt6vectorIiSaIiEED2Ev.exit ]
  %_M_p.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.04.i.i.i.i37, i64 0, i32 0, i32 0
  %26 = load i8*, i8** %_M_p.i.i.i.i.i.i.i.i.i, align 8, !tbaa !17
  %27 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.04.i.i.i.i37, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %27 to i8*
  %cmp.i.i.i.i.i.i.i.i = icmp eq i8* %26, %arraydecay.i.i.i.i.i.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i.i, label %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i, label %if.then.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i:                            ; preds = %for.body.i.i.i.i38
  tail call void @_ZdlPv(i8* %26) #31
  br label %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i

_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i: ; preds = %if.then.i.i.i.i.i.i.i, %for.body.i.i.i.i38
  %incdec.ptr.i.i.i.i39 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.04.i.i.i.i37, i64 1
  %cmp.not.i.i.i.i40 = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i39, %25
  br i1 %cmp.not.i.i.i.i40, label %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.loopexit.i, label %for.body.i.i.i.i38, !llvm.loop !281

_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.loopexit.i: ; preds = %_ZSt8_DestroyINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEvPT_.exit.i.i.i.i
  %.pre.i41 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i34, align 8, !tbaa !81
  br label %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i

_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i: ; preds = %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.loopexit.i, %_ZNSt6vectorIiSaIiEED2Ev.exit
  %28 = phi %"class.std::__cxx11::basic_string"* [ %.pre.i41, %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.loopexit.i ], [ %24, %_ZNSt6vectorIiSaIiEED2Ev.exit ]
  %tobool.not.i.i.i42 = icmp eq %"class.std::__cxx11::basic_string"* %28, null
  br i1 %tobool.not.i.i.i42, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev.exit, label %if.then.i.i.i43

if.then.i.i.i43:                                  ; preds = %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i
  %29 = bitcast %"class.std::__cxx11::basic_string"* %28 to i8*
  tail call void @_ZdlPv(i8* nonnull %29) #31
  br label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev.exit

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EED2Ev.exit: ; preds = %if.then.i.i.i43, %_ZSt8_DestroyIPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_EvT_S7_RSaIT0_E.exit.i
  ret void
}

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdaPv(i8*) local_unnamed_addr #25

; Function Attrs: nobuiltin nounwind
declare dso_local void @_ZdlPv(i8*) local_unnamed_addr #25

declare dso_local nonnull align 8 dereferenceable(32) %"class.std::__cxx11::basic_string"* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i8*, i64) local_unnamed_addr #3

; Function Attrs: argmemonly nofree nounwind readonly willreturn
declare dso_local i64 @strlen(i8* nocapture) local_unnamed_addr #4

; Function Attrs: noreturn
declare dso_local void @_ZSt20__throw_length_errorPKc(i8*) local_unnamed_addr #22

declare dso_local i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i64* nonnull align 8 dereferenceable(8), i64) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%"class.std::vector"* nonnull dereferenceable(24) %this, %"class.std::__cxx11::basic_string"* %__position.coerce, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %__args) local_unnamed_addr #0 comdat align 2 {
entry:
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i26.i, align 8, !tbaa !32
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i27.i, align 8, !tbaa !81
  %sub.ptr.lhs.cast.i28.i = ptrtoint %"class.std::__cxx11::basic_string"* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %"class.std::__cxx11::basic_string"* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = ashr exact i64 %sub.ptr.sub.i30.i, 5
  %cmp.i = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775776
  br i1 %cmp.i, label %if.then.i, label %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.25, i64 0, i64 0)) #33
  unreachable

_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %cmp.i.i = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 288230376151711743
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 288230376151711743, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 5
  %cmp.not.i = icmp eq i64 %cond.i, 0
  br i1 %cmp.not.i, label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit, label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i: ; preds = %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit
  %mul.i.i.i = shl nuw nsw i64 %cond.i, 5
  %call2.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #35
  %2 = bitcast i8* %call2.i.i.i to %"class.std::__cxx11::basic_string"*
  br label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit

_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit: ; preds = %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i, %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit
  %cond.i62 = phi %"class.std::__cxx11::basic_string"* [ %2, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i ], [ null, %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %sub.ptr.div.i
  %3 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %sub.ptr.div.i, i32 2
  %4 = bitcast %"class.std::__cxx11::basic_string"* %add.ptr to %union.anon**
  store %union.anon* %3, %union.anon** %4, align 8, !tbaa !14
  %_M_p.i.i23.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %_M_p.i.i23.i.i.i, align 8, !tbaa !17
  %6 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 2
  %arraydecay.i.i.i.i.i = bitcast %union.anon* %6 to i8*
  %cmp.i.i.i.i = icmp eq i8* %5, %arraydecay.i.i.i.i.i
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i, label %if.else.i.i.i

if.then.i.i.i:                                    ; preds = %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit
  %arraydecay.i.i.i.i = bitcast %union.anon* %3 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %arraydecay.i.i.i.i, i8* nonnull align 8 dereferenceable(16) %5, i64 16, i1 false) #31
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit

if.else.i.i.i:                                    ; preds = %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit
  %_M_p.i21.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %add.ptr, i64 0, i32 0, i32 0
  store i8* %5, i8** %_M_p.i21.i.i.i, align 8, !tbaa !17
  %_M_allocated_capacity.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 2, i32 0
  %7 = load i64, i64* %_M_allocated_capacity.i.i.i, align 8, !tbaa !21
  %_M_allocated_capacity.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %sub.ptr.div.i, i32 2, i32 0
  store i64 %7, i64* %_M_allocated_capacity.i.i.i.i, align 8, !tbaa !21
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit: ; preds = %if.else.i.i.i, %if.then.i.i.i
  %_M_string_length.i20.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 1
  %8 = load i64, i64* %_M_string_length.i20.i.i.i, align 8, !tbaa !19
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %sub.ptr.div.i, i32 1
  store i64 %8, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19
  %9 = bitcast %"class.std::__cxx11::basic_string"* %__args to %union.anon**
  store %union.anon* %6, %union.anon** %9, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i20.i.i.i, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i.i, align 8, !tbaa !21
  %cmp.not8.i.i.i.i39 = icmp eq %"class.std::__cxx11::basic_string"* %1, %__position.coerce
  br i1 %cmp.not8.i.i.i.i39, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59, label %for.body.i.i.i.i45

for.body.i.i.i.i45:                               ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit
  %__cur.011.i.i.i.i40 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr2.i.i.i.i55, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57 ], [ %cond.i62, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit ]
  %__first.addr.09.i.i.i.i41 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i54, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57 ], [ %1, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit ]
  %10 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 2
  %11 = bitcast %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40 to %union.anon**
  store %union.anon* %10, %union.anon** %11, align 8, !tbaa !14
  %_M_p.i.i23.i.i.i.i.i.i.i.i42 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 0, i32 0
  %12 = load i8*, i8** %_M_p.i.i23.i.i.i.i.i.i.i.i42, align 8, !tbaa !17
  %13 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i.i43 = bitcast %union.anon* %13 to i8*
  %cmp.i.i.i.i.i.i.i.i.i44 = icmp eq i8* %12, %arraydecay.i.i.i.i.i.i.i.i.i.i43
  br i1 %cmp.i.i.i.i.i.i.i.i.i44, label %if.then.i.i.i.i.i.i.i.i47, label %if.else.i.i.i.i.i.i.i.i51

if.then.i.i.i.i.i.i.i.i47:                        ; preds = %for.body.i.i.i.i45
  %arraydecay.i.i.i.i.i.i.i.i.i46 = bitcast %union.anon* %10 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %arraydecay.i.i.i.i.i.i.i.i.i46, i8* nonnull align 8 dereferenceable(16) %12, i64 16, i1 false) #31
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57

if.else.i.i.i.i.i.i.i.i51:                        ; preds = %for.body.i.i.i.i45
  %_M_p.i21.i.i.i.i.i.i.i.i48 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 0, i32 0
  store i8* %12, i8** %_M_p.i21.i.i.i.i.i.i.i.i48, align 8, !tbaa !17
  %_M_allocated_capacity.i.i.i.i.i.i.i.i49 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 2, i32 0
  %14 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i49, align 8, !tbaa !21
  %_M_allocated_capacity.i.i.i.i.i.i.i.i.i50 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 2, i32 0
  store i64 %14, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i.i50, align 8, !tbaa !21
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57

_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57: ; preds = %if.else.i.i.i.i.i.i.i.i51, %if.then.i.i.i.i.i.i.i.i47
  %_M_string_length.i20.i.i.i.i.i.i.i.i52 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 1
  %15 = load i64, i64* %_M_string_length.i20.i.i.i.i.i.i.i.i52, align 8, !tbaa !19
  %_M_string_length.i.i.i.i.i.i.i.i.i53 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 1
  store i64 %15, i64* %_M_string_length.i.i.i.i.i.i.i.i.i53, align 8, !tbaa !19
  %16 = bitcast %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41 to %union.anon**
  store %union.anon* %13, %union.anon** %16, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i20.i.i.i.i.i.i.i.i52, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i.i.i.i.i.i.i43, align 8, !tbaa !21
  %incdec.ptr.i.i.i.i54 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 1
  %incdec.ptr2.i.i.i.i55 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 1
  %cmp.not.i.i.i.i56 = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i54, %__position.coerce
  br i1 %cmp.not.i.i.i.i56, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59, label %for.body.i.i.i.i45, !llvm.loop !282

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59: ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit
  %__cur.0.lcssa.i.i.i.i58 = phi %"class.std::__cxx11::basic_string"* [ %cond.i62, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JS5_EEEvRS6_PT_DpOT0_.exit ], [ %incdec.ptr2.i.i.i.i55, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57 ]
  %incdec.ptr = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.0.lcssa.i.i.i.i58, i64 1
  %cmp.not8.i.i.i.i = icmp eq %"class.std::__cxx11::basic_string"* %0, %__position.coerce
  br i1 %cmp.not8.i.i.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit, label %for.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59
  %__cur.011.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr2.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ], [ %incdec.ptr, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59 ]
  %__first.addr.09.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ], [ %__position.coerce, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59 ]
  %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 2
  %18 = bitcast %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i to %union.anon**
  store %union.anon* %17, %union.anon** %18, align 8, !tbaa !14
  %_M_p.i.i23.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 0, i32 0
  %19 = load i8*, i8** %_M_p.i.i23.i.i.i.i.i.i.i.i, align 8, !tbaa !17
  %20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %20 to i8*
  %cmp.i.i.i.i.i.i.i.i.i = icmp eq i8* %19, %arraydecay.i.i.i.i.i.i.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i.i:                          ; preds = %for.body.i.i.i.i
  %arraydecay.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %17 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %arraydecay.i.i.i.i.i.i.i.i.i, i8* nonnull align 8 dereferenceable(16) %19, i64 16, i1 false) #31
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i

if.else.i.i.i.i.i.i.i.i:                          ; preds = %for.body.i.i.i.i
  %_M_p.i21.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 0, i32 0
  store i8* %19, i8** %_M_p.i21.i.i.i.i.i.i.i.i, align 8, !tbaa !17
  %_M_allocated_capacity.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 2, i32 0
  %21 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i, align 8, !tbaa !21
  %_M_allocated_capacity.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 2, i32 0
  store i64 %21, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i.i, align 8, !tbaa !21
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i

_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i
  %_M_string_length.i20.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 1
  %22 = load i64, i64* %_M_string_length.i20.i.i.i.i.i.i.i.i, align 8, !tbaa !19
  %_M_string_length.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 1
  store i64 %22, i64* %_M_string_length.i.i.i.i.i.i.i.i.i, align 8, !tbaa !19
  %23 = bitcast %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i to %union.anon**
  store %union.anon* %20, %union.anon** %23, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i20.i.i.i.i.i.i.i.i, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i.i.i.i.i.i.i, align 8, !tbaa !21
  %incdec.ptr.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 1
  %incdec.ptr2.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 1
  %cmp.not.i.i.i.i = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i, %0
  br i1 %cmp.not.i.i.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit, label %for.body.i.i.i.i, !llvm.loop !282

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit: ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59
  %__cur.0.lcssa.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59 ], [ %incdec.ptr2.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ]
  %tobool.not.i = icmp eq %"class.std::__cxx11::basic_string"* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit, label %if.then.i38

if.then.i38:                                      ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit
  %24 = bitcast %"class.std::__cxx11::basic_string"* %1 to i8*
  tail call void @_ZdlPv(i8* nonnull %24) #31
  br label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit

_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit: ; preds = %if.then.i38, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  store %"class.std::__cxx11::basic_string"* %cond.i62, %"class.std::__cxx11::basic_string"** %_M_start.i27.i, align 8, !tbaa !81
  store %"class.std::__cxx11::basic_string"* %__cur.0.lcssa.i.i.i.i, %"class.std::__cxx11::basic_string"** %_M_finish.i26.i, align 8, !tbaa !32
  %add.ptr20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %cond.i
  store %"class.std::__cxx11::basic_string"* %add.ptr20, %"class.std::__cxx11::basic_string"** %_M_end_of_storage, align 8, !tbaa !34
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt17__throw_bad_allocv() local_unnamed_addr #22

; Function Attrs: nounwind
declare dso_local i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12find_last_ofEPKcmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i8*, i64, i64) local_unnamed_addr #6

; Function Attrs: noreturn
declare dso_local void @_ZSt24__throw_out_of_range_fmtPKcz(i8*, ...) local_unnamed_addr #22

; Function Attrs: nounwind
declare dso_local i64 @_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5rfindEcm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i8 signext, i64) local_unnamed_addr #6

declare dso_local void @_ZNSt9basic_iosIcSt11char_traitsIcEE5clearESt12_Ios_Iostate(%"class.std::basic_ios"* nonnull dereferenceable(264), i32) local_unnamed_addr #3

declare dso_local %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv(%"class.std::basic_filebuf"* nonnull dereferenceable(240)) local_unnamed_addr #3

; Function Attrs: nounwind
declare dso_local void @_ZNSt12__basic_fileIcED1Ev(%"class.std::__basic_file"* nonnull dereferenceable(9)) unnamed_addr #6

; Function Attrs: nounwind
declare dso_local void @_ZNSt6localeD1Ev(%"class.std::locale"* nonnull dereferenceable(8)) unnamed_addr #6

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_baseD2Ev(%"class.std::ios_base"* nonnull dereferenceable(216)) unnamed_addr #6

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_M_realloc_insertIJRKS5_EEEvN9__gnu_cxx17__normal_iteratorIPS5_S7_EEDpOT_(%"class.std::vector"* nonnull dereferenceable(24) %this, %"class.std::__cxx11::basic_string"* %__position.coerce, %"class.std::__cxx11::basic_string"* nonnull align 8 dereferenceable(32) %__args) local_unnamed_addr #0 comdat align 2 {
entry:
  %__dnew.i.i.i.i.i.i = alloca i64, align 8
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_finish.i26.i, align 8, !tbaa !32
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %"class.std::__cxx11::basic_string"*, %"class.std::__cxx11::basic_string"** %_M_start.i27.i, align 8, !tbaa !81
  %sub.ptr.lhs.cast.i28.i = ptrtoint %"class.std::__cxx11::basic_string"* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %"class.std::__cxx11::basic_string"* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = ashr exact i64 %sub.ptr.sub.i30.i, 5
  %cmp.i = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775776
  br i1 %cmp.i, label %if.then.i, label %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.25, i64 0, i64 0)) #33
  unreachable

_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %cmp.i.i = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 288230376151711743
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 288230376151711743, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %"class.std::__cxx11::basic_string"* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = ashr exact i64 %sub.ptr.sub.i, 5
  %cmp.not.i = icmp eq i64 %cond.i, 0
  br i1 %cmp.not.i, label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit, label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i: ; preds = %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit
  %mul.i.i.i = shl nuw nsw i64 %cond.i, 5
  %call2.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #35
  %2 = bitcast i8* %call2.i.i.i to %"class.std::__cxx11::basic_string"*
  br label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit

_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit: ; preds = %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i, %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit
  %cond.i62 = phi %"class.std::__cxx11::basic_string"* [ %2, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE8allocateERS6_m.exit.i ], [ null, %_ZNKSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %sub.ptr.div.i
  %3 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %sub.ptr.div.i, i32 2
  %4 = bitcast %"class.std::__cxx11::basic_string"* %add.ptr to %union.anon**
  store %union.anon* %3, %union.anon** %4, align 8, !tbaa !14
  %_M_p.i9.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 0, i32 0
  %5 = load i8*, i8** %_M_p.i9.i.i.i, align 8, !tbaa !17
  %_M_string_length.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__args, i64 0, i32 1
  %6 = load i64, i64* %_M_string_length.i.i.i.i, align 8, !tbaa !19
  %7 = bitcast i64* %__dnew.i.i.i.i.i.i to i8*
  call void @llvm.lifetime.start.p0i8(i64 8, i8* nonnull %7) #31
  store i64 %6, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20
  %cmp3.i.i.i.i.i.i = icmp ugt i64 %6, 15
  br i1 %cmp3.i.i.i.i.i.i, label %if.then4.i.i.i.i.i.i, label %if.end.if.end6_crit_edge.i.i.i.i.i.i

if.end.if.end6_crit_edge.i.i.i.i.i.i:             ; preds = %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit
  %8 = bitcast %union.anon* %3 to i8*
  br label %if.end6.i.i.i.i.i.i

if.then4.i.i.i.i.i.i:                             ; preds = %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_M_allocateEm.exit
  %call5.i.i.i.i.i.i = call i8* @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32) %add.ptr, i64* nonnull align 8 dereferenceable(8) %__dnew.i.i.i.i.i.i, i64 0) #31
  %_M_p.i13.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %add.ptr, i64 0, i32 0, i32 0
  store i8* %call5.i.i.i.i.i.i, i8** %_M_p.i13.i.i.i.i.i.i, align 8, !tbaa !17
  %9 = load i64, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20
  %_M_allocated_capacity.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %sub.ptr.div.i, i32 2, i32 0
  store i64 %9, i64* %_M_allocated_capacity.i.i.i.i.i.i.i, align 8, !tbaa !21
  br label %if.end6.i.i.i.i.i.i

if.end6.i.i.i.i.i.i:                              ; preds = %if.then4.i.i.i.i.i.i, %if.end.if.end6_crit_edge.i.i.i.i.i.i
  %10 = phi i8* [ %8, %if.end.if.end6_crit_edge.i.i.i.i.i.i ], [ %call5.i.i.i.i.i.i, %if.then4.i.i.i.i.i.i ]
  switch i64 %6, label %if.end.i.i.i.i.i.i.i.i.i [
    i64 1, label %if.then.i.i.i.i.i.i.i.i61
    i64 0, label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit
  ]

if.then.i.i.i.i.i.i.i.i61:                        ; preds = %if.end6.i.i.i.i.i.i
  %11 = load i8, i8* %5, align 1, !tbaa !21
  store i8 %11, i8* %10, align 1, !tbaa !21
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit

if.end.i.i.i.i.i.i.i.i.i:                         ; preds = %if.end6.i.i.i.i.i.i
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 1 %10, i8* align 1 %5, i64 %6, i1 false) #31
  br label %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit

_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit: ; preds = %if.end.i.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i61, %if.end6.i.i.i.i.i.i
  %_M_p.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %add.ptr, i64 0, i32 0, i32 0
  %12 = load i64, i64* %__dnew.i.i.i.i.i.i, align 8, !tbaa !20
  %_M_string_length.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %sub.ptr.div.i, i32 1
  store i64 %12, i64* %_M_string_length.i.i.i.i.i.i.i.i, align 8, !tbaa !19
  %13 = load i8*, i8** %_M_p.i.i.i.i.i.i.i, align 8, !tbaa !17
  %arrayidx.i.i.i.i.i.i.i = getelementptr inbounds i8, i8* %13, i64 %12
  store i8 0, i8* %arrayidx.i.i.i.i.i.i.i, align 1, !tbaa !21
  call void @llvm.lifetime.end.p0i8(i64 8, i8* nonnull %7) #31
  %cmp.not8.i.i.i.i39 = icmp eq %"class.std::__cxx11::basic_string"* %1, %__position.coerce
  br i1 %cmp.not8.i.i.i.i39, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59, label %for.body.i.i.i.i45

for.body.i.i.i.i45:                               ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit
  %__cur.011.i.i.i.i40 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr2.i.i.i.i55, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57 ], [ %cond.i62, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit ]
  %__first.addr.09.i.i.i.i41 = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i54, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57 ], [ %1, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit ]
  %14 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 2
  %15 = bitcast %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40 to %union.anon**
  store %union.anon* %14, %union.anon** %15, align 8, !tbaa !14
  %_M_p.i.i23.i.i.i.i.i.i.i.i42 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 0, i32 0
  %16 = load i8*, i8** %_M_p.i.i23.i.i.i.i.i.i.i.i42, align 8, !tbaa !17
  %17 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i.i43 = bitcast %union.anon* %17 to i8*
  %cmp.i.i.i.i.i.i.i.i.i44 = icmp eq i8* %16, %arraydecay.i.i.i.i.i.i.i.i.i.i43
  br i1 %cmp.i.i.i.i.i.i.i.i.i44, label %if.then.i.i.i.i.i.i.i.i47, label %if.else.i.i.i.i.i.i.i.i51

if.then.i.i.i.i.i.i.i.i47:                        ; preds = %for.body.i.i.i.i45
  %arraydecay.i.i.i.i.i.i.i.i.i46 = bitcast %union.anon* %14 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %arraydecay.i.i.i.i.i.i.i.i.i46, i8* nonnull align 8 dereferenceable(16) %16, i64 16, i1 false) #31
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57

if.else.i.i.i.i.i.i.i.i51:                        ; preds = %for.body.i.i.i.i45
  %_M_p.i21.i.i.i.i.i.i.i.i48 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 0, i32 0
  store i8* %16, i8** %_M_p.i21.i.i.i.i.i.i.i.i48, align 8, !tbaa !17
  %_M_allocated_capacity.i.i.i.i.i.i.i.i49 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 2, i32 0
  %18 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i49, align 8, !tbaa !21
  %_M_allocated_capacity.i.i.i.i.i.i.i.i.i50 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 2, i32 0
  store i64 %18, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i.i50, align 8, !tbaa !21
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57

_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57: ; preds = %if.else.i.i.i.i.i.i.i.i51, %if.then.i.i.i.i.i.i.i.i47
  %_M_string_length.i20.i.i.i.i.i.i.i.i52 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 0, i32 1
  %19 = load i64, i64* %_M_string_length.i20.i.i.i.i.i.i.i.i52, align 8, !tbaa !19
  %_M_string_length.i.i.i.i.i.i.i.i.i53 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 0, i32 1
  store i64 %19, i64* %_M_string_length.i.i.i.i.i.i.i.i.i53, align 8, !tbaa !19
  %20 = bitcast %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41 to %union.anon**
  store %union.anon* %17, %union.anon** %20, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i20.i.i.i.i.i.i.i.i52, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i.i.i.i.i.i.i43, align 8, !tbaa !21
  %incdec.ptr.i.i.i.i54 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i41, i64 1
  %incdec.ptr2.i.i.i.i55 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i40, i64 1
  %cmp.not.i.i.i.i56 = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i54, %__position.coerce
  br i1 %cmp.not.i.i.i.i56, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59, label %for.body.i.i.i.i45, !llvm.loop !282

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59: ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit
  %__cur.0.lcssa.i.i.i.i58 = phi %"class.std::__cxx11::basic_string"* [ %cond.i62, %_ZNSt16allocator_traitsISaINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEE9constructIS5_JRKS5_EEEvRS6_PT_DpOT0_.exit ], [ %incdec.ptr2.i.i.i.i55, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i57 ]
  %incdec.ptr = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.0.lcssa.i.i.i.i58, i64 1
  %cmp.not8.i.i.i.i = icmp eq %"class.std::__cxx11::basic_string"* %0, %__position.coerce
  br i1 %cmp.not8.i.i.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit, label %for.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59
  %__cur.011.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr2.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ], [ %incdec.ptr, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59 ]
  %__first.addr.09.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ], [ %__position.coerce, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59 ]
  %21 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 2
  %22 = bitcast %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i to %union.anon**
  store %union.anon* %21, %union.anon** %22, align 8, !tbaa !14
  %_M_p.i.i23.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 0, i32 0
  %23 = load i8*, i8** %_M_p.i.i23.i.i.i.i.i.i.i.i, align 8, !tbaa !17
  %24 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 2
  %arraydecay.i.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %24 to i8*
  %cmp.i.i.i.i.i.i.i.i.i = icmp eq i8* %23, %arraydecay.i.i.i.i.i.i.i.i.i.i
  br i1 %cmp.i.i.i.i.i.i.i.i.i, label %if.then.i.i.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i.i

if.then.i.i.i.i.i.i.i.i:                          ; preds = %for.body.i.i.i.i
  %arraydecay.i.i.i.i.i.i.i.i.i = bitcast %union.anon* %21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 1 dereferenceable(16) %arraydecay.i.i.i.i.i.i.i.i.i, i8* nonnull align 8 dereferenceable(16) %23, i64 16, i1 false) #31
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i

if.else.i.i.i.i.i.i.i.i:                          ; preds = %for.body.i.i.i.i
  %_M_p.i21.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 0, i32 0
  store i8* %23, i8** %_M_p.i21.i.i.i.i.i.i.i.i, align 8, !tbaa !17
  %_M_allocated_capacity.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 2, i32 0
  %25 = load i64, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i, align 8, !tbaa !21
  %_M_allocated_capacity.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 2, i32 0
  store i64 %25, i64* %_M_allocated_capacity.i.i.i.i.i.i.i.i.i, align 8, !tbaa !21
  br label %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i

_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i.i.i, %if.then.i.i.i.i.i.i.i.i
  %_M_string_length.i20.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 0, i32 1
  %26 = load i64, i64* %_M_string_length.i20.i.i.i.i.i.i.i.i, align 8, !tbaa !19
  %_M_string_length.i.i.i.i.i.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 0, i32 1
  store i64 %26, i64* %_M_string_length.i.i.i.i.i.i.i.i.i, align 8, !tbaa !19
  %27 = bitcast %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i to %union.anon**
  store %union.anon* %24, %union.anon** %27, align 8, !tbaa !17
  store i64 0, i64* %_M_string_length.i20.i.i.i.i.i.i.i.i, align 8, !tbaa !19
  store i8 0, i8* %arraydecay.i.i.i.i.i.i.i.i.i.i, align 8, !tbaa !21
  %incdec.ptr.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__first.addr.09.i.i.i.i, i64 1
  %incdec.ptr2.i.i.i.i = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %__cur.011.i.i.i.i, i64 1
  %cmp.not.i.i.i.i = icmp eq %"class.std::__cxx11::basic_string"* %incdec.ptr.i.i.i.i, %0
  br i1 %cmp.not.i.i.i.i, label %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit, label %for.body.i.i.i.i, !llvm.loop !282

_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit: ; preds = %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59
  %__cur.0.lcssa.i.i.i.i = phi %"class.std::__cxx11::basic_string"* [ %incdec.ptr, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit59 ], [ %incdec.ptr2.i.i.i.i, %_ZSt19__relocate_object_aINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEES5_SaIS5_EEvPT_PT0_RT1_.exit.i.i.i.i ]
  %tobool.not.i = icmp eq %"class.std::__cxx11::basic_string"* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit, label %if.then.i38

if.then.i38:                                      ; preds = %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit
  %28 = bitcast %"class.std::__cxx11::basic_string"* %1 to i8*
  call void @_ZdlPv(i8* nonnull %28) #31
  br label %_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit

_ZNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE13_M_deallocateEPS5_m.exit: ; preds = %if.then.i38, %_ZNSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE11_S_relocateEPS5_S8_S8_RS6_.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector", %"class.std::vector"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  store %"class.std::__cxx11::basic_string"* %cond.i62, %"class.std::__cxx11::basic_string"** %_M_start.i27.i, align 8, !tbaa !81
  store %"class.std::__cxx11::basic_string"* %__cur.0.lcssa.i.i.i.i, %"class.std::__cxx11::basic_string"** %_M_finish.i26.i, align 8, !tbaa !32
  %add.ptr20 = getelementptr inbounds %"class.std::__cxx11::basic_string", %"class.std::__cxx11::basic_string"* %cond.i62, i64 %cond.i
  store %"class.std::__cxx11::basic_string"* %add.ptr20, %"class.std::__cxx11::basic_string"** %_M_end_of_storage, align 8, !tbaa !34
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memmove.p0i8.p0i8.i64(i8* nocapture writeonly, i8* nocapture readonly, i64, i1 immarg) #1

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorI11LightMatrixIdESaIS1_EE17_M_realloc_insertIJiiEEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_(%"class.std::vector.8"* nonnull dereferenceable(24) %this, %class.LightMatrix* %__position.coerce, i32* nonnull align 4 dereferenceable(4) %__args, i32* nonnull align 4 dereferenceable(4) %__args1) local_unnamed_addr #0 comdat align 2 {
entry:
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector.8", %"class.std::vector.8"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %class.LightMatrix*, %class.LightMatrix** %_M_finish.i26.i, align 8, !tbaa !65
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector.8", %"class.std::vector.8"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %class.LightMatrix*, %class.LightMatrix** %_M_start.i27.i, align 8, !tbaa !143
  %sub.ptr.lhs.cast.i28.i = ptrtoint %class.LightMatrix* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %class.LightMatrix* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = sdiv exact i64 %sub.ptr.sub.i30.i, 24
  %2 = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775800
  br i1 %2, label %if.then.i, label %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.25, i64 0, i64 0)) #33
  unreachable

_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %3 = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %3, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 384307168202282325
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 384307168202282325, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %class.LightMatrix* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = sdiv exact i64 %sub.ptr.sub.i, 24
  %mul.i.i.i = mul nuw nsw i64 %cond.i, 24
  %call2.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #35
  %4 = bitcast i8* %call2.i.i.i to %class.LightMatrix*
  %5 = load i32, i32* %__args, align 4, !tbaa !59
  %6 = load i32, i32* %__args1, align 4, !tbaa !59
  %is_data_owner_.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %sub.ptr.div.i, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i, align 8, !tbaa !68
  %nrows_.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %sub.ptr.div.i, i32 1
  store i32 %5, i32* %nrows_.i.i.i, align 4, !tbaa !71
  %ncols_.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %sub.ptr.div.i, i32 2
  store i32 %6, i32* %ncols_.i.i.i, align 8, !tbaa !72
  %mul.i.i.i46 = mul nsw i32 %6, %5
  %conv.i.i.i = sext i32 %mul.i.i.i46 to i64
  %7 = tail call { i64, i1 } @llvm.umul.with.overflow.i64(i64 %conv.i.i.i, i64 8) #31
  %8 = extractvalue { i64, i1 } %7, 1
  %9 = extractvalue { i64, i1 } %7, 0
  %10 = select i1 %8, i64 -1, i64 %9
  %call.i.i.i = tail call noalias nonnull i8* @_Znam(i64 %10) #36
  %data_.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %sub.ptr.div.i, i32 3
  %11 = bitcast double** %data_.i.i.i to i8**
  store i8* %call.i.i.i, i8** %11, align 8, !tbaa !73
  %cmp.not7.i.i.i.i48 = icmp eq %class.LightMatrix* %1, %__position.coerce
  br i1 %cmp.not7.i.i.i.i48, label %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit79, label %for.body.i.i.i.i58

for.body.i.i.i.i58:                               ; preds = %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i77, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit
  %__cur.011.i.i.i.i49 = phi %class.LightMatrix* [ %incdec.ptr1.i.i.i.i75, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i77 ], [ %4, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit ]
  %__first.addr.08.i.i.i.i50 = phi %class.LightMatrix* [ %incdec.ptr.i.i.i.i74, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i77 ], [ %1, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit ]
  %nrows_.i.i.i.i.i.i51 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i49, i64 0, i32 1
  store i32 0, i32* %nrows_.i.i.i.i.i.i51, align 4, !tbaa !71
  %ncols_.i.i.i.i.i.i52 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i49, i64 0, i32 2
  store i32 0, i32* %ncols_.i.i.i.i.i.i52, align 8, !tbaa !72
  %data_.i.i.i.i.i.i53 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i49, i64 0, i32 3
  store double* null, double** %data_.i.i.i.i.i.i53, align 8, !tbaa !73
  %nrows_2.i.i.i.i.i.i54 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i50, i64 0, i32 1
  %12 = load i32, i32* %nrows_2.i.i.i.i.i.i54, align 4, !tbaa !71
  %ncols_3.i.i.i.i.i.i55 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i50, i64 0, i32 2
  %13 = load i32, i32* %ncols_3.i.i.i.i.i.i55, align 8, !tbaa !72
  %mul2.i.i.i.i.i.i.i56 = mul i32 %13, %12
  %cmp.not.i.i.i.i.i.i.i57 = icmp eq i32 %mul2.i.i.i.i.i.i.i56, 0
  br i1 %cmp.not.i.i.i.i.i.i.i57, label %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i62, label %if.end.i.i.i.i.i.i.i60

if.end.i.i.i.i.i.i.i60:                           ; preds = %for.body.i.i.i.i58
  %cmp5.i.i.i.i.i.i.i59 = icmp sgt i32 %mul2.i.i.i.i.i.i.i56, 0
  br i1 %cmp5.i.i.i.i.i.i.i59, label %for.body.lr.ph.i.i.i.i.i.i66, label %if.else.i.i.i.i.i.i.i61

if.else.i.i.i.i.i.i.i61:                          ; preds = %if.end.i.i.i.i.i.i.i60
  store double* null, double** %data_.i.i.i.i.i.i53, align 8, !tbaa !73
  br label %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i62

_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i62: ; preds = %if.else.i.i.i.i.i.i.i61, %for.body.i.i.i.i58
  store i32 %13, i32* %ncols_.i.i.i.i.i.i52, align 8, !tbaa !72
  store i32 %12, i32* %nrows_.i.i.i.i.i.i51, align 4, !tbaa !71
  br label %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i77

for.body.lr.ph.i.i.i.i.i.i66:                     ; preds = %if.end.i.i.i.i.i.i.i60
  %conv20.i.i.i.i.i.i.i63 = zext i32 %mul2.i.i.i.i.i.i.i56 to i64
  %14 = shl nuw nsw i64 %conv20.i.i.i.i.i.i.i63, 3
  %call.i.i.i.i.i.i.i64 = tail call noalias nonnull i8* @_Znam(i64 %14) #36
  %15 = bitcast double** %data_.i.i.i.i.i.i53 to i8**
  store i8* %call.i.i.i.i.i.i.i64, i8** %15, align 8, !tbaa !73
  %16 = bitcast i8* %call.i.i.i.i.i.i.i64 to double*
  store i32 %13, i32* %ncols_.i.i.i.i.i.i52, align 8, !tbaa !72
  store i32 %12, i32* %nrows_.i.i.i.i.i.i51, align 4, !tbaa !71
  %data_4.i.i.i.i.i.i65 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i50, i64 0, i32 3
  %17 = load double*, double** %data_4.i.i.i.i.i.i65, align 8, !tbaa !73
  br label %for.body.i.i.i.i.i.i72

for.body.i.i.i.i.i.i72:                           ; preds = %for.body.i.i.i.i.i.i72, %for.body.lr.ph.i.i.i.i.i.i66
  %indvars.iv.i.i.i.i.i.i67 = phi i64 [ 0, %for.body.lr.ph.i.i.i.i.i.i66 ], [ %indvars.iv.next.i.i.i.i.i.i70, %for.body.i.i.i.i.i.i72 ]
  %arrayidx.i.i.i.i.i.i68 = getelementptr inbounds double, double* %17, i64 %indvars.iv.i.i.i.i.i.i67
  %18 = load double, double* %arrayidx.i.i.i.i.i.i68, align 8, !tbaa !75
  %arrayidx7.i.i.i.i.i.i69 = getelementptr inbounds double, double* %16, i64 %indvars.iv.i.i.i.i.i.i67
  store double %18, double* %arrayidx7.i.i.i.i.i.i69, align 8, !tbaa !75
  %indvars.iv.next.i.i.i.i.i.i70 = add nuw nsw i64 %indvars.iv.i.i.i.i.i.i67, 1
  %exitcond.not.i.i.i.i.i.i71 = icmp eq i64 %indvars.iv.next.i.i.i.i.i.i70, %conv20.i.i.i.i.i.i.i63
  br i1 %exitcond.not.i.i.i.i.i.i71, label %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i77, label %for.body.i.i.i.i.i.i72, !llvm.loop !283

_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i77: ; preds = %for.body.i.i.i.i.i.i72, %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i62
  %is_data_owner_.i.i.i.i.i.i73 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i49, i64 0, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i.i.i.i73, align 8, !tbaa !68
  %incdec.ptr.i.i.i.i74 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i50, i64 1
  %incdec.ptr1.i.i.i.i75 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i49, i64 1
  %cmp.not.i.i.i.i76 = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i.i74, %__position.coerce
  br i1 %cmp.not.i.i.i.i76, label %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit79, label %for.body.i.i.i.i58, !llvm.loop !284

_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit79: ; preds = %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i77, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit
  %__cur.0.lcssa.i.i.i.i78 = phi %class.LightMatrix* [ %4, %_ZNKSt6vectorI11LightMatrixIdESaIS1_EE12_M_check_lenEmPKc.exit ], [ %incdec.ptr1.i.i.i.i75, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i77 ]
  %incdec.ptr = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.0.lcssa.i.i.i.i78, i64 1
  %cmp.not7.i.i.i.i = icmp eq %class.LightMatrix* %0, %__position.coerce
  br i1 %cmp.not7.i.i.i.i, label %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit, label %for.body.i.i.i.i

for.body.i.i.i.i:                                 ; preds = %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit79
  %__cur.011.i.i.i.i = phi %class.LightMatrix* [ %incdec.ptr1.i.i.i.i, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i ], [ %incdec.ptr, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit79 ]
  %__first.addr.08.i.i.i.i = phi %class.LightMatrix* [ %incdec.ptr.i.i.i.i, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i ], [ %__position.coerce, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit79 ]
  %nrows_.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i, i64 0, i32 1
  store i32 0, i32* %nrows_.i.i.i.i.i.i, align 4, !tbaa !71
  %ncols_.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i, i64 0, i32 2
  store i32 0, i32* %ncols_.i.i.i.i.i.i, align 8, !tbaa !72
  %data_.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i, i64 0, i32 3
  store double* null, double** %data_.i.i.i.i.i.i, align 8, !tbaa !73
  %nrows_2.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i, i64 0, i32 1
  %19 = load i32, i32* %nrows_2.i.i.i.i.i.i, align 4, !tbaa !71
  %ncols_3.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i, i64 0, i32 2
  %20 = load i32, i32* %ncols_3.i.i.i.i.i.i, align 8, !tbaa !72
  %mul2.i.i.i.i.i.i.i = mul i32 %20, %19
  %cmp.not.i.i.i.i.i.i.i = icmp eq i32 %mul2.i.i.i.i.i.i.i, 0
  br i1 %cmp.not.i.i.i.i.i.i.i, label %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i, label %if.end.i.i.i.i.i.i.i

if.end.i.i.i.i.i.i.i:                             ; preds = %for.body.i.i.i.i
  %cmp5.i.i.i.i.i.i.i = icmp sgt i32 %mul2.i.i.i.i.i.i.i, 0
  br i1 %cmp5.i.i.i.i.i.i.i, label %for.body.lr.ph.i.i.i.i.i.i, label %if.else.i.i.i.i.i.i.i

if.else.i.i.i.i.i.i.i:                            ; preds = %if.end.i.i.i.i.i.i.i
  store double* null, double** %data_.i.i.i.i.i.i, align 8, !tbaa !73
  br label %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i

_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i: ; preds = %if.else.i.i.i.i.i.i.i, %for.body.i.i.i.i
  store i32 %20, i32* %ncols_.i.i.i.i.i.i, align 8, !tbaa !72
  store i32 %19, i32* %nrows_.i.i.i.i.i.i, align 4, !tbaa !71
  br label %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i

for.body.lr.ph.i.i.i.i.i.i:                       ; preds = %if.end.i.i.i.i.i.i.i
  %conv20.i.i.i.i.i.i.i = zext i32 %mul2.i.i.i.i.i.i.i to i64
  %21 = shl nuw nsw i64 %conv20.i.i.i.i.i.i.i, 3
  %call.i.i.i.i.i.i.i = tail call noalias nonnull i8* @_Znam(i64 %21) #36
  %22 = bitcast double** %data_.i.i.i.i.i.i to i8**
  store i8* %call.i.i.i.i.i.i.i, i8** %22, align 8, !tbaa !73
  %23 = bitcast i8* %call.i.i.i.i.i.i.i to double*
  store i32 %20, i32* %ncols_.i.i.i.i.i.i, align 8, !tbaa !72
  store i32 %19, i32* %nrows_.i.i.i.i.i.i, align 4, !tbaa !71
  %data_4.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i, i64 0, i32 3
  %24 = load double*, double** %data_4.i.i.i.i.i.i, align 8, !tbaa !73
  br label %for.body.i.i.i.i.i.i

for.body.i.i.i.i.i.i:                             ; preds = %for.body.i.i.i.i.i.i, %for.body.lr.ph.i.i.i.i.i.i
  %indvars.iv.i.i.i.i.i.i = phi i64 [ 0, %for.body.lr.ph.i.i.i.i.i.i ], [ %indvars.iv.next.i.i.i.i.i.i, %for.body.i.i.i.i.i.i ]
  %arrayidx.i.i.i.i.i.i = getelementptr inbounds double, double* %24, i64 %indvars.iv.i.i.i.i.i.i
  %25 = load double, double* %arrayidx.i.i.i.i.i.i, align 8, !tbaa !75
  %arrayidx7.i.i.i.i.i.i = getelementptr inbounds double, double* %23, i64 %indvars.iv.i.i.i.i.i.i
  store double %25, double* %arrayidx7.i.i.i.i.i.i, align 8, !tbaa !75
  %indvars.iv.next.i.i.i.i.i.i = add nuw nsw i64 %indvars.iv.i.i.i.i.i.i, 1
  %exitcond.not.i.i.i.i.i.i = icmp eq i64 %indvars.iv.next.i.i.i.i.i.i, %conv20.i.i.i.i.i.i.i
  br i1 %exitcond.not.i.i.i.i.i.i, label %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i, label %for.body.i.i.i.i.i.i, !llvm.loop !283

_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i: ; preds = %for.body.i.i.i.i.i.i, %_ZN11LightMatrixIdE6resizeEii.exit.thread.i.i.i.i.i.i
  %is_data_owner_.i.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i, i64 0, i32 0
  store i8 1, i8* %is_data_owner_.i.i.i.i.i.i, align 8, !tbaa !68
  %incdec.ptr.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.08.i.i.i.i, i64 1
  %incdec.ptr1.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__cur.011.i.i.i.i, i64 1
  %cmp.not.i.i.i.i = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i.i, %0
  br i1 %cmp.not.i.i.i.i, label %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit, label %for.body.i.i.i.i, !llvm.loop !284

_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit: ; preds = %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit79
  %__cur.0.lcssa.i.i.i.i = phi %class.LightMatrix* [ %incdec.ptr, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit79 ], [ %incdec.ptr1.i.i.i.i, %_ZSt10_ConstructI11LightMatrixIdEJRKS1_EEvPT_DpOT0_.exit.i.i.i.i ]
  %cmp.not3.i.i.i = icmp eq %class.LightMatrix* %1, %0
  br i1 %cmp.not3.i.i.i, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit, label %for.body.i.i.i

for.body.i.i.i:                                   ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit
  %__first.addr.04.i.i.i = phi %class.LightMatrix* [ %incdec.ptr.i.i.i, %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i ], [ %1, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit ]
  %is_data_owner_.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i, i64 0, i32 0
  %26 = load i8, i8* %is_data_owner_.i.i.i.i.i, align 8, !tbaa !68, !range !90
  %tobool.not.i.i.i.i.i = icmp eq i8 %26, 0
  br i1 %tobool.not.i.i.i.i.i, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i, label %land.lhs.true.i.i.i.i.i

land.lhs.true.i.i.i.i.i:                          ; preds = %for.body.i.i.i
  %data_.i.i.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i, i64 0, i32 3
  %27 = load double*, double** %data_.i.i.i.i.i, align 8, !tbaa !73
  %cmp.not.i.i.i.i.i = icmp eq double* %27, null
  br i1 %cmp.not.i.i.i.i.i, label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i, label %delete.notnull.i.i.i.i.i

delete.notnull.i.i.i.i.i:                         ; preds = %land.lhs.true.i.i.i.i.i
  %28 = bitcast double* %27 to i8*
  tail call void @_ZdaPv(i8* %28) #37
  br label %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i

_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i:   ; preds = %delete.notnull.i.i.i.i.i, %land.lhs.true.i.i.i.i.i, %for.body.i.i.i
  %incdec.ptr.i.i.i = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %__first.addr.04.i.i.i, i64 1
  %cmp.not.i.i.i = icmp eq %class.LightMatrix* %incdec.ptr.i.i.i, %0
  br i1 %cmp.not.i.i.i, label %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit, label %for.body.i.i.i, !llvm.loop !280

_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit: ; preds = %_ZSt8_DestroyI11LightMatrixIdEEvPT_.exit.i.i.i, %_ZSt34__uninitialized_move_if_noexcept_aIP11LightMatrixIdES2_SaIS1_EET0_T_S5_S4_RT1_.exit
  %tobool.not.i = icmp eq %class.LightMatrix* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseI11LightMatrixIdESaIS1_EE13_M_deallocateEPS1_m.exit, label %if.then.i44

if.then.i44:                                      ; preds = %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit
  %29 = getelementptr %class.LightMatrix, %class.LightMatrix* %1, i64 0, i32 0
  tail call void @_ZdlPv(i8* %29) #31
  br label %_ZNSt12_Vector_baseI11LightMatrixIdESaIS1_EE13_M_deallocateEPS1_m.exit

_ZNSt12_Vector_baseI11LightMatrixIdESaIS1_EE13_M_deallocateEPS1_m.exit: ; preds = %if.then.i44, %_ZSt8_DestroyIP11LightMatrixIdES1_EvT_S3_RSaIT0_E.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.8", %"class.std::vector.8"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  %30 = bitcast %"class.std::vector.8"* %this to i8**
  store i8* %call2.i.i.i, i8** %30, align 8, !tbaa !143
  store %class.LightMatrix* %__cur.0.lcssa.i.i.i.i, %class.LightMatrix** %_M_finish.i26.i, align 8, !tbaa !65
  %add.ptr24 = getelementptr inbounds %class.LightMatrix, %class.LightMatrix* %4, i64 %cond.i
  store %class.LightMatrix* %add.ptr24, %class.LightMatrix** %_M_end_of_storage, align 8, !tbaa !67
  ret void
}

; Function Attrs: noreturn
declare dso_local void @_ZSt16__throw_bad_castv() local_unnamed_addr #22

declare dso_local void @_ZNKSt5ctypeIcE13_M_widen_initEv(%"class.std::ctype"* nonnull dereferenceable(570)) local_unnamed_addr #3

declare dso_local nonnull align 8 dereferenceable(240) %"class.std::basic_filebuf"* @_ZNSt13basic_filebufIcSt11char_traitsIcEEaSEOS2_(%"class.std::basic_filebuf"* nonnull dereferenceable(240), %"class.std::basic_filebuf"* nonnull align 8 dereferenceable(240)) local_unnamed_addr #3

; Function Attrs: nounwind
declare dso_local void @_ZNSt8ios_base7_M_swapERS_(%"class.std::ios_base"* nonnull dereferenceable(216), %"class.std::ios_base"* nonnull align 8 dereferenceable(216)) local_unnamed_addr #6

declare dso_local void @_ZNSt9basic_iosIcSt11char_traitsIcEE15_M_cache_localeERKSt6locale(%"class.std::basic_ios"* nonnull dereferenceable(264), %"class.std::locale"* nonnull align 8 dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define linkonce_odr dso_local void @_ZNSt6vectorI8TriangleSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_(%"class.std::vector.13"* nonnull dereferenceable(24) %this, %struct.Triangle* %__position.coerce, %struct.Triangle* nonnull align 4 dereferenceable(12) %__args) local_unnamed_addr #0 comdat align 2 {
entry:
  %_M_finish.i26.i = getelementptr inbounds %"class.std::vector.13", %"class.std::vector.13"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load %struct.Triangle*, %struct.Triangle** %_M_finish.i26.i, align 8, !tbaa !105
  %_M_start.i27.i = getelementptr inbounds %"class.std::vector.13", %"class.std::vector.13"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load %struct.Triangle*, %struct.Triangle** %_M_start.i27.i, align 8, !tbaa !142
  %sub.ptr.lhs.cast.i28.i = ptrtoint %struct.Triangle* %0 to i64
  %sub.ptr.rhs.cast.i29.i = ptrtoint %struct.Triangle* %1 to i64
  %sub.ptr.sub.i30.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i31.i = sdiv exact i64 %sub.ptr.sub.i30.i, 12
  %2 = icmp eq i64 %sub.ptr.sub.i30.i, 9223372036854775800
  br i1 %2, label %if.then.i, label %_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit

if.then.i:                                        ; preds = %entry
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.25, i64 0, i64 0)) #33
  unreachable

_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit: ; preds = %entry
  %3 = icmp eq i64 %sub.ptr.sub.i30.i, 0
  %.sroa.speculated.i = select i1 %3, i64 1, i64 %sub.ptr.div.i31.i
  %add.i = add nsw i64 %.sroa.speculated.i, %sub.ptr.div.i31.i
  %cmp7.i = icmp ult i64 %add.i, %sub.ptr.div.i31.i
  %cmp9.i = icmp ugt i64 %add.i, 768614336404564650
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i = select i1 %or.cond.i, i64 768614336404564650, i64 %add.i
  %sub.ptr.lhs.cast.i = ptrtoint %struct.Triangle* %__position.coerce to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i29.i
  %sub.ptr.div.i = sdiv exact i64 %sub.ptr.sub.i, 12
  %cmp.not.i = icmp eq i64 %cond.i, 0
  br i1 %cmp.not.i, label %_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit, label %_ZNSt16allocator_traitsISaI8TriangleEE8allocateERS1_m.exit.i

_ZNSt16allocator_traitsISaI8TriangleEE8allocateERS1_m.exit.i: ; preds = %_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit
  %mul.i.i.i = mul nuw nsw i64 %cond.i, 12
  %call2.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #35
  %4 = bitcast i8* %call2.i.i.i to %struct.Triangle*
  br label %_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit

_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit: ; preds = %_ZNSt16allocator_traitsISaI8TriangleEE8allocateERS1_m.exit.i, %_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit
  %cond.i48 = phi %struct.Triangle* [ %4, %_ZNSt16allocator_traitsISaI8TriangleEE8allocateERS1_m.exit.i ], [ null, %_ZNKSt6vectorI8TriangleSaIS0_EE12_M_check_lenEmPKc.exit ]
  %add.ptr = getelementptr inbounds %struct.Triangle, %struct.Triangle* %cond.i48, i64 %sub.ptr.div.i
  %5 = bitcast %struct.Triangle* %add.ptr to i8*
  %6 = bitcast %struct.Triangle* %__args to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 4 dereferenceable(12) %5, i8* nonnull align 4 dereferenceable(12) %6, i64 12, i1 false) #31, !tbaa.struct !108
  %cmp.i.i.i.i42 = icmp sgt i64 %sub.ptr.sub.i, 0
  br i1 %cmp.i.i.i.i42, label %if.then.i.i.i.i43, label %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46

if.then.i.i.i.i43:                                ; preds = %_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit
  %7 = bitcast %struct.Triangle* %cond.i48 to i8*
  %8 = bitcast %struct.Triangle* %1 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 %sub.ptr.sub.i, i1 false) #31
  br label %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46

_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46: ; preds = %if.then.i.i.i.i43, %_ZNSt12_Vector_baseI8TriangleSaIS0_EE11_M_allocateEm.exit
  %incdec.ptr = getelementptr inbounds %struct.Triangle, %struct.Triangle* %add.ptr, i64 1
  %sub.ptr.sub.i.i.i.i = sub i64 %sub.ptr.lhs.cast.i28.i, %sub.ptr.lhs.cast.i
  %cmp.i.i.i.i = icmp sgt i64 %sub.ptr.sub.i.i.i.i, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit

if.then.i.i.i.i:                                  ; preds = %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46
  %9 = bitcast %struct.Triangle* %incdec.ptr to i8*
  %10 = bitcast %struct.Triangle* %__position.coerce to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* nonnull align 4 %9, i8* align 4 %10, i64 %sub.ptr.sub.i.i.i.i, i1 false) #31
  br label %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit

_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit: ; preds = %if.then.i.i.i.i, %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit46
  %tobool.not.i = icmp eq %struct.Triangle* %1, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseI8TriangleSaIS0_EE13_M_deallocateEPS0_m.exit, label %if.then.i38

if.then.i38:                                      ; preds = %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit
  %11 = bitcast %struct.Triangle* %1 to i8*
  tail call void @_ZdlPv(i8* nonnull %11) #31
  br label %_ZNSt12_Vector_baseI8TriangleSaIS0_EE13_M_deallocateEPS0_m.exit

_ZNSt12_Vector_baseI8TriangleSaIS0_EE13_M_deallocateEPS0_m.exit: ; preds = %if.then.i38, %_ZNSt6vectorI8TriangleSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_.exit
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.13", %"class.std::vector.13"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  %sub.ptr.div.i.i.i.i = sdiv exact i64 %sub.ptr.sub.i.i.i.i, 12
  %add.ptr.i.i.i.i = getelementptr inbounds %struct.Triangle, %struct.Triangle* %incdec.ptr, i64 %sub.ptr.div.i.i.i.i
  store %struct.Triangle* %cond.i48, %struct.Triangle** %_M_start.i27.i, align 8, !tbaa !142
  store %struct.Triangle* %add.ptr.i.i.i.i, %struct.Triangle** %_M_finish.i26.i, align 8, !tbaa !105
  %add.ptr20 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %cond.i48, i64 %cond.i
  store %struct.Triangle* %add.ptr20, %struct.Triangle** %_M_end_of_storage, align 8, !tbaa !107
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZNSt6vectorIiSaIiEE17_M_default_appendEm(%"class.std::vector.3"* nonnull dereferenceable(24) %this, i64 %__n) local_unnamed_addr #5 comdat align 2 {
entry:
  %cmp.not = icmp eq i64 %__n, 0
  br i1 %cmp.not, label %if.end45, label %if.then

if.then:                                          ; preds = %entry
  %_M_finish.i = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load i32*, i32** %_M_finish.i, align 8, !tbaa !61
  %_M_start.i = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load i32*, i32** %_M_start.i, align 8, !tbaa !64
  %sub.ptr.lhs.cast.i = ptrtoint i32* %0 to i64
  %sub.ptr.rhs.cast.i = ptrtoint i32* %1 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %2 = lshr exact i64 %sub.ptr.sub.i, 2
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.3", %"class.std::vector.3"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load i32*, i32** %_M_end_of_storage, align 8, !tbaa !63
  %sub.ptr.lhs.cast = ptrtoint i32* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.lhs.cast.i
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 2
  %cmp4 = icmp sgt i64 %sub.ptr.sub.i, -1
  tail call void @llvm.assume(i1 %cmp4)
  %sub = xor i64 %2, 2305843009213693951
  %cmp6 = icmp ule i64 %sub.ptr.div, %sub
  tail call void @llvm.assume(i1 %cmp6)
  %cmp8.not = icmp ult i64 %sub.ptr.div, %__n
  br i1 %cmp8.not, label %if.else, label %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit71

_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit71: ; preds = %if.then
  %__first2.i.i.i67 = bitcast i32* %0 to i8*
  %4 = shl nuw i64 %__n, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %__first2.i.i.i67, i8 0, i64 %4, i1 false) #31
  %scevgep.i.i.i68 = getelementptr i32, i32* %0, i64 %__n
  br label %if.end45.sink.split

if.else:                                          ; preds = %if.then
  %cmp.i = icmp ult i64 %sub, %__n
  br i1 %cmp.i, label %if.then.i64, label %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit

if.then.i64:                                      ; preds = %if.else
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i64 0, i64 0)) #33
  unreachable

_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit:    ; preds = %if.else
  %cmp.i.i = icmp ult i64 %2, %__n
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 %__n, i64 %2
  %add.i = add i64 %.sroa.speculated.i, %2
  %cmp7.i = icmp ult i64 %add.i, %2
  %cmp9.i = icmp ugt i64 %add.i, 2305843009213693951
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i65 = select i1 %or.cond.i, i64 2305843009213693951, i64 %add.i
  %cmp.not.i = icmp eq i64 %cond.i65, 0
  br i1 %cmp.not.i, label %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit, label %cond.true.i

cond.true.i:                                      ; preds = %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit
  %cmp.i.i.i = icmp ugt i64 %cond.i65, 2305843009213693951
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i

if.then.i.i.i:                                    ; preds = %cond.true.i
  tail call void @_ZSt17__throw_bad_allocv() #33
  unreachable

_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i: ; preds = %cond.true.i
  %mul.i.i.i = shl nuw nsw i64 %cond.i65, 2
  %call2.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #35
  %5 = bitcast i8* %call2.i.i.i to i32*
  %.pre = load i32*, i32** %_M_start.i, align 8, !tbaa !64
  %.pre72 = load i32*, i32** %_M_finish.i, align 8, !tbaa !61
  %.pre73 = ptrtoint i32* %.pre72 to i64
  %.pre74 = ptrtoint i32* %.pre to i64
  %.pre75 = sub i64 %.pre73, %.pre74
  br label %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit

_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit: ; preds = %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit
  %sub.ptr.sub.i.i.i.i.pre-phi = phi i64 [ %sub.ptr.sub.i, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit ], [ %.pre75, %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i ]
  %6 = phi i32* [ %1, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit ], [ %.pre, %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i ]
  %cond.i = phi i32* [ null, %_ZNKSt6vectorIiSaIiEE12_M_check_lenEmPKc.exit ], [ %5, %_ZNSt16allocator_traitsISaIiEE8allocateERS0_m.exit.i ]
  %add.ptr = getelementptr inbounds i32, i32* %cond.i, i64 %2
  %__first2.i.i.i = bitcast i32* %add.ptr to i8*
  %7 = shl nuw i64 %__n, 2
  tail call void @llvm.memset.p0i8.i64(i8* align 4 %__first2.i.i.i, i8 0, i64 %7, i1 false) #31
  %cmp.i.i.i.i = icmp sgt i64 %sub.ptr.sub.i.i.i.i.pre-phi, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit

if.then.i.i.i.i:                                  ; preds = %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit
  %8 = bitcast i32* %cond.i to i8*
  %9 = bitcast i32* %6 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 4 %8, i8* align 4 %9, i64 %sub.ptr.sub.i.i.i.i.pre-phi, i1 false) #31
  br label %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit

_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit: ; preds = %if.then.i.i.i.i, %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit
  %tobool.not.i = icmp eq i32* %6, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit, label %if.then.i

if.then.i:                                        ; preds = %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit
  %10 = bitcast i32* %6 to i8*
  tail call void @_ZdlPv(i8* nonnull %10) #31
  br label %_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit

_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit: ; preds = %if.then.i, %_ZNSt6vectorIiSaIiEE11_S_relocateEPiS2_S2_RS0_.exit
  store i32* %cond.i, i32** %_M_start.i, align 8, !tbaa !64
  %add.ptr38 = getelementptr inbounds i32, i32* %add.ptr, i64 %__n
  store i32* %add.ptr38, i32** %_M_finish.i, align 8, !tbaa !61
  %add.ptr41 = getelementptr inbounds i32, i32* %cond.i, i64 %cond.i65
  br label %if.end45.sink.split

if.end45.sink.split:                              ; preds = %_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit, %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit71
  %_M_finish.i.sink = phi i32** [ %_M_finish.i, %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit71 ], [ %_M_end_of_storage, %_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit ]
  %scevgep.i.i.i68.sink = phi i32* [ %scevgep.i.i.i68, %_ZSt27__uninitialized_default_n_aIPimiET_S1_T0_RSaIT1_E.exit71 ], [ %add.ptr41, %_ZNSt12_Vector_baseIiSaIiEE13_M_deallocateEPim.exit ]
  store i32* %scevgep.i.i.i68.sink, i32** %_M_finish.i.sink, align 8, !tbaa !60
  br label %if.end45

if.end45:                                         ; preds = %if.end45.sink.split, %entry
  ret void
}

declare dso_local nonnull align 8 dereferenceable(16) %"class.std::basic_istream"* @_ZNSi10_M_extractIdEERSiRT_(%"class.std::basic_istream"* nonnull dereferenceable(16), double* nonnull align 8 dereferenceable(8)) local_unnamed_addr #3

; Function Attrs: nounwind uwtable mustprogress
define linkonce_odr dso_local void @_ZNSt6vectorIdSaIdEE17_M_default_appendEm(%"class.std::vector.19"* nonnull dereferenceable(24) %this, i64 %__n) local_unnamed_addr #5 comdat align 2 {
entry:
  %cmp.not = icmp eq i64 %__n, 0
  br i1 %cmp.not, label %if.end45, label %if.then

if.then:                                          ; preds = %entry
  %_M_finish.i = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %this, i64 0, i32 0, i32 0, i32 0, i32 1
  %0 = load double*, double** %_M_finish.i, align 8, !tbaa !119
  %_M_start.i = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %this, i64 0, i32 0, i32 0, i32 0, i32 0
  %1 = load double*, double** %_M_start.i, align 8, !tbaa !121
  %sub.ptr.lhs.cast.i = ptrtoint double* %0 to i64
  %sub.ptr.rhs.cast.i = ptrtoint double* %1 to i64
  %sub.ptr.sub.i = sub i64 %sub.ptr.lhs.cast.i, %sub.ptr.rhs.cast.i
  %2 = lshr exact i64 %sub.ptr.sub.i, 3
  %_M_end_of_storage = getelementptr inbounds %"class.std::vector.19", %"class.std::vector.19"* %this, i64 0, i32 0, i32 0, i32 0, i32 2
  %3 = load double*, double** %_M_end_of_storage, align 8, !tbaa !161
  %sub.ptr.lhs.cast = ptrtoint double* %3 to i64
  %sub.ptr.sub = sub i64 %sub.ptr.lhs.cast, %sub.ptr.lhs.cast.i
  %sub.ptr.div = ashr exact i64 %sub.ptr.sub, 3
  %cmp4 = icmp sgt i64 %sub.ptr.sub.i, -1
  tail call void @llvm.assume(i1 %cmp4)
  %sub = xor i64 %2, 1152921504606846975
  %cmp6 = icmp ule i64 %sub.ptr.div, %sub
  tail call void @llvm.assume(i1 %cmp6)
  %cmp8.not = icmp ult i64 %sub.ptr.div, %__n
  br i1 %cmp8.not, label %if.else, label %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit71

_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit71: ; preds = %if.then
  %__first2.i.i.i67 = bitcast double* %0 to i8*
  %4 = shl nuw i64 %__n, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %__first2.i.i.i67, i8 0, i64 %4, i1 false) #31
  %scevgep.i.i.i68 = getelementptr double, double* %0, i64 %__n
  br label %if.end45.sink.split

if.else:                                          ; preds = %if.then
  %cmp.i = icmp ult i64 %sub, %__n
  br i1 %cmp.i, label %if.then.i64, label %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit

if.then.i64:                                      ; preds = %if.else
  tail call void @_ZSt20__throw_length_errorPKc(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.29, i64 0, i64 0)) #33
  unreachable

_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit:    ; preds = %if.else
  %cmp.i.i = icmp ult i64 %2, %__n
  %.sroa.speculated.i = select i1 %cmp.i.i, i64 %__n, i64 %2
  %add.i = add i64 %.sroa.speculated.i, %2
  %cmp7.i = icmp ult i64 %add.i, %2
  %cmp9.i = icmp ugt i64 %add.i, 1152921504606846975
  %or.cond.i = or i1 %cmp7.i, %cmp9.i
  %cond.i65 = select i1 %or.cond.i, i64 1152921504606846975, i64 %add.i
  %cmp.not.i = icmp eq i64 %cond.i65, 0
  br i1 %cmp.not.i, label %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit, label %cond.true.i

cond.true.i:                                      ; preds = %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit
  %cmp.i.i.i = icmp ugt i64 %cond.i65, 1152921504606846975
  br i1 %cmp.i.i.i, label %if.then.i.i.i, label %_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i

if.then.i.i.i:                                    ; preds = %cond.true.i
  tail call void @_ZSt17__throw_bad_allocv() #33
  unreachable

_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i: ; preds = %cond.true.i
  %mul.i.i.i = shl nuw nsw i64 %cond.i65, 3
  %call2.i.i.i = tail call noalias nonnull i8* @_Znwm(i64 %mul.i.i.i) #35
  %5 = bitcast i8* %call2.i.i.i to double*
  %.pre = load double*, double** %_M_start.i, align 8, !tbaa !121
  %.pre72 = load double*, double** %_M_finish.i, align 8, !tbaa !119
  %.pre73 = ptrtoint double* %.pre72 to i64
  %.pre74 = ptrtoint double* %.pre to i64
  %.pre75 = sub i64 %.pre73, %.pre74
  br label %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit

_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit: ; preds = %_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i, %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit
  %sub.ptr.sub.i.i.i.i.pre-phi = phi i64 [ %sub.ptr.sub.i, %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit ], [ %.pre75, %_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i ]
  %6 = phi double* [ %1, %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit ], [ %.pre, %_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i ]
  %cond.i = phi double* [ null, %_ZNKSt6vectorIdSaIdEE12_M_check_lenEmPKc.exit ], [ %5, %_ZNSt16allocator_traitsISaIdEE8allocateERS0_m.exit.i ]
  %add.ptr = getelementptr inbounds double, double* %cond.i, i64 %2
  %__first2.i.i.i = bitcast double* %add.ptr to i8*
  %7 = shl nuw i64 %__n, 3
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %__first2.i.i.i, i8 0, i64 %7, i1 false) #31
  %cmp.i.i.i.i = icmp sgt i64 %sub.ptr.sub.i.i.i.i.pre-phi, 0
  br i1 %cmp.i.i.i.i, label %if.then.i.i.i.i, label %_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit

if.then.i.i.i.i:                                  ; preds = %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit
  %8 = bitcast double* %cond.i to i8*
  %9 = bitcast double* %6 to i8*
  tail call void @llvm.memmove.p0i8.p0i8.i64(i8* align 8 %8, i8* align 8 %9, i64 %sub.ptr.sub.i.i.i.i.pre-phi, i1 false) #31
  br label %_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit

_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit: ; preds = %if.then.i.i.i.i, %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit
  %tobool.not.i = icmp eq double* %6, null
  br i1 %tobool.not.i, label %_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit, label %if.then.i

if.then.i:                                        ; preds = %_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit
  %10 = bitcast double* %6 to i8*
  tail call void @_ZdlPv(i8* nonnull %10) #31
  br label %_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit

_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit: ; preds = %if.then.i, %_ZNSt6vectorIdSaIdEE11_S_relocateEPdS2_S2_RS0_.exit
  store double* %cond.i, double** %_M_start.i, align 8, !tbaa !121
  %add.ptr38 = getelementptr inbounds double, double* %add.ptr, i64 %__n
  store double* %add.ptr38, double** %_M_finish.i, align 8, !tbaa !119
  %add.ptr41 = getelementptr inbounds double, double* %cond.i, i64 %cond.i65
  br label %if.end45.sink.split

if.end45.sink.split:                              ; preds = %_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit, %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit71
  %_M_finish.i.sink = phi double** [ %_M_finish.i, %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit71 ], [ %_M_end_of_storage, %_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit ]
  %scevgep.i.i.i68.sink = phi double* [ %scevgep.i.i.i68, %_ZSt27__uninitialized_default_n_aIPdmdET_S1_T0_RSaIT1_E.exit71 ], [ %add.ptr41, %_ZNSt12_Vector_baseIdSaIdEE13_M_deallocateEPdm.exit ]
  store double* %scevgep.i.i.i68.sink, double** %_M_finish.i.sink, align 8, !tbaa !60
  br label %if.end45

if.end45:                                         ; preds = %if.end45.sink.split, %entry
  ret void
}

declare dso_local void @_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEm(%"class.std::__cxx11::basic_string"* nonnull dereferenceable(32), i64) local_unnamed_addr #3

; Function Attrs: nounwind uwtable
define internal void @_GLOBAL__sub_I_hand.cpp() #0 section ".text.startup" {
entry:
  tail call void @_ZNSt8ios_base4InitC1Ev(%"class.std::ios_base::Init"* nonnull dereferenceable(1) @_ZStL8__ioinit) #31
  %0 = tail call i32 @__cxa_atexit(void (i8*)* bitcast (void (%"class.std::ios_base::Init"*)* @_ZNSt8ios_base4InitD1Ev to void (i8*)*), i8* getelementptr inbounds (%"class.std::ios_base::Init", %"class.std::ios_base::Init"* @_ZStL8__ioinit, i64 0, i32 0), i8* nonnull @__dso_handle) #31
  ret void
}

; Function Attrs: nofree nosync nounwind willreturn
declare void @llvm.assume(i1 noundef) #26

; Function Attrs: cold noreturn nounwind
declare void @llvm.trap() #27

; Function Attrs: nofree nounwind
declare noundef i32 @puts(i8* nocapture noundef readonly) local_unnamed_addr #7

; Function Attrs: nofree nounwind
declare noundef i32 @putchar(i32 noundef) local_unnamed_addr #7

; Function Attrs: inaccessiblememonly nofree nosync nounwind willreturn
declare void @llvm.experimental.noalias.scope.decl(metadata) #28

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #29

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @preprocess_hand_objective(double* noalias nocapture readonly %theta, i32 %bone_count, i8** noalias nocapture readnone %bone_names, i32* noalias nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, %struct.Triangle* noalias nocapture readnone %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* noalias nocapture %err) #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #31
  tail call void @llvm.experimental.noalias.scope.decl(metadata !201)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !204)
  %theta99.i = bitcast double* %theta to i8*
  %add.i = add nsw i32 %bone_count, 3
  %nrows1.i.i = bitcast i8* %call.i to i32*
  %ncols2.i.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i.i to i32*
  %mul3.i.i = mul i32 %add.i, 3
  %cmp.not.i.i = icmp eq i32 %mul3.i.i, 0
  br i1 %cmp.not.i.i, label %resize.exit.fill.exit_crit_edge.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  %data.i.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %cmp8.i.i = icmp sgt i32 %mul3.i.i, 0
  br i1 %cmp8.i.i, label %for.body.lr.ph.i.i, label %resize.exit.thread87.i

resize.exit.thread87.i:                           ; preds = %if.end.i.i
  %2 = bitcast i8* %data.i.i to double**
  store double* null, double** %2, align 8, !tbaa !137, !alias.scope !204, !noalias !201
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !204, !noalias !201
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !204, !noalias !201
  br label %fill.exit.i

resize.exit.fill.exit_crit_edge.i:                ; preds = %entry
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !204, !noalias !201
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !204, !noalias !201
  br label %fill.exit.i

for.body.lr.ph.i.i:                               ; preds = %if.end.i.i
  %conv31.i.i = zext i32 %mul3.i.i to i64
  %mul11.i.i = shl nuw nsw i64 %conv31.i.i, 3
  %call.i.i = tail call noalias i8* @malloc(i64 %mul11.i.i) #31, !noalias !206
  %3 = bitcast i8* %data.i.i to i8**
  store i8* %call.i.i, i8** %3, align 8, !tbaa !137, !alias.scope !204, !noalias !201
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !204, !noalias !201
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !204, !noalias !201
  %4 = bitcast i8* %call.i.i to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i.i, i8 0, i64 %mul11.i.i, i1 false) #31, !noalias !206
  br label %fill.exit.i

fill.exit.i:                                      ; preds = %for.body.lr.ph.i.i, %resize.exit.fill.exit_crit_edge.i, %resize.exit.thread87.i
  %5 = phi double* [ null, %resize.exit.fill.exit_crit_edge.i ], [ %4, %for.body.lr.ph.i.i ], [ null, %resize.exit.thread87.i ]
  %6 = bitcast double* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %6, i8* nonnull align 8 dereferenceable(24) %theta99.i, i64 24, i1 false) #31, !noalias !204
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %fill.exit.i
  %tiv3 = phi i64 [ %tiv.next4, %for.body.i ], [ 0, %fill.exit.i ]
  %tiv.next4 = add nuw nsw i64 %tiv3, 1
  %7 = add nuw nsw i64 %tiv3, 3
  %arrayidx7.i = getelementptr inbounds double, double* %5, i64 %7
  store double 1.000000e+00, double* %arrayidx7.i, align 8, !tbaa !75, !noalias !206
  %arrayidx10.i = getelementptr inbounds double, double* %theta, i64 %7
  %8 = load double, double* %arrayidx10.i, align 8, !tbaa !75, !alias.scope !201, !noalias !204
  %9 = add nuw nsw i64 %tiv3, 6
  %arrayidx16.i = getelementptr inbounds double, double* %5, i64 %9
  store double %8, double* %arrayidx16.i, align 8, !tbaa !75, !noalias !206
  %exitcond105.not.i = icmp eq i64 %tiv.next4, 3
  br i1 %exitcond105.not.i, label %for.cond20.preheader.i, label %for.body.i, !llvm.loop !207

for.cond20.preheader.i:                           ; preds = %for.end45.i, %for.body.i
  %tiv1 = phi i64 [ %tiv.next2, %for.end45.i ], [ 0, %for.body.i ]
  %i_pose_params.093.i = phi i32 [ %inc46.i, %for.end45.i ], [ 5, %for.body.i ]
  %i_theta.092.i = phi i32 [ %i_theta.2.i.lcssa, %for.end45.i ], [ 6, %for.body.i ]
  %10 = trunc i64 %tiv1 to i32
  %tiv.next2 = add nuw nsw i64 %tiv1, 1
  %11 = sext i32 %i_pose_params.093.i to i64
  %12 = add i32 %i_pose_params.093.i, 3
  br label %for.body22.i

for.body22.i:                                     ; preds = %if.end.i, %for.cond20.preheader.i
  %indvars.iv.i = phi i64 [ %11, %for.cond20.preheader.i ], [ %indvars.iv.next.i, %if.end.i ]
  %i.191.i = phi i32 [ 2, %for.cond20.preheader.i ], [ %inc44.i, %if.end.i ]
  %i_theta.189.i = phi i32 [ %i_theta.092.i, %for.cond20.preheader.i ], [ %i_theta.2.i, %if.end.i ]
  %idxprom23.i = sext i32 %i_theta.189.i to i64
  %arrayidx24.i = getelementptr inbounds double, double* %theta, i64 %idxprom23.i
  %13 = load double, double* %arrayidx24.i, align 8, !tbaa !75, !alias.scope !201, !noalias !204
  %14 = mul nsw i64 %indvars.iv.i, 3
  %arrayidx30.i = getelementptr inbounds double, double* %5, i64 %14
  store double %13, double* %arrayidx30.i, align 8, !tbaa !75, !noalias !206
  %inc31.i = add nsw i32 %i_theta.189.i, 1
  %cmp32.i = icmp eq i32 %i.191.i, 2
  br i1 %cmp32.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body22.i
  %idxprom33.i = sext i32 %inc31.i to i64
  %arrayidx34.i = getelementptr inbounds double, double* %theta, i64 %idxprom33.i
  %15 = load double, double* %arrayidx34.i, align 8, !tbaa !75, !alias.scope !201, !noalias !204
  %16 = add nsw i64 %14, 1
  %arrayidx40.i = getelementptr inbounds double, double* %5, i64 %16
  store double %15, double* %arrayidx40.i, align 8, !tbaa !75, !noalias !206
  %inc41.i = add nsw i32 %i_theta.189.i, 2
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body22.i
  %i_theta.2.i = phi i32 [ %inc41.i, %if.then.i ], [ %inc31.i, %for.body22.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, 1
  %inc44.i = add nuw nsw i32 %i.191.i, 1
  %lftr.wideiv1 = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %12, %lftr.wideiv1
  br i1 %exitcond, label %for.end45.i, label %for.body22.i, !llvm.loop !208

for.end45.i:                                      ; preds = %if.end.i
  %i_theta.2.i.lcssa = phi i32 [ %i_theta.2.i, %if.end.i ]
  %indvars.iv.i.lcssa = phi i64 [ %indvars.iv.i, %if.end.i ]
  %17 = trunc i64 %indvars.iv.i.lcssa to i32
  %inc46.i = add nsw i32 %17, 2
  %exitcond98.not.i = icmp eq i32 %10, 4
  br i1 %exitcond98.not.i, label %to_pose_params.exit, label %for.cond20.preheader.i, !llvm.loop !209

to_pose_params.exit:                              ; preds = %for.end45.i
  %call.i39 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %18 = bitcast i8* %call.i39 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i39, i8 0, i64 16, i1 false) #31
  tail call fastcc void @_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* %0, %struct.Matrix* %18)
  %cmp49 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp49, label %for.cond2.preheader.lr.ph, label %if.then.i41

for.cond2.preheader.lr.ph:                        ; preds = %to_pose_params.exit
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 2
  %19 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 0
  %20 = load i32, i32* %nrows, align 8, !tbaa !138
  %data5 = getelementptr inbounds i8, i8* %call.i39, i64 8
  %21 = bitcast i8* %data5 to double**
  %22 = load double*, double** %21, align 8, !tbaa !137
  %nrows8 = bitcast i8* %call.i39 to i32*
  %23 = load i32, i32* %nrows8, align 8, !tbaa !138
  %24 = sext i32 %20 to i64
  %wide.trip.count = zext i32 %corresp_count to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc17, %for.cond2.preheader.lr.ph
  %tiv = phi i64 [ %tiv.next, %for.inc17 ], [ 0, %for.cond2.preheader.lr.ph ]
  %tiv.next = add nuw nsw i64 %tiv, 1
  %25 = mul nsw i64 %tiv, %24
  %arrayidx7 = getelementptr inbounds i32, i32* %correspondences, i64 %tiv
  %26 = load i32, i32* %arrayidx7, align 4, !tbaa !59
  %mul9 = mul nsw i32 %23, %26
  %27 = mul nuw nsw i64 %tiv, 3
  %28 = sext i32 %mul9 to i64
  br label %for.body4

for.body4:                                        ; preds = %for.body4, %for.cond2.preheader
  %indvars.iv = phi i64 [ 0, %for.cond2.preheader ], [ %indvars.iv.next, %for.body4 ]
  %29 = add nsw i64 %25, %indvars.iv
  %arrayidx = getelementptr inbounds double, double* %19, i64 %29
  %30 = load double, double* %arrayidx, align 8, !tbaa !75
  %31 = add nsw i64 %indvars.iv, %28
  %arrayidx12 = getelementptr inbounds double, double* %22, i64 %31
  %32 = load double, double* %arrayidx12, align 8, !tbaa !75
  %sub = fsub fast double %30, %32
  %33 = add nuw nsw i64 %indvars.iv, %27
  %arrayidx16 = getelementptr inbounds double, double* %err, i64 %33
  store double %sub, double* %arrayidx16, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.inc17, label %for.body4, !llvm.loop !210

for.inc17:                                        ; preds = %for.body4
  %exitcond58.not = icmp eq i64 %tiv.next, %wide.trip.count
  br i1 %exitcond58.not, label %for.end19, label %for.cond2.preheader, !llvm.loop !211

for.end19:                                        ; preds = %for.inc17
  %cmp.not.i = icmp eq double* %5, null
  br i1 %cmp.not.i, label %delete_matrix.exit, label %if.then.i41

if.then.i41:                                      ; preds = %for.end19, %to_pose_params.exit
  tail call void @free(i8* %6) #31
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i41, %for.end19
  tail call void @free(i8* %call.i) #31
  %data.i43 = getelementptr inbounds i8, i8* %call.i39, i64 8
  %34 = bitcast i8* %data.i43 to double**
  %35 = load double*, double** %34, align 8, !tbaa !137
  %cmp.not.i44 = icmp eq double* %35, null
  br i1 %cmp.not.i44, label %delete_matrix.exit47, label %if.then.i45

if.then.i45:                                      ; preds = %delete_matrix.exit
  %36 = bitcast double* %35 to i8*
  tail call void @free(i8* %36) #31
  br label %delete_matrix.exit47

delete_matrix.exit47:                             ; preds = %if.then.i45, %delete_matrix.exit
  tail call void @free(i8* nonnull %call.i39) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffehand_objective(double* noalias nocapture readonly %theta, double* nocapture %"theta'", i32 %bone_count, i8** noalias nocapture readnone %bone_names, i32* noalias nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, %struct.Triangle* noalias nocapture readnone %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* noalias nocapture %err, double* nocapture %"err'") #5 {
entry:
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc29" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #31
  tail call void @llvm.experimental.noalias.scope.decl(metadata !201)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !204)
  %theta99.i = bitcast double* %theta to i8*, !node !285
  %add.i = add nsw i32 %bone_count, 3, !node !285
  %"nrows1.i.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i.i = bitcast i8* %call.i to i32*
  %"ncols2.i.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc" = bitcast i8* %"ncols2.i.i'ipg" to i32*, !node !285
  %1 = bitcast i8* %ncols2.i.i to i32*, !node !285
  %mul3.i.i = mul i32 %add.i, 3, !node !285
  %cmp.not.i.i = icmp eq i32 %mul3.i.i, 0
  br i1 %cmp.not.i.i, label %resize.exit.fill.exit_crit_edge.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  %"data.i.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %cmp8.i.i = icmp sgt i32 %mul3.i.i, 0
  br i1 %cmp8.i.i, label %for.body.lr.ph.i.i, label %resize.exit.thread87.i

resize.exit.thread87.i:                           ; preds = %if.end.i.i
  %"'ipc11" = bitcast i8* %"data.i.i'ipg" to double**
  %2 = bitcast i8* %data.i.i to double**
  store double* null, double** %"'ipc11", align 8
  store double* null, double** %2, align 8, !tbaa !137, !alias.scope !204, !noalias !201
  store i32 %add.i, i32* %"'ipc", align 4
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !204, !noalias !201
  store i32 3, i32* %"nrows1.i.i'ipc", align 8
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !204, !noalias !201
  br label %fill.exit.i

resize.exit.fill.exit_crit_edge.i:                ; preds = %entry
  store i32 %add.i, i32* %"'ipc", align 4
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !204, !noalias !201
  store i32 3, i32* %"nrows1.i.i'ipc", align 8
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !204, !noalias !201
  br label %fill.exit.i

for.body.lr.ph.i.i:                               ; preds = %if.end.i.i
  %conv31.i.i = zext i32 %mul3.i.i to i64, !node !285
  %mul11.i.i = shl nuw nsw i64 %conv31.i.i, 3, !node !285
  %call.i.i = tail call noalias i8* @malloc(i64 %mul11.i.i) #31, !noalias !206, !node !285
  %"call.i.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i.i) #31, !node !285
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i.i'mi", i8 0, i64 %mul11.i.i, i1 false), !node !285
  %"'ipc12" = bitcast i8* %"data.i.i'ipg" to i8**, !node !285
  %3 = bitcast i8* %data.i.i to i8**, !node !285
  store i8* %"call.i.i'mi", i8** %"'ipc12", align 8
  store i8* %call.i.i, i8** %3, align 8, !tbaa !137, !alias.scope !204, !noalias !201
  store i32 %add.i, i32* %"'ipc", align 4
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !204, !noalias !201
  store i32 3, i32* %"nrows1.i.i'ipc", align 8
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !204, !noalias !201
  %"'ipc13" = bitcast i8* %"call.i.i'mi" to double*, !node !285
  %4 = bitcast i8* %call.i.i to double*, !node !285
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i.i, i8 0, i64 %mul11.i.i, i1 false) #31, !noalias !206, !node !285
  br label %fill.exit.i

fill.exit.i:                                      ; preds = %for.body.lr.ph.i.i, %resize.exit.fill.exit_crit_edge.i, %resize.exit.thread87.i
  %call.i.i_cache.0 = phi i8* [ undef, %resize.exit.fill.exit_crit_edge.i ], [ %call.i.i, %for.body.lr.ph.i.i ], [ undef, %resize.exit.thread87.i ]
  %"call.i.i'mi_cache.0" = phi i8* [ undef, %resize.exit.fill.exit_crit_edge.i ], [ %"call.i.i'mi", %for.body.lr.ph.i.i ], [ undef, %resize.exit.thread87.i ]
  %forward_mem.0 = phi i32 [ 9, %resize.exit.fill.exit_crit_edge.i ], [ 13, %for.body.lr.ph.i.i ], [ 11, %resize.exit.thread87.i ]
  %forward_op.0 = phi i32 [ 2, %resize.exit.fill.exit_crit_edge.i ], [ 3, %for.body.lr.ph.i.i ], [ 2, %resize.exit.thread87.i ]
  %5 = phi double* [ null, %resize.exit.fill.exit_crit_edge.i ], [ %"'ipc13", %for.body.lr.ph.i.i ], [ null, %resize.exit.thread87.i ], !node !285
  %6 = phi double* [ null, %resize.exit.fill.exit_crit_edge.i ], [ %4, %for.body.lr.ph.i.i ], [ null, %resize.exit.thread87.i ], !node !285
  %7 = bitcast double* %6 to i8*, !node !285
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %7, i8* nonnull align 8 dereferenceable(24) %theta99.i, i64 24, i1 false) #31, !noalias !204, !node !285
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %fill.exit.i
  %forward_mem.1 = phi i32 [ %forward_mem.0, %fill.exit.i ], [ %inc111, %for.body.i ]
  %forward_op.1 = phi i32 [ %forward_op.0, %fill.exit.i ], [ %inc109, %for.body.i ]
  %iv = phi i64 [ 0, %fill.exit.i ], [ %iv.next, %for.body.i ]
  %iv.next = add nuw nsw i64 %iv, 1
  %8 = add nuw nsw i64 %iv, 3
  %arrayidx7.i = getelementptr inbounds double, double* %6, i64 %8, !node !285
  store double 1.000000e+00, double* %arrayidx7.i, align 8, !tbaa !75, !noalias !206
  %arrayidx10.i = getelementptr inbounds double, double* %theta, i64 %8, !node !285
  %9 = load double, double* %arrayidx10.i, align 8, !tbaa !75, !alias.scope !201, !noalias !204, !node !285
  %10 = add nuw nsw i64 %iv, 6
  %inc109 = add i32 %forward_op.1, 3
  %arrayidx16.i = getelementptr inbounds double, double* %6, i64 %10, !node !285
  %inc111 = add i32 %forward_mem.1, 3
  store double %9, double* %arrayidx16.i, align 8, !tbaa !75, !noalias !206
  %exitcond105.not.i = icmp eq i64 %iv.next, 3
  br i1 %exitcond105.not.i, label %for.cond20.preheader.i.preheader, label %for.body.i, !llvm.loop !207

for.cond20.preheader.i.preheader:                 ; preds = %for.body.i
  %forward_mem.1.lcssa = phi i32 [ %forward_mem.1, %for.body.i ]
  %inc109.lcssa = phi i32 [ %inc109, %for.body.i ]
  %malloccall = tail call noalias nonnull dereferenceable(20) dereferenceable_or_null(20) i8* @malloc(i64 20)
  %i_pose_params.093.i_malloccache = bitcast i8* %malloccall to i32*
  %malloccall20 = tail call noalias nonnull dereferenceable(60) dereferenceable_or_null(60) i8* @malloc(i64 60)
  %i_theta.189.i_malloccache = bitcast i8* %malloccall20 to i32*
  %inc115 = add i32 %forward_mem.1.lcssa, 5
  br label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.end45.i, %for.cond20.preheader.i.preheader
  %forward_mem.2 = phi i32 [ %inc115, %for.cond20.preheader.i.preheader ], [ %forward_mem.4.lcssa, %for.end45.i ]
  %forward_op.2 = phi i32 [ %inc109.lcssa, %for.cond20.preheader.i.preheader ], [ %inc161, %for.end45.i ]
  %iv1 = phi i64 [ 0, %for.cond20.preheader.i.preheader ], [ %iv.next2, %for.end45.i ]
  %i_pose_params.093.i = phi i32 [ 5, %for.cond20.preheader.i.preheader ], [ %inc46.i, %for.end45.i ]
  %i_theta.092.i = phi i32 [ 6, %for.cond20.preheader.i.preheader ], [ %i_theta.2.i.lcssa, %for.end45.i ]
  %11 = getelementptr inbounds i32, i32* %i_pose_params.093.i_malloccache, i64 %iv1
  %inc119 = add i32 %forward_mem.2, 2
  store i32 %i_pose_params.093.i, i32* %11, align 4, !invariant.group !286
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %12 = trunc i64 %iv1 to i32
  %13 = sext i32 %i_pose_params.093.i to i64
  br label %for.body22.i

for.body22.i:                                     ; preds = %if.end.i, %for.cond20.preheader.i
  %forward_mem.3 = phi i32 [ %inc119, %for.cond20.preheader.i ], [ %forward_mem.4, %if.end.i ]
  %forward_op.3.in = phi i32 [ %forward_op.2, %for.cond20.preheader.i ], [ %forward_op.4, %if.end.i ]
  %iv3 = phi i64 [ 0, %for.cond20.preheader.i ], [ %iv.next4, %if.end.i ]
  %i_theta.189.i = phi i32 [ %i_theta.092.i, %for.cond20.preheader.i ], [ %i_theta.2.i, %if.end.i ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %14 = trunc i64 %iv3 to i32
  %15 = add i64 %iv3, %13
  %idxprom23.i = sext i32 %i_theta.189.i to i64
  %arrayidx24.i = getelementptr inbounds double, double* %theta, i64 %idxprom23.i, !node !285
  %16 = load double, double* %arrayidx24.i, align 8, !tbaa !75, !alias.scope !201, !noalias !204, !node !285
  %17 = mul nsw i64 %15, 3
  %arrayidx30.i = getelementptr inbounds double, double* %6, i64 %17, !node !285
  store double %16, double* %arrayidx30.i, align 8, !tbaa !75, !noalias !206
  %18 = mul nuw nsw i64 %iv1, 3
  %19 = add nuw nsw i64 %iv3, %18
  %20 = getelementptr inbounds i32, i32* %i_theta.189.i_malloccache, i64 %19
  %inc143 = add i32 %forward_mem.3, 4
  store i32 %i_theta.189.i, i32* %20, align 4, !invariant.group !287
  %inc31.i = add nsw i32 %i_theta.189.i, 1
  %inc145 = add i32 %forward_op.3.in, 9
  %cmp32.i = icmp eq i32 %14, 0
  br i1 %cmp32.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body22.i
  %idxprom33.i = sext i32 %inc31.i to i64
  %arrayidx34.i = getelementptr inbounds double, double* %theta, i64 %idxprom33.i, !node !285
  %21 = load double, double* %arrayidx34.i, align 8, !tbaa !75, !alias.scope !201, !noalias !204, !node !285
  %22 = add nsw i64 %17, 1
  %arrayidx40.i = getelementptr inbounds double, double* %6, i64 %22, !node !285
  %inc151 = add i32 %forward_mem.3, 6
  store double %21, double* %arrayidx40.i, align 8, !tbaa !75, !noalias !206
  %inc41.i = add nsw i32 %i_theta.189.i, 2
  %inc153 = add i32 %forward_op.3.in, 11
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body22.i
  %forward_mem.4 = phi i32 [ %inc151, %if.then.i ], [ %inc143, %for.body22.i ]
  %forward_op.4 = phi i32 [ %inc153, %if.then.i ], [ %inc145, %for.body22.i ]
  %i_theta.2.i = phi i32 [ %inc41.i, %if.then.i ], [ %inc31.i, %for.body22.i ]
  %23 = trunc i64 %15 to i32
  %24 = add nsw i32 %i_pose_params.093.i, 2
  %exitcond = icmp eq i32 %24, %23
  br i1 %exitcond, label %for.end45.i, label %for.body22.i, !llvm.loop !208

for.end45.i:                                      ; preds = %if.end.i
  %forward_mem.4.lcssa = phi i32 [ %forward_mem.4, %if.end.i ]
  %forward_op.4.lcssa = phi i32 [ %forward_op.4, %if.end.i ]
  %i_theta.2.i.lcssa = phi i32 [ %i_theta.2.i, %if.end.i ]
  %.lcssa = phi i64 [ %15, %if.end.i ]
  %25 = trunc i64 %.lcssa to i32
  %inc46.i = add nsw i32 %25, 2
  %inc161 = add i32 %forward_op.4.lcssa, 4
  %exitcond98.not.i = icmp eq i32 %12, 4
  br i1 %exitcond98.not.i, label %to_pose_params.exit, label %for.cond20.preheader.i, !llvm.loop !209

to_pose_params.exit:                              ; preds = %for.end45.i
  %inc161.lcssa = phi i32 [ %inc161, %for.end45.i ]
  %forward_mem.4.lcssa.lcssa = phi i32 [ %forward_mem.4.lcssa, %for.end45.i ]
  %forward_op.4.lcssa.lcssa = phi i32 [ %forward_op.4.lcssa, %for.end45.i ]
  %call.i39 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %"call.i39'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i39'mi", i8 0, i64 16, i1 false)
  %"'ipc30" = bitcast i8* %"call.i39'mi" to %struct.Matrix*
  %26 = bitcast i8* %call.i39 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i39, i8 0, i64 16, i1 false) #31
  %_augmented = call fastcc { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } @augmented__ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc29", %struct.Matrix* nonnull %26, %struct.Matrix* nonnull %"'ipc30"), !node !285
  %cmp49 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp49, label %for.cond2.preheader.lr.ph, label %if.then.i41

for.cond2.preheader.lr.ph:                        ; preds = %to_pose_params.exit
  %inc165 = add i32 %forward_mem.4.lcssa.lcssa, 2
  %wide.trip.count = zext i32 %corresp_count to i64, !node !285
  %inc167 = add i32 %forward_op.4.lcssa.lcssa, 5
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc17, %for.cond2.preheader.lr.ph
  %forward_mem.5 = phi i32 [ %inc165, %for.cond2.preheader.lr.ph ], [ %inc171, %for.inc17 ]
  %forward_op.5 = phi i32 [ %inc167, %for.cond2.preheader.lr.ph ], [ %inc181.lcssa, %for.inc17 ]
  %iv6 = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %iv.next7, %for.inc17 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc171 = add i32 %forward_mem.5, 1
  %inc175 = add i32 %forward_op.5, 3
  br label %for.body4

for.body4:                                        ; preds = %for.body4, %for.cond2.preheader
  %forward_op.6 = phi i32 [ %inc175, %for.cond2.preheader ], [ %inc181, %for.body4 ]
  %iv8 = phi i64 [ 0, %for.cond2.preheader ], [ %iv.next9, %for.body4 ]
  %iv.next9 = add nuw nsw i64 %iv8, 1
  %inc181 = add i32 %forward_op.6, 3
  %exitcond.not = icmp eq i64 %iv.next9, 3
  br i1 %exitcond.not, label %for.inc17, label %for.body4, !llvm.loop !210

for.inc17:                                        ; preds = %for.body4
  %inc181.lcssa = phi i32 [ %inc181, %for.body4 ]
  %exitcond58.not = icmp eq i64 %iv.next7, %wide.trip.count
  br i1 %exitcond58.not, label %for.end19, label %for.cond2.preheader, !llvm.loop !211

for.end19:                                        ; preds = %for.inc17
  %forward_mem.5.lcssa = phi i32 [ %forward_mem.5, %for.inc17 ]
  %inc181.lcssa.lcssa = phi i32 [ %inc181.lcssa, %for.inc17 ]
  %cmp.not.i = icmp eq double* %6, null
  %inc183 = add i32 %forward_mem.5.lcssa, 2
  br i1 %cmp.not.i, label %invertdelete_matrix.exit47, label %if.then.i41

if.then.i41:                                      ; preds = %for.end19, %to_pose_params.exit
  %forward_mem.6 = phi i32 [ %inc183, %for.end19 ], [ %forward_mem.4.lcssa.lcssa, %to_pose_params.exit ]
  %forward_op.7 = phi i32 [ %inc181.lcssa.lcssa, %for.end19 ], [ %inc161.lcssa, %to_pose_params.exit ]
  %inc185 = add i32 %forward_mem.6, 1
  br label %invertdelete_matrix.exit47

invertentry:                                      ; preds = %invertfill.exit.i, %invertfor.body.lr.ph.i.i
  %reverse_mem.0 = phi i32 [ %inc195, %invertfor.body.lr.ph.i.i ], [ %inc229.lcssa, %invertfill.exit.i ]
  %inc231 = add i32 %reverse_op.0.lcssa, 5
  %inc187 = add i32 %forward_mem.7, 1
  tail call void @free(i8* nonnull %"call.i'mi")
  tail call void @free(i8* nonnull %call.i)
  %27 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.8, i32 %inc231, i32 %inc187, i32 %reverse_mem.0)
  ret void

invertfor.body.lr.ph.i.i:                         ; preds = %invertfill.exit.i
  tail call void @free(i8* nonnull %"call.i.i'mi_cache.0"), !node !285
  %inc195 = add i32 %reverse_mem.2.lcssa, 15
  tail call void @free(i8* %call.i.i_cache.0), !node !285
  br label %invertentry

invertfill.exit.i:                                ; preds = %invertfor.body.i
  %reverse_mem.2.lcssa = phi i32 [ %reverse_mem.2, %invertfor.body.i ]
  %reverse_op.0.lcssa = phi i32 [ %reverse_op.0, %invertfor.body.i ]
  %inc229.lcssa = phi i32 [ %inc229, %invertfor.body.i ]
  call void @__enzyme_memcpyadd_doubleda8sa8(double* %5, double* %"theta'", i64 3), !node !285
  %cmp.not.i.i.not = xor i1 %cmp.not.i.i, true
  %cmp8.i.i_unwrap = icmp sgt i32 %mul3.i.i, 0
  %or.cond = and i1 %cmp.not.i.i.not, %cmp8.i.i_unwrap
  br i1 %or.cond, label %invertfor.body.lr.ph.i.i, label %invertentry

invertfor.body.i:                                 ; preds = %invertfor.cond20.preheader.i.preheader, %incinvertfor.body.i
  %"iv'ac.0" = phi i64 [ 2, %invertfor.cond20.preheader.i.preheader ], [ %32, %incinvertfor.body.i ]
  %reverse_mem.2 = phi i32 [ %inc249, %invertfor.cond20.preheader.i.preheader ], [ %inc237, %incinvertfor.body.i ]
  %reverse_op.0 = phi i32 [ %inc253.lcssa, %invertfor.cond20.preheader.i.preheader ], [ %inc235, %incinvertfor.body.i ]
  %_unwrap = add nuw nsw i64 %"iv'ac.0", 6
  %"arrayidx16.i'ipg_unwrap" = getelementptr inbounds double, double* %5, i64 %_unwrap, !node !285
  %28 = load double, double* %"arrayidx16.i'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx16.i'ipg_unwrap", align 8
  %_unwrap15 = add nuw nsw i64 %"iv'ac.0", 3
  %"arrayidx10.i'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %_unwrap15, !node !285
  %29 = load double, double* %"arrayidx10.i'ipg_unwrap", align 8, !node !285
  %30 = fadd fast double %29, %28, !node !285
  store double %30, double* %"arrayidx10.i'ipg_unwrap", align 8
  %"arrayidx7.i'ipg_unwrap" = getelementptr inbounds double, double* %5, i64 %_unwrap15, !node !285
  store double 0.000000e+00, double* %"arrayidx7.i'ipg_unwrap", align 8
  %inc229 = add i32 %reverse_mem.2, 13
  %31 = icmp eq i64 %"iv'ac.0", 0
  br i1 %31, label %invertfill.exit.i, label %incinvertfor.body.i

incinvertfor.body.i:                              ; preds = %invertfor.body.i
  %32 = add nsw i64 %"iv'ac.0", -1
  %inc235 = add i32 %reverse_op.0, 6
  %inc237 = add i32 %reverse_mem.2, 15
  br label %invertfor.body.i

invertfor.cond20.preheader.i.preheader:           ; preds = %invertfor.cond20.preheader.i
  %inc253.lcssa = phi i32 [ %inc253, %invertfor.cond20.preheader.i ]
  %reverse_mem.3.lcssa.lcssa = phi i32 [ %reverse_mem.3.lcssa, %invertfor.cond20.preheader.i ]
  tail call void @free(i8* nonnull %malloccall)
  tail call void @free(i8* nonnull %malloccall20)
  %inc249 = add i32 %reverse_mem.3.lcssa.lcssa, 27
  br label %invertfor.body.i

invertfor.cond20.preheader.i:                     ; preds = %invertfor.body22.i
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body22.i ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.body22.i ]
  %33 = icmp eq i64 %"iv1'ac.0", 0
  %inc253 = add i32 %reverse_op.1.lcssa, 8
  br i1 %33, label %invertfor.cond20.preheader.i.preheader, label %incinvertfor.cond20.preheader.i

incinvertfor.cond20.preheader.i:                  ; preds = %invertfor.cond20.preheader.i
  %34 = add nsw i64 %"iv1'ac.0", -1
  %inc257 = add i32 %reverse_op.1.lcssa, 9
  %inc259 = add i32 %reverse_mem.3.lcssa, 23
  br label %invertfor.end45.i

invertfor.body22.i:                               ; preds = %invertif.end.i, %invertif.then.i
  %reverse_mem.3 = phi i32 [ %inc373, %invertif.then.i ], [ %inc377, %invertif.end.i ]
  %reverse_op.1 = phi i32 [ %inc371, %invertif.then.i ], [ %inc379, %invertif.end.i ]
  %35 = getelementptr inbounds i32, i32* %i_pose_params.093.i_malloccache, i64 %"iv1'ac.0"
  %36 = load i32, i32* %35, align 4, !invariant.group !286
  %_unwrap16 = sext i32 %36 to i64
  %_unwrap17 = add i64 %"iv3'ac.0", %_unwrap16
  %_unwrap18 = mul nsw i64 %_unwrap17, 3
  %"arrayidx30.i'ipg_unwrap" = getelementptr inbounds double, double* %5, i64 %_unwrap18, !node !285
  %37 = load double, double* %"arrayidx30.i'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx30.i'ipg_unwrap", align 8
  %38 = mul nuw nsw i64 %"iv1'ac.0", 3
  %39 = add nuw nsw i64 %"iv3'ac.0", %38
  %40 = getelementptr inbounds i32, i32* %i_theta.189.i_malloccache, i64 %39
  %41 = load i32, i32* %40, align 4, !invariant.group !287
  %idxprom23.i_unwrap = sext i32 %41 to i64
  %"arrayidx24.i'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %idxprom23.i_unwrap, !node !285
  %42 = load double, double* %"arrayidx24.i'ipg_unwrap", align 8, !node !285
  %43 = fadd fast double %42, %37, !node !285
  store double %43, double* %"arrayidx24.i'ipg_unwrap", align 8
  %44 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %44, label %invertfor.cond20.preheader.i, label %incinvertfor.body22.i

incinvertfor.body22.i:                            ; preds = %invertfor.body22.i
  %inc315 = add i32 %reverse_mem.3, 21
  %45 = add nsw i64 %"iv3'ac.0", -1
  %inc317 = add i32 %reverse_op.1, 8
  br label %invertif.end.i

invertif.then.i:                                  ; preds = %invertif.end.i
  %46 = getelementptr inbounds i32, i32* %i_pose_params.093.i_malloccache, i64 %"iv1'ac.0"
  %47 = load i32, i32* %46, align 4, !invariant.group !286
  %_unwrap22 = sext i32 %47 to i64
  %_unwrap23 = add i64 %"iv3'ac.0", %_unwrap22
  %_unwrap24 = mul nsw i64 %_unwrap23, 3
  %_unwrap25 = add nsw i64 %_unwrap24, 1
  %"arrayidx40.i'ipg_unwrap" = getelementptr inbounds double, double* %5, i64 %_unwrap25, !node !285
  %48 = load double, double* %"arrayidx40.i'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx40.i'ipg_unwrap", align 8
  %49 = mul nuw nsw i64 %"iv1'ac.0", 3
  %50 = add nuw nsw i64 %"iv3'ac.0", %49
  %51 = getelementptr inbounds i32, i32* %i_theta.189.i_malloccache, i64 %50
  %52 = load i32, i32* %51, align 4, !invariant.group !287
  %inc31.i_unwrap = add nsw i32 %52, 1
  %idxprom33.i_unwrap = sext i32 %inc31.i_unwrap to i64
  %"arrayidx34.i'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %idxprom33.i_unwrap, !node !285
  %53 = load double, double* %"arrayidx34.i'ipg_unwrap", align 8, !node !285
  %54 = fadd fast double %53, %48, !node !285
  %inc371 = add i32 %reverse_op.2, 9
  %inc373 = add i32 %reverse_mem.4.in, 22
  store double %54, double* %"arrayidx34.i'ipg_unwrap", align 8
  br label %invertfor.body22.i

invertif.end.i:                                   ; preds = %invertfor.end45.i, %incinvertfor.body22.i
  %"iv3'ac.0" = phi i64 [ 2, %invertfor.end45.i ], [ %45, %incinvertfor.body22.i ]
  %reverse_mem.4.in = phi i32 [ %reverse_mem.5, %invertfor.end45.i ], [ %inc315, %incinvertfor.body22.i ]
  %reverse_op.2 = phi i32 [ %reverse_op.3, %invertfor.end45.i ], [ %inc317, %incinvertfor.body22.i ]
  %inc377 = add i32 %reverse_mem.4.in, 3
  %inc379 = add i32 %reverse_op.2, 1
  %55 = trunc i64 %"iv3'ac.0" to i32
  %cmp32.i_unwrap = icmp eq i32 %55, 0
  br i1 %cmp32.i_unwrap, label %invertif.then.i, label %invertfor.body22.i

invertfor.end45.i:                                ; preds = %invertto_pose_params.exit, %incinvertfor.cond20.preheader.i
  %"iv1'ac.0" = phi i64 [ 4, %invertto_pose_params.exit ], [ %34, %incinvertfor.cond20.preheader.i ]
  %reverse_mem.5 = phi i32 [ %reverse_mem.6, %invertto_pose_params.exit ], [ %inc259, %incinvertfor.cond20.preheader.i ]
  %reverse_op.3 = phi i32 [ %reverse_op.4, %invertto_pose_params.exit ], [ %inc257, %incinvertfor.cond20.preheader.i ]
  br label %invertif.end.i

invertto_pose_params.exit:                        ; preds = %invertdelete_matrix.exit47, %invertfor.cond2.preheader.lr.ph
  %reverse_mem.6 = phi i32 [ %phi.bo, %invertfor.cond2.preheader.lr.ph ], [ 2, %invertdelete_matrix.exit47 ]
  %reverse_op.4 = phi i32 [ %inc387, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertdelete_matrix.exit47 ]
  call fastcc void @diffe_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc29", %struct.Matrix* nonnull %26, %struct.Matrix* nonnull %"'ipc30", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %_augmented), !node !285
  tail call void @free(i8* nonnull %"call.i39'mi")
  tail call void @free(i8* nonnull %call.i39)
  br label %invertfor.end45.i

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %reverse_mem.7.in.lcssa.lcssa = phi i32 [ %reverse_mem.7.in.lcssa, %invertfor.cond2.preheader ]
  %reverse_op.5.lcssa.lcssa = phi i32 [ %reverse_op.5.lcssa, %invertfor.cond2.preheader ]
  %inc387 = add i32 %reverse_op.5.lcssa.lcssa, 9
  %phi.bo = add i32 %reverse_mem.7.in.lcssa.lcssa, 23
  br label %invertto_pose_params.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.body4
  %reverse_mem.7.in.lcssa = phi i32 [ %reverse_mem.7.in, %invertfor.body4 ]
  %reverse_op.5.lcssa = phi i32 [ %reverse_op.5, %invertfor.body4 ]
  %56 = icmp eq i64 %"iv6'ac.0", 0
  br i1 %56, label %invertfor.cond2.preheader.lr.ph, label %incinvertfor.cond2.preheader

incinvertfor.cond2.preheader:                     ; preds = %invertfor.cond2.preheader
  %inc391 = add i32 %reverse_op.5.lcssa, 10
  %inc393 = add i32 %reverse_mem.7.in.lcssa, 24
  br label %invertfor.inc17

invertfor.body4:                                  ; preds = %invertfor.inc17, %incinvertfor.body4
  %"iv8'ac.0" = phi i64 [ 2, %invertfor.inc17 ], [ %61, %incinvertfor.body4 ]
  %reverse_mem.7.in = phi i32 [ %reverse_mem.8, %invertfor.inc17 ], [ %inc451, %incinvertfor.body4 ]
  %reverse_op.5 = phi i32 [ %reverse_op.6, %invertfor.inc17 ], [ %inc453, %incinvertfor.body4 ]
  %_unwrap37 = mul nuw nsw i64 %"iv6'ac.0", 3, !node !285
  %_unwrap38 = add nuw nsw i64 %"iv8'ac.0", %_unwrap37, !node !285
  %"arrayidx16'ipg_unwrap" = getelementptr inbounds double, double* %"err'", i64 %_unwrap38, !node !285
  %57 = load double, double* %"arrayidx16'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx16'ipg_unwrap", align 8
  %"data5'ipg_unwrap" = getelementptr inbounds i8, i8* %"call.i39'mi", i64 8
  %"'ipc31_unwrap" = bitcast i8* %"data5'ipg_unwrap" to double**
  %"'ipl_unwrap" = load double*, double** %"'ipc31_unwrap", align 8, !invariant.group !288
  %nrows8_unwrap = bitcast i8* %call.i39 to i32*
  %_unwrap40 = load i32, i32* %nrows8_unwrap, align 8, !tbaa !138, !invariant.group !289
  %arrayidx7_unwrap = getelementptr inbounds i32, i32* %correspondences, i64 %"iv6'ac.0", !node !285
  %_unwrap41 = load i32, i32* %arrayidx7_unwrap, align 4, !tbaa !59, !invariant.group !290, !node !285
  %mul9_unwrap = mul nsw i32 %_unwrap40, %_unwrap41, !node !285
  %_unwrap42 = sext i32 %mul9_unwrap to i64, !node !285
  %_unwrap43 = add nsw i64 %"iv8'ac.0", %_unwrap42, !node !285
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap43, !node !285
  %58 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !node !285
  %59 = fsub fast double %58, %57
  store double %59, double* %"arrayidx12'ipg_unwrap", align 8
  %60 = icmp eq i64 %"iv8'ac.0", 0
  br i1 %60, label %invertfor.cond2.preheader, label %incinvertfor.body4

incinvertfor.body4:                               ; preds = %invertfor.body4
  %inc451 = add i32 %reverse_mem.7.in, 22
  %61 = add nsw i64 %"iv8'ac.0", -1
  %inc453 = add i32 %reverse_op.5, 9
  br label %invertfor.body4

invertfor.inc17:                                  ; preds = %mergeinvertfor.cond2.preheader_for.end19, %incinvertfor.cond2.preheader
  %"iv6'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %mergeinvertfor.cond2.preheader_for.end19 ], [ %"iv6'ac.0", %incinvertfor.cond2.preheader ]
  %reverse_mem.8 = phi i32 [ 2, %mergeinvertfor.cond2.preheader_for.end19 ], [ %inc393, %incinvertfor.cond2.preheader ]
  %reverse_op.6 = phi i32 [ 1, %mergeinvertfor.cond2.preheader_for.end19 ], [ %inc391, %incinvertfor.cond2.preheader ]
  %"iv6'ac.0" = add nsw i64 %"iv6'ac.0.in", -1
  br label %invertfor.body4

mergeinvertfor.cond2.preheader_for.end19:         ; preds = %invertdelete_matrix.exit47
  %wide.trip.count_unwrap = zext i32 %corresp_count to i64, !node !285
  br label %invertfor.inc17

invertdelete_matrix.exit47:                       ; preds = %if.then.i41, %for.end19
  %_cache.0 = phi i1 [ false, %for.end19 ], [ true, %if.then.i41 ]
  %forward_mem.7 = phi i32 [ %inc183, %for.end19 ], [ %inc185, %if.then.i41 ]
  %forward_op.8 = phi i32 [ %inc181.lcssa.lcssa, %for.end19 ], [ %forward_op.7, %if.then.i41 ]
  %_cache.0.not = xor i1 %_cache.0, true
  %brmerge = or i1 %_cache.0.not, %cmp49
  br i1 %brmerge, label %mergeinvertfor.cond2.preheader_for.end19, label %invertto_pose_params.exit
}

; Function Attrs: argmemonly nounwind
define internal void @__enzyme_memcpyadd_doubleda8sa8(double* nocapture %dst, double* nocapture %src, i64 %num) #30 {
entry:
  %0 = icmp eq i64 %num, 0
  br i1 %0, label %for.end, label %for.body

for.body:                                         ; preds = %for.body, %entry
  %idx = phi i64 [ %idx.next, %for.body ], [ 0, %entry ]
  %dst.i = getelementptr double, double* %dst, i64 %idx
  %dst.i.l = load double, double* %dst.i, align 8
  store double 0.000000e+00, double* %dst.i, align 8
  %src.i = getelementptr double, double* %src, i64 %idx
  %src.i.l = load double, double* %src.i, align 8
  %1 = fadd fast double %src.i.l, %dst.i.l
  store double %1, double* %src.i, align 8
  %idx.next = add nuw i64 %idx, 1
  %2 = icmp eq i64 %idx.next, %num
  br i1 %2, label %for.end, label %for.body

for.end:                                          ; preds = %for.body, %entry
  ret void
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define internal fastcc void @preprocess__ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* noalias nocapture %positions) unnamed_addr #18 {
entry:
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #31
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %call.i9 = tail call noalias i8* @malloc(i64 %mul.i) #31
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %0 = zext i32 %bone_count to i64
  %1 = shl nuw nsw i64 %0, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %1, i1 false) #31
  %call.i359 = tail call noalias i8* @malloc(i64 %mul.i) #31
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i359, i8 0, i64 %1, i1 false) #31
  %call.i963 = tail call noalias i8* @malloc(i64 %mul.i) #31
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i963, i8 0, i64 %1, i1 false) #31
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %2 = bitcast i8* %call.i to %struct.Matrix*
  %3 = bitcast i8* %call.i36064 to %struct.Matrix*
  %4 = bitcast i8* %call.i966 to %struct.Matrix*
  tail call void @get_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %2)
  tail call void @relatives_to_absolutes(i32 %bone_count, %struct.Matrix* %2, i32* %parents, %struct.Matrix* %3)
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %tiv9 = phi i64 [ %tiv.next10, %for.body ], [ 0, %for.body.preheader ]
  %tiv.next10 = add nuw nsw i64 %tiv9, 1
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %tiv9
  %arrayidx4 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %tiv9
  %arrayidx6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %tiv9
  tail call void @mat_mult(%struct.Matrix* %arrayidx, %struct.Matrix* %arrayidx4, %struct.Matrix* %arrayidx6)
  %exitcond102.not = icmp eq i64 %tiv.next10, %wide.trip.count101
  br i1 %exitcond102.not, label %for.end, label %for.body, !llvm.loop !212

for.end:                                          ; preds = %for.body, %get_matrix_array.exit12
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %5 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %6 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %7 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i13 = mul nsw i32 %7, %6
  %mul3.i = mul i32 %5, 3
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %8 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %8, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  %9 = bitcast double* %8 to i8*
  tail call void @free(i8* %9) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread69

resize.exit.thread:                               ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i14 = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %10 = bitcast double** %data.i to i8**
  store i8* %call.i14, i8** %10, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize.exit.thread69:                             ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill.exit

resize.exit:                                      ; preds = %for.end
  store i32 %5, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %data.i15.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %11 = bitcast double** %data.i15.phi.trans.insert to i8**
  %.pre105 = load i8*, i8** %11, align 8, !tbaa !137
  %.pre103 = zext i32 %mul3.i to i64
  %.pre104 = shl nuw nsw i64 %.pre103, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre104, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %12 = phi i8* [ %.pre105, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %call.i14, %resize.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %12, i8 0, i64 %.pre-phi, i1 false)
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread69
  %call.i16 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %13 = bitcast i8* %call.i16 to %struct.Matrix*
  %nrows1.i17 = bitcast i8* %call.i16 to i32*
  store i32 4, i32* %nrows1.i17, align 8, !tbaa !138
  %ncols2.i18 = getelementptr inbounds i8, i8* %call.i16, i64 4
  %14 = bitcast i8* %ncols2.i18 to i32*
  store i32 %5, i32* %14, align 4, !tbaa !139
  %mul.i19 = shl nsw i32 %5, 2
  %conv.i20 = sext i32 %mul.i19 to i64
  %mul3.i21 = shl nsw i64 %conv.i20, 3
  %call4.i = tail call noalias i8* @malloc(i64 %mul3.i21) #31
  %data.i22 = getelementptr inbounds i8, i8* %call.i16, i64 8
  %15 = bitcast i8* %data.i22 to i8**
  store i8* %call4.i, i8** %15, align 8, !tbaa !137
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %5, 0
  %16 = bitcast i8* %data.i22 to double**
  %data23 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 2
  %nrows24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 0
  %data30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count97 = zext i32 %bone_count to i64
  %wide.trip.count93 = zext i32 %5 to i64
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %tiv7 = phi i64 [ %tiv.next8, %for.inc43 ], [ 0, %for.body11.lr.ph ]
  %tiv.next8 = add nuw nsw i64 %tiv7, 1
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %tiv7
  tail call void @mat_mult(%struct.Matrix* %arrayidx13, %struct.Matrix* %base_positions, %struct.Matrix* %13)
  br i1 %cmp1674, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %17 = load double*, double** %16, align 8, !tbaa !137
  %18 = load i32, i32* %nrows1.i17, align 8, !tbaa !138
  %19 = load double*, double** %data23, align 8, !tbaa !137
  %20 = load i32, i32* %nrows24, align 8, !tbaa !138
  %21 = load double*, double** %data30, align 8, !tbaa !137
  %22 = sext i32 %18 to i64
  %23 = sext i32 %20 to i64
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %indvars.iv87 = phi i64 [ 0, %for.cond18.preheader.lr.ph ], [ %indvars.iv.next88, %for.inc40 ]
  %24 = mul nsw i64 %indvars.iv87, %22
  %25 = mul nsw i64 %indvars.iv87, %23
  %26 = add nsw i64 %25, %tiv7
  %arrayidx28 = getelementptr inbounds double, double* %19, i64 %26
  %27 = mul nuw nsw i64 %indvars.iv87, 3
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %indvars.iv82 = phi i64 [ 0, %for.cond18.preheader ], [ %indvars.iv.next83, %for.body20 ]
  %28 = add nsw i64 %24, %indvars.iv82
  %arrayidx22 = getelementptr inbounds double, double* %17, i64 %28
  %29 = load double, double* %arrayidx22, align 8, !tbaa !75
  %30 = load double, double* %arrayidx28, align 8, !tbaa !75
  %mul29 = fmul fast double %30, %29
  %31 = add nuw nsw i64 %indvars.iv82, %27
  %arrayidx35 = getelementptr inbounds double, double* %21, i64 %31
  %32 = load double, double* %arrayidx35, align 8, !tbaa !75
  %add36 = fadd fast double %32, %mul29
  store double %add36, double* %arrayidx35, align 8, !tbaa !75
  %indvars.iv.next83 = add nuw nsw i64 %indvars.iv82, 1
  %exitcond86.not = icmp eq i64 %indvars.iv.next83, 3
  br i1 %exitcond86.not, label %for.inc40, label %for.body20, !llvm.loop !213

for.inc40:                                        ; preds = %for.body20
  %indvars.iv.next88 = add nuw nsw i64 %indvars.iv87, 1
  %exitcond94.not = icmp eq i64 %indvars.iv.next88, %wide.trip.count93
  br i1 %exitcond94.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !214

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %exitcond98.not = icmp eq i64 %tiv.next8, %wide.trip.count97
  br i1 %exitcond98.not, label %for.end45, label %for.body11, !llvm.loop !215

for.end45:                                        ; preds = %for.inc43, %fill.exit
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %5, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %data50 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %33 = load double*, double** %data50, align 8, !tbaa !137
  %wide.trip.count = zext i32 %5 to i64
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %tiv5 = phi i64 [ %tiv.next6, %for.body49 ], [ 0, %for.body49.lr.ph ]
  %tiv.next6 = add nuw nsw i64 %tiv5, 1
  %34 = mul nuw nsw i64 %tiv5, 3
  %arrayidx55 = getelementptr inbounds double, double* %33, i64 %34
  %35 = load double, double* %arrayidx55, align 8, !tbaa !75
  %mul56 = fneg fast double %35
  store double %mul56, double* %arrayidx55, align 8, !tbaa !75
  %exitcond.not = icmp eq i64 %tiv.next6, %wide.trip.count
  br i1 %exitcond.not, label %if.then61, label %for.body49, !llvm.loop !216

if.then61:                                        ; preds = %for.body49, %for.end45
  tail call void @apply_global_transform(%struct.Matrix* %pose_params, %struct.Matrix* %positions)
  %36 = bitcast i8* %data.i22 to double**
  %37 = load double*, double** %36, align 8, !tbaa !137
  %cmp.not.i24 = icmp eq double* %37, null
  br i1 %cmp.not.i24, label %delete_matrix.exit, label %if.then.i25

if.then.i25:                                      ; preds = %if.then61
  %38 = bitcast double* %37 to i8*
  tail call void @free(i8* %38) #31
  br label %delete_matrix.exit

delete_matrix.exit:                               ; preds = %if.then.i25, %if.then61
  tail call void @free(i8* nonnull %call.i16) #31
  br i1 %cmp15.i, label %for.body.preheader.i28, label %delete_light_matrix_array.exit46.thread

for.body.preheader.i28:                           ; preds = %delete_matrix.exit
  %wide.trip.count.i27 = zext i32 %bone_count to i64
  br label %for.body.i31

for.body.i31:                                     ; preds = %for.inc.i, %for.body.preheader.i28
  %tiv3 = phi i64 [ %tiv.next4, %for.inc.i ], [ 0, %for.body.preheader.i28 ]
  %tiv.next4 = add nuw nsw i64 %tiv3, 1
  %data.i30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %2, i64 %tiv3, i32 2
  %39 = load double*, double** %data.i30, align 8, !tbaa !137
  %cmp1.not.i = icmp eq double* %39, null
  br i1 %cmp1.not.i, label %for.inc.i, label %if.then.i32

if.then.i32:                                      ; preds = %for.body.i31
  %40 = bitcast double* %39 to i8*
  tail call void @free(i8* %40) #31
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.then.i32, %for.body.i31
  %exitcond.not.i34 = icmp eq i64 %tiv.next4, %wide.trip.count.i27
  br i1 %exitcond.not.i34, label %for.body.preheader.i37, label %for.body.i31, !llvm.loop !184

for.body.preheader.i37:                           ; preds = %for.inc.i
  tail call void @free(i8* nonnull %call.i) #31
  br label %for.body.i41

for.body.i41:                                     ; preds = %for.inc.i45, %for.body.preheader.i37
  %tiv1 = phi i64 [ %tiv.next2, %for.inc.i45 ], [ 0, %for.body.preheader.i37 ]
  %tiv.next2 = add nuw nsw i64 %tiv1, 1
  %data.i39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %3, i64 %tiv1, i32 2
  %41 = load double*, double** %data.i39, align 8, !tbaa !137
  %cmp1.not.i40 = icmp eq double* %41, null
  br i1 %cmp1.not.i40, label %for.inc.i45, label %if.then.i42

if.then.i42:                                      ; preds = %for.body.i41
  %42 = bitcast double* %41 to i8*
  tail call void @free(i8* %42) #31
  br label %for.inc.i45

for.inc.i45:                                      ; preds = %if.then.i42, %for.body.i41
  %exitcond.not.i44 = icmp eq i64 %tiv.next2, %wide.trip.count.i27
  br i1 %exitcond.not.i44, label %for.body.preheader.i49, label %for.body.i41, !llvm.loop !184

delete_light_matrix_array.exit46.thread:          ; preds = %delete_matrix.exit
  tail call void @free(i8* %call.i) #31
  tail call void @free(i8* %call.i36064) #31
  br label %delete_light_matrix_array.exit58

for.body.preheader.i49:                           ; preds = %for.inc.i45
  tail call void @free(i8* nonnull %call.i36064) #31
  br label %for.body.i53

for.body.i53:                                     ; preds = %for.inc.i57, %for.body.preheader.i49
  %tiv = phi i64 [ %tiv.next, %for.inc.i57 ], [ 0, %for.body.preheader.i49 ]
  %tiv.next = add nuw nsw i64 %tiv, 1
  %data.i51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %4, i64 %tiv, i32 2
  %43 = load double*, double** %data.i51, align 8, !tbaa !137
  %cmp1.not.i52 = icmp eq double* %43, null
  br i1 %cmp1.not.i52, label %for.inc.i57, label %if.then.i54

if.then.i54:                                      ; preds = %for.body.i53
  %44 = bitcast double* %43 to i8*
  tail call void @free(i8* %44) #31
  br label %for.inc.i57

for.inc.i57:                                      ; preds = %if.then.i54, %for.body.i53
  %exitcond.not.i56 = icmp eq i64 %tiv.next, %wide.trip.count.i27
  br i1 %exitcond.not.i56, label %delete_light_matrix_array.exit58, label %for.body.i53, !llvm.loop !184

delete_light_matrix_array.exit58:                 ; preds = %for.inc.i57, %delete_light_matrix_array.exit46.thread
  tail call void @free(i8* %call.i966) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @preprocess_relatives_to_absolutes(i32 %count, %struct.Matrix* nocapture readonly %relatives, i32* nocapture readonly %parents, %struct.Matrix* nocapture %absolutes) local_unnamed_addr #5 {
entry:
  %cmp26 = icmp sgt i32 %count, 0
  br i1 %cmp26, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %tiv = phi i64 [ %tiv.next, %for.inc ], [ 0, %for.body.preheader ]
  %tiv.next = add nuw nsw i64 %tiv, 1
  %arrayidx = getelementptr inbounds i32, i32* %parents, i64 %tiv
  %0 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %cmp1 = icmp eq i32 %0, -1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %tiv, i32 2
  %1 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp.not.i = icmp eq double* %1, null
  br i1 %cmp.not.i, label %if.end.i, label %if.then.i

if.then.i:                                        ; preds = %if.then
  %2 = bitcast double* %1 to i8*
  tail call void @free(i8* %2) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %if.then
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %tiv, i32 1
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %tiv, i32 1
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %tiv, i32 0
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %nrows3.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %tiv, i32 0
  store i32 %4, i32* %nrows3.i, align 8, !tbaa !138
  %mul.i = mul i32 %4, %3
  %conv.i = sext i32 %mul.i to i64
  %mul6.i = shl nsw i64 %conv.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul6.i) #31
  %5 = bitcast double** %data.i to i8**
  store i8* %call.i, i8** %5, align 8, !tbaa !137
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %6 = bitcast i8* %call.i to double*
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %data12.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %tiv, i32 2
  %7 = load double*, double** %data12.i, align 8, !tbaa !137
  %wide.trip.count.i = zext i32 %mul.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %indvars.iv.i = phi i64 [ 0, %for.body.lr.ph.i ], [ %indvars.iv.next.i, %for.body.i ]
  %arrayidx.i = getelementptr inbounds double, double* %7, i64 %indvars.iv.i
  %8 = load double, double* %arrayidx.i, align 8, !tbaa !75
  %arrayidx15.i = getelementptr inbounds double, double* %6, i64 %indvars.iv.i
  store double %8, double* %arrayidx15.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !193

if.else:                                          ; preds = %for.body
  %idxprom8 = sext i32 %0 to i64
  %arrayidx9 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom8
  %arrayidx11 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %tiv
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %tiv
  tail call void @mat_mult(%struct.Matrix* %arrayidx9, %struct.Matrix* %arrayidx11, %struct.Matrix* %arrayidx13)
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.end.i
  %exitcond.not = icmp eq i64 %tiv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !199

for.end:                                          ; preds = %for.inc, %entry
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @preprocess_mat_mult(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out) local_unnamed_addr #5 {
entry:
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %0 = load i32, i32* %nrows, align 8, !tbaa !138
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %1 = load i32, i32* %ncols, align 4, !tbaa !139
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %2 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %3 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %3, %2
  %mul3.i = mul nsw i32 %1, %0
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %4 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %4, null
  br i1 %cmp4.not.i, label %if.end.i, label %if.then5.i

if.then5.i:                                       ; preds = %if.then.i
  %5 = bitcast double* %4 to i8*
  tail call void @free(i8* %5) #31
  br label %if.end.i

if.end.i:                                         ; preds = %if.then5.i, %if.then.i
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.end.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %6 = bitcast double** %data.i to i8**
  store i8* %call.i, i8** %6, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.end.i
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %1, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %0, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %0, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %1, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %7 = zext i32 %0 to i64
  %wide.trip.count96 = zext i32 %1 to i64
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %tiv = phi i64 [ %tiv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %tiv.next = add nuw nsw i64 %tiv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %8 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %8, i64 %tiv
  %9 = load double*, double** %data7, align 8, !tbaa !137
  %10 = load i32, i32* %nrows8, align 8, !tbaa !138
  %11 = load double*, double** %data14, align 8, !tbaa !137
  %12 = load i32, i32* %ncols21, align 4, !tbaa !139
  %cmp2281 = icmp sgt i32 %12, 1
  %13 = sext i32 %10 to i64
  %wide.trip.count = zext i32 %12 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %indvars.iv91 = phi i64 [ 0, %for.body5.lr.ph ], [ %indvars.iv.next92, %for.inc44 ]
  %14 = load double, double* %arrayidx, align 8, !tbaa !75
  %15 = mul nsw i64 %indvars.iv91, %13
  %arrayidx12 = getelementptr inbounds double, double* %9, i64 %15
  %16 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %16, %14
  %17 = mul nuw nsw i64 %indvars.iv91, %7
  %18 = add nuw nsw i64 %17, %tiv
  %arrayidx19 = getelementptr inbounds double, double* %11, i64 %18
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %19 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body23 ], [ 1, %for.body5 ]
  %20 = mul nuw nsw i64 %indvars.iv, %7
  %21 = add nuw nsw i64 %20, %tiv
  %arrayidx29 = getelementptr inbounds double, double* %8, i64 %21
  %22 = load double, double* %arrayidx29, align 8, !tbaa !75
  %23 = add nsw i64 %indvars.iv, %15
  %arrayidx35 = getelementptr inbounds double, double* %9, i64 %23
  %24 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %24, %22
  %add43 = fadd fast double %19, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %indvars.iv.next92 = add nuw nsw i64 %indvars.iv91, 1
  %exitcond97.not = icmp eq i64 %indvars.iv.next92, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %tiv.next, %7
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !187

for.end49:                                        ; preds = %for.inc47, %resize.exit
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } @augmented_mat_mult(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #5 {
entry:
  %0 = alloca { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %2 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 5
  store i32 %1, i32* %2, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139
  %4 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 6
  store i32 %3, i32* %4, align 4
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %5 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %6 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %6, %5
  %mul3.i = mul nsw i32 %3, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %7 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 7
  store i1 %cmp.not.i, i1* %7, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %8 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %8, null
  %9 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 8
  store i1 %cmp4.not.i, i1* %9, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %10 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 1
  store i8* %call.i, i8** %10, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #31
  %11 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %11, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %12 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8
  store i8* %call.i, i8** %12, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %3, i32* %"ncols2.i'ipg", align 4
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %1, i32* %"nrows1.i'ipg", align 8
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %3, 0
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %"data7'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %13 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %3 to i64
  %mallocsize = shl nuw nsw i64 %13, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %14 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 2
  %15 = bitcast double*** %14 to i8**
  store i8* %malloccall, i8** %15, align 8
  %malloccall10 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl8_malloccache" = bitcast i8* %malloccall10 to double**
  %16 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 3
  %17 = bitcast double*** %16 to i8**
  store i8* %malloccall10, i8** %17, align 8
  %malloccall13 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl11_malloccache" = bitcast i8* %malloccall13 to double**
  %18 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 4
  %19 = bitcast double*** %18 to i8**
  store i8* %malloccall13, i8** %19, align 8
  %mallocsize14 = shl nuw nsw i64 %13, 2
  %malloccall15 = tail call noalias nonnull i8* @malloc(i64 %mallocsize14)
  %_malloccache = bitcast i8* %malloccall15 to i32*
  %20 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 9
  %21 = bitcast i32** %20 to i8**
  store i8* %malloccall15, i8** %21, align 8
  %malloccall18 = tail call noalias nonnull i8* @malloc(i64 %mallocsize14)
  %_malloccache19 = bitcast i8* %malloccall18 to i32*
  %22 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 10
  %23 = bitcast i32** %22 to i8**
  store i8* %malloccall18, i8** %23, align 8
  %24 = mul nuw nsw i64 %wide.trip.count96, %13
  %mallocsize21 = shl nuw nsw i64 %24, 3
  %malloccall22 = tail call noalias nonnull i8* @malloc(i64 %mallocsize21)
  %_malloccache23 = bitcast i8* %malloccall22 to double*
  %25 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 11
  %26 = bitcast double** %25 to i8**
  store i8* %malloccall22, i8** %26, align 8
  %malloccall26 = tail call noalias nonnull i8* @malloc(i64 %mallocsize21)
  %_malloccache27 = bitcast i8* %malloccall26 to double*
  %27 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 12
  %28 = bitcast double** %27 to i8**
  store i8* %malloccall26, i8** %28, align 8
  %malloccall30 = tail call noalias nonnull i8* @malloc(i64 %mallocsize21)
  %_malloccache31 = bitcast i8* %malloccall30 to double**
  %29 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 13
  %30 = bitcast double*** %29 to i8**
  store i8* %malloccall30, i8** %30, align 8
  %malloccall37 = tail call noalias nonnull i8* @malloc(i64 %mallocsize21)
  %_malloccache38 = bitcast i8* %malloccall37 to double**
  %31 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, i64 0, i32 14
  %32 = bitcast double*** %31 to i8**
  store i8* %malloccall37, i8** %32, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %"'ipl11" = load double*, double** %"data'ipg", align 8
  %33 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %33, i64 %iv
  %"'ipl8" = load double*, double** %"data7'ipg", align 8
  %34 = load double*, double** %data7, align 8, !tbaa !137
  %35 = load i32, i32* %nrows8, align 8, !tbaa !138
  %"'ipl" = load double*, double** %"data14'ipg", align 8
  %36 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %36, align 8, !invariant.group !291
  %37 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %35, i32* %37, align 4, !invariant.group !292
  %38 = getelementptr inbounds double*, double** %"'ipl11_malloccache", i64 %iv
  store double* %"'ipl11", double** %38, align 8, !invariant.group !293
  %39 = getelementptr inbounds double*, double** %"'ipl8_malloccache", i64 %iv
  store double* %"'ipl8", double** %39, align 8, !invariant.group !294
  %40 = load double*, double** %data14, align 8, !tbaa !137
  %41 = load i32, i32* %ncols21, align 4, !tbaa !139
  %42 = getelementptr inbounds i32, i32* %_malloccache19, i64 %iv
  store i32 %41, i32* %42, align 4, !invariant.group !295
  %cmp2281 = icmp sgt i32 %41, 1
  %43 = sext i32 %35 to i64
  %wide.trip.count = zext i32 %41 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv4 = phi i64 [ %iv.next5, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %44 = load double, double* %arrayidx, align 8, !tbaa !75
  %45 = mul nsw i64 %iv4, %43
  %arrayidx12 = getelementptr inbounds double, double* %34, i64 %45
  %46 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %46, %44
  %47 = mul nuw nsw i64 %iv4, %13
  %48 = add nuw nsw i64 %47, %iv
  %arrayidx19 = getelementptr inbounds double, double* %40, i64 %48
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  %49 = mul nuw nsw i64 %iv, %wide.trip.count96
  %50 = add nuw nsw i64 %iv4, %49
  %51 = getelementptr inbounds double, double* %_malloccache27, i64 %50
  store double %46, double* %51, align 8, !invariant.group !296
  %52 = getelementptr inbounds double, double* %_malloccache23, i64 %50
  store double %44, double* %52, align 8, !invariant.group !297
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %53 = getelementptr inbounds double*, double** %_malloccache31, i64 %50
  %54 = shl nuw nsw i64 %wide.trip.count, 3
  %mallocsize32 = add nsw i64 %54, -8
  %malloccall33 = tail call noalias nonnull i8* @malloc(i64 %mallocsize32)
  %55 = bitcast double** %53 to i8**
  store i8* %malloccall33, i8** %55, align 8
  %56 = getelementptr inbounds double*, double** %_malloccache38, i64 %50
  %malloccall40 = tail call noalias nonnull i8* @malloc(i64 %mallocsize32)
  %57 = bitcast double** %56 to i8**
  store i8* %malloccall40, i8** %57, align 8
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body23.preheader ]
  %58 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body23.preheader ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %59 = mul nuw nsw i64 %iv.next7, %13
  %60 = add nuw nsw i64 %59, %iv
  %arrayidx29 = getelementptr inbounds double, double* %33, i64 %60
  %61 = load double, double* %arrayidx29, align 8, !tbaa !75
  %62 = add nsw i64 %iv.next7, %45
  %arrayidx35 = getelementptr inbounds double, double* %34, i64 %62
  %63 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %63, %61
  %add43 = fadd fast double %58, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %64 = load double*, double** %56, align 8, !dereferenceable !298, !invariant.group !299
  %65 = getelementptr inbounds double, double* %64, i64 %iv6
  store double %63, double* %65, align 8, !invariant.group !300
  %66 = load double*, double** %53, align 8, !dereferenceable !298, !invariant.group !301
  %67 = getelementptr inbounds double, double* %66, i64 %iv6
  store double %61, double* %67, align 8, !invariant.group !302
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %13
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !187

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %68 = load { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %0, align 8
  ret { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %68
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } @augmented_relatives_to_absolutes(i32 %count, %struct.Matrix* nocapture readonly %relatives, %struct.Matrix* nocapture %"relatives'", i32* nocapture readonly %parents, %struct.Matrix* nocapture %absolutes, %struct.Matrix* nocapture %"absolutes'") local_unnamed_addr #5 {
entry:
  %0 = alloca { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, align 8
  %cmp26 = icmp sgt i32 %count, 0
  br i1 %cmp26, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64
  %mallocsize = shl nuw nsw i64 %wide.trip.count, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"call.i'mi_malloccache" = bitcast i8* %malloccall to i8**
  %1 = bitcast { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0 to i8**
  store i8* %malloccall, i8** %1, align 8
  %malloccall5 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %call.i_malloccache = bitcast i8* %malloccall5 to i8**
  %2 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 1
  %3 = bitcast i8*** %2 to i8**
  store i8* %malloccall5, i8** %3, align 8
  %malloccall7 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall7 to double**
  %4 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 2
  %5 = bitcast double*** %4 to i8**
  store i8* %malloccall7, i8** %5, align 8
  %mallocsize8 = mul nuw nsw i64 %wide.trip.count, 104
  %malloccall9 = tail call noalias nonnull i8* @malloc(i64 %mallocsize8)
  %_augmented_malloccache = bitcast i8* %malloccall9 to { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*
  %6 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 3
  %7 = bitcast { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }** %6 to i8**
  store i8* %malloccall9, i8** %7, align 8
  %mallocsize10 = shl nuw nsw i64 %wide.trip.count, 2
  %malloccall11 = tail call noalias nonnull i8* @malloc(i64 %mallocsize10)
  %_malloccache = bitcast i8* %malloccall11 to i32*
  %8 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 4
  %9 = bitcast i32** %8 to i8**
  store i8* %malloccall11, i8** %9, align 8
  %malloccall12 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count)
  %10 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 5
  %11 = bitcast i1** %10 to i8**
  store i8* %malloccall12, i8** %11, align 8
  %malloccall14 = tail call noalias nonnull i8* @malloc(i64 %mallocsize10)
  %mul.i_malloccache = bitcast i8* %malloccall14 to i32*
  %12 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 6
  %13 = bitcast i32** %12 to i8**
  store i8* %malloccall14, i8** %13, align 8
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %iv = phi i64 [ %iv.next, %for.inc ], [ 0, %for.body.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1
  %arrayidx = getelementptr inbounds i32, i32* %parents, i64 %iv
  %14 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %15 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %14, i32* %15, align 4, !invariant.group !303
  %cmp1 = icmp eq i32 %14, -1
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %iv, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %iv, i32 2
  %16 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp.not.i = icmp eq double* %16, null
  %17 = getelementptr inbounds i8, i8* %malloccall12, i64 %iv
  %18 = bitcast i8* %17 to i1*
  store i1 %cmp.not.i, i1* %18, align 1, !invariant.group !304
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv, i32 1
  %19 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %iv, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %iv, i32 1
  store i32 %19, i32* %"ncols2.i'ipg", align 4
  store i32 %19, i32* %ncols2.i, align 4, !tbaa !139
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv, i32 0
  %20 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %"nrows3.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %iv, i32 0
  %nrows3.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %iv, i32 0
  store i32 %20, i32* %"nrows3.i'ipg", align 8
  store i32 %20, i32* %nrows3.i, align 8, !tbaa !138
  %mul.i = mul i32 %20, %19
  %conv.i = sext i32 %mul.i to i64
  %mul6.i = shl nsw i64 %conv.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul6.i) #31
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul6.i) #31
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul6.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %21 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8
  %22 = getelementptr inbounds i32, i32* %mul.i_malloccache, i64 %iv
  store i32 %mul.i, i32* %22, align 4, !invariant.group !305
  %23 = getelementptr inbounds i8*, i8** %call.i_malloccache, i64 %iv
  store i8* %call.i, i8** %23, align 8, !invariant.group !306
  %24 = getelementptr inbounds i8*, i8** %"call.i'mi_malloccache", i64 %iv
  store i8* %"call.i'mi", i8** %24, align 8, !invariant.group !307
  store i8* %call.i, i8** %21, align 8, !tbaa !137
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  %25 = bitcast i8* %call.i to double*
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.then
  %"data12.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %iv, i32 2
  %data12.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv, i32 2
  %"'ipl" = load double*, double** %"data12.i'ipg", align 8
  %26 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %26, align 8, !invariant.group !308
  %27 = load double*, double** %data12.i, align 8, !tbaa !137
  %wide.trip.count.i = zext i32 %mul.i to i64
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %iv2 = phi i64 [ %iv.next3, %for.body.i ], [ 0, %for.body.lr.ph.i ]
  %iv.next3 = add nuw nsw i64 %iv2, 1
  %arrayidx.i = getelementptr inbounds double, double* %27, i64 %iv2
  %28 = load double, double* %arrayidx.i, align 8, !tbaa !75
  %arrayidx15.i = getelementptr inbounds double, double* %25, i64 %iv2
  store double %28, double* %arrayidx15.i, align 8, !tbaa !75
  %exitcond.not.i = icmp eq i64 %iv.next3, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !193

if.else:                                          ; preds = %for.body
  %idxprom8 = sext i32 %14 to i64
  %"arrayidx9'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %idxprom8
  %arrayidx9 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom8
  %"arrayidx11'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %iv
  %arrayidx11 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv
  %"arrayidx13'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %iv
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %iv
  %_augmented = call { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } @augmented_mat_mult(%struct.Matrix* %arrayidx9, %struct.Matrix* %"arrayidx9'ipg", %struct.Matrix* %arrayidx11, %struct.Matrix* %"arrayidx11'ipg", %struct.Matrix* %arrayidx13, %struct.Matrix* %"arrayidx13'ipg")
  %29 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %_augmented_malloccache, i64 %iv
  store { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %_augmented, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %29, align 8, !invariant.group !309
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.then
  %exitcond.not = icmp eq i64 %iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end, label %for.body, !llvm.loop !199

for.end:                                          ; preds = %for.inc, %entry
  %.elt = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 0
  %.unpack = load i8**, i8*** %.elt, align 8
  %30 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } undef, i8** %.unpack, 0
  %.elt1 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 1
  %.unpack2 = load i8**, i8*** %.elt1, align 8
  %31 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %30, i8** %.unpack2, 1
  %.elt3 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 2
  %.unpack4 = load double**, double*** %.elt3, align 8
  %32 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %31, double** %.unpack4, 2
  %.elt5 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 3
  %.unpack6 = load { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }** %.elt5, align 8
  %33 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %32, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %.unpack6, 3
  %.elt7 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 4
  %.unpack8 = load i32*, i32** %.elt7, align 8
  %34 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %33, i32* %.unpack8, 4
  %.elt9 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 5
  %.unpack10 = load i1*, i1** %.elt9, align 8
  %35 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %34, i1* %.unpack10, 5
  %.elt11 = getelementptr inbounds { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }* %0, i64 0, i32 6
  %.unpack12 = load i32*, i32** %.elt11, align 8
  %36 = insertvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %35, i32* %.unpack12, 6
  ret { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %36
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @preprocess_get_posed_relatives(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* noalias nocapture %relatives) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(128) i8* @malloc(i64 128) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %call.i18 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %3 = bitcast i8* %call.i18 to %struct.Matrix*
  %nrows1.i19 = bitcast i8* %call.i18 to i32*
  store i32 3, i32* %nrows1.i19, align 8, !tbaa !138
  %ncols2.i20 = getelementptr inbounds i8, i8* %call.i18, i64 4
  %4 = bitcast i8* %ncols2.i20 to i32*
  store i32 3, i32* %4, align 4, !tbaa !139
  %call4.i21 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i22 = getelementptr inbounds i8, i8* %call.i18, i64 8
  %5 = bitcast i8* %data.i22 to i8**
  store i8* %call4.i21, i8** %5, align 8, !tbaa !137
  %cmp40 = icmp sgt i32 %bone_count, 0
  %6 = bitcast i8* %call4.i to double*
  br i1 %cmp40, label %for.body.lr.ph, label %if.then.i35

for.body.lr.ph:                                   ; preds = %entry
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %7 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %8 = load i32, i32* %nrows, align 8, !tbaa !138
  %9 = bitcast i8* %data.i22 to double**
  %wide.trip.count = zext i32 %bone_count to i64
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %set_block.exit, %for.body.lr.ph
  %tiv = phi i64 [ %tiv.next, %set_block.exit ], [ 0, %for.body.lr.ph ]
  %tiv.next = add nuw nsw i64 %tiv, 1
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %indvars.iv43 = phi i64 [ %indvars.iv.next44, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %10 = shl nsw i64 %indvars.iv43, 2
  %11 = mul nsw i64 %indvars.iv43, 5
  %arrayidx.i = getelementptr inbounds double, double* %6, i64 %11
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %indvars.iv43, %indvars.iv
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %12 = add nuw nsw i64 %indvars.iv, %10
  %arrayidx11.i = getelementptr inbounds double, double* %6, i64 %12
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.inc.i
  %indvars.iv.next44 = add nuw nsw i64 %indvars.iv43, 1
  %exitcond37.not.i = icmp eq i64 %indvars.iv.next44, 4
  br i1 %exitcond37.not.i, label %set_identity.exit, label %for.body3.lr.ph.i, !llvm.loop !189

set_identity.exit:                                ; preds = %for.inc12.i
  %13 = trunc i64 %tiv to i32
  %14 = add i32 %13, 3
  %mul = mul nsw i32 %8, %14
  %idx.ext = sext i32 %mul to i64
  %add.ptr = getelementptr inbounds double, double* %7, i64 %idx.ext
  tail call void @euler_angles_to_rotation_matrix(double* %add.ptr, %struct.Matrix* %3)
  %15 = load i32, i32* %4, align 4, !tbaa !139
  %cmp30.i = icmp sgt i32 %15, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i26, label %set_block.exit

for.cond1.preheader.lr.ph.i26:                    ; preds = %set_identity.exit
  %16 = load i32, i32* %nrows1.i19, align 8, !tbaa !138
  %cmp228.i = icmp sgt i32 %16, 0
  %wide.trip.count.i = zext i32 %16 to i64
  %17 = zext i32 %15 to i64
  %18 = sext i32 %16 to i64
  br label %for.cond1.preheader.i27

for.cond1.preheader.i27:                          ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i26
  %indvars.iv48 = phi i64 [ %indvars.iv.next49, %for.inc13.i ], [ 0, %for.cond1.preheader.lr.ph.i26 ]
  br i1 %cmp228.i, label %for.body3.lr.ph.i29, label %for.inc13.i

for.body3.lr.ph.i29:                              ; preds = %for.cond1.preheader.i27
  %19 = load double*, double** %9, align 8, !tbaa !137
  %20 = shl nsw i64 %indvars.iv48, 2
  %21 = mul nsw i64 %indvars.iv48, %18
  br label %for.body3.i32

for.body3.i32:                                    ; preds = %for.body3.i32, %for.body3.lr.ph.i29
  %indvars.iv.i = phi i64 [ 0, %for.body3.lr.ph.i29 ], [ %indvars.iv.next.i, %for.body3.i32 ]
  %22 = add nsw i64 %indvars.iv.i, %21
  %arrayidx.i30 = getelementptr inbounds double, double* %19, i64 %22
  %23 = load double, double* %arrayidx.i30, align 8, !tbaa !75
  %24 = add nuw nsw i64 %indvars.iv.i, %20
  %arrayidx12.i = getelementptr inbounds double, double* %6, i64 %24
  store double %23, double* %arrayidx12.i, align 8, !tbaa !75
  %indvars.iv.next.i = add nuw nsw i64 %indvars.iv.i, 1
  %exitcond.not.i31 = icmp eq i64 %indvars.iv.next.i, %wide.trip.count.i
  br i1 %exitcond.not.i31, label %for.inc13.i, label %for.body3.i32, !llvm.loop !191

for.inc13.i:                                      ; preds = %for.body3.i32, %for.cond1.preheader.i27
  %indvars.iv.next49 = add nuw nsw i64 %indvars.iv48, 1
  %exitcond37.not.i33 = icmp eq i64 %indvars.iv.next49, %17
  br i1 %exitcond37.not.i33, label %set_block.exit, label %for.cond1.preheader.i27, !llvm.loop !192

set_block.exit:                                   ; preds = %for.inc13.i, %set_identity.exit
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %tiv
  %arrayidx3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %tiv
  tail call void @mat_mult(%struct.Matrix* %arrayidx, %struct.Matrix* %0, %struct.Matrix* %arrayidx3)
  %exitcond.not = icmp eq i64 %tiv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.then.i35, label %for.cond1.preheader.lr.ph.i, !llvm.loop !200

if.then.i35:                                      ; preds = %set_block.exit, %entry
  tail call void @free(i8* nonnull %call4.i) #31
  tail call void @free(i8* nonnull %call.i) #31
  %25 = bitcast i8* %data.i22 to double**
  %26 = load double*, double** %25, align 8, !tbaa !137
  %cmp.not.i37 = icmp eq double* %26, null
  br i1 %cmp.not.i37, label %delete_matrix.exit39, label %if.then.i38

if.then.i38:                                      ; preds = %if.then.i35
  %27 = bitcast double* %26 to i8*
  tail call void @free(i8* %27) #31
  br label %delete_matrix.exit39

delete_matrix.exit39:                             ; preds = %if.then.i38, %if.then.i35
  tail call void @free(i8* nonnull %call.i18) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @preprocess_euler_angles_to_rotation_matrix(double* noalias nocapture readonly %xzy, %struct.Matrix* noalias nocapture %R) local_unnamed_addr #5 {
for.cond1.preheader.lr.ph.i:
  %0 = load double, double* %xzy, align 8, !tbaa !75
  %arrayidx1 = getelementptr inbounds double, double* %xzy, i64 2
  %1 = load double, double* %arrayidx1, align 8, !tbaa !75
  %arrayidx2 = getelementptr inbounds double, double* %xzy, i64 1
  %2 = load double, double* %arrayidx2, align 8, !tbaa !75
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %3 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %3, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %4 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %4, align 8, !tbaa !137
  %call.i167 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i168 = bitcast i8* %call.i167 to i32*
  store i32 3, i32* %nrows1.i168, align 8, !tbaa !138
  %ncols2.i169 = getelementptr inbounds i8, i8* %call.i167, i64 4
  %5 = bitcast i8* %ncols2.i169 to i32*
  store i32 3, i32* %5, align 4, !tbaa !139
  %call4.i170 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i171 = getelementptr inbounds i8, i8* %call.i167, i64 8
  %6 = bitcast i8* %data.i171 to i8**
  store i8* %call4.i170, i8** %6, align 8, !tbaa !137
  %call.i172 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %nrows1.i173 = bitcast i8* %call.i172 to i32*
  store i32 3, i32* %nrows1.i173, align 8, !tbaa !138
  %ncols2.i174 = getelementptr inbounds i8, i8* %call.i172, i64 4
  %7 = bitcast i8* %ncols2.i174 to i32*
  store i32 3, i32* %7, align 4, !tbaa !139
  %call4.i175 = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i176 = getelementptr inbounds i8, i8* %call.i172, i64 8
  %8 = bitcast i8* %data.i176 to i8**
  store i8* %call4.i175, i8** %8, align 8, !tbaa !137
  %9 = bitcast i8* %call4.i to double*
  %10 = bitcast i8* %call4.i170 to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %tiv3 = phi i64 [ %tiv.next4, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %tiv.next4 = add nuw nsw i64 %tiv3, 1
  %11 = mul nuw nsw i64 %tiv3, 3
  %12 = shl nuw nsw i64 %tiv3, 2
  %arrayidx.i = getelementptr inbounds double, double* %9, i64 %12
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %indvars.iv262 = phi i64 [ %indvars.iv.next263, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %tiv3, %indvars.iv262
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %13 = add nuw nsw i64 %indvars.iv262, %11
  %arrayidx11.i = getelementptr inbounds double, double* %9, i64 %13
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %indvars.iv.next263 = add nuw nsw i64 %indvars.iv262, 1
  %exitcond.not.i = icmp eq i64 %indvars.iv.next263, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.inc.i
  %exitcond37.not.i = icmp eq i64 %tiv.next4, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i182, label %for.body3.lr.ph.i, !llvm.loop !189

for.cond1.preheader.lr.ph.i182:                   ; preds = %for.inc12.i
  %14 = bitcast i8* %call.i to %struct.Matrix*
  %15 = bitcast i8* %call.i167 to %struct.Matrix*
  %16 = bitcast i8* %call.i172 to %struct.Matrix*
  %17 = bitcast i8* %call4.i175 to double*
  %18 = tail call fast double @llvm.cos.f64(double %0)
  %arrayidx5 = getelementptr inbounds i8, i8* %call4.i, i64 32
  %19 = bitcast i8* %arrayidx5 to double*
  store double %18, double* %19, align 8, !tbaa !75
  %20 = tail call fast double @llvm.sin.f64(double %0)
  %arrayidx11 = getelementptr inbounds i8, i8* %call4.i, i64 40
  %21 = bitcast i8* %arrayidx11 to double*
  store double %20, double* %21, align 8, !tbaa !75
  %fneg = fneg fast double %20
  %arrayidx23 = getelementptr inbounds i8, i8* %call4.i, i64 56
  %22 = bitcast i8* %arrayidx23 to double*
  store double %fneg, double* %22, align 8, !tbaa !75
  %arrayidx35 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %23 = bitcast i8* %arrayidx35 to double*
  store double %18, double* %23, align 8, !tbaa !75
  br label %for.body3.lr.ph.i189

for.body3.lr.ph.i189:                             ; preds = %for.inc12.i204, %for.cond1.preheader.lr.ph.i182
  %tiv1 = phi i64 [ %tiv.next2, %for.inc12.i204 ], [ 0, %for.cond1.preheader.lr.ph.i182 ]
  %tiv.next2 = add nuw nsw i64 %tiv1, 1
  %24 = mul nuw nsw i64 %tiv1, 3
  %25 = shl nuw nsw i64 %tiv1, 2
  %arrayidx.i193 = getelementptr inbounds double, double* %10, i64 %25
  br label %for.body3.i192

for.body3.i192:                                   ; preds = %for.inc.i201, %for.body3.lr.ph.i189
  %indvars.iv255 = phi i64 [ %indvars.iv.next256, %for.inc.i201 ], [ 0, %for.body3.lr.ph.i189 ]
  %cmp4.i191 = icmp eq i64 %tiv1, %indvars.iv255
  br i1 %cmp4.i191, label %if.then.i194, label %if.else.i198

if.then.i194:                                     ; preds = %for.body3.i192
  store double 1.000000e+00, double* %arrayidx.i193, align 8, !tbaa !75
  br label %for.inc.i201

if.else.i198:                                     ; preds = %for.body3.i192
  %26 = add nuw nsw i64 %indvars.iv255, %24
  %arrayidx11.i197 = getelementptr inbounds double, double* %10, i64 %26
  store double 0.000000e+00, double* %arrayidx11.i197, align 8, !tbaa !75
  br label %for.inc.i201

for.inc.i201:                                     ; preds = %if.else.i198, %if.then.i194
  %indvars.iv.next256 = add nuw nsw i64 %indvars.iv255, 1
  %exitcond.not.i200 = icmp eq i64 %indvars.iv.next256, 3
  br i1 %exitcond.not.i200, label %for.inc12.i204, label %for.body3.i192, !llvm.loop !188

for.inc12.i204:                                   ; preds = %for.inc.i201
  %exitcond37.not.i203 = icmp eq i64 %tiv.next2, 3
  br i1 %exitcond37.not.i203, label %for.cond1.preheader.lr.ph.i211, label %for.body3.lr.ph.i189, !llvm.loop !189

for.cond1.preheader.lr.ph.i211:                   ; preds = %for.inc12.i204
  %27 = tail call fast double @llvm.cos.f64(double %1)
  store double %27, double* %10, align 8, !tbaa !75
  %28 = tail call fast double @llvm.sin.f64(double %1)
  %arrayidx47 = getelementptr inbounds i8, i8* %call4.i170, i64 48
  %29 = bitcast i8* %arrayidx47 to double*
  store double %28, double* %29, align 8, !tbaa !75
  %fneg54 = fneg fast double %28
  %arrayidx60 = getelementptr inbounds i8, i8* %call4.i170, i64 16
  %30 = bitcast i8* %arrayidx60 to double*
  store double %fneg54, double* %30, align 8, !tbaa !75
  %arrayidx72 = getelementptr inbounds i8, i8* %call4.i170, i64 64
  %31 = bitcast i8* %arrayidx72 to double*
  store double %27, double* %31, align 8, !tbaa !75
  br label %for.body3.lr.ph.i218

for.body3.lr.ph.i218:                             ; preds = %for.inc12.i233, %for.cond1.preheader.lr.ph.i211
  %tiv = phi i64 [ %tiv.next, %for.inc12.i233 ], [ 0, %for.cond1.preheader.lr.ph.i211 ]
  %tiv.next = add nuw nsw i64 %tiv, 1
  %32 = mul nuw nsw i64 %tiv, 3
  %33 = shl nuw nsw i64 %tiv, 2
  %arrayidx.i222 = getelementptr inbounds double, double* %17, i64 %33
  br label %for.body3.i221

for.body3.i221:                                   ; preds = %for.inc.i230, %for.body3.lr.ph.i218
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.inc.i230 ], [ 0, %for.body3.lr.ph.i218 ]
  %cmp4.i220 = icmp eq i64 %tiv, %indvars.iv
  br i1 %cmp4.i220, label %if.then.i223, label %if.else.i227

if.then.i223:                                     ; preds = %for.body3.i221
  store double 1.000000e+00, double* %arrayidx.i222, align 8, !tbaa !75
  br label %for.inc.i230

if.else.i227:                                     ; preds = %for.body3.i221
  %34 = add nuw nsw i64 %indvars.iv, %32
  %arrayidx11.i226 = getelementptr inbounds double, double* %17, i64 %34
  store double 0.000000e+00, double* %arrayidx11.i226, align 8, !tbaa !75
  br label %for.inc.i230

for.inc.i230:                                     ; preds = %if.else.i227, %if.then.i223
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i229 = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not.i229, label %for.inc12.i233, label %for.body3.i221, !llvm.loop !188

for.inc12.i233:                                   ; preds = %for.inc.i230
  %exitcond37.not.i232 = icmp eq i64 %tiv.next, 3
  br i1 %exitcond37.not.i232, label %set_identity.exit234, label %for.body3.lr.ph.i218, !llvm.loop !189

set_identity.exit234:                             ; preds = %for.inc12.i233
  %35 = tail call fast double @llvm.cos.f64(double %2)
  store double %35, double* %17, align 8, !tbaa !75
  %36 = tail call fast double @llvm.sin.f64(double %2)
  %arrayidx84 = getelementptr inbounds i8, i8* %call4.i175, i64 8
  %37 = bitcast i8* %arrayidx84 to double*
  store double %36, double* %37, align 8, !tbaa !75
  %fneg91 = fneg fast double %36
  %arrayidx97 = getelementptr inbounds i8, i8* %call4.i175, i64 24
  %38 = bitcast i8* %arrayidx97 to double*
  store double %fneg91, double* %38, align 8, !tbaa !75
  %arrayidx109 = getelementptr inbounds i8, i8* %call4.i175, i64 32
  %39 = bitcast i8* %arrayidx109 to double*
  store double %35, double* %39, align 8, !tbaa !75
  %call.i235 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %40 = bitcast i8* %call.i235 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i235, i8 0, i64 16, i1 false) #31
  tail call void @mat_mult(%struct.Matrix* %16, %struct.Matrix* %15, %struct.Matrix* %40)
  tail call void @mat_mult(%struct.Matrix* %40, %struct.Matrix* %14, %struct.Matrix* %R)
  tail call void @free(i8* nonnull %call4.i) #31
  tail call void @free(i8* %call.i) #31
  tail call void @free(i8* %call4.i170) #31
  tail call void @free(i8* %call.i167) #31
  tail call void @free(i8* nonnull %call4.i175) #31
  tail call void @free(i8* nonnull %call.i172) #31
  %data.i246 = getelementptr inbounds i8, i8* %call.i235, i64 8
  %41 = bitcast i8* %data.i246 to double**
  %42 = load double*, double** %41, align 8, !tbaa !137
  %cmp.not.i247 = icmp eq double* %42, null
  br i1 %cmp.not.i247, label %delete_matrix.exit249, label %if.then.i248

if.then.i248:                                     ; preds = %set_identity.exit234
  %43 = bitcast double* %42 to i8*
  tail call void @free(i8* %43) #31
  br label %delete_matrix.exit249

delete_matrix.exit249:                            ; preds = %if.then.i248, %set_identity.exit234
  tail call void @free(i8* nonnull %call.i235) #31
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.1(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #5 {
entry:
  %0 = alloca { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %3 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %4 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %4, %3
  %mul3.i = mul nsw i32 %2, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %5 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 3
  store i1 %cmp.not.i, i1* %5, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %6 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %6, null
  %7 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 4
  store i1 %cmp4.not.i, i1* %7, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %8 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %8, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #31
  %9 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %9, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %10 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8
  store i8* %call.i, i8** %10, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %2, i32* %"ncols2.i'ipg", align 4
  store i32 %2, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %1, i32* %"nrows1.i'ipg", align 8
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %2, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %11 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %2 to i64
  %mallocsize = shl nuw nsw i64 %11, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %12 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 2
  %13 = bitcast double*** %12 to i8**
  store i8* %malloccall, i8** %13, align 8
  %14 = mul nuw nsw i64 %wide.trip.count96, %11
  %mallocsize10 = shl nuw nsw i64 %14, 3
  %malloccall11 = tail call noalias nonnull i8* @malloc(i64 %mallocsize10)
  %_malloccache = bitcast i8* %malloccall11 to double*
  %15 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 5
  %16 = bitcast double** %15 to i8**
  store i8* %malloccall11, i8** %16, align 8
  %malloccall14 = tail call noalias nonnull i8* @malloc(i64 %mallocsize10)
  %_malloccache15 = bitcast i8* %malloccall14 to double*
  %17 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 6
  %18 = bitcast double** %17 to i8**
  store i8* %malloccall14, i8** %18, align 8
  %_unwrap = load i32, i32* %ncols21, align 4, !tbaa !139
  %wide.trip.count_unwrap = zext i32 %_unwrap to i64
  %19 = add nsw i64 %wide.trip.count_unwrap, -1
  %20 = mul nuw nsw i64 %19, %wide.trip.count96
  %21 = mul nuw nsw i64 %20, %11
  %mallocsize18 = shl nuw nsw i64 %21, 3
  %malloccall19 = tail call noalias nonnull i8* @malloc(i64 %mallocsize18)
  %_malloccache20 = bitcast i8* %malloccall19 to double*
  %22 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 7
  %23 = bitcast double** %22 to i8**
  store i8* %malloccall19, i8** %23, align 8
  %malloccall23 = tail call noalias nonnull i8* @malloc(i64 %mallocsize18)
  %_malloccache24 = bitcast i8* %malloccall23 to double*
  %24 = getelementptr inbounds { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 8
  %25 = bitcast double** %24 to i8**
  store i8* %malloccall23, i8** %25, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %26 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %26, i64 %iv
  %27 = load double*, double** %data7, align 8, !tbaa !137
  %28 = load i32, i32* %nrows8, align 8, !tbaa !138
  %"'ipl" = load double*, double** %"data14'ipg", align 8
  %29 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %29, align 8, !invariant.group !310
  %30 = load double*, double** %data14, align 8, !tbaa !137
  %31 = load i32, i32* %ncols21, align 4, !tbaa !139
  %cmp2281 = icmp sgt i32 %31, 1
  %32 = sext i32 %28 to i64
  %wide.trip.count = zext i32 %31 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv4 = phi i64 [ %iv.next5, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %33 = load double, double* %arrayidx, align 8, !tbaa !75
  %34 = mul nsw i64 %iv4, %32
  %arrayidx12 = getelementptr inbounds double, double* %27, i64 %34
  %35 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %35, %33
  %36 = mul nuw nsw i64 %iv4, %11
  %37 = add nuw nsw i64 %36, %iv
  %arrayidx19 = getelementptr inbounds double, double* %30, i64 %37
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  %38 = mul nuw nsw i64 %iv, %wide.trip.count96
  %39 = add nuw nsw i64 %iv4, %38
  %40 = getelementptr inbounds double, double* %_malloccache15, i64 %39
  store double %35, double* %40, align 8, !invariant.group !311
  %41 = getelementptr inbounds double, double* %_malloccache, i64 %39
  store double %33, double* %41, align 8, !invariant.group !312
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body5 ]
  %42 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %43 = mul nuw nsw i64 %iv.next7, %11
  %44 = add nuw nsw i64 %43, %iv
  %arrayidx29 = getelementptr inbounds double, double* %26, i64 %44
  %45 = load double, double* %arrayidx29, align 8, !tbaa !75
  %46 = add nsw i64 %iv.next7, %34
  %arrayidx35 = getelementptr inbounds double, double* %27, i64 %46
  %47 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %47, %45
  %add43 = fadd fast double %42, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %48 = mul nuw nsw i64 %iv4, %19
  %49 = add nuw nsw i64 %iv6, %48
  %50 = mul nuw nsw i64 %iv, %20
  %51 = add nuw nsw i64 %49, %50
  %52 = getelementptr inbounds double, double* %_malloccache24, i64 %51
  store double %47, double* %52, align 8, !invariant.group !313
  %53 = getelementptr inbounds double, double* %_malloccache20, i64 %51
  store double %45, double* %53, align 8, !invariant.group !314
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %11
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !187

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %54 = load { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %0, align 8
  ret { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %54
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8*, i8*, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.2(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #5 {
entry:
  %0 = alloca { i8*, i8*, i1, i1, double*, double*, double*, double* }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %3 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %4 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %4, %3
  %mul3.i = mul nsw i32 %2, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %5 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 2
  store i1 %cmp.not.i, i1* %5, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %6 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %6, null
  %7 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 3
  store i1 %cmp4.not.i, i1* %7, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %8 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %8, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #31
  %9 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %9, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %10 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8
  store i8* %call.i, i8** %10, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %2, i32* %"ncols2.i'ipg", align 4
  store i32 %2, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %1, i32* %"nrows1.i'ipg", align 8
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %2, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %11 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %2 to i64
  %12 = mul nuw nsw i64 %wide.trip.count96, %11
  %mallocsize = shl nuw nsw i64 %12, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_malloccache = bitcast i8* %malloccall to double*
  %13 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 4
  %14 = bitcast double** %13 to i8**
  store i8* %malloccall, i8** %14, align 8
  %malloccall12 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_malloccache13 = bitcast i8* %malloccall12 to double*
  %15 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 5
  %16 = bitcast double** %15 to i8**
  store i8* %malloccall12, i8** %16, align 8
  %_unwrap = load i32, i32* %ncols21, align 4, !tbaa !139
  %wide.trip.count_unwrap = zext i32 %_unwrap to i64
  %17 = add nsw i64 %wide.trip.count_unwrap, -1
  %18 = mul nuw nsw i64 %17, %wide.trip.count96
  %19 = mul nuw nsw i64 %18, %11
  %mallocsize16 = shl nuw nsw i64 %19, 3
  %malloccall17 = tail call noalias nonnull i8* @malloc(i64 %mallocsize16)
  %_malloccache18 = bitcast i8* %malloccall17 to double*
  %20 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 6
  %21 = bitcast double** %20 to i8**
  store i8* %malloccall17, i8** %21, align 8
  %malloccall21 = tail call noalias nonnull i8* @malloc(i64 %mallocsize16)
  %_malloccache22 = bitcast i8* %malloccall21 to double*
  %22 = getelementptr inbounds { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, i64 0, i32 7
  %23 = bitcast double** %22 to i8**
  store i8* %malloccall21, i8** %23, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %24 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %24, i64 %iv
  %25 = load double*, double** %data7, align 8, !tbaa !137
  %26 = load i32, i32* %nrows8, align 8, !tbaa !138
  %27 = load double*, double** %data14, align 8, !tbaa !137
  %28 = load i32, i32* %ncols21, align 4, !tbaa !139
  %cmp2281 = icmp sgt i32 %28, 1
  %29 = sext i32 %26 to i64
  %wide.trip.count = zext i32 %28 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv4 = phi i64 [ %iv.next5, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %30 = load double, double* %arrayidx, align 8, !tbaa !75
  %31 = mul nsw i64 %iv4, %29
  %arrayidx12 = getelementptr inbounds double, double* %25, i64 %31
  %32 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %32, %30
  %33 = mul nuw nsw i64 %iv4, %11
  %34 = add nuw nsw i64 %33, %iv
  %arrayidx19 = getelementptr inbounds double, double* %27, i64 %34
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  %35 = mul nuw nsw i64 %iv, %wide.trip.count96
  %36 = add nuw nsw i64 %iv4, %35
  %37 = getelementptr inbounds double, double* %_malloccache13, i64 %36
  store double %32, double* %37, align 8, !invariant.group !315
  %38 = getelementptr inbounds double, double* %_malloccache, i64 %36
  store double %30, double* %38, align 8, !invariant.group !316
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body5 ]
  %39 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %40 = mul nuw nsw i64 %iv.next7, %11
  %41 = add nuw nsw i64 %40, %iv
  %arrayidx29 = getelementptr inbounds double, double* %24, i64 %41
  %42 = load double, double* %arrayidx29, align 8, !tbaa !75
  %43 = add nsw i64 %iv.next7, %31
  %arrayidx35 = getelementptr inbounds double, double* %25, i64 %43
  %44 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %44, %42
  %add43 = fadd fast double %39, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %45 = mul nuw nsw i64 %iv4, %17
  %46 = add nuw nsw i64 %iv6, %45
  %47 = mul nuw nsw i64 %iv, %18
  %48 = add nuw nsw i64 %46, %47
  %49 = getelementptr inbounds double, double* %_malloccache22, i64 %48
  store double %44, double* %49, align 8, !invariant.group !317
  %50 = getelementptr inbounds double, double* %_malloccache18, i64 %48
  store double %42, double* %50, align 8, !invariant.group !318
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %11
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !187

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %51 = load { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %0, align 8
  ret { i8*, i8*, i1, i1, double*, double*, double*, double* } %51
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } @augmented_euler_angles_to_rotation_matrix(double* noalias nocapture readonly %xzy, double* nocapture %"xzy'", %struct.Matrix* noalias nocapture %R, %struct.Matrix* nocapture %"R'") local_unnamed_addr #5 {
for.cond1.preheader.lr.ph.i:
  %0 = alloca { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, align 8
  %1 = load double, double* %xzy, align 8, !tbaa !75
  %2 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 13
  store double %1, double* %2, align 8
  %arrayidx1 = getelementptr inbounds double, double* %xzy, i64 2
  %3 = load double, double* %arrayidx1, align 8, !tbaa !75
  %4 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 14
  store double %3, double* %4, align 8
  %arrayidx2 = getelementptr inbounds double, double* %xzy, i64 1
  %5 = load double, double* %arrayidx2, align 8, !tbaa !75
  %6 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 15
  store double %5, double* %6, align 8
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 8
  store i8* %call.i, i8** %7, align 8
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %8 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 7
  store i8* %"call.i'mi", i8** %8, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %"nrows1.i'ipc", align 8
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc15" = bitcast i8* %"ncols2.i'ipg" to i32*
  %9 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %"'ipc15", align 4
  store i32 3, i32* %9, align 4, !tbaa !139
  %call4.i = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %"call4.i'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %10 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 6
  store i8* %"call4.i'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i'mi", i8 0, i64 72, i1 false)
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc14" = bitcast i8* %"data.i'ipg" to i8**
  %11 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc14", align 8
  store i8* %call4.i, i8** %11, align 8, !tbaa !137
  %call.i167 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %12 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 5
  store i8* %call.i167, i8** %12, align 8
  %"call.i167'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %13 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 4
  store i8* %"call.i167'mi", i8** %13, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i167'mi", i8 0, i64 16, i1 false)
  %"nrows1.i168'ipc" = bitcast i8* %"call.i167'mi" to i32*
  %nrows1.i168 = bitcast i8* %call.i167 to i32*
  store i32 3, i32* %"nrows1.i168'ipc", align 8
  store i32 3, i32* %nrows1.i168, align 8, !tbaa !138
  %"ncols2.i169'ipg" = getelementptr inbounds i8, i8* %"call.i167'mi", i64 4
  %ncols2.i169 = getelementptr inbounds i8, i8* %call.i167, i64 4
  %"'ipc13" = bitcast i8* %"ncols2.i169'ipg" to i32*
  %14 = bitcast i8* %ncols2.i169 to i32*
  store i32 3, i32* %"'ipc13", align 4
  store i32 3, i32* %14, align 4, !tbaa !139
  %call4.i170 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %"call4.i170'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %15 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 3
  store i8* %"call4.i170'mi", i8** %15, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i170'mi", i8 0, i64 72, i1 false)
  %"data.i171'ipg" = getelementptr inbounds i8, i8* %"call.i167'mi", i64 8
  %data.i171 = getelementptr inbounds i8, i8* %call.i167, i64 8
  %"'ipc12" = bitcast i8* %"data.i171'ipg" to i8**
  %16 = bitcast i8* %data.i171 to i8**
  store i8* %"call4.i170'mi", i8** %"'ipc12", align 8
  store i8* %call4.i170, i8** %16, align 8, !tbaa !137
  %call.i172 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %17 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 2
  store i8* %call.i172, i8** %17, align 8
  %"call.i172'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %18 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 1
  store i8* %"call.i172'mi", i8** %18, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i172'mi", i8 0, i64 16, i1 false)
  %"nrows1.i173'ipc" = bitcast i8* %"call.i172'mi" to i32*
  %nrows1.i173 = bitcast i8* %call.i172 to i32*
  store i32 3, i32* %"nrows1.i173'ipc", align 8
  store i32 3, i32* %nrows1.i173, align 8, !tbaa !138
  %"ncols2.i174'ipg" = getelementptr inbounds i8, i8* %"call.i172'mi", i64 4
  %ncols2.i174 = getelementptr inbounds i8, i8* %call.i172, i64 4
  %"'ipc11" = bitcast i8* %"ncols2.i174'ipg" to i32*
  %19 = bitcast i8* %ncols2.i174 to i32*
  store i32 3, i32* %"'ipc11", align 4
  store i32 3, i32* %19, align 4, !tbaa !139
  %call4.i175 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %"call4.i175'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %20 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 0
  store i8* %"call4.i175'mi", i8** %20, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i175'mi", i8 0, i64 72, i1 false)
  %"data.i176'ipg" = getelementptr inbounds i8, i8* %"call.i172'mi", i64 8
  %data.i176 = getelementptr inbounds i8, i8* %call.i172, i64 8
  %"'ipc" = bitcast i8* %"data.i176'ipg" to i8**
  %21 = bitcast i8* %data.i176 to i8**
  store i8* %"call4.i175'mi", i8** %"'ipc", align 8
  store i8* %call4.i175, i8** %21, align 8, !tbaa !137
  %22 = bitcast i8* %call4.i to double*
  %23 = bitcast i8* %call4.i170 to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %iv = phi i64 [ %iv.next, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %iv.next = add nuw nsw i64 %iv, 1
  %24 = mul nuw nsw i64 %iv, 3
  %25 = shl nuw nsw i64 %iv, 2
  %arrayidx.i = getelementptr inbounds double, double* %22, i64 %25
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %iv1 = phi i64 [ %iv.next2, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %cmp4.i = icmp eq i64 %iv, %iv1
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %26 = add nuw nsw i64 %iv1, %24
  %arrayidx11.i = getelementptr inbounds double, double* %22, i64 %26
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %exitcond.not.i = icmp eq i64 %iv.next2, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.inc.i
  %exitcond37.not.i = icmp eq i64 %iv.next, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i182, label %for.body3.lr.ph.i, !llvm.loop !189

for.cond1.preheader.lr.ph.i182:                   ; preds = %for.inc12.i
  %"'ipc17" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %27 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc19" = bitcast i8* %"call.i167'mi" to %struct.Matrix*
  %28 = bitcast i8* %call.i167 to %struct.Matrix*
  %"'ipc18" = bitcast i8* %"call.i172'mi" to %struct.Matrix*
  %29 = bitcast i8* %call.i172 to %struct.Matrix*
  %30 = bitcast i8* %call4.i175 to double*
  %31 = tail call fast double @llvm.cos.f64(double %1)
  %arrayidx5 = getelementptr inbounds i8, i8* %call4.i, i64 32
  %32 = bitcast i8* %arrayidx5 to double*
  store double %31, double* %32, align 8, !tbaa !75
  %33 = tail call fast double @llvm.sin.f64(double %1)
  %arrayidx11 = getelementptr inbounds i8, i8* %call4.i, i64 40
  %34 = bitcast i8* %arrayidx11 to double*
  store double %33, double* %34, align 8, !tbaa !75
  %fneg = fneg fast double %33
  %arrayidx23 = getelementptr inbounds i8, i8* %call4.i, i64 56
  %35 = bitcast i8* %arrayidx23 to double*
  store double %fneg, double* %35, align 8, !tbaa !75
  %arrayidx35 = getelementptr inbounds i8, i8* %call4.i, i64 64
  %36 = bitcast i8* %arrayidx35 to double*
  store double %31, double* %36, align 8, !tbaa !75
  br label %for.body3.lr.ph.i189

for.body3.lr.ph.i189:                             ; preds = %for.inc12.i204, %for.cond1.preheader.lr.ph.i182
  %iv3 = phi i64 [ %iv.next4, %for.inc12.i204 ], [ 0, %for.cond1.preheader.lr.ph.i182 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %37 = mul nuw nsw i64 %iv3, 3
  %38 = shl nuw nsw i64 %iv3, 2
  %arrayidx.i193 = getelementptr inbounds double, double* %23, i64 %38
  br label %for.body3.i192

for.body3.i192:                                   ; preds = %for.inc.i201, %for.body3.lr.ph.i189
  %iv5 = phi i64 [ %iv.next6, %for.inc.i201 ], [ 0, %for.body3.lr.ph.i189 ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %cmp4.i191 = icmp eq i64 %iv3, %iv5
  br i1 %cmp4.i191, label %if.then.i194, label %if.else.i198

if.then.i194:                                     ; preds = %for.body3.i192
  store double 1.000000e+00, double* %arrayidx.i193, align 8, !tbaa !75
  br label %for.inc.i201

if.else.i198:                                     ; preds = %for.body3.i192
  %39 = add nuw nsw i64 %iv5, %37
  %arrayidx11.i197 = getelementptr inbounds double, double* %23, i64 %39
  store double 0.000000e+00, double* %arrayidx11.i197, align 8, !tbaa !75
  br label %for.inc.i201

for.inc.i201:                                     ; preds = %if.else.i198, %if.then.i194
  %exitcond.not.i200 = icmp eq i64 %iv.next6, 3
  br i1 %exitcond.not.i200, label %for.inc12.i204, label %for.body3.i192, !llvm.loop !188

for.inc12.i204:                                   ; preds = %for.inc.i201
  %exitcond37.not.i203 = icmp eq i64 %iv.next4, 3
  br i1 %exitcond37.not.i203, label %for.cond1.preheader.lr.ph.i211, label %for.body3.lr.ph.i189, !llvm.loop !189

for.cond1.preheader.lr.ph.i211:                   ; preds = %for.inc12.i204
  %40 = tail call fast double @llvm.cos.f64(double %3)
  store double %40, double* %23, align 8, !tbaa !75
  %41 = tail call fast double @llvm.sin.f64(double %3)
  %arrayidx47 = getelementptr inbounds i8, i8* %call4.i170, i64 48
  %42 = bitcast i8* %arrayidx47 to double*
  store double %41, double* %42, align 8, !tbaa !75
  %fneg54 = fneg fast double %41
  %arrayidx60 = getelementptr inbounds i8, i8* %call4.i170, i64 16
  %43 = bitcast i8* %arrayidx60 to double*
  store double %fneg54, double* %43, align 8, !tbaa !75
  %arrayidx72 = getelementptr inbounds i8, i8* %call4.i170, i64 64
  %44 = bitcast i8* %arrayidx72 to double*
  store double %40, double* %44, align 8, !tbaa !75
  br label %for.body3.lr.ph.i218

for.body3.lr.ph.i218:                             ; preds = %for.inc12.i233, %for.cond1.preheader.lr.ph.i211
  %iv7 = phi i64 [ %iv.next8, %for.inc12.i233 ], [ 0, %for.cond1.preheader.lr.ph.i211 ]
  %iv.next8 = add nuw nsw i64 %iv7, 1
  %45 = mul nuw nsw i64 %iv7, 3
  %46 = shl nuw nsw i64 %iv7, 2
  %arrayidx.i222 = getelementptr inbounds double, double* %30, i64 %46
  br label %for.body3.i221

for.body3.i221:                                   ; preds = %for.inc.i230, %for.body3.lr.ph.i218
  %iv9 = phi i64 [ %iv.next10, %for.inc.i230 ], [ 0, %for.body3.lr.ph.i218 ]
  %iv.next10 = add nuw nsw i64 %iv9, 1
  %cmp4.i220 = icmp eq i64 %iv7, %iv9
  br i1 %cmp4.i220, label %if.then.i223, label %if.else.i227

if.then.i223:                                     ; preds = %for.body3.i221
  store double 1.000000e+00, double* %arrayidx.i222, align 8, !tbaa !75
  br label %for.inc.i230

if.else.i227:                                     ; preds = %for.body3.i221
  %47 = add nuw nsw i64 %iv9, %45
  %arrayidx11.i226 = getelementptr inbounds double, double* %30, i64 %47
  store double 0.000000e+00, double* %arrayidx11.i226, align 8, !tbaa !75
  br label %for.inc.i230

for.inc.i230:                                     ; preds = %if.else.i227, %if.then.i223
  %exitcond.not.i229 = icmp eq i64 %iv.next10, 3
  br i1 %exitcond.not.i229, label %for.inc12.i233, label %for.body3.i221, !llvm.loop !188

for.inc12.i233:                                   ; preds = %for.inc.i230
  %exitcond37.not.i232 = icmp eq i64 %iv.next8, 3
  br i1 %exitcond37.not.i232, label %set_identity.exit234, label %for.body3.lr.ph.i218, !llvm.loop !189

set_identity.exit234:                             ; preds = %for.inc12.i233
  %48 = tail call fast double @llvm.cos.f64(double %5)
  store double %48, double* %30, align 8, !tbaa !75
  %49 = tail call fast double @llvm.sin.f64(double %5)
  %arrayidx84 = getelementptr inbounds i8, i8* %call4.i175, i64 8
  %50 = bitcast i8* %arrayidx84 to double*
  store double %49, double* %50, align 8, !tbaa !75
  %fneg91 = fneg fast double %49
  %arrayidx97 = getelementptr inbounds i8, i8* %call4.i175, i64 24
  %51 = bitcast i8* %arrayidx97 to double*
  store double %fneg91, double* %51, align 8, !tbaa !75
  %arrayidx109 = getelementptr inbounds i8, i8* %call4.i175, i64 32
  %52 = bitcast i8* %arrayidx109 to double*
  store double %48, double* %52, align 8, !tbaa !75
  %call.i235 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %53 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 12
  store i8* %call.i235, i8** %53, align 8
  %"call.i235'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %54 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 11
  store i8* %"call.i235'mi", i8** %54, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i235'mi", i8 0, i64 16, i1 false)
  %"'ipc16" = bitcast i8* %"call.i235'mi" to %struct.Matrix*
  %55 = bitcast i8* %call.i235 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i235, i8 0, i64 16, i1 false) #31
  %_augmented20 = call { i8*, i8*, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.2(%struct.Matrix* nonnull %29, %struct.Matrix* nonnull %"'ipc18", %struct.Matrix* nonnull %28, %struct.Matrix* nonnull %"'ipc19", %struct.Matrix* nonnull %55, %struct.Matrix* nonnull %"'ipc16")
  %56 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 10
  store { i8*, i8*, i1, i1, double*, double*, double*, double* } %_augmented20, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %56, align 8
  %_augmented = call { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } @augmented_mat_mult.1(%struct.Matrix* nonnull %55, %struct.Matrix* nonnull %"'ipc16", %struct.Matrix* nonnull %27, %struct.Matrix* nonnull %"'ipc17", %struct.Matrix* %R, %struct.Matrix* %"R'")
  %57 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 9
  store { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %_augmented, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %57, align 8
  tail call void @free(i8* nonnull %call4.i) #31
  tail call void @free(i8* %call4.i170) #31
  tail call void @free(i8* nonnull %call4.i175) #31
  %.elt = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 0
  %.unpack = load i8*, i8** %.elt, align 8
  %58 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } undef, i8* %.unpack, 0
  %.elt1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 1
  %.unpack2 = load i8*, i8** %.elt1, align 8
  %59 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %58, i8* %.unpack2, 1
  %.elt3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 2
  %.unpack4 = load i8*, i8** %.elt3, align 8
  %60 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %59, i8* %.unpack4, 2
  %.elt5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 3
  %.unpack6 = load i8*, i8** %.elt5, align 8
  %61 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %60, i8* %.unpack6, 3
  %.elt7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 4
  %.unpack8 = load i8*, i8** %.elt7, align 8
  %62 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %61, i8* %.unpack8, 4
  %.elt9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 5
  %.unpack10 = load i8*, i8** %.elt9, align 8
  %63 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %62, i8* %.unpack10, 5
  %.elt11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 6
  %.unpack12 = load i8*, i8** %.elt11, align 8
  %64 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %63, i8* %.unpack12, 6
  %.elt13 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 7
  %.unpack14 = load i8*, i8** %.elt13, align 8
  %65 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %64, i8* %.unpack14, 7
  %.elt15 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 8
  %.unpack16 = load i8*, i8** %.elt15, align 8
  %66 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %65, i8* %.unpack16, 8
  %.elt17 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 9
  %.unpack18 = load { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %.elt17, align 8
  %67 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %66, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %.unpack18, 9
  %.elt19 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 10
  %.unpack20 = load { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %.elt19, align 8
  %68 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %67, { i8*, i8*, i1, i1, double*, double*, double*, double* } %.unpack20, 10
  %.elt21 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 11
  %.unpack22 = load i8*, i8** %.elt21, align 8
  %69 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %68, i8* %.unpack22, 11
  %.elt23 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 12
  %.unpack24 = load i8*, i8** %.elt23, align 8
  %70 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %69, i8* %.unpack24, 12
  %.elt25 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 13
  %.unpack26 = load double, double* %.elt25, align 8
  %71 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %70, double %.unpack26, 13
  %.elt27 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 14
  %.unpack28 = load double, double* %.elt27, align 8
  %72 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %71, double %.unpack28, 14
  %.elt29 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 0, i32 15
  %.unpack30 = load double, double* %.elt29, align 8
  %73 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %72, double %.unpack30, 15
  ret { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %73
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.3(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #5 {
entry:
  %0 = alloca { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %2 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 3
  store i32 %1, i32* %2, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %4 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %5 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %5, %4
  %mul3.i = mul nsw i32 %3, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %6 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 4
  store i1 %cmp.not.i, i1* %6, align 4
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %7 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %7, null
  %8 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 5
  store i1 %cmp4.not.i, i1* %8, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %9 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 1
  store i8* %call.i, i8** %9, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #31
  %10 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %11 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8
  store i8* %call.i, i8** %11, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %3, i32* %"ncols2.i'ipg", align 4
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %1, i32* %"nrows1.i'ipg", align 8
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %3, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %12 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %3 to i64
  %mallocsize = shl nuw nsw i64 %12, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %13 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 2
  %14 = bitcast double*** %13 to i8**
  store i8* %malloccall, i8** %14, align 8
  %mallocsize9 = shl nuw nsw i64 %12, 2
  %malloccall10 = tail call noalias nonnull i8* @malloc(i64 %mallocsize9)
  %_malloccache = bitcast i8* %malloccall10 to i32*
  %15 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 6
  %16 = bitcast i32** %15 to i8**
  store i8* %malloccall10, i8** %16, align 8
  %17 = mul nuw nsw i64 %wide.trip.count96, %12
  %mallocsize12 = shl nuw nsw i64 %17, 3
  %malloccall13 = tail call noalias nonnull i8* @malloc(i64 %mallocsize12)
  %_malloccache14 = bitcast i8* %malloccall13 to double*
  %18 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 7
  %19 = bitcast double** %18 to i8**
  store i8* %malloccall13, i8** %19, align 8
  %malloccall17 = tail call noalias nonnull i8* @malloc(i64 %mallocsize12)
  %_malloccache18 = bitcast i8* %malloccall17 to double**
  %20 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 8
  %21 = bitcast double*** %20 to i8**
  store i8* %malloccall17, i8** %21, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %22 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %22, i64 %iv
  %23 = load double*, double** %data7, align 8, !tbaa !137
  %24 = load i32, i32* %nrows8, align 8, !tbaa !138
  %"'ipl" = load double*, double** %"data14'ipg", align 8
  %25 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %25, align 8, !invariant.group !319
  %26 = load double*, double** %data14, align 8, !tbaa !137
  %27 = load i32, i32* %ncols21, align 4, !tbaa !139
  %28 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %27, i32* %28, align 4, !invariant.group !320
  %cmp2281 = icmp sgt i32 %27, 1
  %29 = sext i32 %24 to i64
  %wide.trip.count = zext i32 %27 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv4 = phi i64 [ %iv.next5, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %30 = load double, double* %arrayidx, align 8, !tbaa !75
  %31 = mul nsw i64 %iv4, %29
  %arrayidx12 = getelementptr inbounds double, double* %23, i64 %31
  %32 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %32, %30
  %33 = mul nuw nsw i64 %iv4, %12
  %34 = add nuw nsw i64 %33, %iv
  %arrayidx19 = getelementptr inbounds double, double* %26, i64 %34
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  %35 = mul nuw nsw i64 %iv, %wide.trip.count96
  %36 = add nuw nsw i64 %iv4, %35
  %37 = getelementptr inbounds double, double* %_malloccache14, i64 %36
  store double %30, double* %37, align 8, !invariant.group !321
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %38 = getelementptr inbounds double*, double** %_malloccache18, i64 %36
  %39 = shl nuw nsw i64 %wide.trip.count, 3
  %mallocsize19 = add nsw i64 %39, -8
  %malloccall20 = tail call noalias nonnull i8* @malloc(i64 %mallocsize19)
  %40 = bitcast double** %38 to i8**
  store i8* %malloccall20, i8** %40, align 8
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body23.preheader ]
  %41 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body23.preheader ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %42 = mul nuw nsw i64 %iv.next7, %12
  %43 = add nuw nsw i64 %42, %iv
  %arrayidx29 = getelementptr inbounds double, double* %22, i64 %43
  %44 = load double, double* %arrayidx29, align 8, !tbaa !75
  %45 = add nsw i64 %iv.next7, %31
  %arrayidx35 = getelementptr inbounds double, double* %23, i64 %45
  %46 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %46, %44
  %add43 = fadd fast double %41, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %47 = load double*, double** %38, align 8, !dereferenceable !298, !invariant.group !322
  %48 = getelementptr inbounds double, double* %47, i64 %iv6
  store double %44, double* %48, align 8, !invariant.group !323
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %12
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !187

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %49 = load { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %0, align 8
  ret { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %49
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } @augmented_get_posed_relatives(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %relatives, %struct.Matrix* nocapture %"relatives'") local_unnamed_addr #5 {
entry:
  %0 = alloca { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, align 8
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 6
  store i8* %call.i, i8** %1, align 8
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %2 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 5
  store i8* %"call.i'mi", i8** %2, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc22" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %3 = bitcast i8* %call.i to %struct.Matrix*
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 4, i32* %"nrows1.i'ipc", align 8
  store i32 4, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc13" = bitcast i8* %"ncols2.i'ipg" to i32*
  %4 = bitcast i8* %ncols2.i to i32*
  store i32 4, i32* %"'ipc13", align 4
  store i32 4, i32* %4, align 4, !tbaa !139
  %call4.i = tail call noalias nonnull dereferenceable(128) dereferenceable_or_null(128) i8* @malloc(i64 128) #31
  %"call4.i'mi" = tail call noalias nonnull dereferenceable(128) dereferenceable_or_null(128) i8* @malloc(i64 128) #31
  %5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 4
  store i8* %"call4.i'mi", i8** %5, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(128) dereferenceable_or_null(128) %"call4.i'mi", i8 0, i64 128, i1 false)
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc12" = bitcast i8* %"data.i'ipg" to i8**
  %6 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc12", align 8
  store i8* %call4.i, i8** %6, align 8, !tbaa !137
  %call.i18 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 3
  store i8* %call.i18, i8** %7, align 8
  %"call.i18'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %8 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 2
  store i8* %"call.i18'mi", i8** %8, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i18'mi", i8 0, i64 16, i1 false)
  %"'ipc14" = bitcast i8* %"call.i18'mi" to %struct.Matrix*
  %9 = bitcast i8* %call.i18 to %struct.Matrix*
  %"nrows1.i19'ipc" = bitcast i8* %"call.i18'mi" to i32*
  %nrows1.i19 = bitcast i8* %call.i18 to i32*
  store i32 3, i32* %"nrows1.i19'ipc", align 8
  store i32 3, i32* %nrows1.i19, align 8, !tbaa !138
  %"ncols2.i20'ipg" = getelementptr inbounds i8, i8* %"call.i18'mi", i64 4
  %ncols2.i20 = getelementptr inbounds i8, i8* %call.i18, i64 4
  %"'ipc11" = bitcast i8* %"ncols2.i20'ipg" to i32*
  %10 = bitcast i8* %ncols2.i20 to i32*
  store i32 3, i32* %"'ipc11", align 4
  store i32 3, i32* %10, align 4, !tbaa !139
  %call4.i21 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 1
  store i8* %call4.i21, i8** %11, align 8
  %"call4.i21'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %12 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 0
  store i8* %"call4.i21'mi", i8** %12, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i21'mi", i8 0, i64 72, i1 false)
  %"data.i22'ipg" = getelementptr inbounds i8, i8* %"call.i18'mi", i64 8
  %data.i22 = getelementptr inbounds i8, i8* %call.i18, i64 8
  %"'ipc" = bitcast i8* %"data.i22'ipg" to i8**
  %13 = bitcast i8* %data.i22 to i8**
  store i8* %"call4.i21'mi", i8** %"'ipc", align 8
  store i8* %call4.i21, i8** %13, align 8, !tbaa !137
  %cmp40 = icmp sgt i32 %bone_count, 0
  %14 = bitcast i8* %call4.i to double*
  br i1 %cmp40, label %for.body.lr.ph, label %if.then.i35

for.body.lr.ph:                                   ; preds = %entry
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %"'ipl" = load double*, double** %"data'ipg", align 8
  %15 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 7
  store double* %"'ipl", double** %15, align 8
  %16 = load double*, double** %data, align 8, !tbaa !137
  %17 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 11
  store double* %16, double** %17, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %18 = load i32, i32* %nrows, align 8, !tbaa !138
  %19 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 12
  store i32 %18, i32* %19, align 8
  %"'ipc15" = bitcast i8* %"data.i22'ipg" to double**
  %20 = bitcast i8* %data.i22 to double**
  %wide.trip.count = zext i32 %bone_count to i64
  %mallocsize = mul nuw nsw i64 %wide.trip.count, 232
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_augmented_malloccache = bitcast i8* %malloccall to { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*
  %21 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 8
  %22 = bitcast { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }** %21 to i8**
  store i8* %malloccall, i8** %22, align 8
  %mallocsize17 = shl nuw nsw i64 %wide.trip.count, 3
  %malloccall18 = tail call noalias nonnull i8* @malloc(i64 %mallocsize17)
  %"'ipl16_malloccache" = bitcast i8* %malloccall18 to double***
  %23 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 9
  %24 = bitcast double**** %23 to i8**
  store i8* %malloccall18, i8** %24, align 8
  %mallocsize24 = mul nuw nsw i64 %wide.trip.count, 56
  %malloccall25 = tail call noalias nonnull i8* @malloc(i64 %mallocsize24)
  %_augmented23_malloccache = bitcast i8* %malloccall25 to { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*
  %25 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 10
  %26 = bitcast { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }** %25 to i8**
  store i8* %malloccall25, i8** %26, align 8
  %mallocsize26 = shl nuw nsw i64 %wide.trip.count, 2
  %malloccall27 = tail call noalias nonnull i8* @malloc(i64 %mallocsize26)
  %_malloccache = bitcast i8* %malloccall27 to i32*
  %27 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 13
  %28 = bitcast i32** %27 to i8**
  store i8* %malloccall27, i8** %28, align 8
  %malloccall30 = tail call noalias nonnull i8* @malloc(i64 %mallocsize26)
  %_malloccache31 = bitcast i8* %malloccall30 to i32*
  %29 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, i64 0, i32 14
  %30 = bitcast i32** %29 to i8**
  store i8* %malloccall30, i8** %30, align 8
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %set_block.exit, %for.body.lr.ph
  %iv = phi i64 [ %iv.next, %set_block.exit ], [ 0, %for.body.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %iv1 = phi i64 [ %iv.next2, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %31 = shl nsw i64 %iv1, 2
  %32 = mul nsw i64 %iv1, 5
  %arrayidx.i = getelementptr inbounds double, double* %14, i64 %32
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.inc.i, %for.body3.lr.ph.i
  %iv3 = phi i64 [ %iv.next4, %for.inc.i ], [ 0, %for.body3.lr.ph.i ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %cmp4.i = icmp eq i64 %iv1, %iv3
  br i1 %cmp4.i, label %if.then.i, label %if.else.i

if.then.i:                                        ; preds = %for.body3.i
  store double 1.000000e+00, double* %arrayidx.i, align 8, !tbaa !75
  br label %for.inc.i

if.else.i:                                        ; preds = %for.body3.i
  %33 = add nuw nsw i64 %iv3, %31
  %arrayidx11.i = getelementptr inbounds double, double* %14, i64 %33
  store double 0.000000e+00, double* %arrayidx11.i, align 8, !tbaa !75
  br label %for.inc.i

for.inc.i:                                        ; preds = %if.else.i, %if.then.i
  %exitcond.not.i = icmp eq i64 %iv.next4, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.inc.i
  %exitcond37.not.i = icmp eq i64 %iv.next2, 4
  br i1 %exitcond37.not.i, label %set_identity.exit, label %for.body3.lr.ph.i, !llvm.loop !189

set_identity.exit:                                ; preds = %for.inc12.i
  %34 = trunc i64 %iv to i32
  %35 = add i32 %34, 3
  %mul = mul nsw i32 %18, %35
  %idx.ext = sext i32 %mul to i64
  %"add.ptr'ipg" = getelementptr inbounds double, double* %"'ipl", i64 %idx.ext
  %add.ptr = getelementptr inbounds double, double* %16, i64 %idx.ext
  %_augmented = call { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } @augmented_euler_angles_to_rotation_matrix(double* %add.ptr, double* %"add.ptr'ipg", %struct.Matrix* nonnull %9, %struct.Matrix* nonnull %"'ipc14")
  %.repack = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 0
  %_augmented.elt = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 0
  store i8* %_augmented.elt, i8** %.repack, align 8
  %.repack1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 1
  %_augmented.elt2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 1
  store i8* %_augmented.elt2, i8** %.repack1, align 8
  %.repack3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 2
  %_augmented.elt4 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 2
  store i8* %_augmented.elt4, i8** %.repack3, align 8
  %.repack5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 3
  %_augmented.elt6 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 3
  store i8* %_augmented.elt6, i8** %.repack5, align 8
  %.repack7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 4
  %_augmented.elt8 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 4
  store i8* %_augmented.elt8, i8** %.repack7, align 8
  %.repack9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 5
  %_augmented.elt10 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 5
  store i8* %_augmented.elt10, i8** %.repack9, align 8
  %.repack11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 6
  %_augmented.elt12 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 6
  store i8* %_augmented.elt12, i8** %.repack11, align 8
  %.repack13 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 7
  %_augmented.elt14 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 7
  store i8* %_augmented.elt14, i8** %.repack13, align 8
  %.repack15 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 8
  %_augmented.elt16 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 8
  store i8* %_augmented.elt16, i8** %.repack15, align 8
  %.repack17 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 9
  %_augmented.elt18 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 9
  store { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %_augmented.elt18, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %.repack17, align 8
  %.repack19 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 10
  %_augmented.elt20 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 10
  store { i8*, i8*, i1, i1, double*, double*, double*, double* } %_augmented.elt20, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %.repack19, align 8
  %.repack21 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 11
  %_augmented.elt22 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 11
  store i8* %_augmented.elt22, i8** %.repack21, align 8
  %.repack23 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 12
  %_augmented.elt24 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 12
  store i8* %_augmented.elt24, i8** %.repack23, align 8
  %.repack25 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 13
  %_augmented.elt26 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 13
  store double %_augmented.elt26, double* %.repack25, align 8
  %.repack27 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 14
  %_augmented.elt28 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 14
  store double %_augmented.elt28, double* %.repack27, align 8
  %.repack29 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %_augmented_malloccache, i64 %iv, i32 15
  %_augmented.elt30 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %_augmented, 15
  store double %_augmented.elt30, double* %.repack29, align 8
  %36 = load i32, i32* %10, align 4, !tbaa !139
  %37 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %36, i32* %37, align 4, !invariant.group !324
  %cmp30.i = icmp sgt i32 %36, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i26, label %set_block.exit

for.cond1.preheader.lr.ph.i26:                    ; preds = %set_identity.exit
  %38 = load i32, i32* %nrows1.i19, align 8, !tbaa !138
  %cmp228.i = icmp sgt i32 %38, 0
  %wide.trip.count.i = zext i32 %38 to i64
  %39 = zext i32 %36 to i64
  %40 = sext i32 %38 to i64
  %41 = getelementptr inbounds double**, double*** %"'ipl16_malloccache", i64 %iv
  %mallocsize19 = shl nuw nsw i64 %39, 3
  %malloccall20 = tail call noalias nonnull i8* @malloc(i64 %mallocsize19)
  %42 = bitcast double*** %41 to i8**
  store i8* %malloccall20, i8** %42, align 8
  %43 = getelementptr inbounds i32, i32* %_malloccache31, i64 %iv
  store i32 %38, i32* %43, align 4, !invariant.group !325
  br label %for.cond1.preheader.i27

for.cond1.preheader.i27:                          ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i26
  %iv5 = phi i64 [ %iv.next6, %for.inc13.i ], [ 0, %for.cond1.preheader.lr.ph.i26 ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  br i1 %cmp228.i, label %for.body3.lr.ph.i29, label %for.inc13.i

for.body3.lr.ph.i29:                              ; preds = %for.cond1.preheader.i27
  %"'ipl16" = load double*, double** %"'ipc15", align 8
  %44 = load double**, double*** %41, align 8, !dereferenceable !298, !invariant.group !326
  %45 = getelementptr inbounds double*, double** %44, i64 %iv5
  store double* %"'ipl16", double** %45, align 8, !invariant.group !327
  %46 = load double*, double** %20, align 8, !tbaa !137
  %47 = shl nsw i64 %iv5, 2
  %48 = mul nsw i64 %iv5, %40
  br label %for.body3.i32

for.body3.i32:                                    ; preds = %for.body3.i32, %for.body3.lr.ph.i29
  %iv8 = phi i64 [ %iv.next9, %for.body3.i32 ], [ 0, %for.body3.lr.ph.i29 ]
  %iv.next9 = add nuw nsw i64 %iv8, 1
  %49 = add nsw i64 %iv8, %48
  %arrayidx.i30 = getelementptr inbounds double, double* %46, i64 %49
  %50 = load double, double* %arrayidx.i30, align 8, !tbaa !75
  %51 = add nuw nsw i64 %iv8, %47
  %arrayidx12.i = getelementptr inbounds double, double* %14, i64 %51
  store double %50, double* %arrayidx12.i, align 8, !tbaa !75
  %exitcond.not.i31 = icmp eq i64 %iv.next9, %wide.trip.count.i
  br i1 %exitcond.not.i31, label %for.inc13.i, label %for.body3.i32, !llvm.loop !191

for.inc13.i:                                      ; preds = %for.body3.i32, %for.cond1.preheader.i27
  %exitcond37.not.i33 = icmp eq i64 %iv.next6, %39
  br i1 %exitcond37.not.i33, label %set_block.exit, label %for.cond1.preheader.i27, !llvm.loop !192

set_block.exit:                                   ; preds = %for.inc13.i, %set_identity.exit
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %iv
  %"arrayidx3'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %iv
  %arrayidx3 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %iv
  %_augmented23 = call { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.3(%struct.Matrix* %arrayidx, %struct.Matrix* nonnull %3, %struct.Matrix* nonnull %"'ipc22", %struct.Matrix* %arrayidx3, %struct.Matrix* %"arrayidx3'ipg")
  %52 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %_augmented23_malloccache, i64 %iv
  store { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %_augmented23, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %52, align 8, !invariant.group !328
  %exitcond.not = icmp eq i64 %iv.next, %wide.trip.count
  br i1 %exitcond.not, label %if.then.i35, label %for.cond1.preheader.lr.ph.i, !llvm.loop !200

if.then.i35:                                      ; preds = %set_block.exit, %entry
  tail call void @free(i8* nonnull %call4.i) #31
  %53 = load { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %0, align 8
  ret { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %53
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.4(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #5 {
entry:
  %0 = alloca { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %2 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 4
  store i32 %1, i32* %2, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139
  %4 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 5
  store i32 %3, i32* %4, align 4
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %5 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %6 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %6, %5
  %mul3.i = mul nsw i32 %3, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %7 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 6
  store i1 %cmp.not.i, i1* %7, align 8
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %8 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %8, null
  %9 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 7
  store i1 %cmp4.not.i, i1* %9, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %10 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 1
  store i8* %call.i, i8** %10, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #31
  %11 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %11, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %12 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8
  store i8* %call.i, i8** %12, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %3, i32* %"ncols2.i'ipg", align 4
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %1, i32* %"nrows1.i'ipg", align 8
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %3, 0
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %13 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %3 to i64
  %mallocsize = shl nuw nsw i64 %13, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %14 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 2
  %15 = bitcast double*** %14 to i8**
  store i8* %malloccall, i8** %15, align 8
  %malloccall10 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl8_malloccache" = bitcast i8* %malloccall10 to double**
  %16 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 3
  %17 = bitcast double*** %16 to i8**
  store i8* %malloccall10, i8** %17, align 8
  %mallocsize11 = shl nuw nsw i64 %13, 2
  %malloccall12 = tail call noalias nonnull i8* @malloc(i64 %mallocsize11)
  %_malloccache = bitcast i8* %malloccall12 to i32*
  %18 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 8
  %19 = bitcast i32** %18 to i8**
  store i8* %malloccall12, i8** %19, align 8
  %20 = mul nuw nsw i64 %wide.trip.count96, %13
  %mallocsize14 = shl nuw nsw i64 %20, 3
  %malloccall15 = tail call noalias nonnull i8* @malloc(i64 %mallocsize14)
  %_malloccache16 = bitcast i8* %malloccall15 to double*
  %21 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 9
  %22 = bitcast double** %21 to i8**
  store i8* %malloccall15, i8** %22, align 8
  %malloccall19 = tail call noalias nonnull i8* @malloc(i64 %mallocsize14)
  %_malloccache20 = bitcast i8* %malloccall19 to double**
  %23 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 10
  %24 = bitcast double*** %23 to i8**
  store i8* %malloccall19, i8** %24, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %"'ipl8" = load double*, double** %"data'ipg", align 8
  %25 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %25, i64 %iv
  %26 = load double*, double** %data7, align 8, !tbaa !137
  %27 = load i32, i32* %nrows8, align 8, !tbaa !138
  %"'ipl" = load double*, double** %"data14'ipg", align 8
  %28 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %28, align 8, !invariant.group !329
  %29 = getelementptr inbounds double*, double** %"'ipl8_malloccache", i64 %iv
  store double* %"'ipl8", double** %29, align 8, !invariant.group !330
  %30 = load double*, double** %data14, align 8, !tbaa !137
  %31 = load i32, i32* %ncols21, align 4, !tbaa !139
  %32 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %31, i32* %32, align 4, !invariant.group !331
  %cmp2281 = icmp sgt i32 %31, 1
  %33 = sext i32 %27 to i64
  %wide.trip.count = zext i32 %31 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv4 = phi i64 [ %iv.next5, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %34 = load double, double* %arrayidx, align 8, !tbaa !75
  %35 = mul nsw i64 %iv4, %33
  %arrayidx12 = getelementptr inbounds double, double* %26, i64 %35
  %36 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %36, %34
  %37 = mul nuw nsw i64 %iv4, %13
  %38 = add nuw nsw i64 %37, %iv
  %arrayidx19 = getelementptr inbounds double, double* %30, i64 %38
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  %39 = mul nuw nsw i64 %iv, %wide.trip.count96
  %40 = add nuw nsw i64 %iv4, %39
  %41 = getelementptr inbounds double, double* %_malloccache16, i64 %40
  store double %36, double* %41, align 8, !invariant.group !332
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %42 = getelementptr inbounds double*, double** %_malloccache20, i64 %40
  %43 = shl nuw nsw i64 %wide.trip.count, 3
  %mallocsize21 = add nsw i64 %43, -8
  %malloccall22 = tail call noalias nonnull i8* @malloc(i64 %mallocsize21)
  %44 = bitcast double** %42 to i8**
  store i8* %malloccall22, i8** %44, align 8
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body23.preheader ]
  %45 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body23.preheader ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %46 = mul nuw nsw i64 %iv.next7, %13
  %47 = add nuw nsw i64 %46, %iv
  %arrayidx29 = getelementptr inbounds double, double* %25, i64 %47
  %48 = load double, double* %arrayidx29, align 8, !tbaa !75
  %49 = add nsw i64 %iv.next7, %35
  %arrayidx35 = getelementptr inbounds double, double* %26, i64 %49
  %50 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %50, %48
  %add43 = fadd fast double %45, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %51 = load double*, double** %42, align 8, !dereferenceable !298, !invariant.group !333
  %52 = getelementptr inbounds double, double* %51, i64 %iv6
  store double %50, double* %52, align 8, !invariant.group !334
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %13
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !187

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %53 = load { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, align 8
  ret { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %53
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.5(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #5 {
entry:
  %0 = alloca { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %2 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 4
  store i32 %1, i32* %2, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %3 = load i32, i32* %ncols, align 4, !tbaa !139
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %4 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %5 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %5, %4
  %mul3.i = mul nsw i32 %3, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %6 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 5
  store i1 %cmp.not.i, i1* %6, align 4
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %7 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %7, null
  %8 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 6
  store i1 %cmp4.not.i, i1* %8, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %9 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 1
  store i8* %call.i, i8** %9, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #31
  %10 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %11 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8
  store i8* %call.i, i8** %11, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %3, i32* %"ncols2.i'ipg", align 4
  store i32 %3, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %1, i32* %"nrows1.i'ipg", align 8
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %3, 0
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %"data14'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %12 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %3 to i64
  %mallocsize = shl nuw nsw i64 %12, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl_malloccache" = bitcast i8* %malloccall to double**
  %13 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 2
  %14 = bitcast double*** %13 to i8**
  store i8* %malloccall, i8** %14, align 8
  %malloccall10 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl8_malloccache" = bitcast i8* %malloccall10 to double**
  %15 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 3
  %16 = bitcast double*** %15 to i8**
  store i8* %malloccall10, i8** %16, align 8
  %mallocsize11 = shl nuw nsw i64 %12, 2
  %malloccall12 = tail call noalias nonnull i8* @malloc(i64 %mallocsize11)
  %_malloccache = bitcast i8* %malloccall12 to i32*
  %17 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 7
  %18 = bitcast i32** %17 to i8**
  store i8* %malloccall12, i8** %18, align 8
  %19 = mul nuw nsw i64 %wide.trip.count96, %12
  %mallocsize14 = shl nuw nsw i64 %19, 3
  %malloccall15 = tail call noalias nonnull i8* @malloc(i64 %mallocsize14)
  %_malloccache16 = bitcast i8* %malloccall15 to double*
  %20 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 8
  %21 = bitcast double** %20 to i8**
  store i8* %malloccall15, i8** %21, align 8
  %malloccall19 = tail call noalias nonnull i8* @malloc(i64 %mallocsize14)
  %_malloccache20 = bitcast i8* %malloccall19 to double**
  %22 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, i64 0, i32 9
  %23 = bitcast double*** %22 to i8**
  store i8* %malloccall19, i8** %23, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %"'ipl8" = load double*, double** %"data'ipg", align 8
  %24 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %24, i64 %iv
  %25 = load double*, double** %data7, align 8, !tbaa !137
  %26 = load i32, i32* %nrows8, align 8, !tbaa !138
  %"'ipl" = load double*, double** %"data14'ipg", align 8
  %27 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv
  store double* %"'ipl", double** %27, align 8, !invariant.group !335
  %28 = getelementptr inbounds double*, double** %"'ipl8_malloccache", i64 %iv
  store double* %"'ipl8", double** %28, align 8, !invariant.group !336
  %29 = load double*, double** %data14, align 8, !tbaa !137
  %30 = load i32, i32* %ncols21, align 4, !tbaa !139
  %31 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %30, i32* %31, align 4, !invariant.group !337
  %cmp2281 = icmp sgt i32 %30, 1
  %32 = sext i32 %26 to i64
  %wide.trip.count = zext i32 %30 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv4 = phi i64 [ %iv.next5, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %33 = load double, double* %arrayidx, align 8, !tbaa !75
  %34 = mul nsw i64 %iv4, %32
  %arrayidx12 = getelementptr inbounds double, double* %25, i64 %34
  %35 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %35, %33
  %36 = mul nuw nsw i64 %iv4, %12
  %37 = add nuw nsw i64 %36, %iv
  %arrayidx19 = getelementptr inbounds double, double* %29, i64 %37
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  %38 = mul nuw nsw i64 %iv, %wide.trip.count96
  %39 = add nuw nsw i64 %iv4, %38
  %40 = getelementptr inbounds double, double* %_malloccache16, i64 %39
  store double %35, double* %40, align 8, !invariant.group !338
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %41 = getelementptr inbounds double*, double** %_malloccache20, i64 %39
  %42 = shl nuw nsw i64 %wide.trip.count, 3
  %mallocsize21 = add nsw i64 %42, -8
  %malloccall22 = tail call noalias nonnull i8* @malloc(i64 %mallocsize21)
  %43 = bitcast double** %41 to i8**
  store i8* %malloccall22, i8** %43, align 8
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body23.preheader ]
  %44 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body23.preheader ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %45 = mul nuw nsw i64 %iv.next7, %12
  %46 = add nuw nsw i64 %45, %iv
  %arrayidx29 = getelementptr inbounds double, double* %24, i64 %46
  %47 = load double, double* %arrayidx29, align 8, !tbaa !75
  %48 = add nsw i64 %iv.next7, %34
  %arrayidx35 = getelementptr inbounds double, double* %25, i64 %48
  %49 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %49, %47
  %add43 = fadd fast double %44, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %50 = load double*, double** %41, align 8, !dereferenceable !298, !invariant.group !339
  %51 = getelementptr inbounds double, double* %50, i64 %iv6
  store double %49, double* %51, align 8, !invariant.group !340
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %12
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !187

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %52 = load { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %0, align 8
  ret { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %52
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @preprocess_apply_global_transform(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture readonly %positions) local_unnamed_addr #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %1, align 4, !tbaa !139
  %call4.i = tail call noalias dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %2 = bitcast i8* %data.i to i8**
  store i8* %call4.i, i8** %2, align 8, !tbaa !137
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %3 = load double*, double** %data, align 8, !tbaa !137
  tail call void @angle_axis_to_rotation_matrix(double* %3, %struct.Matrix* %0)
  %4 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %5 = load i32, i32* %nrows, align 8, !tbaa !138
  %6 = bitcast i8* %call4.i to double*
  %7 = sext i32 %5 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %tiv1 = phi i64 [ %tiv.next2, %for.inc12 ], [ 0, %entry ]
  %tiv.next2 = add nuw nsw i64 %tiv1, 1
  %8 = add nsw i64 %tiv1, %7
  %arrayidx = getelementptr inbounds double, double* %4, i64 %8
  %9 = mul nuw nsw i64 %tiv1, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %indvars.iv99 = phi i64 [ 0, %for.cond1.preheader ], [ %indvars.iv.next100, %for.body3 ]
  %10 = load double, double* %arrayidx, align 8, !tbaa !75
  %11 = add nuw nsw i64 %9, %indvars.iv99
  %arrayidx10 = getelementptr inbounds double, double* %6, i64 %11
  %12 = load double, double* %arrayidx10, align 8, !tbaa !75
  %mul11 = fmul fast double %12, %10
  store double %mul11, double* %arrayidx10, align 8, !tbaa !75
  %indvars.iv.next100 = add nuw nsw i64 %indvars.iv99, 1
  %exitcond102.not = icmp eq i64 %indvars.iv.next100, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !195

for.inc12:                                        ; preds = %for.body3
  %exitcond107.not = icmp eq i64 %tiv.next2, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !196

for.end14:                                        ; preds = %for.inc12
  %call.i81 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %13 = bitcast i8* %call.i81 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i81, i8 0, i64 16, i1 false) #31
  tail call void @mat_mult(%struct.Matrix* %0, %struct.Matrix* %positions, %struct.Matrix* %13)
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %14 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp1789 = icmp sgt i32 %14, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %if.then.i

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %15 = load i32, i32* %nrows20, align 8, !tbaa !138
  %cmp2187 = icmp sgt i32 %15, 0
  %data23 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %16 = bitcast i8* %data23 to double**
  %nrows24 = bitcast i8* %call.i81 to i32*
  %data36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count = zext i32 %15 to i64
  %17 = sext i32 %15 to i64
  %18 = zext i32 %14 to i64
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %tiv = phi i64 [ %tiv.next, %for.inc45 ], [ 0, %for.cond19.preheader.lr.ph ]
  %tiv.next = add nuw nsw i64 %tiv, 1
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %19 = load double*, double** %16, align 8, !tbaa !137
  %20 = load i32, i32* %nrows24, align 8, !tbaa !138
  %21 = sext i32 %20 to i64
  %22 = mul nsw i64 %tiv, %21
  %23 = load double*, double** %data, align 8, !tbaa !137
  %24 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul31 = shl nsw i32 %24, 1
  %25 = load double*, double** %data36, align 8, !tbaa !137
  %26 = sext i32 %mul31 to i64
  %27 = mul nsw i64 %tiv, %17
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %indvars.iv = phi i64 [ 0, %for.body22.lr.ph ], [ %indvars.iv.next, %for.body22 ]
  %28 = add nsw i64 %indvars.iv, %22
  %arrayidx28 = getelementptr inbounds double, double* %19, i64 %28
  %29 = load double, double* %arrayidx28, align 8, !tbaa !75
  %30 = add nsw i64 %indvars.iv, %26
  %arrayidx34 = getelementptr inbounds double, double* %23, i64 %30
  %31 = load double, double* %arrayidx34, align 8, !tbaa !75
  %add35 = fadd fast double %31, %29
  %32 = add nsw i64 %indvars.iv, %27
  %arrayidx41 = getelementptr inbounds double, double* %25, i64 %32
  store double %add35, double* %arrayidx41, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !197

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %exitcond98.not = icmp eq i64 %tiv.next, %18
  br i1 %exitcond98.not, label %if.then.i, label %for.cond19.preheader, !llvm.loop !198

if.then.i:                                        ; preds = %for.inc45, %for.end14
  tail call void @free(i8* nonnull %call4.i) #31
  tail call void @free(i8* nonnull %call.i) #31
  %data.i83 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %33 = bitcast i8* %data.i83 to double**
  %34 = load double*, double** %33, align 8, !tbaa !137
  %cmp.not.i84 = icmp eq double* %34, null
  br i1 %cmp.not.i84, label %delete_matrix.exit86, label %if.then.i85

if.then.i85:                                      ; preds = %if.then.i
  %35 = bitcast double* %34 to i8*
  tail call void @free(i8* %35) #31
  br label %delete_matrix.exit86

delete_matrix.exit86:                             ; preds = %if.then.i85, %if.then.i
  tail call void @free(i8* nonnull %call.i81) #31
  ret void
}

; Function Attrs: nofree nounwind uwtable mustprogress
define dso_local void @preprocess_angle_axis_to_rotation_matrix(double* nocapture readonly %angle_axis, %struct.Matrix* nocapture readonly %R) local_unnamed_addr #9 {
entry:
  %0 = load double, double* %angle_axis, align 8, !tbaa !75
  %mul.i = fmul fast double %0, %0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %tiv1 = phi i64 [ %1, %for.body.i ], [ 0, %entry ]
  %res.017.i = phi double [ %add.i, %for.body.i ], [ %mul.i, %entry ]
  %1 = add i64 %tiv1, 1
  %arrayidx2.i = getelementptr inbounds double, double* %angle_axis, i64 %1
  %2 = load double, double* %arrayidx2.i, align 8, !tbaa !75
  %mul5.i = fmul fast double %2, %2
  %add.i = fadd fast double %mul5.i, %res.017.i
  %exitcond.not.i = icmp eq i64 %tiv1, 1
  br i1 %exitcond.not.i, label %square_sum.exit, label %for.body.i, !llvm.loop !194

square_sum.exit:                                  ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %3 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %cmp = fcmp fast olt double %3, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %square_sum.exit
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1
  %4 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %cmp33.i = icmp sgt i32 %4, 0
  br i1 %cmp33.i, label %for.cond1.preheader.lr.ph.i, label %cleanup

for.cond1.preheader.lr.ph.i:                      ; preds = %if.then
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %5 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %cmp230.i = icmp sgt i32 %5, 0
  %data6.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %6 = zext i32 %5 to i64
  %7 = zext i32 %4 to i64
  %8 = sext i32 %5 to i64
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %tiv = phi i64 [ %tiv.next, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %tiv.next = add nuw nsw i64 %tiv, 1
  br i1 %cmp230.i, label %for.body3.lr.ph.i, label %for.inc12.i

for.body3.lr.ph.i:                                ; preds = %for.cond1.preheader.i
  %9 = mul nsw i64 %tiv, %8
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %indvars.iv = phi i64 [ %indvars.iv.next, %for.body3.i ], [ 0, %for.body3.lr.ph.i ]
  %cmp4.i = icmp eq i64 %tiv, %indvars.iv
  %10 = load double*, double** %data6.i, align 8, !tbaa !137
  %.sink178 = add nsw i64 %indvars.iv, %9
  %.sink = select i1 %cmp4.i, double 1.000000e+00, double 0.000000e+00
  %arrayidx11.i = getelementptr inbounds double, double* %10, i64 %.sink178
  store double %.sink, double* %arrayidx11.i, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not.i172 = icmp eq i64 %indvars.iv.next, %6
  br i1 %exitcond.not.i172, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.body3.i, %for.cond1.preheader.i
  %exitcond37.not.i = icmp eq i64 %tiv.next, %7
  br i1 %exitcond37.not.i, label %cleanup, label %for.cond1.preheader.i, !llvm.loop !189

if.end:                                           ; preds = %square_sum.exit
  %div = fdiv fast double %0, %3
  %arrayidx1 = getelementptr inbounds double, double* %angle_axis, i64 1
  %11 = load double, double* %arrayidx1, align 8, !tbaa !75
  %div2 = fdiv fast double %11, %3
  %arrayidx3 = getelementptr inbounds double, double* %angle_axis, i64 2
  %12 = load double, double* %arrayidx3, align 8, !tbaa !75
  %div4 = fdiv fast double %12, %3
  %13 = tail call fast double @llvm.sin.f64(double %3)
  %14 = tail call fast double @llvm.cos.f64(double %3)
  %mul = fmul fast double %div, %div
  %sub = fsub fast double 1.000000e+00, %mul
  %mul6 = fmul fast double %sub, %14
  %add = fadd fast double %mul6, %mul
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %15 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  store double %add, double* %15, align 8, !tbaa !75
  %sub11 = fsub fast double 1.000000e+00, %14
  %mul10 = fmul fast double %sub11, %div
  %mul12 = fmul fast double %mul10, %div2
  %mul13 = fmul fast double %div4, %13
  %sub14 = fsub fast double %mul12, %mul13
  %16 = load i32, i32* %nrows, align 8, !tbaa !138
  %idxprom19 = sext i32 %16 to i64
  %arrayidx20 = getelementptr inbounds double, double* %15, i64 %idxprom19
  store double %sub14, double* %arrayidx20, align 8, !tbaa !75
  %mul23 = fmul fast double %mul10, %div4
  %mul24 = fmul fast double %div2, %13
  %add25 = fadd fast double %mul23, %mul24
  %mul28 = shl nsw i32 %16, 1
  %idxprom30 = sext i32 %mul28 to i64
  %arrayidx31 = getelementptr inbounds double, double* %15, i64 %idxprom30
  store double %add25, double* %arrayidx31, align 8, !tbaa !75
  %add36 = fadd fast double %mul12, %mul13
  %arrayidx42 = getelementptr inbounds double, double* %15, i64 1
  store double %add36, double* %arrayidx42, align 8, !tbaa !75
  %mul43 = fmul fast double %div2, %div2
  %sub45 = fsub fast double 1.000000e+00, %mul43
  %mul46 = fmul fast double %sub45, %14
  %add47 = fadd fast double %mul46, %mul43
  %add51 = add nsw i32 %16, 1
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %15, i64 %idxprom52
  store double %add47, double* %arrayidx53, align 8, !tbaa !75
  %mul54 = fmul fast double %div2, %sub11
  %mul56 = fmul fast double %mul54, %div4
  %mul57 = fmul fast double %div, %13
  %sub58 = fsub fast double %mul56, %mul57
  %add62 = or i32 %mul28, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds double, double* %15, i64 %idxprom63
  store double %sub58, double* %arrayidx64, align 8, !tbaa !75
  %sub69 = fsub fast double %mul23, %mul24
  %arrayidx75 = getelementptr inbounds double, double* %15, i64 2
  store double %sub69, double* %arrayidx75, align 8, !tbaa !75
  %add80 = fadd fast double %mul56, %mul57
  %add84 = add nsw i32 %16, 2
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds double, double* %15, i64 %idxprom85
  store double %add80, double* %arrayidx86, align 8, !tbaa !75
  %mul87 = fmul fast double %div4, %div4
  %sub89 = fsub fast double 1.000000e+00, %mul87
  %mul90 = fmul fast double %sub89, %14
  %add91 = fadd fast double %mul90, %mul87
  %add95 = add nsw i32 %mul28, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds double, double* %15, i64 %idxprom96
  store double %add91, double* %arrayidx97, align 8, !tbaa !75
  br label %cleanup

cleanup:                                          ; preds = %if.end, %for.inc12.i, %if.then
  ret void
}

; Function Attrs: nofree nounwind uwtable mustprogress
define internal { double, double*, double, double, double } @augmented_angle_axis_to_rotation_matrix(double* nocapture readonly %angle_axis, double* nocapture %"angle_axis'", %struct.Matrix* nocapture readonly %R, %struct.Matrix* nocapture %"R'") local_unnamed_addr #9 {
entry:
  %0 = alloca { double, double*, double, double, double }, align 8
  %1 = load double, double* %angle_axis, align 8, !tbaa !75
  %2 = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 0
  store double %1, double* %2, align 8
  %mul.i = fmul fast double %1, %1
  %malloccall = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16)
  %_malloccache = bitcast i8* %malloccall to double*
  %3 = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 1
  %4 = bitcast double** %3 to i8**
  store i8* %malloccall, i8** %4, align 8
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %iv = phi i64 [ %iv.next, %for.body.i ], [ 0, %entry ]
  %res.017.i = phi double [ %add.i, %for.body.i ], [ %mul.i, %entry ]
  %iv.next = add nuw nsw i64 %iv, 1
  %arrayidx2.i = getelementptr inbounds double, double* %angle_axis, i64 %iv.next
  %5 = load double, double* %arrayidx2.i, align 8, !tbaa !75
  %6 = getelementptr inbounds double, double* %_malloccache, i64 %iv
  store double %5, double* %6, align 8, !invariant.group !341
  %mul5.i = fmul fast double %5, %5
  %add.i = fadd fast double %mul5.i, %res.017.i
  %exitcond.not.i = icmp eq i64 %iv, 1
  br i1 %exitcond.not.i, label %square_sum.exit, label %for.body.i, !llvm.loop !194

square_sum.exit:                                  ; preds = %for.body.i
  %add.i.lcssa = phi double [ %add.i, %for.body.i ]
  %7 = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 2
  store double %add.i.lcssa, double* %7, align 8
  %8 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %cmp = fcmp fast olt double %8, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %square_sum.exit
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1
  %9 = load i32, i32* %ncols.i, align 4, !tbaa !139
  %cmp33.i = icmp sgt i32 %9, 0
  br i1 %cmp33.i, label %for.cond1.preheader.lr.ph.i, label %cleanup

for.cond1.preheader.lr.ph.i:                      ; preds = %if.then
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  %10 = load i32, i32* %nrows.i, align 8, !tbaa !138
  %cmp230.i = icmp sgt i32 %10, 0
  %data6.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %11 = zext i32 %10 to i64
  %12 = zext i32 %9 to i64
  %13 = sext i32 %10 to i64
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %iv1 = phi i64 [ %iv.next2, %for.inc12.i ], [ 0, %for.cond1.preheader.lr.ph.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  br i1 %cmp230.i, label %for.body3.lr.ph.i, label %for.inc12.i

for.body3.lr.ph.i:                                ; preds = %for.cond1.preheader.i
  %14 = mul nsw i64 %iv1, %13
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %iv3 = phi i64 [ %iv.next4, %for.body3.i ], [ 0, %for.body3.lr.ph.i ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %cmp4.i = icmp eq i64 %iv1, %iv3
  %15 = load double*, double** %data6.i, align 8, !tbaa !137
  %.sink178 = add nsw i64 %iv3, %14
  %.sink = select i1 %cmp4.i, double 1.000000e+00, double 0.000000e+00
  %arrayidx11.i = getelementptr inbounds double, double* %15, i64 %.sink178
  store double %.sink, double* %arrayidx11.i, align 8, !tbaa !75
  %exitcond.not.i172 = icmp eq i64 %iv.next4, %11
  br i1 %exitcond.not.i172, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.body3.i, %for.cond1.preheader.i
  %exitcond37.not.i = icmp eq i64 %iv.next2, %12
  br i1 %exitcond37.not.i, label %cleanup, label %for.cond1.preheader.i, !llvm.loop !189

if.end:                                           ; preds = %square_sum.exit
  %div = fdiv fast double %1, %8
  %arrayidx1 = getelementptr inbounds double, double* %angle_axis, i64 1
  %16 = load double, double* %arrayidx1, align 8, !tbaa !75
  %17 = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 3
  store double %16, double* %17, align 8
  %div2 = fdiv fast double %16, %8
  %arrayidx3 = getelementptr inbounds double, double* %angle_axis, i64 2
  %18 = load double, double* %arrayidx3, align 8, !tbaa !75
  %19 = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 4
  store double %18, double* %19, align 8
  %div4 = fdiv fast double %18, %8
  %20 = tail call fast double @llvm.sin.f64(double %8)
  %21 = tail call fast double @llvm.cos.f64(double %8)
  %mul = fmul fast double %div, %div
  %sub = fsub fast double 1.000000e+00, %mul
  %mul6 = fmul fast double %sub, %21
  %add = fadd fast double %mul6, %mul
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 2
  %22 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0
  store double %add, double* %22, align 8, !tbaa !75
  %sub11 = fsub fast double 1.000000e+00, %21
  %mul10 = fmul fast double %sub11, %div
  %mul12 = fmul fast double %mul10, %div2
  %mul13 = fmul fast double %div4, %20
  %sub14 = fsub fast double %mul12, %mul13
  %23 = load i32, i32* %nrows, align 8, !tbaa !138
  %idxprom19 = sext i32 %23 to i64
  %arrayidx20 = getelementptr inbounds double, double* %22, i64 %idxprom19
  store double %sub14, double* %arrayidx20, align 8, !tbaa !75
  %mul23 = fmul fast double %mul10, %div4
  %mul24 = fmul fast double %div2, %20
  %add25 = fadd fast double %mul23, %mul24
  %mul28 = shl nsw i32 %23, 1
  %idxprom30 = sext i32 %mul28 to i64
  %arrayidx31 = getelementptr inbounds double, double* %22, i64 %idxprom30
  store double %add25, double* %arrayidx31, align 8, !tbaa !75
  %add36 = fadd fast double %mul12, %mul13
  %arrayidx42 = getelementptr inbounds double, double* %22, i64 1
  store double %add36, double* %arrayidx42, align 8, !tbaa !75
  %mul43 = fmul fast double %div2, %div2
  %sub45 = fsub fast double 1.000000e+00, %mul43
  %mul46 = fmul fast double %sub45, %21
  %add47 = fadd fast double %mul46, %mul43
  %add51 = add nsw i32 %23, 1
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds double, double* %22, i64 %idxprom52
  store double %add47, double* %arrayidx53, align 8, !tbaa !75
  %mul54 = fmul fast double %div2, %sub11
  %mul56 = fmul fast double %mul54, %div4
  %mul57 = fmul fast double %div, %20
  %sub58 = fsub fast double %mul56, %mul57
  %add62 = or i32 %mul28, 1
  %idxprom63 = sext i32 %add62 to i64
  %arrayidx64 = getelementptr inbounds double, double* %22, i64 %idxprom63
  store double %sub58, double* %arrayidx64, align 8, !tbaa !75
  %sub69 = fsub fast double %mul23, %mul24
  %arrayidx75 = getelementptr inbounds double, double* %22, i64 2
  store double %sub69, double* %arrayidx75, align 8, !tbaa !75
  %add80 = fadd fast double %mul56, %mul57
  %add84 = add nsw i32 %23, 2
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds double, double* %22, i64 %idxprom85
  store double %add80, double* %arrayidx86, align 8, !tbaa !75
  %mul87 = fmul fast double %div4, %div4
  %sub89 = fsub fast double 1.000000e+00, %mul87
  %mul90 = fmul fast double %sub89, %21
  %add91 = fadd fast double %mul90, %mul87
  %add95 = add nsw i32 %mul28, 2
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds double, double* %22, i64 %idxprom96
  store double %add91, double* %arrayidx97, align 8, !tbaa !75
  br label %cleanup

cleanup:                                          ; preds = %if.end, %for.inc12.i, %if.then
  %.elt = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 0
  %.unpack = load double, double* %.elt, align 8
  %24 = insertvalue { double, double*, double, double, double } undef, double %.unpack, 0
  %.elt1 = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 1
  %.unpack2 = load double*, double** %.elt1, align 8
  %25 = insertvalue { double, double*, double, double, double } %24, double* %.unpack2, 1
  %.elt3 = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 2
  %.unpack4 = load double, double* %.elt3, align 8
  %26 = insertvalue { double, double*, double, double, double } %25, double %.unpack4, 2
  %.elt5 = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 3
  %.unpack6 = load double, double* %.elt5, align 8
  %27 = insertvalue { double, double*, double, double, double } %26, double %.unpack6, 3
  %.elt7 = getelementptr inbounds { double, double*, double, double, double }, { double, double*, double, double, double }* %0, i64 0, i32 4
  %.unpack8 = load double, double* %.elt7, align 8
  %28 = insertvalue { double, double*, double, double, double } %27, double %.unpack8, 4
  ret { double, double*, double, double, double } %28
}

; Function Attrs: nounwind uwtable mustprogress
define internal { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } @augmented_mat_mult.6(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'") local_unnamed_addr #5 {
entry:
  %0 = alloca { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, align 8
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0
  %1 = load i32, i32* %nrows, align 8, !tbaa !138
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1
  %2 = load i32, i32* %ncols, align 4, !tbaa !139
  %3 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 3
  store i32 %2, i32* %3, align 8
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 0
  %4 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 1
  %5 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i = mul nsw i32 %5, %4
  %mul3.i = mul nsw i32 %2, %1
  %cmp.not.i = icmp eq i32 %mul.i, %mul3.i
  %6 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 4
  store i1 %cmp.not.i, i1* %6, align 4
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %entry
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %7 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %7, null
  %8 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 5
  store i1 %cmp4.not.i, i1* %8, align 1
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %if.then9.i, label %if.else.i

if.then9.i:                                       ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %9 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %9, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #31
  %10 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc" = bitcast double** %"data.i'ipg" to i8**
  %11 = bitcast double** %data.i to i8**
  store i8* %"call.i'mi", i8** %"'ipc", align 8
  store i8* %call.i, i8** %11, align 8, !tbaa !137
  br label %resize.exit

if.else.i:                                        ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8
  store double* null, double** %data.i, align 8, !tbaa !137
  br label %resize.exit

resize.exit:                                      ; preds = %if.else.i, %if.then9.i, %entry
  store i32 %2, i32* %"ncols2.i'ipg", align 4
  store i32 %2, i32* %ncols2.i, align 4, !tbaa !139
  store i32 %1, i32* %"nrows1.i'ipg", align 8
  store i32 %1, i32* %nrows1.i, align 8, !tbaa !138
  %cmp85 = icmp sgt i32 %1, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %for.end49

for.cond2.preheader.lr.ph:                        ; preds = %resize.exit
  %cmp483 = icmp sgt i32 %2, 0
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 2
  %"data7'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2
  %data7 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 2
  %nrows8 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0
  %data14 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %out, i64 0, i32 2
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1
  %12 = zext i32 %1 to i64
  %wide.trip.count96 = zext i32 %2 to i64
  %mallocsize = shl nuw nsw i64 %12, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl8_malloccache" = bitcast i8* %malloccall to double**
  %13 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 2
  %14 = bitcast double*** %13 to i8**
  store i8* %malloccall, i8** %14, align 8
  %mallocsize10 = shl nuw nsw i64 %12, 2
  %malloccall11 = tail call noalias nonnull i8* @malloc(i64 %mallocsize10)
  %_malloccache = bitcast i8* %malloccall11 to i32*
  %15 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 6
  %16 = bitcast i32** %15 to i8**
  store i8* %malloccall11, i8** %16, align 8
  %17 = mul nuw nsw i64 %wide.trip.count96, %12
  %mallocsize13 = shl nuw nsw i64 %17, 3
  %malloccall14 = tail call noalias nonnull i8* @malloc(i64 %mallocsize13)
  %_malloccache15 = bitcast i8* %malloccall14 to double*
  %18 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 7
  %19 = bitcast double** %18 to i8**
  store i8* %malloccall14, i8** %19, align 8
  %malloccall18 = tail call noalias nonnull i8* @malloc(i64 %mallocsize13)
  %_malloccache19 = bitcast i8* %malloccall18 to double*
  %20 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 8
  %21 = bitcast double** %20 to i8**
  store i8* %malloccall18, i8** %21, align 8
  %_unwrap = load i32, i32* %ncols21, align 4, !tbaa !139
  %wide.trip.count_unwrap = zext i32 %_unwrap to i64
  %22 = add nsw i64 %wide.trip.count_unwrap, -1
  %23 = mul nuw nsw i64 %22, %wide.trip.count96
  %24 = mul nuw nsw i64 %23, %12
  %mallocsize22 = shl nuw nsw i64 %24, 3
  %malloccall23 = tail call noalias nonnull i8* @malloc(i64 %mallocsize22)
  %_malloccache24 = bitcast i8* %malloccall23 to double*
  %25 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 9
  %26 = bitcast double** %25 to i8**
  store i8* %malloccall23, i8** %26, align 8
  %malloccall27 = tail call noalias nonnull i8* @malloc(i64 %mallocsize22)
  %_malloccache28 = bitcast i8* %malloccall27 to double*
  %27 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, i64 0, i32 10
  %28 = bitcast double** %27 to i8**
  store i8* %malloccall27, i8** %28, align 8
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %iv = phi i64 [ %iv.next, %for.inc47 ], [ 0, %for.cond2.preheader.lr.ph ]
  %iv.next = add nuw nsw i64 %iv, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %29 = load double*, double** %data, align 8, !tbaa !137
  %arrayidx = getelementptr inbounds double, double* %29, i64 %iv
  %"'ipl8" = load double*, double** %"data7'ipg", align 8
  %30 = getelementptr inbounds double*, double** %"'ipl8_malloccache", i64 %iv
  store double* %"'ipl8", double** %30, align 8, !invariant.group !342
  %31 = load double*, double** %data7, align 8, !tbaa !137
  %32 = load i32, i32* %nrows8, align 8, !tbaa !138
  %33 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv
  store i32 %32, i32* %33, align 4, !invariant.group !343
  %34 = load double*, double** %data14, align 8, !tbaa !137
  %35 = load i32, i32* %ncols21, align 4, !tbaa !139
  %cmp2281 = icmp sgt i32 %35, 1
  %36 = sext i32 %32 to i64
  %wide.trip.count = zext i32 %35 to i64
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %iv4 = phi i64 [ %iv.next5, %for.inc44 ], [ 0, %for.body5.lr.ph ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %37 = load double, double* %arrayidx, align 8, !tbaa !75
  %38 = mul nsw i64 %iv4, %36
  %arrayidx12 = getelementptr inbounds double, double* %31, i64 %38
  %39 = load double, double* %arrayidx12, align 8, !tbaa !75
  %mul13 = fmul fast double %39, %37
  %40 = mul nuw nsw i64 %iv4, %12
  %41 = add nuw nsw i64 %40, %iv
  %arrayidx19 = getelementptr inbounds double, double* %34, i64 %41
  store double %mul13, double* %arrayidx19, align 8, !tbaa !75
  %42 = mul nuw nsw i64 %iv, %wide.trip.count96
  %43 = add nuw nsw i64 %iv4, %42
  %44 = getelementptr inbounds double, double* %_malloccache19, i64 %43
  store double %39, double* %44, align 8, !invariant.group !344
  %45 = getelementptr inbounds double, double* %_malloccache15, i64 %43
  store double %37, double* %45, align 8, !invariant.group !345
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body5 ]
  %46 = phi double [ %add43, %for.body23 ], [ %mul13, %for.body5 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %47 = mul nuw nsw i64 %iv.next7, %12
  %48 = add nuw nsw i64 %47, %iv
  %arrayidx29 = getelementptr inbounds double, double* %29, i64 %48
  %49 = load double, double* %arrayidx29, align 8, !tbaa !75
  %50 = add nsw i64 %iv.next7, %38
  %arrayidx35 = getelementptr inbounds double, double* %31, i64 %50
  %51 = load double, double* %arrayidx35, align 8, !tbaa !75
  %mul36 = fmul fast double %51, %49
  %add43 = fadd fast double %46, %mul36
  store double %add43, double* %arrayidx19, align 8, !tbaa !75
  %52 = mul nuw nsw i64 %iv4, %22
  %53 = add nuw nsw i64 %iv6, %52
  %54 = mul nuw nsw i64 %iv, %23
  %55 = add nuw nsw i64 %53, %54
  %56 = getelementptr inbounds double, double* %_malloccache28, i64 %55
  store double %51, double* %56, align 8, !invariant.group !346
  %57 = getelementptr inbounds double, double* %_malloccache24, i64 %55
  store double %49, double* %57, align 8, !invariant.group !347
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %exitcond101.not = icmp eq i64 %iv.next, %12
  br i1 %exitcond101.not, label %for.end49, label %for.cond2.preheader, !llvm.loop !187

for.end49:                                        ; preds = %for.inc47, %resize.exit
  %58 = load { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %0, align 8
  ret { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %58
}

; Function Attrs: nounwind uwtable mustprogress
define internal { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } @augmented_apply_global_transform(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* nocapture readonly %positions, %struct.Matrix* nocapture %"positions'") local_unnamed_addr #5 {
entry:
  %0 = alloca { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, align 8
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %1 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 5
  store i8* %call.i, i8** %1, align 8
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %2 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 4
  store i8* %"call.i'mi", i8** %2, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %3 = bitcast i8* %call.i to %struct.Matrix*
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %"nrows1.i'ipc", align 8
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc14" = bitcast i8* %"ncols2.i'ipg" to i32*
  %4 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %"'ipc14", align 4
  store i32 3, i32* %4, align 4, !tbaa !139
  %call4.i = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %"call4.i'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %5 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 3
  store i8* %"call4.i'mi", i8** %5, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i'mi", i8 0, i64 72, i1 false)
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc13" = bitcast i8* %"data.i'ipg" to i8**
  %6 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc13", align 8
  store i8* %call4.i, i8** %6, align 8, !tbaa !137
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %"'ipl12" = load double*, double** %"data'ipg", align 8
  %7 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 2
  store double* %"'ipl12", double** %7, align 8
  %8 = load double*, double** %data, align 8, !tbaa !137
  %9 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 9
  store double* %8, double** %9, align 8
  %_augmented = call { double, double*, double, double, double } @augmented_angle_axis_to_rotation_matrix(double* %8, double* %"'ipl12", %struct.Matrix* nonnull %3, %struct.Matrix* nonnull %"'ipc")
  %.repack = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 0
  %_augmented.elt = extractvalue { double, double*, double, double, double } %_augmented, 0
  store double %_augmented.elt, double* %.repack, align 8
  %.repack1 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 1
  %_augmented.elt2 = extractvalue { double, double*, double, double, double } %_augmented, 1
  store double* %_augmented.elt2, double** %.repack1, align 8
  %.repack3 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 2
  %_augmented.elt4 = extractvalue { double, double*, double, double, double } %_augmented, 2
  store double %_augmented.elt4, double* %.repack3, align 8
  %.repack5 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 3
  %_augmented.elt6 = extractvalue { double, double*, double, double, double } %_augmented, 3
  store double %_augmented.elt6, double* %.repack5, align 8
  %.repack7 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 1, i32 4
  %_augmented.elt8 = extractvalue { double, double*, double, double, double } %_augmented, 4
  store double %_augmented.elt8, double* %.repack7, align 8
  %"'ipl" = load double*, double** %"data'ipg", align 8
  %10 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 0
  store double* %"'ipl", double** %10, align 8
  %11 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %12 = load i32, i32* %nrows, align 8, !tbaa !138
  %13 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 10
  store i32 %12, i32* %13, align 8
  %14 = bitcast i8* %call4.i to double*
  %15 = sext i32 %12 to i64
  %malloccall = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72)
  %_malloccache = bitcast i8* %malloccall to double*
  %16 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 11
  %17 = bitcast double** %16 to i8**
  store i8* %malloccall, i8** %17, align 8
  %malloccall22 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72)
  %_malloccache23 = bitcast i8* %malloccall22 to double*
  %18 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 12
  %19 = bitcast double** %18 to i8**
  store i8* %malloccall22, i8** %19, align 8
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %iv = phi i64 [ %iv.next, %for.inc12 ], [ 0, %entry ]
  %iv.next = add nuw nsw i64 %iv, 1
  %20 = add nsw i64 %iv, %15
  %arrayidx = getelementptr inbounds double, double* %11, i64 %20
  %21 = mul nuw nsw i64 %iv, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %iv2 = phi i64 [ %iv.next3, %for.body3 ], [ 0, %for.cond1.preheader ]
  %iv.next3 = add nuw nsw i64 %iv2, 1
  %22 = load double, double* %arrayidx, align 8, !tbaa !75
  %23 = add nuw nsw i64 %21, %iv2
  %arrayidx10 = getelementptr inbounds double, double* %14, i64 %23
  %24 = load double, double* %arrayidx10, align 8, !tbaa !75
  %mul11 = fmul fast double %24, %22
  store double %mul11, double* %arrayidx10, align 8, !tbaa !75
  %25 = getelementptr inbounds double, double* %_malloccache23, i64 %23
  store double %24, double* %25, align 8, !invariant.group !348
  %26 = getelementptr inbounds double, double* %_malloccache, i64 %23
  store double %22, double* %26, align 8, !invariant.group !349
  %exitcond102.not = icmp eq i64 %iv.next3, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !195

for.inc12:                                        ; preds = %for.body3
  %exitcond107.not = icmp eq i64 %iv.next, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !196

for.end14:                                        ; preds = %for.inc12
  %call.i81 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %27 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 8
  store i8* %call.i81, i8** %27, align 8
  %"call.i81'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %28 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 7
  store i8* %"call.i81'mi", i8** %28, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i81'mi", i8 0, i64 16, i1 false)
  %"'ipc15" = bitcast i8* %"call.i81'mi" to %struct.Matrix*
  %29 = bitcast i8* %call.i81 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i81, i8 0, i64 16, i1 false) #31
  %_augmented16 = call { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } @augmented_mat_mult.6(%struct.Matrix* nonnull %3, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* %positions, %struct.Matrix* %"positions'", %struct.Matrix* nonnull %29, %struct.Matrix* nonnull %"'ipc15")
  %30 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, i64 0, i32 6
  store { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %_augmented16, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %30, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %31 = load i32, i32* %ncols, align 4, !tbaa !139
  %cmp1789 = icmp sgt i32 %31, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %delete_matrix.exit86

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %32 = load i32, i32* %nrows20, align 8, !tbaa !138
  %cmp2187 = icmp sgt i32 %32, 0
  %data23 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %33 = bitcast i8* %data23 to double**
  %nrows24 = bitcast i8* %call.i81 to i32*
  %data36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count = zext i32 %32 to i64
  %34 = sext i32 %32 to i64
  %35 = zext i32 %31 to i64
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %iv4 = phi i64 [ %iv.next5, %for.inc45 ], [ 0, %for.cond19.preheader.lr.ph ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %36 = load double*, double** %33, align 8, !tbaa !137
  %37 = load i32, i32* %nrows24, align 8, !tbaa !138
  %38 = sext i32 %37 to i64
  %39 = mul nsw i64 %iv4, %38
  %40 = load double*, double** %data, align 8, !tbaa !137
  %41 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul31 = shl nsw i32 %41, 1
  %42 = load double*, double** %data36, align 8, !tbaa !137
  %43 = sext i32 %mul31 to i64
  %44 = mul nsw i64 %iv4, %34
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %iv9 = phi i64 [ %iv.next10, %for.body22 ], [ 0, %for.body22.lr.ph ]
  %iv.next10 = add nuw nsw i64 %iv9, 1
  %45 = add nsw i64 %iv9, %39
  %arrayidx28 = getelementptr inbounds double, double* %36, i64 %45
  %46 = load double, double* %arrayidx28, align 8, !tbaa !75
  %47 = add nsw i64 %iv9, %43
  %arrayidx34 = getelementptr inbounds double, double* %40, i64 %47
  %48 = load double, double* %arrayidx34, align 8, !tbaa !75
  %add35 = fadd fast double %48, %46
  %49 = add nsw i64 %iv9, %44
  %arrayidx41 = getelementptr inbounds double, double* %42, i64 %49
  store double %add35, double* %arrayidx41, align 8, !tbaa !75
  %exitcond.not = icmp eq i64 %iv.next10, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !197

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %exitcond98.not = icmp eq i64 %iv.next5, %35
  br i1 %exitcond98.not, label %delete_matrix.exit86, label %for.cond19.preheader, !llvm.loop !198

delete_matrix.exit86:                             ; preds = %for.inc45, %for.end14
  %50 = load { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %0, align 8
  ret { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %50
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define internal fastcc { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } @augmented__ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %positions, %struct.Matrix* nocapture %"positions'") unnamed_addr #18 {
entry:
  %0 = alloca { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, align 8
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #31
  %1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %1, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %2 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %2, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul.i, i1 false)
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 5
  store i8* %call.i3, i8** %3, align 8
  %"call.i3'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %4 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 4
  store i8* %"call.i3'mi", i8** %4, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i3'mi", i8 0, i64 %mul.i, i1 false)
  %call.i9 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 3
  store i8* %call.i9, i8** %5, align 8
  %"call.i9'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %6 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 2
  store i8* %"call.i9'mi", i8** %6, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i9'mi", i8 0, i64 %mul.i, i1 false)
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %7 = zext i32 %bone_count to i64
  %8 = shl nuw nsw i64 %7, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %8, i1 false) #31
  %call.i359 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 9
  store i8* %call.i359, i8** %9, align 8
  %"call.i359'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %10 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 8
  store i8* %"call.i359'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i359'mi", i8 0, i64 %mul.i, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i359, i8 0, i64 %8, i1 false) #31
  %call.i963 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 7
  store i8* %call.i963, i8** %11, align 8
  %"call.i963'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %12 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 6
  store i8* %"call.i963'mi", i8** %12, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i963'mi", i8 0, i64 %mul.i, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i963, i8 0, i64 %8, i1 false) #31
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %13 = phi i8* [ %"call.i9'mi", %get_matrix_array.exit6 ], [ %"call.i963'mi", %for.body.preheader.i11 ]
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %14 = phi i8* [ %"call.i3'mi", %get_matrix_array.exit6 ], [ %"call.i359'mi", %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %15 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc23" = bitcast i8* %14 to %struct.Matrix*
  %16 = bitcast i8* %call.i36064 to %struct.Matrix*
  %"'ipc25" = bitcast i8* %13 to %struct.Matrix*
  %17 = bitcast i8* %call.i966 to %struct.Matrix*
  %_augmented24 = call { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } @augmented_get_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %15, %struct.Matrix* nonnull %"'ipc")
  %18 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 11
  store { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %_augmented24, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %18, align 8
  %_augmented = call { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } @augmented_relatives_to_absolutes(i32 %bone_count, %struct.Matrix* %15, %struct.Matrix* nonnull %"'ipc", i32* %parents, %struct.Matrix* %16, %struct.Matrix* nonnull %"'ipc23")
  %.repack = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 0
  %_augmented.elt = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 0
  store i8** %_augmented.elt, i8*** %.repack, align 8
  %.repack1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 1
  %_augmented.elt2 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 1
  store i8** %_augmented.elt2, i8*** %.repack1, align 8
  %.repack3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 2
  %_augmented.elt4 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 2
  store double** %_augmented.elt4, double*** %.repack3, align 8
  %.repack5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 3
  %_augmented.elt6 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 3
  store { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %_augmented.elt6, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }** %.repack5, align 8
  %.repack7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 4
  %_augmented.elt8 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 4
  store i32* %_augmented.elt8, i32** %.repack7, align 8
  %.repack9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 5
  %_augmented.elt10 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 5
  store i1* %_augmented.elt10, i1** %.repack9, align 8
  %.repack11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 6
  %_augmented.elt12 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 6
  store i32* %_augmented.elt12, i32** %.repack11, align 8
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64
  %mallocsize = mul nuw nsw i64 %wide.trip.count101, 72
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_augmented26_malloccache = bitcast i8* %malloccall to { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*
  %19 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 12
  %20 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }** %19 to i8**
  store i8* %malloccall, i8** %20, align 8
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %iv = phi i64 [ %iv.next, %for.body ], [ 0, %for.body.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1
  %"arrayidx'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc23", i64 %iv
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %16, i64 %iv
  %arrayidx4 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %iv
  %"arrayidx6'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc25", i64 %iv
  %arrayidx6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv
  %_augmented26 = call { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.4(%struct.Matrix* %arrayidx, %struct.Matrix* nonnull %"arrayidx'ipg", %struct.Matrix* %arrayidx4, %struct.Matrix* %arrayidx6, %struct.Matrix* nonnull %"arrayidx6'ipg")
  %21 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_augmented26_malloccache, i64 %iv
  store { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %_augmented26, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %21, align 8, !invariant.group !350
  %exitcond102.not = icmp eq i64 %iv.next, %wide.trip.count101
  br i1 %exitcond102.not, label %for.end, label %for.body, !llvm.loop !212

for.end:                                          ; preds = %for.body, %get_matrix_array.exit12
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %22 = load i32, i32* %ncols, align 4, !tbaa !139
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %23 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %24 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i13 = mul nsw i32 %24, %23
  %25 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 22
  store i32 %mul.i13, i32* %25, align 8
  %mul3.i = mul i32 %22, 3
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %26 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %26, null
  %27 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 23
  store i1 %cmp4.not.i, i1* %27, align 4
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread69

resize.exit.thread:                               ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i14 = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %28 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 14
  store i8* %call.i14, i8** %28, align 8
  %"call.i14'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #31
  %29 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 13
  store i8* %"call.i14'mi", i8** %29, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i14'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc27" = bitcast double** %"data.i'ipg" to i8**
  %30 = bitcast double** %data.i to i8**
  store i8* %"call.i14'mi", i8** %"'ipc27", align 8
  store i8* %call.i14, i8** %30, align 8, !tbaa !137
  store i32 %22, i32* %"ncols2.i'ipg", align 4
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %"nrows1.i'ipg", align 8
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize.exit.thread69:                             ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %22, i32* %"ncols2.i'ipg", align 4
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %"nrows1.i'ipg", align 8
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill.exit

resize.exit:                                      ; preds = %for.end
  store i32 %22, i32* %"ncols2.i'ipg", align 4
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %"nrows1.i'ipg", align 8
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %data.i15.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %31 = bitcast double** %data.i15.phi.trans.insert to i8**
  %.pre105 = load i8*, i8** %31, align 8, !tbaa !137
  %.pre103 = zext i32 %mul3.i to i64
  %.pre104 = shl nuw nsw i64 %.pre103, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre104, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %32 = phi i8* [ %.pre105, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %call.i14, %resize.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %32, i8 0, i64 %.pre-phi, i1 false)
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread69
  %call.i16 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %33 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 18
  store i8* %call.i16, i8** %33, align 8
  %"call.i16'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %34 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 17
  store i8* %"call.i16'mi", i8** %34, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i16'mi", i8 0, i64 16, i1 false)
  %"'ipc30" = bitcast i8* %"call.i16'mi" to %struct.Matrix*
  %35 = bitcast i8* %call.i16 to %struct.Matrix*
  %"nrows1.i17'ipc" = bitcast i8* %"call.i16'mi" to i32*
  %nrows1.i17 = bitcast i8* %call.i16 to i32*
  store i32 4, i32* %"nrows1.i17'ipc", align 8
  store i32 4, i32* %nrows1.i17, align 8, !tbaa !138
  %"ncols2.i18'ipg" = getelementptr inbounds i8, i8* %"call.i16'mi", i64 4
  %ncols2.i18 = getelementptr inbounds i8, i8* %call.i16, i64 4
  %"'ipc29" = bitcast i8* %"ncols2.i18'ipg" to i32*
  %36 = bitcast i8* %ncols2.i18 to i32*
  store i32 %22, i32* %"'ipc29", align 4
  store i32 %22, i32* %36, align 4, !tbaa !139
  %mul.i19 = shl nsw i32 %22, 2
  %conv.i20 = sext i32 %mul.i19 to i64
  %mul3.i21 = shl nsw i64 %conv.i20, 3
  %call4.i = tail call noalias i8* @malloc(i64 %mul3.i21) #31
  %37 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 16
  store i8* %call4.i, i8** %37, align 8
  %"call4.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul3.i21) #31
  %38 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 15
  store i8* %"call4.i'mi", i8** %38, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call4.i'mi", i8 0, i64 %mul3.i21, i1 false)
  %"data.i22'ipg" = getelementptr inbounds i8, i8* %"call.i16'mi", i64 8
  %data.i22 = getelementptr inbounds i8, i8* %call.i16, i64 8
  %"'ipc28" = bitcast i8* %"data.i22'ipg" to i8**
  %39 = bitcast i8* %data.i22 to i8**
  store i8* %"call4.i'mi", i8** %"'ipc28", align 8
  store i8* %call4.i, i8** %39, align 8, !tbaa !137
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %22, 0
  %"'ipc34" = bitcast i8* %"data.i22'ipg" to double**
  %40 = bitcast i8* %data.i22 to double**
  %data23 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 2
  %nrows24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 0
  %data30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count97 = zext i32 %bone_count to i64
  %wide.trip.count93 = zext i32 %22 to i64
  %mallocsize32 = shl nuw nsw i64 %wide.trip.count97, 6
  %malloccall33 = tail call noalias nonnull i8* @malloc(i64 %mallocsize32)
  %_augmented31_malloccache = bitcast i8* %malloccall33 to { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*
  %41 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 19
  %42 = bitcast { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }** %41 to i8**
  store i8* %malloccall33, i8** %42, align 8
  %mallocsize36 = shl nuw nsw i64 %wide.trip.count97, 3
  %malloccall37 = tail call noalias nonnull i8* @malloc(i64 %mallocsize36)
  %"'ipl35_malloccache" = bitcast i8* %malloccall37 to double**
  %43 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 20
  %44 = bitcast double*** %43 to i8**
  store i8* %malloccall37, i8** %44, align 8
  %mallocsize44 = shl nuw nsw i64 %wide.trip.count97, 2
  %malloccall45 = tail call noalias nonnull i8* @malloc(i64 %mallocsize44)
  %_malloccache = bitcast i8* %malloccall45 to i32*
  %45 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 24
  %46 = bitcast i32** %45 to i8**
  store i8* %malloccall45, i8** %46, align 8
  %47 = mul nuw nsw i64 %wide.trip.count93, 3
  %48 = mul nuw nsw i64 %47, %wide.trip.count97
  %mallocsize47 = shl nuw nsw i64 %48, 3
  %malloccall48 = tail call noalias nonnull i8* @malloc(i64 %mallocsize47)
  %_malloccache49 = bitcast i8* %malloccall48 to double*
  %49 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 25
  %50 = bitcast double** %49 to i8**
  store i8* %malloccall48, i8** %50, align 8
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc43 ], [ 0, %for.body11.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %"arrayidx13'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc25", i64 %iv1
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv1
  %_augmented31 = call { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.5(%struct.Matrix* %arrayidx13, %struct.Matrix* nonnull %"arrayidx13'ipg", %struct.Matrix* %base_positions, %struct.Matrix* nonnull %35, %struct.Matrix* nonnull %"'ipc30")
  %51 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %_augmented31_malloccache, i64 %iv1
  store { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %_augmented31, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %51, align 64, !invariant.group !351
  br i1 %cmp1674, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %"'ipl35" = load double*, double** %"'ipc34", align 8
  %52 = getelementptr inbounds double*, double** %"'ipl35_malloccache", i64 %iv1
  store double* %"'ipl35", double** %52, align 8, !invariant.group !352
  %53 = load double*, double** %40, align 8, !tbaa !137
  %54 = load i32, i32* %nrows1.i17, align 8, !tbaa !138
  %55 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv1
  store i32 %54, i32* %55, align 4, !invariant.group !353
  %56 = load double*, double** %data23, align 8, !tbaa !137
  %57 = load i32, i32* %nrows24, align 8, !tbaa !138
  %58 = load double*, double** %data30, align 8, !tbaa !137
  %59 = sext i32 %54 to i64
  %60 = sext i32 %57 to i64
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %iv6 = phi i64 [ %iv.next7, %for.inc40 ], [ 0, %for.cond18.preheader.lr.ph ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %61 = mul nsw i64 %iv6, %59
  %62 = mul nsw i64 %iv6, %60
  %63 = add nsw i64 %62, %iv1
  %arrayidx28 = getelementptr inbounds double, double* %56, i64 %63
  %64 = mul nuw nsw i64 %iv6, 3
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %iv8 = phi i64 [ %iv.next9, %for.body20 ], [ 0, %for.cond18.preheader ]
  %iv.next9 = add nuw nsw i64 %iv8, 1
  %65 = add nsw i64 %61, %iv8
  %arrayidx22 = getelementptr inbounds double, double* %53, i64 %65
  %66 = load double, double* %arrayidx22, align 8, !tbaa !75
  %67 = load double, double* %arrayidx28, align 8, !tbaa !75
  %mul29 = fmul fast double %67, %66
  %68 = add nuw nsw i64 %iv8, %64
  %arrayidx35 = getelementptr inbounds double, double* %58, i64 %68
  %69 = load double, double* %arrayidx35, align 8, !tbaa !75
  %add36 = fadd fast double %69, %mul29
  store double %add36, double* %arrayidx35, align 8, !tbaa !75
  %70 = mul nuw nsw i64 %iv1, %47
  %71 = add nuw nsw i64 %68, %70
  %72 = getelementptr inbounds double, double* %_malloccache49, i64 %71
  store double %67, double* %72, align 8, !invariant.group !354
  %exitcond86.not = icmp eq i64 %iv.next9, 3
  br i1 %exitcond86.not, label %for.inc40, label %for.body20, !llvm.loop !213

for.inc40:                                        ; preds = %for.body20
  %exitcond94.not = icmp eq i64 %iv.next7, %wide.trip.count93
  br i1 %exitcond94.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !214

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %exitcond98.not = icmp eq i64 %iv.next2, %wide.trip.count97
  br i1 %exitcond98.not, label %for.end45, label %for.body11, !llvm.loop !215

for.end45:                                        ; preds = %for.inc43, %fill.exit
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %22, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %data50 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %73 = load double*, double** %data50, align 8, !tbaa !137
  %wide.trip.count = zext i32 %22 to i64
  %mallocsize51 = shl nuw nsw i64 %wide.trip.count, 3
  %malloccall52 = tail call noalias nonnull i8* @malloc(i64 %mallocsize51)
  %_malloccache53 = bitcast i8* %malloccall52 to double*
  %74 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 26
  %75 = bitcast double** %74 to i8**
  store i8* %malloccall52, i8** %75, align 8
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %iv11 = phi i64 [ %iv.next12, %for.body49 ], [ 0, %for.body49.lr.ph ]
  %iv.next12 = add nuw nsw i64 %iv11, 1
  %76 = mul nuw nsw i64 %iv11, 3
  %arrayidx55 = getelementptr inbounds double, double* %73, i64 %76
  %77 = load double, double* %arrayidx55, align 8, !tbaa !75
  %mul56 = fneg fast double %77
  store double %mul56, double* %arrayidx55, align 8, !tbaa !75
  %78 = getelementptr inbounds double, double* %_malloccache53, i64 %iv11
  store double %77, double* %78, align 8, !invariant.group !355
  %exitcond.not = icmp eq i64 %iv.next12, %wide.trip.count
  br i1 %exitcond.not, label %if.then61, label %for.body49, !llvm.loop !216

if.then61:                                        ; preds = %for.body49, %for.end45
  %_augmented39 = call { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } @augmented_apply_global_transform(%struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %positions, %struct.Matrix* %"positions'")
  %79 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 21
  store { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %_augmented39, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }* %79, align 8
  br i1 %cmp15.i, label %for.body.preheader.i28, label %delete_light_matrix_array.exit58

for.body.preheader.i28:                           ; preds = %if.then61
  %wide.trip.count.i27 = zext i32 %bone_count to i64
  %malloccall54 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %80 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 27
  %81 = bitcast i1** %80 to i8**
  store i8* %malloccall54, i8** %81, align 8
  br label %for.body.i31

for.body.i31:                                     ; preds = %for.body.i31, %for.body.preheader.i28
  %iv14 = phi i64 [ %iv.next15, %for.body.i31 ], [ 0, %for.body.preheader.i28 ]
  %iv.next15 = add nuw nsw i64 %iv14, 1
  %data.i30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %15, i64 %iv14, i32 2
  %82 = load double*, double** %data.i30, align 8, !tbaa !137
  %cmp1.not.i = icmp eq double* %82, null
  %83 = getelementptr inbounds i8, i8* %malloccall54, i64 %iv14
  %84 = bitcast i8* %83 to i1*
  store i1 %cmp1.not.i, i1* %84, align 1, !invariant.group !356
  %exitcond.not.i34 = icmp eq i64 %iv.next15, %wide.trip.count.i27
  br i1 %exitcond.not.i34, label %for.body.preheader.i37, label %for.body.i31, !llvm.loop !184

for.body.preheader.i37:                           ; preds = %for.body.i31
  %malloccall55 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %85 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 28
  %86 = bitcast i1** %85 to i8**
  store i8* %malloccall55, i8** %86, align 8
  br label %for.body.i41

for.body.i41:                                     ; preds = %for.body.i41, %for.body.preheader.i37
  %iv17 = phi i64 [ %iv.next18, %for.body.i41 ], [ 0, %for.body.preheader.i37 ]
  %iv.next18 = add nuw nsw i64 %iv17, 1
  %data.i39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %16, i64 %iv17, i32 2
  %87 = load double*, double** %data.i39, align 8, !tbaa !137
  %cmp1.not.i40 = icmp eq double* %87, null
  %88 = getelementptr inbounds i8, i8* %malloccall55, i64 %iv17
  %89 = bitcast i8* %88 to i1*
  store i1 %cmp1.not.i40, i1* %89, align 1, !invariant.group !357
  %exitcond.not.i44 = icmp eq i64 %iv.next18, %wide.trip.count.i27
  br i1 %exitcond.not.i44, label %for.body.preheader.i49, label %for.body.i41, !llvm.loop !184

for.body.preheader.i49:                           ; preds = %for.body.i41
  %malloccall56 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %90 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 29
  %91 = bitcast i1** %90 to i8**
  store i8* %malloccall56, i8** %91, align 8
  br label %for.body.i53

for.body.i53:                                     ; preds = %for.body.i53, %for.body.preheader.i49
  %iv20 = phi i64 [ %iv.next21, %for.body.i53 ], [ 0, %for.body.preheader.i49 ]
  %iv.next21 = add nuw nsw i64 %iv20, 1
  %data.i51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv20, i32 2
  %92 = load double*, double** %data.i51, align 8, !tbaa !137
  %cmp1.not.i52 = icmp eq double* %92, null
  %93 = getelementptr inbounds i8, i8* %malloccall56, i64 %iv20
  %94 = bitcast i8* %93 to i1*
  store i1 %cmp1.not.i52, i1* %94, align 1, !invariant.group !358
  %exitcond.not.i56 = icmp eq i64 %iv.next21, %wide.trip.count.i27
  br i1 %exitcond.not.i56, label %delete_light_matrix_array.exit58, label %for.body.i53, !llvm.loop !184

delete_light_matrix_array.exit58:                 ; preds = %for.body.i53, %if.then61
  %95 = load { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, align 8
  ret { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %95
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define internal fastcc void @diffe_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %positions, %struct.Matrix* nocapture %"positions'", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg) unnamed_addr #18 {
entry:
  %0 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 12
  %1 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 19
  %2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 20
  %3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 25
  %4 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 26
  %5 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 27
  %6 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 28
  %7 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 29
  %8 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 24
  %call.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 1
  %"call.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 0
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 5
  %"call.i3'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 4
  %call.i9 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 3
  %"call.i9'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 2
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %call.i359 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 9
  %"call.i359'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 8
  %call.i963 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 7
  %"call.i963'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 6
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %9 = phi i8* [ %"call.i9'mi", %get_matrix_array.exit6 ], [ %"call.i963'mi", %for.body.preheader.i11 ]
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %10 = phi i8* [ %"call.i3'mi", %get_matrix_array.exit6 ], [ %"call.i359'mi", %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %11 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc24" = bitcast i8* %10 to %struct.Matrix*
  %12 = bitcast i8* %call.i36064 to %struct.Matrix*
  %"'ipc27" = bitcast i8* %9 to %struct.Matrix*
  %13 = bitcast i8* %call.i966 to %struct.Matrix*
  %tapeArg26 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 11
  %tapeArg25 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 10
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64, !node !285
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %forward_mem.0 = phi i32 [ 15, %for.body.preheader ], [ %inc161, %for.body ]
  %forward_op.0 = phi i32 [ 3, %for.body.preheader ], [ %inc157, %for.body ]
  %iv = phi i64 [ 0, %for.body.preheader ], [ %iv.next, %for.body ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc157 = add i32 %forward_op.0, 1
  %inc161 = add i32 %forward_mem.0, 2
  %exitcond102.not = icmp eq i64 %iv.next, %wide.trip.count101
  br i1 %exitcond102.not, label %for.end, label %for.body, !llvm.loop !212

for.end:                                          ; preds = %for.body, %get_matrix_array.exit12
  %forward_mem.1 = phi i32 [ 15, %get_matrix_array.exit12 ], [ %inc161, %for.body ]
  %forward_op.1 = phi i32 [ 1, %get_matrix_array.exit12 ], [ %inc157, %for.body ]
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1, !node !285
  %inc163 = add i32 %forward_mem.1, 1
  %14 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %mul.i13 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 22
  %mul3.i = mul i32 %14, 3, !node !285
  %inc165 = add i32 %forward_op.1, 1
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.end.i

if.end.i:                                         ; preds = %for.end
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread69

resize.exit.thread:                               ; preds = %if.end.i
  %inc167 = add i32 %forward_op.1, 2
  br label %for.body.lr.ph.i

resize.exit.thread69:                             ; preds = %if.end.i
  %inc169 = add i32 %forward_mem.1, 2
  br label %fill.exit

resize.exit:                                      ; preds = %for.end
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  %inc171 = add i32 %forward_mem.1, 2
  br i1 %cmp7.i, label %for.body.lr.ph.i, label %fill.exit

for.body.lr.ph.i:                                 ; preds = %resize.exit, %resize.exit.thread
  %forward_mem.2 = phi i32 [ %inc163, %resize.exit.thread ], [ %inc171, %resize.exit ]
  %forward_op.2 = phi i32 [ %inc167, %resize.exit.thread ], [ %inc165, %resize.exit ]
  %inc173 = add i32 %forward_mem.2, 1
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread69
  %_cache.0 = phi i8 [ 0, %for.body.lr.ph.i ], [ 1, %resize.exit ], [ 2, %resize.exit.thread69 ]
  %forward_mem.3 = phi i32 [ %inc173, %for.body.lr.ph.i ], [ %inc171, %resize.exit ], [ %inc169, %resize.exit.thread69 ]
  %forward_op.3 = phi i32 [ %forward_op.2, %for.body.lr.ph.i ], [ %inc165, %resize.exit ], [ %inc165, %resize.exit.thread69 ]
  %call.i16 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 18
  %"call.i16'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 17
  %"'ipc41" = bitcast i8* %"call.i16'mi" to %struct.Matrix*
  %15 = bitcast i8* %call.i16 to %struct.Matrix*
  %inc177 = add i32 %forward_op.3, 2
  %call4.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 16
  %"call4.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 15
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %14, 0
  %wide.trip.count97 = zext i32 %bone_count to i64, !node !285
  %wide.trip.count93 = zext i32 %14 to i64, !node !285
  %inc193 = add i32 %forward_op.3, 10
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %forward_mem.4 = phi i32 [ %forward_mem.3, %for.body11.lr.ph ], [ %forward_mem.7, %for.inc43 ]
  %forward_op.4 = phi i32 [ %inc193, %for.body11.lr.ph ], [ %forward_op.7, %for.inc43 ]
  %iv1 = phi i64 [ 0, %for.body11.lr.ph ], [ %iv.next2, %for.inc43 ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %inc195 = add i32 %forward_op.4, 1
  %inc199 = add i32 %forward_mem.4, 2
  br i1 %cmp1674, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %inc209 = add i32 %forward_mem.4, 7
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %forward_mem.5 = phi i32 [ %inc209, %for.cond18.preheader.lr.ph ], [ %inc235.lcssa, %for.inc40 ]
  %forward_op.5 = phi i32 [ %inc195, %for.cond18.preheader.lr.ph ], [ %inc249.lcssa, %for.inc40 ]
  %iv6 = phi i64 [ 0, %for.cond18.preheader.lr.ph ], [ %iv.next7, %for.inc40 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc215 = add i32 %forward_op.5, 3
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %forward_mem.6 = phi i32 [ %forward_mem.5, %for.cond18.preheader ], [ %inc235, %for.body20 ]
  %forward_op.6 = phi i32 [ %inc215, %for.cond18.preheader ], [ %inc249, %for.body20 ]
  %iv8 = phi i64 [ 0, %for.cond18.preheader ], [ %iv.next9, %for.body20 ]
  %iv.next9 = add nuw nsw i64 %iv8, 1
  %inc235 = add i32 %forward_mem.6, 2
  %inc249 = add i32 %forward_op.6, 15
  %exitcond86.not = icmp eq i64 %iv.next9, 3
  br i1 %exitcond86.not, label %for.inc40, label %for.body20, !llvm.loop !213

for.inc40:                                        ; preds = %for.body20
  %inc235.lcssa = phi i32 [ %inc235, %for.body20 ]
  %inc249.lcssa = phi i32 [ %inc249, %for.body20 ]
  %exitcond94.not = icmp eq i64 %iv.next7, %wide.trip.count93
  br i1 %exitcond94.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !214

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %forward_mem.7 = phi i32 [ %inc199, %for.body11 ], [ %inc235.lcssa, %for.inc40 ]
  %forward_op.7 = phi i32 [ %inc195, %for.body11 ], [ %inc249.lcssa, %for.inc40 ]
  %exitcond98.not = icmp eq i64 %iv.next2, %wide.trip.count97
  br i1 %exitcond98.not, label %for.end45, label %for.body11, !llvm.loop !215

for.end45:                                        ; preds = %for.inc43, %fill.exit
  %forward_mem.8 = phi i32 [ %forward_mem.3, %fill.exit ], [ %forward_mem.7, %for.inc43 ]
  %forward_op.8 = phi i32 [ %inc177, %fill.exit ], [ %forward_op.7, %for.inc43 ]
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %14, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  %inc251 = add i32 %forward_op.8, 1
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %inc253 = add i32 %forward_mem.8, 1
  %wide.trip.count = zext i32 %14 to i64, !node !285
  %inc257 = add i32 %forward_op.8, 3
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %forward_mem.9 = phi i32 [ %inc253, %for.body49.lr.ph ], [ %inc265, %for.body49 ]
  %forward_op.9 = phi i32 [ %inc257, %for.body49.lr.ph ], [ %inc261, %for.body49 ]
  %iv11 = phi i64 [ 0, %for.body49.lr.ph ], [ %iv.next12, %for.body49 ]
  %iv.next12 = add nuw nsw i64 %iv11, 1
  %inc261 = add i32 %forward_op.9, 2
  %inc265 = add i32 %forward_mem.9, 2
  %exitcond.not = icmp eq i64 %iv.next12, %wide.trip.count
  br i1 %exitcond.not, label %if.then61, label %for.body49, !llvm.loop !216

if.then61:                                        ; preds = %for.body49, %for.end45
  %forward_mem.10 = phi i32 [ %forward_mem.8, %for.end45 ], [ %inc265, %for.body49 ]
  %forward_op.10 = phi i32 [ %inc251, %for.end45 ], [ %inc261, %for.body49 ]
  %tapeArg85 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 21
  %inc267 = add i32 %forward_mem.10, 1
  br i1 %cmp15.i, label %for.body.preheader.i28, label %invertdelete_light_matrix_array.exit58

for.body.preheader.i28:                           ; preds = %if.then61
  %wide.trip.count.i27 = zext i32 %bone_count to i64, !node !285
  %inc271 = add i32 %forward_op.10, 2
  br label %for.body.i31

for.body.i31:                                     ; preds = %for.body.i31, %for.body.preheader.i28
  %forward_mem.11 = phi i32 [ %inc267, %for.body.preheader.i28 ], [ %inc277, %for.body.i31 ]
  %forward_op.11 = phi i32 [ %inc271, %for.body.preheader.i28 ], [ %inc273, %for.body.i31 ]
  %iv14 = phi i64 [ 0, %for.body.preheader.i28 ], [ %iv.next15, %for.body.i31 ]
  %iv.next15 = add nuw nsw i64 %iv14, 1
  %inc273 = add i32 %forward_op.11, 1
  %inc277 = add i32 %forward_mem.11, 2
  %exitcond.not.i34 = icmp eq i64 %iv.next15, %wide.trip.count.i27
  br i1 %exitcond.not.i34, label %for.body.preheader.i37, label %for.body.i31, !llvm.loop !184

for.body.preheader.i37:                           ; preds = %for.body.i31
  %forward_op.11.lcssa = phi i32 [ %forward_op.11, %for.body.i31 ]
  %inc277.lcssa = phi i32 [ %inc277, %for.body.i31 ]
  %inc281 = add i32 %forward_op.11.lcssa, 3
  br label %for.body.i41

for.body.i41:                                     ; preds = %for.body.i41, %for.body.preheader.i37
  %forward_mem.12 = phi i32 [ %inc277.lcssa, %for.body.preheader.i37 ], [ %inc287, %for.body.i41 ]
  %forward_op.12 = phi i32 [ %inc281, %for.body.preheader.i37 ], [ %inc283, %for.body.i41 ]
  %iv17 = phi i64 [ 0, %for.body.preheader.i37 ], [ %iv.next18, %for.body.i41 ]
  %iv.next18 = add nuw nsw i64 %iv17, 1
  %inc283 = add i32 %forward_op.12, 1
  %inc287 = add i32 %forward_mem.12, 2
  %exitcond.not.i44 = icmp eq i64 %iv.next18, %wide.trip.count.i27
  br i1 %exitcond.not.i44, label %for.body.preheader.i49, label %for.body.i41, !llvm.loop !184

for.body.preheader.i49:                           ; preds = %for.body.i41
  %forward_op.12.lcssa = phi i32 [ %forward_op.12, %for.body.i41 ]
  %inc287.lcssa = phi i32 [ %inc287, %for.body.i41 ]
  %inc291 = add i32 %forward_op.12.lcssa, 3
  br label %for.body.i53

for.body.i53:                                     ; preds = %for.body.i53, %for.body.preheader.i49
  %forward_mem.13 = phi i32 [ %inc287.lcssa, %for.body.preheader.i49 ], [ %inc297, %for.body.i53 ]
  %forward_op.13 = phi i32 [ %inc291, %for.body.preheader.i49 ], [ %inc293, %for.body.i53 ]
  %iv20 = phi i64 [ 0, %for.body.preheader.i49 ], [ %iv.next21, %for.body.i53 ]
  %iv.next21 = add nuw nsw i64 %iv20, 1
  %inc293 = add i32 %forward_op.13, 1
  %inc297 = add i32 %forward_mem.13, 2
  %exitcond.not.i56 = icmp eq i64 %iv.next21, %wide.trip.count.i27
  br i1 %exitcond.not.i56, label %invertdelete_light_matrix_array.exit58, label %for.body.i53, !llvm.loop !184

invertentry:                                      ; preds = %invertfor.body.preheader.i11, %invertget_matrix_array.exit6
  tail call void @free(i8* nonnull %"call.i'mi")
  tail call void @free(i8* %call.i)
  %16 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.14, i32 %reverse_op.0, i32 %forward_mem.14, i32 %reverse_mem.0)
  ret void

invertget_matrix_array.exit6:                     ; preds = %invertget_matrix_array.exit12
  %"call.i9'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 2
  tail call void @free(i8* nonnull %"call.i9'mi_unwrap")
  %call.i9_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 3
  tail call void @free(i8* %call.i9_unwrap)
  %"call.i3'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 4
  tail call void @free(i8* nonnull %"call.i3'mi_unwrap")
  %call.i3_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 5
  tail call void @free(i8* %call.i3_unwrap)
  br label %invertentry

invertfor.body.preheader.i11:                     ; preds = %invertget_matrix_array.exit12
  %"call.i963'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 6
  tail call void @free(i8* nonnull %"call.i963'mi_unwrap")
  %call.i963_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 7
  tail call void @free(i8* %call.i963_unwrap)
  %"call.i359'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 8
  tail call void @free(i8* nonnull %"call.i359'mi_unwrap")
  %call.i359_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 9
  tail call void @free(i8* %call.i359_unwrap)
  br label %invertentry

invertget_matrix_array.exit12:                    ; preds = %invertfor.end, %invertfor.body.preheader
  %reverse_mem.0 = phi i32 [ %inc305, %invertfor.body.preheader ], [ %inc337, %invertfor.end ]
  %reverse_op.0 = phi i32 [ %inc325.lcssa, %invertfor.body.preheader ], [ %reverse_op.2, %invertfor.end ]
  call void @differelatives_to_absolutes(i32 %bone_count, %struct.Matrix* %11, %struct.Matrix* %"'ipc", i32* %parents, %struct.Matrix* %12, %struct.Matrix* %"'ipc24", { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg25), !node !285
  call void @diffeget_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %11, %struct.Matrix* %"'ipc", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg26), !node !285
  br i1 %cmp15.i, label %invertfor.body.preheader.i11, label %invertget_matrix_array.exit6

invertfor.body.preheader:                         ; preds = %invertfor.body
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.body ]
  %inc325.lcssa = phi i32 [ %inc325, %invertfor.body ]
  %inc305 = add i32 %reverse_mem.1.lcssa, 11
  %17 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0 to i8*
  tail call void @free(i8* nonnull %17)
  br label %invertget_matrix_array.exit12

invertfor.body:                                   ; preds = %mergeinvertfor.body_for.end.loopexit, %incinvertfor.body
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count101_unwrap, %mergeinvertfor.body_for.end.loopexit ], [ %"iv'ac.0", %incinvertfor.body ]
  %reverse_mem.1 = phi i32 [ %inc335, %mergeinvertfor.body_for.end.loopexit ], [ %inc331, %incinvertfor.body ]
  %reverse_op.1.in = phi i32 [ %reverse_op.2, %mergeinvertfor.body_for.end.loopexit ], [ %inc325, %incinvertfor.body ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %arrayidx_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %12, i64 %"iv'ac.0", !node !285
  %"arrayidx'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc24", i64 %"iv'ac.0", !node !285
  %arrayidx4_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %"iv'ac.0", !node !285
  %arrayidx6_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %13, i64 %"iv'ac.0", !node !285
  %"arrayidx6'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc27", i64 %"iv'ac.0", !node !285
  %_unwrap29 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 %"iv'ac.0", !node !285
  %tapeArg28_unwrap = load { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_unwrap29, align 8, !invariant.group !359, !node !285
  call void @diffemat_mult.10(%struct.Matrix* %arrayidx_unwrap, %struct.Matrix* %"arrayidx'ipg_unwrap", %struct.Matrix* %arrayidx4_unwrap, %struct.Matrix* %arrayidx6_unwrap, %struct.Matrix* %"arrayidx6'ipg_unwrap", { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg28_unwrap), !node !285
  %18 = icmp eq i64 %"iv'ac.0", 0
  %inc325 = add i32 %reverse_op.1.in, 2
  br i1 %18, label %invertfor.body.preheader, label %incinvertfor.body

incinvertfor.body:                                ; preds = %invertfor.body
  %inc331 = add i32 %reverse_mem.1, 11
  br label %invertfor.body

mergeinvertfor.body_for.end.loopexit:             ; preds = %invertfor.end
  %wide.trip.count101_unwrap = zext i32 %bone_count to i64, !node !285
  %inc335 = add i32 %reverse_mem.2, 2
  br label %invertfor.body

invertfor.end:                                    ; preds = %invertfill.exit, %invertresize.exit.thread
  br i1 %cmp15.i, label %mergeinvertfor.body_for.end.loopexit, label %invertget_matrix_array.exit12

invertresize.exit.thread:                         ; preds = %invertfill.exit
  %"call.i14'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 13
  tail call void @free(i8* nonnull %"call.i14'mi_unwrap")
  %call.i14_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }*, double**, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* }, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 14
  tail call void @free(i8* %call.i14_unwrap)
  br label %invertfor.end

invertfill.exit:                                  ; preds = %invertfor.end45, %invertfor.body11.lr.ph
  %reverse_mem.2 = phi i32 [ %inc365, %invertfor.body11.lr.ph ], [ %reverse_mem.7, %invertfor.end45 ]
  %reverse_op.2 = phi i32 [ %inc379.lcssa, %invertfor.body11.lr.ph ], [ %reverse_op.7, %invertfor.end45 ]
  tail call void @free(i8* nonnull %"call4.i'mi")
  tail call void @free(i8* %call4.i)
  tail call void @free(i8* nonnull %"call.i16'mi")
  tail call void @free(i8* %call.i16)
  %inc337 = add i32 %reverse_mem.2, 1
  %cond = icmp eq i8 %_cache.0, 0
  %cond.not = xor i1 %cond, true
  %brmerge = or i1 %cond.not, %cmp.not.i
  br i1 %brmerge, label %invertfor.end, label %invertresize.exit.thread

invertfor.body11.lr.ph:                           ; preds = %invertfor.body11
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body11 ]
  %inc379.lcssa = phi i32 [ %inc379, %invertfor.body11 ]
  %19 = bitcast { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %1 to i8*
  tail call void @free(i8* nonnull %19)
  %20 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %20)
  %21 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %21)
  %inc365 = add i32 %reverse_mem.3.lcssa, 20
  %22 = bitcast i32* %8 to i8*
  tail call void @free(i8* nonnull %22)
  br label %invertfill.exit

invertfor.body11:                                 ; preds = %invertfor.inc43, %invertfor.cond18.preheader.lr.ph
  %reverse_mem.3 = phi i32 [ %inc387, %invertfor.cond18.preheader.lr.ph ], [ %inc545, %invertfor.inc43 ]
  %reverse_op.3 = phi i32 [ %inc389, %invertfor.cond18.preheader.lr.ph ], [ %reverse_op.6, %invertfor.inc43 ]
  %arrayidx13_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %13, i64 %"iv1'ac.0", !node !285
  %"arrayidx13'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc27", i64 %"iv1'ac.0", !node !285
  %_unwrap46 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %1, i64 %"iv1'ac.0", !node !285
  %tapeArg42_unwrap = load { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** }* %_unwrap46, align 64, !invariant.group !360, !node !285
  call void @diffemat_mult.11(%struct.Matrix* %arrayidx13_unwrap, %struct.Matrix* %"arrayidx13'ipg_unwrap", %struct.Matrix* %base_positions, %struct.Matrix* %15, %struct.Matrix* %"'ipc41", { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg42_unwrap), !node !285
  %23 = icmp eq i64 %"iv1'ac.0", 0
  %inc379 = add i32 %reverse_op.3, 1
  br i1 %23, label %invertfor.body11.lr.ph, label %incinvertfor.body11

incinvertfor.body11:                              ; preds = %invertfor.body11
  %inc381 = add i32 %reverse_mem.3, 7
  br label %invertfor.inc43

invertfor.cond18.preheader.lr.ph:                 ; preds = %invertfor.cond18.preheader
  %reverse_mem.4.in.lcssa.lcssa = phi i32 [ %reverse_mem.4.in.lcssa, %invertfor.cond18.preheader ]
  %reverse_op.4.lcssa.lcssa = phi i32 [ %reverse_op.4.lcssa, %invertfor.cond18.preheader ]
  %inc389 = add i32 %reverse_op.4.lcssa.lcssa, 26
  %inc387 = add i32 %reverse_mem.4.in.lcssa.lcssa, 44
  br label %invertfor.body11

invertfor.cond18.preheader:                       ; preds = %invertfor.body20
  %reverse_mem.4.in.lcssa = phi i32 [ %reverse_mem.4.in, %invertfor.body20 ]
  %reverse_op.4.lcssa = phi i32 [ %reverse_op.4, %invertfor.body20 ]
  %24 = icmp eq i64 %"iv6'ac.1", 0
  br i1 %24, label %invertfor.cond18.preheader.lr.ph, label %incinvertfor.cond18.preheader

incinvertfor.cond18.preheader:                    ; preds = %invertfor.cond18.preheader
  %inc393 = add i32 %reverse_op.4.lcssa, 27
  %inc395 = add i32 %reverse_mem.4.in.lcssa, 46
  br label %invertfor.inc40

invertfor.body20:                                 ; preds = %invertfor.inc40, %incinvertfor.body20
  %"iv8'ac.1" = phi i64 [ 2, %invertfor.inc40 ], [ %36, %incinvertfor.body20 ]
  %reverse_mem.4.in = phi i32 [ %reverse_mem.5, %invertfor.inc40 ], [ %inc531, %incinvertfor.body20 ]
  %reverse_op.4 = phi i32 [ %reverse_op.5, %invertfor.inc40 ], [ %inc533, %incinvertfor.body20 ]
  %"data30'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2, !node !285
  %"'ipl_unwrap" = load double*, double** %"data30'ipg_unwrap", align 8, !invariant.group !361, !node !285
  %_unwrap56 = mul nuw nsw i64 %"iv6'ac.1", 3, !node !285
  %_unwrap57 = add nuw nsw i64 %"iv8'ac.1", %_unwrap56, !node !285
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap57, !node !285
  %25 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !node !285
  %_unwrap62 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count93_unwrap = zext i32 %_unwrap62 to i64, !node !285
  %26 = mul nuw nsw i64 %wide.trip.count93_unwrap, 3, !node !285
  %27 = mul nuw nsw i64 %"iv1'ac.0", %26, !node !285
  %28 = add nuw nsw i64 %_unwrap57, %27, !node !285
  %29 = getelementptr inbounds double, double* %3, i64 %28, !node !285
  %30 = load double, double* %29, align 8, !invariant.group !362, !node !285
  %m1diffe = fmul fast double %25, %30, !node !285
  %_unwrap66 = getelementptr inbounds double*, double** %2, i64 %"iv1'ac.0", !node !285
  %"'il_phi3_unwrap" = load double*, double** %_unwrap66, align 8, !invariant.group !363, !node !285
  %31 = getelementptr inbounds i32, i32* %8, i64 %"iv1'ac.0", !node !285
  %32 = load i32, i32* %31, align 4, !invariant.group !364, !node !285
  %_unwrap72 = sext i32 %32 to i64, !node !285
  %_unwrap73 = mul nsw i64 %"iv6'ac.1", %_unwrap72, !node !285
  %_unwrap74 = add nsw i64 %_unwrap73, %"iv8'ac.1", !node !285
  %"arrayidx22'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap74, !node !285
  %33 = load double, double* %"arrayidx22'ipg_unwrap", align 8, !node !285
  %34 = fadd fast double %33, %m1diffe, !node !285
  store double %34, double* %"arrayidx22'ipg_unwrap", align 8
  %35 = icmp eq i64 %"iv8'ac.1", 0
  br i1 %35, label %invertfor.cond18.preheader, label %incinvertfor.body20

incinvertfor.body20:                              ; preds = %invertfor.body20
  %inc531 = add i32 %reverse_mem.4.in, 44
  %36 = add nsw i64 %"iv8'ac.1", -1
  %inc533 = add i32 %reverse_op.4, 26
  br label %invertfor.body20

invertfor.inc40:                                  ; preds = %mergeinvertfor.cond18.preheader_for.inc43.loopexit, %incinvertfor.cond18.preheader
  %"iv6'ac.1.in" = phi i64 [ %wide.trip.count93_unwrap76, %mergeinvertfor.cond18.preheader_for.inc43.loopexit ], [ %"iv6'ac.1", %incinvertfor.cond18.preheader ]
  %reverse_mem.5 = phi i32 [ %inc543, %mergeinvertfor.cond18.preheader_for.inc43.loopexit ], [ %inc395, %incinvertfor.cond18.preheader ]
  %reverse_op.5 = phi i32 [ %inc541, %mergeinvertfor.cond18.preheader_for.inc43.loopexit ], [ %inc393, %incinvertfor.cond18.preheader ]
  %"iv6'ac.1" = add nsw i64 %"iv6'ac.1.in", -1
  br label %invertfor.body20

mergeinvertfor.cond18.preheader_for.inc43.loopexit: ; preds = %invertfor.inc43
  %inc541 = add i32 %reverse_op.6.in, 2
  %wide.trip.count93_unwrap76 = zext i32 %14 to i64, !node !285
  %inc543 = add i32 %reverse_mem.6.in, 4
  br label %invertfor.inc40

invertfor.inc43:                                  ; preds = %mergeinvertfor.body11_for.end45.loopexit, %incinvertfor.body11
  %"iv1'ac.0.in" = phi i64 [ %wide.trip.count97_unwrap78, %mergeinvertfor.body11_for.end45.loopexit ], [ %"iv1'ac.0", %incinvertfor.body11 ]
  %reverse_mem.6.in = phi i32 [ %reverse_mem.7, %mergeinvertfor.body11_for.end45.loopexit ], [ %inc381, %incinvertfor.body11 ]
  %reverse_op.6.in = phi i32 [ %reverse_op.7, %mergeinvertfor.body11_for.end45.loopexit ], [ %inc379, %incinvertfor.body11 ]
  %reverse_op.6 = add i32 %reverse_op.6.in, 1
  %"iv1'ac.0" = add nsw i64 %"iv1'ac.0.in", -1
  %inc545 = add i32 %reverse_mem.6.in, 2
  br i1 %cmp4871, label %mergeinvertfor.cond18.preheader_for.inc43.loopexit, label %invertfor.body11

mergeinvertfor.body11_for.end45.loopexit:         ; preds = %invertfor.end45
  %wide.trip.count97_unwrap78 = zext i32 %bone_count to i64, !node !285
  br label %invertfor.inc43

invertfor.end45:                                  ; preds = %invertdelete_matrix.exit, %invertfor.body49.lr.ph
  %reverse_mem.7 = phi i32 [ %inc553, %invertfor.body49.lr.ph ], [ %reverse_mem.9, %invertdelete_matrix.exit ]
  %reverse_op.7 = phi i32 [ %inc593.lcssa, %invertfor.body49.lr.ph ], [ %reverse_op.9, %invertdelete_matrix.exit ]
  br i1 %cmp15.i, label %mergeinvertfor.body11_for.end45.loopexit, label %invertfill.exit

invertfor.body49.lr.ph:                           ; preds = %invertfor.body49
  %reverse_mem.8.in.lcssa = phi i32 [ %reverse_mem.8.in, %invertfor.body49 ]
  %inc593.lcssa = phi i32 [ %inc593, %invertfor.body49 ]
  %inc553 = add i32 %reverse_mem.8.in.lcssa, 18
  %37 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %37)
  br label %invertfor.end45

invertfor.body49:                                 ; preds = %mergeinvertfor.body49_if.then61.loopexit, %incinvertfor.body49
  %"iv11'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %mergeinvertfor.body49_if.then61.loopexit ], [ %"iv11'ac.0", %incinvertfor.body49 ]
  %reverse_mem.8.in = phi i32 [ %reverse_mem.9, %mergeinvertfor.body49_if.then61.loopexit ], [ %inc595, %incinvertfor.body49 ]
  %reverse_op.8.in = phi i32 [ %reverse_op.9, %mergeinvertfor.body49_if.then61.loopexit ], [ %inc593, %incinvertfor.body49 ]
  %"iv11'ac.0" = add nsw i64 %"iv11'ac.0.in", -1
  %"data50'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2, !node !285
  %"'ipl80_unwrap" = load double*, double** %"data50'ipg_unwrap", align 8, !invariant.group !365, !node !285
  %_unwrap82 = mul nuw nsw i64 %"iv11'ac.0", 3, !node !285
  %"arrayidx55'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl80_unwrap", i64 %_unwrap82, !node !285
  %38 = load double, double* %"arrayidx55'ipg_unwrap", align 8, !node !285
  %39 = fneg fast double %38, !node !285
  store double %39, double* %"arrayidx55'ipg_unwrap", align 8
  %40 = icmp eq i64 %"iv11'ac.0", 0
  %inc593 = add i32 %reverse_op.8.in, 6
  br i1 %40, label %invertfor.body49.lr.ph, label %incinvertfor.body49

incinvertfor.body49:                              ; preds = %invertfor.body49
  %inc595 = add i32 %reverse_mem.8.in, 17
  br label %invertfor.body49

mergeinvertfor.body49_if.then61.loopexit:         ; preds = %invertdelete_matrix.exit
  %wide.trip.count_unwrap = zext i32 %14 to i64, !node !285
  br label %invertfor.body49

invertdelete_matrix.exit:                         ; preds = %invertdelete_light_matrix_array.exit58, %invertfor.body.preheader.i28
  %reverse_mem.9 = phi i32 [ %inc609, %invertfor.body.preheader.i28 ], [ 0, %invertdelete_light_matrix_array.exit58 ]
  %reverse_op.9 = phi i32 [ %inc613, %invertfor.body.preheader.i28 ], [ 0, %invertdelete_light_matrix_array.exit58 ]
  call void @diffeapply_global_transform(%struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %positions, %struct.Matrix* %"positions'", { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg85), !node !285
  br i1 %or.cond, label %mergeinvertfor.body49_if.then61.loopexit, label %invertfor.end45

invertfor.body.preheader.i28:                     ; preds = %invertfor.inc.i
  %reverse_mem.10.lcssa = phi i32 [ %reverse_mem.10, %invertfor.inc.i ]
  %reverse_op.10.lcssa = phi i32 [ %reverse_op.10, %invertfor.inc.i ]
  %inc613 = add i32 %reverse_op.10.lcssa, 3
  %inc609 = add i32 %reverse_mem.10.lcssa, 7
  %41 = bitcast i1* %5 to i8*
  tail call void @free(i8* nonnull %41)
  br label %invertdelete_matrix.exit

incinvertfor.body.i31:                            ; preds = %invertfor.inc.i
  %42 = add nsw i64 %"iv14'ac.0", -1, !node !285
  %inc617 = add i32 %reverse_op.10, 4
  %inc619 = add i32 %reverse_mem.10, 6
  br label %invertfor.inc.i

invertfor.inc.i:                                  ; preds = %invertfor.body.preheader.i37, %incinvertfor.body.i31
  %"iv14'ac.0" = phi i64 [ %_unwrap109, %invertfor.body.preheader.i37 ], [ %42, %incinvertfor.body.i31 ]
  %reverse_mem.10 = phi i32 [ %inc639, %invertfor.body.preheader.i37 ], [ %inc619, %incinvertfor.body.i31 ]
  %reverse_op.10 = phi i32 [ %inc631, %invertfor.body.preheader.i37 ], [ %inc617, %incinvertfor.body.i31 ]
  %43 = icmp eq i64 %"iv14'ac.0", 0
  br i1 %43, label %invertfor.body.preheader.i28, label %incinvertfor.body.i31

invertfor.body.preheader.i37:                     ; preds = %invertfor.inc.i45
  %reverse_mem.11.lcssa = phi i32 [ %reverse_mem.11, %invertfor.inc.i45 ]
  %reverse_op.11.in.lcssa = phi i32 [ %reverse_op.11.in, %invertfor.inc.i45 ]
  %44 = bitcast i1* %6 to i8*
  tail call void @free(i8* nonnull %44)
  %inc631 = add i32 %reverse_op.11.in.lcssa, 8
  %inc639 = add i32 %reverse_mem.11.lcssa, 8
  br label %invertfor.inc.i

incinvertfor.body.i41:                            ; preds = %invertfor.inc.i45
  %45 = add nsw i64 %"iv17'ac.0", -1, !node !285
  %inc649 = add i32 %reverse_mem.11, 6
  br label %invertfor.inc.i45

invertfor.inc.i45:                                ; preds = %invertfor.body.preheader.i49, %incinvertfor.body.i41
  %"iv17'ac.0" = phi i64 [ %_unwrap109, %invertfor.body.preheader.i49 ], [ %45, %incinvertfor.body.i41 ]
  %reverse_mem.11 = phi i32 [ %inc669, %invertfor.body.preheader.i49 ], [ %inc649, %incinvertfor.body.i41 ]
  %reverse_op.11.in = phi i32 [ %reverse_op.12.lcssa, %invertfor.body.preheader.i49 ], [ %reverse_op.11, %incinvertfor.body.i41 ]
  %reverse_op.11 = add i32 %reverse_op.11.in, 4
  %46 = icmp eq i64 %"iv17'ac.0", 0
  br i1 %46, label %invertfor.body.preheader.i37, label %incinvertfor.body.i41

invertfor.body.preheader.i49:                     ; preds = %invertfor.inc.i57
  %reverse_mem.12.lcssa = phi i32 [ %reverse_mem.12, %invertfor.inc.i57 ]
  %reverse_op.12.lcssa = phi i32 [ %reverse_op.12, %invertfor.inc.i57 ]
  %47 = bitcast i1* %7 to i8*
  tail call void @free(i8* nonnull %47)
  %inc669 = add i32 %reverse_mem.12.lcssa, 8
  br label %invertfor.inc.i45

incinvertfor.body.i53:                            ; preds = %invertfor.inc.i57
  %48 = add nsw i64 %"iv20'ac.0", -1, !node !285
  %inc677 = add i32 %reverse_op.12, 4
  %inc679 = add i32 %reverse_mem.12, 6
  br label %invertfor.inc.i57

invertfor.inc.i57:                                ; preds = %invertdelete_light_matrix_array.exit58.loopexit, %incinvertfor.body.i53
  %"iv20'ac.0" = phi i64 [ %_unwrap109, %invertdelete_light_matrix_array.exit58.loopexit ], [ %48, %incinvertfor.body.i53 ]
  %reverse_mem.12 = phi i32 [ 1, %invertdelete_light_matrix_array.exit58.loopexit ], [ %inc679, %incinvertfor.body.i53 ]
  %reverse_op.12 = phi i32 [ 1, %invertdelete_light_matrix_array.exit58.loopexit ], [ %inc677, %incinvertfor.body.i53 ]
  %49 = icmp eq i64 %"iv20'ac.0", 0
  br i1 %49, label %invertfor.body.preheader.i49, label %incinvertfor.body.i53

invertdelete_light_matrix_array.exit58.loopexit:  ; preds = %invertdelete_light_matrix_array.exit58
  %wide.trip.count.i27_unwrap108 = zext i32 %bone_count to i64, !node !285
  %_unwrap109 = add nsw i64 %wide.trip.count.i27_unwrap108, -1, !node !285
  br label %invertfor.inc.i57

invertdelete_light_matrix_array.exit58:           ; preds = %for.body.i53, %if.then61
  %forward_mem.14 = phi i32 [ %inc267, %if.then61 ], [ %inc297, %for.body.i53 ]
  %forward_op.14 = phi i32 [ %forward_op.10, %if.then61 ], [ %inc293, %for.body.i53 ]
  br i1 %cmp15.i, label %invertdelete_light_matrix_array.exit58.loopexit, label %invertdelete_matrix.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @differelatives_to_absolutes(i32 %count, %struct.Matrix* nocapture readonly %relatives, %struct.Matrix* nocapture %"relatives'", i32* nocapture readonly %parents, %struct.Matrix* nocapture %absolutes, %struct.Matrix* nocapture %"absolutes'", { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 0
  %1 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 1
  %2 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 2
  %3 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 3
  %4 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 6
  %5 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 4
  %6 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg, 5
  %cmp26 = icmp sgt i32 %count, 0
  br i1 %cmp26, label %for.body.preheader, label %invertfor.end

for.body.preheader:                               ; preds = %entry
  %wide.trip.count = zext i32 %count to i64, !node !285
  br label %for.body

for.body:                                         ; preds = %for.inc, %for.body.preheader
  %forward_mem.0 = phi i32 [ 8, %for.body.preheader ], [ %forward_mem.1, %for.inc ]
  %forward_op.0 = phi i32 [ 4, %for.body.preheader ], [ %forward_op.2, %for.inc ]
  %iv = phi i64 [ 0, %for.body.preheader ], [ %iv.next, %for.inc ]
  %iv.next = add nuw nsw i64 %iv, 1
  %7 = getelementptr inbounds i32, i32* %5, i64 %iv
  %8 = load i32, i32* %7, align 4, !invariant.group !366
  %cmp1 = icmp eq i32 %8, -1
  br i1 %cmp1, label %if.end.i, label %if.else

if.end.i:                                         ; preds = %for.body
  %9 = getelementptr inbounds i32, i32* %4, i64 %iv
  %mul.i = load i32, i32* %9, align 4, !invariant.group !367
  %inc87 = add i32 %forward_op.0, 2
  %inc95 = add i32 %forward_mem.0, 10
  %cmp1131.i = icmp sgt i32 %mul.i, 0
  br i1 %cmp1131.i, label %for.body.lr.ph.i, label %for.inc

for.body.lr.ph.i:                                 ; preds = %if.end.i
  %inc99 = add i32 %forward_mem.0, 12
  %wide.trip.count.i = zext i32 %mul.i to i64
  %inc101 = add i32 %forward_op.0, 3
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %for.body.lr.ph.i
  %forward_op.1 = phi i32 [ %inc101, %for.body.lr.ph.i ], [ %inc103, %for.body.i ]
  %iv2 = phi i64 [ 0, %for.body.lr.ph.i ], [ %iv.next3, %for.body.i ]
  %iv.next3 = add nuw nsw i64 %iv2, 1
  %inc103 = add i32 %forward_op.1, 1
  %exitcond.not.i = icmp eq i64 %iv.next3, %wide.trip.count.i
  br i1 %exitcond.not.i, label %for.inc, label %for.body.i, !llvm.loop !193

if.else:                                          ; preds = %for.body
  %inc73 = add i32 %forward_op.0, 1
  %inc107 = add i32 %forward_mem.0, 4
  br label %for.inc

for.inc:                                          ; preds = %if.else, %for.body.i, %if.end.i
  %forward_mem.1 = phi i32 [ %inc95, %if.end.i ], [ %inc107, %if.else ], [ %inc99, %for.body.i ]
  %forward_op.2 = phi i32 [ %inc87, %if.end.i ], [ %inc73, %if.else ], [ %inc103, %for.body.i ]
  %exitcond.not = icmp eq i64 %iv.next, %wide.trip.count
  br i1 %exitcond.not, label %invertfor.end, label %for.body, !llvm.loop !199

invertentry:                                      ; preds = %invertfor.end, %invertfor.body.preheader
  %reverse_mem.0 = phi i32 [ %inc145, %invertfor.body.preheader ], [ 0, %invertfor.end ]
  %reverse_op.0 = phi i32 [ %inc149, %invertfor.body.preheader ], [ 0, %invertfor.end ]
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.3, i32 %reverse_op.0, i32 %forward_mem.2, i32 %reverse_mem.0)
  ret void

invertfor.body.preheader:                         ; preds = %invertfor.body
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.body ]
  %reverse_op.1.in.lcssa = phi i32 [ %reverse_op.1.in, %invertfor.body ]
  %inc149 = add i32 %reverse_op.1.in.lcssa, 6
  %11 = bitcast i8** %0 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast i8** %1 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %13)
  %14 = bitcast { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %3 to i8*
  tail call void @free(i8* nonnull %14)
  %15 = bitcast i32* %4 to i8*
  tail call void @free(i8* nonnull %15)
  %16 = bitcast i32* %5 to i8*
  tail call void @free(i8* nonnull %16)
  %inc145 = add i32 %reverse_mem.1.lcssa, 18
  %17 = bitcast i1* %6 to i8*
  tail call void @free(i8* nonnull %17)
  br label %invertentry

invertfor.body:                                   ; preds = %invertif.else, %invertif.end.i
  %reverse_mem.1 = phi i32 [ %inc177, %invertif.end.i ], [ %inc249, %invertif.else ]
  %reverse_op.1.in = phi i32 [ %reverse_op.2.in, %invertif.end.i ], [ %reverse_op.4, %invertif.else ]
  %18 = icmp eq i64 %"iv'ac.0", 0
  br i1 %18, label %invertfor.body.preheader, label %incinvertfor.body

incinvertfor.body:                                ; preds = %invertfor.body
  %inc153 = add i32 %reverse_op.1.in, 7
  %inc155 = add i32 %reverse_mem.1, 3
  br label %invertfor.inc

invertif.end.i:                                   ; preds = %staging, %invertfor.body.lr.ph.i
  %reverse_mem.2 = phi i32 [ %inc215, %invertfor.body.lr.ph.i ], [ %inc281, %staging ]
  %reverse_op.2.in = phi i32 [ %reverse_op.3.lcssa, %invertfor.body.lr.ph.i ], [ %reverse_op.4, %staging ]
  %_unwrap7 = getelementptr inbounds i8*, i8** %0, i64 %"iv'ac.0", !node !285
  %"call.i'mi_unwrap" = load i8*, i8** %_unwrap7, align 8, !invariant.group !368, !node !285
  tail call void @free(i8* nonnull %"call.i'mi_unwrap"), !node !285
  %_unwrap11 = getelementptr inbounds i8*, i8** %1, i64 %"iv'ac.0", !node !285
  %call.i_unwrap = load i8*, i8** %_unwrap11, align 8, !invariant.group !369, !node !285
  tail call void @free(i8* %call.i_unwrap), !node !285
  %inc177 = add i32 %reverse_mem.2, 9
  br label %invertfor.body

invertfor.body.lr.ph.i:                           ; preds = %invertfor.body.i
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body.i ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.body.i ]
  %inc215 = add i32 %reverse_mem.3.lcssa, 17
  br label %invertif.end.i

invertfor.body.i:                                 ; preds = %mergeinvertfor.body.i_for.inc.loopexit, %incinvertfor.body.i
  %"iv2'ac.0.in" = phi i64 [ %wide.trip.count.i_unwrap, %mergeinvertfor.body.i_for.inc.loopexit ], [ %"iv2'ac.0", %incinvertfor.body.i ]
  %reverse_mem.3 = phi i32 [ %inc263, %mergeinvertfor.body.i_for.inc.loopexit ], [ %inc223, %incinvertfor.body.i ]
  %reverse_op.3 = phi i32 [ %inc261, %mergeinvertfor.body.i_for.inc.loopexit ], [ %inc221, %incinvertfor.body.i ]
  %"iv2'ac.0" = add nsw i64 %"iv2'ac.0.in", -1
  %_unwrap20 = getelementptr inbounds i8*, i8** %0, i64 %"iv'ac.0", !node !285
  %19 = bitcast i8** %_unwrap20 to double**
  %"call.i'mi_unwrap21286" = load double*, double** %19, align 8
  %"arrayidx15.i'ipg_unwrap" = getelementptr inbounds double, double* %"call.i'mi_unwrap21286", i64 %"iv2'ac.0", !node !285
  %20 = load double, double* %"arrayidx15.i'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx15.i'ipg_unwrap", align 8
  %_unwrap23 = getelementptr inbounds double*, double** %2, i64 %"iv'ac.0", !node !285
  %"'il_phi1_unwrap" = load double*, double** %_unwrap23, align 8, !invariant.group !370, !node !285
  %"arrayidx.i'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %"iv2'ac.0", !node !285
  %21 = load double, double* %"arrayidx.i'ipg_unwrap", align 8, !node !285
  %22 = fadd fast double %21, %20, !node !285
  store double %22, double* %"arrayidx.i'ipg_unwrap", align 8
  %23 = icmp eq i64 %"iv2'ac.0", 0
  br i1 %23, label %invertfor.body.lr.ph.i, label %incinvertfor.body.i

incinvertfor.body.i:                              ; preds = %invertfor.body.i
  %inc221 = add i32 %reverse_op.3, 4
  %inc223 = add i32 %reverse_mem.3, 19
  br label %invertfor.body.i

invertif.else:                                    ; preds = %invertfor.inc
  %idxprom8_unwrap = sext i32 %25 to i64, !node !285
  %arrayidx9_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %idxprom8_unwrap, !node !285
  %"arrayidx9'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %idxprom8_unwrap, !node !285
  %arrayidx11_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %"iv'ac.0", !node !285
  %"arrayidx11'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %"iv'ac.0", !node !285
  %arrayidx13_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %absolutes, i64 %"iv'ac.0", !node !285
  %"arrayidx13'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"absolutes'", i64 %"iv'ac.0", !node !285
  %_unwrap33 = getelementptr inbounds { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %3, i64 %"iv'ac.0", !node !285
  %inc249 = add i32 %reverse_mem.4, 17
  %tapeArg29_unwrap = load { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %_unwrap33, align 8, !invariant.group !371, !node !285
  call void @diffemat_mult(%struct.Matrix* %arrayidx9_unwrap, %struct.Matrix* %"arrayidx9'ipg_unwrap", %struct.Matrix* %arrayidx11_unwrap, %struct.Matrix* %"arrayidx11'ipg_unwrap", %struct.Matrix* %arrayidx13_unwrap, %struct.Matrix* %"arrayidx13'ipg_unwrap", { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg29_unwrap), !node !285
  br label %invertfor.body

mergeinvertfor.body.i_for.inc.loopexit:           ; preds = %staging
  %inc261 = add i32 %reverse_op.4, 6
  %wide.trip.count.i_unwrap = zext i32 %27 to i64, !node !285
  %inc263 = add i32 %reverse_mem.4, 10
  br label %invertfor.body.i

invertfor.inc:                                    ; preds = %mergeinvertfor.body_for.end.loopexit, %incinvertfor.body
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count_unwrap42, %mergeinvertfor.body_for.end.loopexit ], [ %"iv'ac.0", %incinvertfor.body ]
  %reverse_mem.4 = phi i32 [ 1, %mergeinvertfor.body_for.end.loopexit ], [ %inc155, %incinvertfor.body ]
  %reverse_op.4 = phi i32 [ 1, %mergeinvertfor.body_for.end.loopexit ], [ %inc153, %incinvertfor.body ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %24 = getelementptr inbounds i32, i32* %5, i64 %"iv'ac.0", !node !285
  %25 = load i32, i32* %24, align 4, !invariant.group !372, !node !285
  %cmp1_unwrap = icmp eq i32 %25, -1
  %26 = getelementptr inbounds i32, i32* %4, i64 %"iv'ac.0", !node !285
  %27 = load i32, i32* %26, align 4, !invariant.group !373, !node !285
  br i1 %cmp1_unwrap, label %staging, label %invertif.else

mergeinvertfor.body_for.end.loopexit:             ; preds = %invertfor.end
  %wide.trip.count_unwrap42 = zext i32 %count to i64, !node !285
  br label %invertfor.inc

invertfor.end:                                    ; preds = %for.inc, %entry
  %forward_mem.2 = phi i32 [ 8, %entry ], [ %forward_mem.1, %for.inc ]
  %forward_op.3 = phi i32 [ 0, %entry ], [ %forward_op.2, %for.inc ]
  br i1 %cmp26, label %mergeinvertfor.body_for.end.loopexit, label %invertentry

staging:                                          ; preds = %invertfor.inc
  %inc281 = add i32 %reverse_mem.4, 6
  %cmp1131.i_unwrap = icmp sgt i32 %27, 0
  br i1 %cmp1131.i_unwrap, label %mergeinvertfor.body.i_for.inc.loopexit, label %invertif.end.i
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffemat_mult(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 3
  %2 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 4
  %3 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 14
  %4 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 9
  %5 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 10
  %6 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 11
  %7 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 12
  %8 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 13
  %9 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 5
  %10 = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 6
  %mul3.i = mul nsw i32 %10, %9
  %cmp.not.i = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 7
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i32 2, i32 1
  %forward_op.0 = select i1 %cmp.not.i, i32 1, i32 %spec.select
  %cmp85 = icmp sgt i32 %9, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertfor.end49

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %10, 0
  %11 = zext i32 %9 to i64
  %wide.trip.count96 = zext i32 %10 to i64
  %inc201 = or i32 %forward_op.0, 4
  %inc215 = add nuw nsw i32 %inc201, 7
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %forward_mem.0 = phi i32 [ 17, %for.cond2.preheader.lr.ph ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.1 = phi i32 [ %inc215, %for.cond2.preheader.lr.ph ], [ %forward_op.5, %for.inc47 ]
  %iv = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %iv.next, %for.inc47 ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc217 = add i32 %forward_op.1, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %12 = getelementptr inbounds i32, i32* %5, i64 %iv
  %inc237 = add i32 %forward_mem.0, 10
  %13 = load i32, i32* %12, align 4, !invariant.group !374
  %cmp2281 = icmp sgt i32 %13, 1
  %wide.trip.count = zext i32 %13 to i64
  %inc239 = add i32 %forward_op.1, 2
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %forward_mem.1 = phi i32 [ %inc237, %for.body5.lr.ph ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.2 = phi i32 [ %inc239, %for.body5.lr.ph ], [ %forward_op.4, %for.inc44 ]
  %iv4 = phi i64 [ 0, %for.body5.lr.ph ], [ %iv.next5, %for.inc44 ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %inc269 = add i32 %forward_mem.1, 4
  %inc279 = add i32 %forward_op.2, 16
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %inc311 = add i32 %forward_op.2, 31
  %inc313 = add i32 %forward_mem.1, 6
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %forward_mem.2 = phi i32 [ %inc313, %for.body23.preheader ], [ %inc351, %for.body23 ]
  %forward_op.3 = phi i32 [ %inc311, %for.body23.preheader ], [ %inc359, %for.body23 ]
  %iv6 = phi i64 [ 0, %for.body23.preheader ], [ %iv.next7, %for.body23 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc351 = add i32 %forward_mem.2, 6
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %inc359 = add i32 %forward_op.3, 17
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %forward_mem.3 = phi i32 [ %inc269, %for.body5 ], [ %inc351, %for.body23 ]
  %forward_op.4 = phi i32 [ %inc279, %for.body5 ], [ %inc359, %for.body23 ]
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %forward_mem.4 = phi i32 [ %forward_mem.0, %for.cond2.preheader ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.5 = phi i32 [ %inc217, %for.cond2.preheader ], [ %forward_op.4, %for.inc44 ]
  %exitcond101.not = icmp eq i64 %iv.next, %11
  br i1 %exitcond101.not, label %invertfor.end49, label %for.cond2.preheader, !llvm.loop !187

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  %14 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.6, i32 %reverse_op.0, i32 %forward_mem.5, i32 %reverse_mem.0)
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 0
  tail call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** } %tapeArg, 1
  tail call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.end49, %invertfor.cond2.preheader.lr.ph
  %reverse_mem.0 = phi i32 [ %inc427, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %reverse_op.0 = phi i32 [ %inc431, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %cmp.not.i.not = xor i1 %cmp.not.i, true
  %cmp8.i_unwrap = icmp sgt i32 %mul3.i, 0
  %or.cond = and i1 %cmp.not.i.not, %cmp8.i_unwrap
  br i1 %or.cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.cond2.preheader ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.cond2.preheader ]
  %inc431 = add i32 %reverse_op.1.lcssa, 1
  %15 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %15)
  %16 = bitcast double** %1 to i8*
  tail call void @free(i8* nonnull %16)
  %17 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %17)
  %18 = bitcast double** %3 to i8*
  tail call void @free(i8* nonnull %18)
  %19 = bitcast i32* %4 to i8*
  tail call void @free(i8* nonnull %19)
  %20 = bitcast i32* %5 to i8*
  tail call void @free(i8* nonnull %20)
  %21 = bitcast double* %6 to i8*
  tail call void @free(i8* nonnull %21)
  %22 = bitcast double* %7 to i8*
  tail call void @free(i8* nonnull %22)
  %inc427 = add i32 %reverse_mem.1.lcssa, 33
  %23 = bitcast double** %8 to i8*
  tail call void @free(i8* nonnull %23)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5.lr.ph
  %"add43'de.0" = phi double [ %"add43'de.1.lcssa", %invertfor.body5.lr.ph ], [ %"add43'de.4", %invertfor.inc47 ]
  %reverse_mem.1 = phi i32 [ %inc573, %invertfor.body5.lr.ph ], [ %inc875, %invertfor.inc47 ]
  %reverse_op.1 = phi i32 [ %inc575.lcssa, %invertfor.body5.lr.ph ], [ %reverse_op.5, %invertfor.inc47 ]
  %24 = icmp eq i64 %"iv'ac.0", 0
  br i1 %24, label %invertfor.cond2.preheader.lr.ph, label %incinvertfor.cond2.preheader

incinvertfor.cond2.preheader:                     ; preds = %invertfor.cond2.preheader
  %inc435 = add i32 %reverse_op.1, 2
  %inc437 = add i32 %reverse_mem.1, 3
  br label %invertfor.inc47

invertfor.body5.lr.ph:                            ; preds = %invertfor.body5
  %"add43'de.1.lcssa" = phi double [ %"add43'de.1", %invertfor.body5 ]
  %reverse_mem.2.lcssa = phi i32 [ %reverse_mem.2, %invertfor.body5 ]
  %inc575.lcssa = phi i32 [ %inc575, %invertfor.body5 ]
  %inc573 = add i32 %reverse_mem.2.lcssa, 43
  br label %invertfor.cond2.preheader

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa883, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %reverse_mem.2 = phi i32 [ %inc617, %invertfor.body23.preheader ], [ %inc867, %invertfor.inc44 ]
  %reverse_op.2 = phi i32 [ %inc615, %invertfor.body23.preheader ], [ %inc863, %invertfor.inc44 ]
  %_unwrap19 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap19, align 8, !invariant.group !375
  %_unwrap21 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap121
  %_unwrap22 = add nuw nsw i64 %_unwrap21, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap22
  %25 = load double, double* %"arrayidx19'ipg_unwrap", align 8
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8
  %26 = fadd fast double %"mul13'de.1", %25
  %27 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap119
  %28 = add nuw nsw i64 %"iv4'ac.1", %27
  %29 = getelementptr inbounds double, double* %6, i64 %28
  %30 = load double, double* %29, align 8, !invariant.group !376
  %m0diffe = fmul fast double %26, %30
  %31 = getelementptr inbounds double, double* %7, i64 %28
  %32 = load double, double* %31, align 8, !invariant.group !377
  %m1diffe = fmul fast double %26, %32
  %_unwrap34 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi2_unwrap" = load double*, double** %_unwrap34, align 8, !invariant.group !378
  %33 = getelementptr inbounds i32, i32* %4, i64 %"iv'ac.0"
  %34 = load i32, i32* %33, align 4, !invariant.group !379
  %_unwrap40 = sext i32 %34 to i64
  %_unwrap41 = mul nsw i64 %"iv4'ac.1", %_unwrap40
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi2_unwrap", i64 %_unwrap41
  %35 = load double, double* %"arrayidx12'ipg_unwrap", align 8
  %36 = fadd fast double %35, %m0diffe
  store double %36, double* %"arrayidx12'ipg_unwrap", align 8
  %_unwrap43 = getelementptr inbounds double*, double** %2, i64 %"iv'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap43, align 8, !invariant.group !380
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %"iv'ac.0"
  %37 = load double, double* %"arrayidx'ipg_unwrap", align 8
  %38 = fadd fast double %37, %m1diffe
  store double %38, double* %"arrayidx'ipg_unwrap", align 8
  %39 = icmp eq i64 %"iv4'ac.1", 0
  %inc575 = add i32 %reverse_op.2, 26
  br i1 %39, label %invertfor.body5.lr.ph, label %incinvertfor.body5

incinvertfor.body5:                               ; preds = %invertfor.body5
  %inc581 = add i32 %reverse_mem.2, 45
  br label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body23 ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.body23 ]
  %.lcssa885 = phi double** [ %46, %invertfor.body23 ]
  %.lcssa884 = phi double** [ %50, %invertfor.body23 ]
  %.lcssa883 = phi double [ %61, %invertfor.body23 ]
  %.lcssa = phi double [ %63, %invertfor.body23 ]
  %40 = bitcast double** %.lcssa884 to i8**
  %forfree129880 = load i8*, i8** %40, align 8, !dereferenceable !298
  tail call void @free(i8* nonnull %forfree129880)
  %inc615 = add i32 %reverse_op.3.lcssa, 44
  %inc617 = add i32 %reverse_mem.3.lcssa, 82
  %41 = bitcast double** %.lcssa885 to i8**
  %forfree144881 = load i8*, i8** %41, align 8, !dereferenceable !298
  tail call void @free(i8* nonnull %forfree144881)
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %61, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %63, %incinvertfor.body23 ]
  %"iv6'ac.0" = phi i64 [ %_unwrap115, %mergeinvertfor.body23_for.inc44.loopexit ], [ %64, %incinvertfor.body23 ]
  %reverse_mem.3 = phi i32 [ %inc855, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc839, %incinvertfor.body23 ]
  %reverse_op.3 = phi i32 [ %inc853, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc837, %incinvertfor.body23 ]
  %_unwrap45 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap46" = load double*, double** %_unwrap45, align 8, !invariant.group !375
  %_unwrap48 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap121
  %_unwrap49 = add nuw nsw i64 %_unwrap48, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap50" = getelementptr inbounds double, double* %"'il_phi3_unwrap46", i64 %_unwrap49
  %42 = load double, double* %"arrayidx19'ipg_unwrap50", align 8
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap50", align 8
  %43 = fadd fast double %"add43'de.2", %42
  %44 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap119
  %45 = add nuw nsw i64 %"iv4'ac.1", %44
  %46 = getelementptr inbounds double*, double** %8, i64 %45
  %47 = load double*, double** %46, align 8, !dereferenceable !298, !invariant.group !381
  %48 = getelementptr inbounds double, double* %47, i64 %"iv6'ac.0"
  %49 = load double, double* %48, align 8, !invariant.group !382
  %m0diffe76 = fmul fast double %43, %49
  %50 = getelementptr inbounds double*, double** %3, i64 %45
  %51 = load double*, double** %50, align 8, !dereferenceable !298, !invariant.group !383
  %52 = getelementptr inbounds double, double* %51, i64 %"iv6'ac.0"
  %53 = load double, double* %52, align 8, !invariant.group !384
  %m1diffe90 = fmul fast double %43, %53
  %_unwrap94 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi2_unwrap95" = load double*, double** %_unwrap94, align 8, !invariant.group !378
  %iv.next7_unwrap = add nuw nsw i64 %"iv6'ac.0", 1
  %54 = getelementptr inbounds i32, i32* %4, i64 %"iv'ac.0"
  %55 = load i32, i32* %54, align 4, !invariant.group !379
  %_unwrap96 = sext i32 %55 to i64
  %_unwrap97 = mul nsw i64 %"iv4'ac.1", %_unwrap96
  %_unwrap98 = add nsw i64 %iv.next7_unwrap, %_unwrap97
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi2_unwrap95", i64 %_unwrap98
  %56 = load double, double* %"arrayidx35'ipg_unwrap", align 8
  %57 = fadd fast double %56, %m0diffe76
  store double %57, double* %"arrayidx35'ipg_unwrap", align 8
  %_unwrap100 = getelementptr inbounds double*, double** %2, i64 %"iv'ac.0"
  %"'il_phi1_unwrap101" = load double*, double** %_unwrap100, align 8, !invariant.group !380
  %_unwrap102 = mul nuw nsw i64 %iv.next7_unwrap, %wide.trip.count100_unwrap121
  %_unwrap103 = add nuw nsw i64 %_unwrap102, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap101", i64 %_unwrap103
  %58 = load double, double* %"arrayidx29'ipg_unwrap", align 8
  %59 = fadd fast double %58, %m1diffe90
  store double %59, double* %"arrayidx29'ipg_unwrap", align 8
  %60 = icmp eq i64 %"iv6'ac.0", 0
  %61 = select fast i1 %60, double 0.000000e+00, double %43
  %62 = fadd fast double %"mul13'de.2", %43
  %63 = select fast i1 %60, double %62, double %"mul13'de.2"
  br i1 %60, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %64 = add nsw i64 %"iv6'ac.0", -1
  %inc837 = add i32 %reverse_op.3, 39
  %inc839 = add i32 %reverse_mem.3, 72
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %inc853 = add i32 %reverse_op.4.in, 6
  %wide.trip.count_unwrap114 = zext i32 %66 to i64
  %_unwrap115 = add nsw i64 %wide.trip.count_unwrap114, -2
  %inc855 = add i32 %reverse_mem.4, 9
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %invertfor.inc47.loopexit, %incinvertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %invertfor.inc47.loopexit ], [ %"add43'de.1", %incinvertfor.body5 ]
  %"iv4'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap119, %invertfor.inc47.loopexit ], [ %"iv4'ac.1", %incinvertfor.body5 ]
  %reverse_mem.4 = phi i32 [ %inc873, %invertfor.inc47.loopexit ], [ %inc581, %incinvertfor.body5 ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %invertfor.inc47.loopexit ], [ %inc575, %incinvertfor.body5 ]
  %"iv4'ac.1" = add nsw i64 %"iv4'ac.1.in", -1
  %inc863 = add i32 %reverse_op.4.in, 3
  %65 = getelementptr inbounds i32, i32* %5, i64 %"iv'ac.0"
  %inc867 = add i32 %reverse_mem.4, 4
  %66 = load i32, i32* %65, align 4, !invariant.group !385
  %cmp2281_unwrap = icmp sgt i32 %66, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

invertfor.inc47.loopexit:                         ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap119 = zext i32 %10 to i64
  %inc873 = add i32 %reverse_mem.5, 3
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.end49.loopexit, %incinvertfor.cond2.preheader
  %"add43'de.4" = phi double [ 0.000000e+00, %invertfor.end49.loopexit ], [ %"add43'de.0", %incinvertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap121, %invertfor.end49.loopexit ], [ %"iv'ac.0", %incinvertfor.cond2.preheader ]
  %reverse_mem.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc437, %incinvertfor.cond2.preheader ]
  %reverse_op.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc435, %incinvertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %inc875 = add i32 %reverse_mem.5, 1
  %cmp483_unwrap = icmp sgt i32 %10, 0
  br i1 %cmp483_unwrap, label %invertfor.inc47.loopexit, label %invertfor.cond2.preheader

invertfor.end49.loopexit:                         ; preds = %invertfor.end49
  %wide.trip.count100_unwrap121 = zext i32 %9 to i64
  br label %invertfor.inc47

invertfor.end49:                                  ; preds = %for.inc47, %entry
  %forward_mem.5 = phi i32 [ 17, %entry ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.6 = phi i32 [ %forward_op.0, %entry ], [ %forward_op.5, %for.inc47 ]
  br i1 %cmp85, label %invertfor.end49.loopexit, label %invertresize.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffeget_posed_relatives(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %relatives, %struct.Matrix* nocapture %"relatives'", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 8
  %1 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 9
  %2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 10
  %3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 13
  %4 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 14
  %call.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 6
  %"call.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 5
  %"'ipc59" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %5 = bitcast i8* %call.i to %struct.Matrix*
  %"call4.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 4
  %call.i18 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 3
  %"call.i18'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 2
  %"'ipc22" = bitcast i8* %"call.i18'mi" to %struct.Matrix*
  %6 = bitcast i8* %call.i18 to %struct.Matrix*
  %cmp40 = icmp sgt i32 %bone_count, 0
  %"'ipc" = bitcast i8* %"call4.i'mi" to double*
  br i1 %cmp40, label %for.body.lr.ph, label %invertdelete_matrix.exit39

for.body.lr.ph:                                   ; preds = %entry
  %wide.trip.count = zext i32 %bone_count to i64, !node !285
  br label %for.cond1.preheader.lr.ph.i

for.cond1.preheader.lr.ph.i:                      ; preds = %set_block.exit, %for.body.lr.ph
  %forward_mem.0 = phi i32 [ 6, %for.body.lr.ph ], [ %inc154, %set_block.exit ]
  %forward_op.0 = phi i32 [ 4, %for.body.lr.ph ], [ %forward_op.7, %set_block.exit ]
  %iv = phi i64 [ 0, %for.body.lr.ph ], [ %iv.next, %set_block.exit ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc96 = add i32 %forward_op.0, 1
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %forward_op.1 = phi i32 [ %inc96, %for.cond1.preheader.lr.ph.i ], [ %forward_op.3.lcssa, %for.inc12.i ]
  %iv1 = phi i64 [ 0, %for.cond1.preheader.lr.ph.i ], [ %iv.next2, %for.inc12.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %inc104 = add i32 %forward_op.1, 4
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %forward_op.2 = phi i32 [ %inc104, %for.body3.lr.ph.i ], [ %forward_op.3, %for.body3.i ]
  %iv3 = phi i64 [ 0, %for.body3.lr.ph.i ], [ %iv.next4, %for.body3.i ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %cmp4.i = icmp eq i64 %iv1, %iv3
  %inc106 = add i32 %forward_op.2, 1
  %inc108 = add i32 %forward_op.2, 2
  %forward_op.3 = select i1 %cmp4.i, i32 %inc106, i32 %inc108
  %exitcond.not.i = icmp eq i64 %iv.next4, 4
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.body3.i
  %forward_op.3.lcssa = phi i32 [ %forward_op.3, %for.body3.i ]
  %exitcond37.not.i = icmp eq i64 %iv.next2, 4
  br i1 %exitcond37.not.i, label %set_identity.exit, label %for.body3.lr.ph.i, !llvm.loop !189

set_identity.exit:                                ; preds = %for.inc12.i
  %forward_op.3.lcssa.lcssa = phi i32 [ %forward_op.3.lcssa, %for.inc12.i ]
  %inc112 = add i32 %forward_op.3.lcssa.lcssa, 2
  %7 = getelementptr inbounds i32, i32* %3, i64 %iv
  %inc120 = add i32 %forward_mem.0, 4
  %8 = load i32, i32* %7, align 4, !invariant.group !386
  %cmp30.i = icmp sgt i32 %8, 0
  br i1 %cmp30.i, label %for.cond1.preheader.lr.ph.i26, label %set_block.exit

for.cond1.preheader.lr.ph.i26:                    ; preds = %set_identity.exit
  %9 = getelementptr inbounds i32, i32* %4, i64 %iv
  %10 = load i32, i32* %9, align 4, !invariant.group !387
  %cmp228.i = icmp sgt i32 %10, 0
  %wide.trip.count.i = zext i32 %10 to i64
  %11 = zext i32 %8 to i64
  %inc130 = add i32 %forward_op.3.lcssa.lcssa, 5
  %inc132 = add i32 %forward_mem.0, 7
  br label %for.cond1.preheader.i27

for.cond1.preheader.i27:                          ; preds = %for.inc13.i, %for.cond1.preheader.lr.ph.i26
  %forward_mem.1 = phi i32 [ %inc132, %for.cond1.preheader.lr.ph.i26 ], [ %forward_mem.2, %for.inc13.i ]
  %forward_op.4 = phi i32 [ %inc130, %for.cond1.preheader.lr.ph.i26 ], [ %forward_op.6, %for.inc13.i ]
  %iv5 = phi i64 [ 0, %for.cond1.preheader.lr.ph.i26 ], [ %iv.next6, %for.inc13.i ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %inc134 = add i32 %forward_op.4, 1
  br i1 %cmp228.i, label %for.body3.lr.ph.i29, label %for.inc13.i

for.body3.lr.ph.i29:                              ; preds = %for.cond1.preheader.i27
  %inc140 = add i32 %forward_mem.1, 3
  %inc144 = add i32 %forward_op.4, 3
  br label %for.body3.i32

for.body3.i32:                                    ; preds = %for.body3.i32, %for.body3.lr.ph.i29
  %forward_op.5 = phi i32 [ %inc144, %for.body3.lr.ph.i29 ], [ %inc150, %for.body3.i32 ]
  %iv8 = phi i64 [ 0, %for.body3.lr.ph.i29 ], [ %iv.next9, %for.body3.i32 ]
  %iv.next9 = add nuw nsw i64 %iv8, 1
  %inc150 = add i32 %forward_op.5, 3
  %exitcond.not.i31 = icmp eq i64 %iv.next9, %wide.trip.count.i
  br i1 %exitcond.not.i31, label %for.inc13.i, label %for.body3.i32, !llvm.loop !191

for.inc13.i:                                      ; preds = %for.body3.i32, %for.cond1.preheader.i27
  %forward_mem.2 = phi i32 [ %forward_mem.1, %for.cond1.preheader.i27 ], [ %inc140, %for.body3.i32 ]
  %forward_op.6 = phi i32 [ %inc134, %for.cond1.preheader.i27 ], [ %inc150, %for.body3.i32 ]
  %exitcond37.not.i33 = icmp eq i64 %iv.next6, %11
  br i1 %exitcond37.not.i33, label %set_block.exit, label %for.cond1.preheader.i27, !llvm.loop !192

set_block.exit:                                   ; preds = %for.inc13.i, %set_identity.exit
  %forward_mem.3 = phi i32 [ %inc120, %set_identity.exit ], [ %forward_mem.2, %for.inc13.i ]
  %forward_op.7 = phi i32 [ %inc112, %set_identity.exit ], [ %forward_op.6, %for.inc13.i ]
  %inc154 = add i32 %forward_mem.3, 2
  %exitcond.not = icmp eq i64 %iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.end.loopexit, label %for.cond1.preheader.lr.ph.i, !llvm.loop !200

for.end.loopexit:                                 ; preds = %set_block.exit
  %forward_mem.3.lcssa = phi i32 [ %forward_mem.3, %set_block.exit ]
  %forward_op.7.lcssa = phi i32 [ %forward_op.7, %set_block.exit ]
  %phi.bo = add i32 %forward_mem.3.lcssa, 3
  br label %invertdelete_matrix.exit39

invertentry:                                      ; preds = %invertdelete_matrix.exit39, %invertfor.body.lr.ph
  %reverse_mem.0 = phi i32 [ %inc184, %invertfor.body.lr.ph ], [ 0, %invertdelete_matrix.exit39 ]
  %reverse_op.0 = phi i32 [ %inc188, %invertfor.body.lr.ph ], [ 0, %invertdelete_matrix.exit39 ]
  %"call4.i21'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 0
  %call4.i21 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 1
  tail call void @free(i8* nonnull %"call4.i21'mi")
  tail call void @free(i8* %call4.i21)
  tail call void @free(i8* nonnull %"call.i18'mi")
  tail call void @free(i8* %call.i18)
  tail call void @free(i8* nonnull %"call4.i'mi")
  tail call void @free(i8* nonnull %"call.i'mi")
  tail call void @free(i8* %call.i)
  %12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.8, i32 %reverse_op.0, i32 %forward_mem.4, i32 %reverse_mem.0)
  ret void

invertfor.body.lr.ph:                             ; preds = %invertfor.cond1.preheader.lr.ph.i
  %reverse_mem.2.in.lcssa.lcssa.lcssa = phi i32 [ %reverse_mem.2.in.lcssa.lcssa, %invertfor.cond1.preheader.lr.ph.i ]
  %reverse_op.2.lcssa.lcssa.lcssa = phi i32 [ %reverse_op.2.lcssa.lcssa, %invertfor.cond1.preheader.lr.ph.i ]
  %inc188 = add i32 %reverse_op.2.lcssa.lcssa.lcssa, 5
  %13 = bitcast { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0 to i8*
  tail call void @free(i8* nonnull %13)
  %14 = bitcast double*** %1 to i8*
  tail call void @free(i8* nonnull %14)
  %15 = bitcast { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %2 to i8*
  tail call void @free(i8* nonnull %15)
  %16 = bitcast i32* %3 to i8*
  tail call void @free(i8* nonnull %16)
  %inc184 = add i32 %reverse_mem.2.in.lcssa.lcssa.lcssa, 23
  %17 = bitcast i32* %4 to i8*
  tail call void @free(i8* nonnull %17)
  br label %invertentry

invertfor.cond1.preheader.lr.ph.i:                ; preds = %invertfor.body3.lr.ph.i
  %reverse_mem.2.in.lcssa.lcssa = phi i32 [ %reverse_mem.2.in.lcssa, %invertfor.body3.lr.ph.i ]
  %reverse_op.2.lcssa.lcssa = phi i32 [ %reverse_op.2.lcssa, %invertfor.body3.lr.ph.i ]
  %18 = icmp eq i64 %"iv'ac.0", 0
  br i1 %18, label %invertfor.body.lr.ph, label %incinvertfor.cond1.preheader.lr.ph.i

incinvertfor.cond1.preheader.lr.ph.i:             ; preds = %invertfor.cond1.preheader.lr.ph.i
  %inc192 = add i32 %reverse_op.2.lcssa.lcssa, 6
  %inc194 = add i32 %reverse_mem.2.in.lcssa.lcssa, 13
  br label %invertset_block.exit

invertfor.body3.lr.ph.i:                          ; preds = %invertfor.body3.i
  %reverse_mem.2.in.lcssa = phi i32 [ %reverse_mem.2.in, %invertfor.body3.i ]
  %reverse_op.2.lcssa = phi i32 [ %reverse_op.2, %invertfor.body3.i ]
  %19 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %19, label %invertfor.cond1.preheader.lr.ph.i, label %incinvertfor.body3.lr.ph.i

incinvertfor.body3.lr.ph.i:                       ; preds = %invertfor.body3.lr.ph.i
  %20 = add nsw i64 %"iv1'ac.0", -1
  %inc202 = add i32 %reverse_op.2.lcssa, 5
  %inc204 = add i32 %reverse_mem.2.in.lcssa, 12
  br label %invertfor.inc12.i

invertfor.body3.i:                                ; preds = %invertif.else.i, %invertif.then.i
  %21 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %21, label %invertfor.body3.lr.ph.i, label %incinvertfor.body3.i

incinvertfor.body3.i:                             ; preds = %invertfor.body3.i
  %inc210 = add i32 %reverse_mem.2.in, 10
  %22 = add nsw i64 %"iv3'ac.0", -1
  %inc212 = add i32 %reverse_op.2, 4
  br label %invertfor.inc.i

invertif.then.i:                                  ; preds = %invertfor.inc.i
  %_unwrap16 = mul nsw i64 %"iv1'ac.0", 5
  %"arrayidx.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc", i64 %_unwrap16
  store double 0.000000e+00, double* %"arrayidx.i'ipg_unwrap", align 8
  br label %invertfor.body3.i

invertif.else.i:                                  ; preds = %invertfor.inc.i
  %_unwrap17 = shl nsw i64 %"iv1'ac.0", 2
  %_unwrap18 = add nuw nsw i64 %"iv3'ac.0", %_unwrap17
  %"arrayidx11.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc", i64 %_unwrap18
  store double 0.000000e+00, double* %"arrayidx11.i'ipg_unwrap", align 8
  br label %invertfor.body3.i

invertfor.inc.i:                                  ; preds = %invertfor.inc12.i, %incinvertfor.body3.i
  %"iv3'ac.0" = phi i64 [ 3, %invertfor.inc12.i ], [ %22, %incinvertfor.body3.i ]
  %reverse_mem.2.in = phi i32 [ %reverse_mem.3, %invertfor.inc12.i ], [ %inc210, %incinvertfor.body3.i ]
  %reverse_op.2 = phi i32 [ %reverse_op.3, %invertfor.inc12.i ], [ %inc212, %incinvertfor.body3.i ]
  %cmp4.i_unwrap = icmp eq i64 %"iv1'ac.0", %"iv3'ac.0"
  br i1 %cmp4.i_unwrap, label %invertif.then.i, label %invertif.else.i

invertfor.inc12.i:                                ; preds = %invertset_identity.exit, %incinvertfor.body3.lr.ph.i
  %"iv1'ac.0" = phi i64 [ 3, %invertset_identity.exit ], [ %20, %incinvertfor.body3.lr.ph.i ]
  %reverse_mem.3 = phi i32 [ %inc262, %invertset_identity.exit ], [ %inc204, %incinvertfor.body3.lr.ph.i ]
  %reverse_op.3 = phi i32 [ %inc252, %invertset_identity.exit ], [ %inc202, %incinvertfor.body3.lr.ph.i ]
  br label %invertfor.inc.i

invertset_identity.exit:                          ; preds = %invertset_block.exit, %invertfor.cond1.preheader.lr.ph.i26
  %reverse_mem.4 = phi i32 [ %inc270, %invertfor.cond1.preheader.lr.ph.i26 ], [ %inc408, %invertset_block.exit ]
  %reverse_op.4 = phi i32 [ %inc274, %invertfor.cond1.preheader.lr.ph.i26 ], [ %inc404, %invertset_block.exit ]
  %_unwrap76 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 11
  %_unwrap75 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 12
  %_unwrap20 = trunc i64 %"iv'ac.0" to i32, !node !285
  %_unwrap21 = add i32 %_unwrap20, 3, !node !285
  %mul_unwrap = mul nsw i32 %_unwrap75, %_unwrap21, !node !285
  %idx.ext_unwrap = sext i32 %mul_unwrap to i64, !node !285
  %add.ptr_unwrap = getelementptr inbounds double, double* %_unwrap76, i64 %idx.ext_unwrap, !node !285
  %"'il_phi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg, 7
  %"add.ptr'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi_unwrap", i64 %idx.ext_unwrap, !node !285
  %tapeArg23_unwrap.elt = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 0
  %tapeArg23_unwrap.unpack = load i8*, i8** %tapeArg23_unwrap.elt, align 8
  %23 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } undef, i8* %tapeArg23_unwrap.unpack, 0
  %tapeArg23_unwrap.elt413 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 1
  %tapeArg23_unwrap.unpack414 = load i8*, i8** %tapeArg23_unwrap.elt413, align 8
  %24 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %23, i8* %tapeArg23_unwrap.unpack414, 1
  %tapeArg23_unwrap.elt415 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 2
  %tapeArg23_unwrap.unpack416 = load i8*, i8** %tapeArg23_unwrap.elt415, align 8
  %25 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %24, i8* %tapeArg23_unwrap.unpack416, 2
  %tapeArg23_unwrap.elt417 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 3
  %tapeArg23_unwrap.unpack418 = load i8*, i8** %tapeArg23_unwrap.elt417, align 8
  %26 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %25, i8* %tapeArg23_unwrap.unpack418, 3
  %tapeArg23_unwrap.elt419 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 4
  %tapeArg23_unwrap.unpack420 = load i8*, i8** %tapeArg23_unwrap.elt419, align 8
  %27 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %26, i8* %tapeArg23_unwrap.unpack420, 4
  %tapeArg23_unwrap.elt421 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 5
  %tapeArg23_unwrap.unpack422 = load i8*, i8** %tapeArg23_unwrap.elt421, align 8
  %28 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %27, i8* %tapeArg23_unwrap.unpack422, 5
  %tapeArg23_unwrap.elt423 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 6
  %tapeArg23_unwrap.unpack424 = load i8*, i8** %tapeArg23_unwrap.elt423, align 8
  %29 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %28, i8* %tapeArg23_unwrap.unpack424, 6
  %tapeArg23_unwrap.elt425 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 7
  %tapeArg23_unwrap.unpack426 = load i8*, i8** %tapeArg23_unwrap.elt425, align 8
  %30 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %29, i8* %tapeArg23_unwrap.unpack426, 7
  %tapeArg23_unwrap.elt427 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 8
  %tapeArg23_unwrap.unpack428 = load i8*, i8** %tapeArg23_unwrap.elt427, align 8
  %31 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %30, i8* %tapeArg23_unwrap.unpack428, 8
  %tapeArg23_unwrap.elt429 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 9
  %tapeArg23_unwrap.unpack430 = load { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }* %tapeArg23_unwrap.elt429, align 8
  %32 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %31, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg23_unwrap.unpack430, 9
  %tapeArg23_unwrap.elt431 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 10
  %tapeArg23_unwrap.unpack432 = load { i8*, i8*, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }* %tapeArg23_unwrap.elt431, align 8
  %33 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %32, { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg23_unwrap.unpack432, 10
  %tapeArg23_unwrap.elt433 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 11
  %tapeArg23_unwrap.unpack434 = load i8*, i8** %tapeArg23_unwrap.elt433, align 8
  %34 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %33, i8* %tapeArg23_unwrap.unpack434, 11
  %tapeArg23_unwrap.elt435 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 12
  %tapeArg23_unwrap.unpack436 = load i8*, i8** %tapeArg23_unwrap.elt435, align 8
  %35 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %34, i8* %tapeArg23_unwrap.unpack436, 12
  %tapeArg23_unwrap.elt437 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 13
  %tapeArg23_unwrap.unpack438 = load double, double* %tapeArg23_unwrap.elt437, align 8
  %36 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %35, double %tapeArg23_unwrap.unpack438, 13
  %tapeArg23_unwrap.elt439 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 14
  %tapeArg23_unwrap.unpack440 = load double, double* %tapeArg23_unwrap.elt439, align 8
  %37 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %36, double %tapeArg23_unwrap.unpack440, 14
  %tapeArg23_unwrap.elt441 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }* %0, i64 %"iv'ac.0", i32 15
  %tapeArg23_unwrap.unpack442 = load double, double* %tapeArg23_unwrap.elt441, align 8
  %tapeArg23_unwrap443 = insertvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %37, double %tapeArg23_unwrap.unpack442, 15
  call void @diffeeuler_angles_to_rotation_matrix(double* %add.ptr_unwrap, double* %"add.ptr'ipg_unwrap", %struct.Matrix* %6, %struct.Matrix* %"'ipc22", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg23_unwrap443), !node !285
  %inc252 = add i32 %reverse_op.4, 2
  %inc262 = add i32 %reverse_mem.4, 6
  br label %invertfor.inc12.i

invertfor.cond1.preheader.lr.ph.i26:              ; preds = %invertfor.cond1.preheader.i27
  %reverse_mem.5.lcssa = phi i32 [ %reverse_mem.5, %invertfor.cond1.preheader.i27 ]
  %reverse_op.5.lcssa = phi i32 [ %reverse_op.5, %invertfor.cond1.preheader.i27 ]
  %inc274 = add i32 %reverse_op.5.lcssa, 1
  %_unwrap29 = getelementptr inbounds double**, double*** %1, i64 %"iv'ac.0", !node !285
  %inc270 = add i32 %reverse_mem.5.lcssa, 5
  %38 = bitcast double*** %_unwrap29 to i8**
  %forfree30444 = load i8*, i8** %38, align 8, !dereferenceable !298
  tail call void @free(i8* nonnull %forfree30444), !node !285
  br label %invertset_identity.exit

invertfor.cond1.preheader.i27:                    ; preds = %invertfor.inc13.i, %invertfor.body3.lr.ph.i29
  %reverse_mem.5 = phi i32 [ %inc336, %invertfor.body3.lr.ph.i29 ], [ %inc372, %invertfor.inc13.i ]
  %reverse_op.5 = phi i32 [ %inc338, %invertfor.body3.lr.ph.i29 ], [ %inc368, %invertfor.inc13.i ]
  %39 = icmp eq i64 %"iv5'ac.0", 0
  br i1 %39, label %invertfor.cond1.preheader.lr.ph.i26, label %incinvertfor.cond1.preheader.i27

incinvertfor.cond1.preheader.i27:                 ; preds = %invertfor.cond1.preheader.i27
  %inc278 = add i32 %reverse_op.5, 2
  %inc280 = add i32 %reverse_mem.5, 3
  br label %invertfor.inc13.i

invertfor.body3.lr.ph.i29:                        ; preds = %invertfor.body3.i32
  %reverse_mem.6.lcssa = phi i32 [ %reverse_mem.6, %invertfor.body3.i32 ]
  %reverse_op.6.lcssa = phi i32 [ %reverse_op.6, %invertfor.body3.i32 ]
  %inc338 = add i32 %reverse_op.6.lcssa, 9
  %inc336 = add i32 %reverse_mem.6.lcssa, 20
  br label %invertfor.cond1.preheader.i27

invertfor.body3.i32:                              ; preds = %mergeinvertfor.body3.i32_for.inc13.i.loopexit, %incinvertfor.body3.i32
  %"iv8'ac.0.in" = phi i64 [ %wide.trip.count.i_unwrap, %mergeinvertfor.body3.i32_for.inc13.i.loopexit ], [ %"iv8'ac.0", %incinvertfor.body3.i32 ]
  %reverse_mem.6 = phi i32 [ %inc360, %mergeinvertfor.body3.i32_for.inc13.i.loopexit ], [ %inc344, %incinvertfor.body3.i32 ]
  %reverse_op.6 = phi i32 [ %inc358, %mergeinvertfor.body3.i32_for.inc13.i.loopexit ], [ %inc342, %incinvertfor.body3.i32 ]
  %"iv8'ac.0" = add nsw i64 %"iv8'ac.0.in", -1
  %_unwrap32 = shl nsw i64 %"iv5'ac.0", 2, !node !285
  %_unwrap33 = add nuw nsw i64 %"iv8'ac.0", %_unwrap32, !node !285
  %"arrayidx12.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc", i64 %_unwrap33, !node !285
  %40 = load double, double* %"arrayidx12.i'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx12.i'ipg_unwrap", align 8
  %_unwrap35 = getelementptr inbounds double**, double*** %1, i64 %"iv'ac.0", !node !285
  %_unwrap36 = load double**, double*** %_unwrap35, align 8, !invariant.group !388, !node !285
  %_unwrap37 = getelementptr inbounds double*, double** %_unwrap36, i64 %"iv5'ac.0", !node !285
  %"'il_phi7_unwrap" = load double*, double** %_unwrap37, align 8, !invariant.group !389, !node !285
  %41 = load i32, i32* %45, align 4, !invariant.group !390, !node !285
  %_unwrap41 = sext i32 %41 to i64, !node !285
  %_unwrap42 = mul nsw i64 %"iv5'ac.0", %_unwrap41, !node !285
  %_unwrap43 = add nsw i64 %"iv8'ac.0", %_unwrap42, !node !285
  %"arrayidx.i30'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi7_unwrap", i64 %_unwrap43, !node !285
  %42 = load double, double* %"arrayidx.i30'ipg_unwrap", align 8, !node !285
  %43 = fadd fast double %42, %40, !node !285
  store double %43, double* %"arrayidx.i30'ipg_unwrap", align 8
  %44 = icmp eq i64 %"iv8'ac.0", 0
  br i1 %44, label %invertfor.body3.lr.ph.i29, label %incinvertfor.body3.i32

incinvertfor.body3.i32:                           ; preds = %invertfor.body3.i32
  %inc342 = add i32 %reverse_op.6, 10
  %inc344 = add i32 %reverse_mem.6, 22
  br label %invertfor.body3.i32

mergeinvertfor.body3.i32_for.inc13.i.loopexit:    ; preds = %invertfor.inc13.i
  %inc358 = add i32 %reverse_op.7, 5
  %wide.trip.count.i_unwrap = zext i32 %46 to i64, !node !285
  %inc360 = add i32 %reverse_mem.7, 9
  br label %invertfor.body3.i32

invertfor.inc13.i:                                ; preds = %mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit, %incinvertfor.cond1.preheader.i27
  %"iv5'ac.0.in" = phi i64 [ %_unwrap57, %mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit ], [ %"iv5'ac.0", %incinvertfor.cond1.preheader.i27 ]
  %reverse_mem.7 = phi i32 [ %inc386, %mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit ], [ %inc280, %incinvertfor.cond1.preheader.i27 ]
  %reverse_op.7 = phi i32 [ %inc384, %mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit ], [ %inc278, %incinvertfor.cond1.preheader.i27 ]
  %"iv5'ac.0" = add nsw i64 %"iv5'ac.0.in", -1
  %inc368 = add i32 %reverse_op.7, 2
  %45 = getelementptr inbounds i32, i32* %4, i64 %"iv'ac.0", !node !285
  %inc372 = add i32 %reverse_mem.7, 4
  %46 = load i32, i32* %45, align 4, !invariant.group !390, !node !285
  %cmp228.i_unwrap = icmp sgt i32 %46, 0
  br i1 %cmp228.i_unwrap, label %mergeinvertfor.body3.i32_for.inc13.i.loopexit, label %invertfor.cond1.preheader.i27

mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit: ; preds = %invertset_block.exit
  %inc384 = add i32 %reverse_op.8, 5
  %_unwrap57 = zext i32 %48 to i64, !node !285
  %inc386 = add i32 %reverse_mem.8, 13
  br label %invertfor.inc13.i

invertset_block.exit:                             ; preds = %mergeinvertfor.cond1.preheader.lr.ph.i_for.end.loopexit, %incinvertfor.cond1.preheader.lr.ph.i
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count_unwrap67, %mergeinvertfor.cond1.preheader.lr.ph.i_for.end.loopexit ], [ %"iv'ac.0", %incinvertfor.cond1.preheader.lr.ph.i ]
  %reverse_mem.8 = phi i32 [ 1, %mergeinvertfor.cond1.preheader.lr.ph.i_for.end.loopexit ], [ %inc194, %incinvertfor.cond1.preheader.lr.ph.i ]
  %reverse_op.8 = phi i32 [ 1, %mergeinvertfor.cond1.preheader.lr.ph.i_for.end.loopexit ], [ %inc192, %incinvertfor.cond1.preheader.lr.ph.i ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %arrayidx_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_relatives, i64 %"iv'ac.0", !node !285
  %arrayidx3_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %relatives, i64 %"iv'ac.0", !node !285
  %"arrayidx3'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"relatives'", i64 %"iv'ac.0", !node !285
  %_unwrap64 = getelementptr inbounds { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %2, i64 %"iv'ac.0", !node !285
  %tapeArg60_unwrap = load { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }* %_unwrap64, align 8, !invariant.group !391, !node !285
  call void @diffemat_mult.9(%struct.Matrix* %arrayidx_unwrap, %struct.Matrix* %5, %struct.Matrix* %"'ipc59", %struct.Matrix* %arrayidx3_unwrap, %struct.Matrix* %"arrayidx3'ipg_unwrap", { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg60_unwrap), !node !285
  %inc404 = add i32 %reverse_op.8, 2
  %47 = getelementptr inbounds i32, i32* %3, i64 %"iv'ac.0", !node !285
  %inc408 = add i32 %reverse_mem.8, 9
  %48 = load i32, i32* %47, align 4, !invariant.group !392, !node !285
  %cmp30.i_unwrap = icmp sgt i32 %48, 0
  br i1 %cmp30.i_unwrap, label %mergeinvertfor.cond1.preheader.i27_set_block.exit.loopexit, label %invertset_identity.exit

mergeinvertfor.cond1.preheader.lr.ph.i_for.end.loopexit: ; preds = %invertdelete_matrix.exit39
  %wide.trip.count_unwrap67 = zext i32 %bone_count to i64, !node !285
  br label %invertset_block.exit

invertdelete_matrix.exit39:                       ; preds = %for.end.loopexit, %entry
  %forward_mem.4 = phi i32 [ %phi.bo, %for.end.loopexit ], [ 7, %entry ]
  %forward_op.8 = phi i32 [ %forward_op.7.lcssa, %for.end.loopexit ], [ 0, %entry ]
  br i1 %cmp40, label %mergeinvertfor.cond1.preheader.lr.ph.i_for.end.loopexit, label %invertentry
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffeeuler_angles_to_rotation_matrix(double* noalias nocapture readonly %xzy, double* nocapture %"xzy'", %struct.Matrix* noalias nocapture %R, %struct.Matrix* nocapture %"R'", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg) local_unnamed_addr #5 {
for.cond1.preheader.lr.ph.i:
  %0 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 13
  %"arrayidx1'ipg" = getelementptr inbounds double, double* %"xzy'", i64 2, !node !285
  %1 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 14
  %"arrayidx2'ipg" = getelementptr inbounds double, double* %"xzy'", i64 1, !node !285
  %2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 15
  %call.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 8
  %"call.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 7
  %"call4.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 6
  %call.i167 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 5
  %"call.i167'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 4
  %"call4.i170'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 3
  %call.i172 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 2
  %"call.i172'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 1
  %"call4.i175'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 0
  %"'ipc" = bitcast i8* %"call4.i'mi" to double*
  %"'ipc35" = bitcast i8* %"call4.i170'mi" to double*
  br label %for.body3.lr.ph.i

for.body3.lr.ph.i:                                ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %forward_op.0 = phi i32 [ 0, %for.cond1.preheader.lr.ph.i ], [ %forward_op.2.lcssa, %for.inc12.i ]
  %iv = phi i64 [ 0, %for.cond1.preheader.lr.ph.i ], [ %iv.next, %for.inc12.i ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc99 = add i32 %forward_op.0, 4
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %forward_op.1 = phi i32 [ %inc99, %for.body3.lr.ph.i ], [ %forward_op.2, %for.body3.i ]
  %iv1 = phi i64 [ 0, %for.body3.lr.ph.i ], [ %iv.next2, %for.body3.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %cmp4.i = icmp eq i64 %iv, %iv1
  %inc101 = add i32 %forward_op.1, 1
  %inc103 = add i32 %forward_op.1, 2
  %forward_op.2 = select i1 %cmp4.i, i32 %inc101, i32 %inc103
  %exitcond.not.i = icmp eq i64 %iv.next2, 3
  br i1 %exitcond.not.i, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.body3.i
  %forward_op.2.lcssa = phi i32 [ %forward_op.2, %for.body3.i ]
  %exitcond37.not.i = icmp eq i64 %iv.next, 3
  br i1 %exitcond37.not.i, label %for.cond1.preheader.lr.ph.i182, label %for.body3.lr.ph.i, !llvm.loop !189

for.cond1.preheader.lr.ph.i182:                   ; preds = %for.inc12.i
  %forward_op.2.lcssa.lcssa = phi i32 [ %forward_op.2.lcssa, %for.inc12.i ]
  %"'ipc55" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %3 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc58" = bitcast i8* %"call.i167'mi" to %struct.Matrix*
  %4 = bitcast i8* %call.i167 to %struct.Matrix*
  %"'ipc57" = bitcast i8* %"call.i172'mi" to %struct.Matrix*
  %5 = bitcast i8* %call.i172 to %struct.Matrix*
  %"'ipc49" = bitcast i8* %"call4.i175'mi" to double*
  %"arrayidx5'ipg" = getelementptr inbounds i8, i8* %"call4.i'mi", i64 32
  %"'ipc31" = bitcast i8* %"arrayidx5'ipg" to double*
  %"arrayidx11'ipg" = getelementptr inbounds i8, i8* %"call4.i'mi", i64 40
  %"'ipc29" = bitcast i8* %"arrayidx11'ipg" to double*
  %"arrayidx23'ipg" = getelementptr inbounds i8, i8* %"call4.i'mi", i64 56
  %"'ipc26" = bitcast i8* %"arrayidx23'ipg" to double*
  %"arrayidx35'ipg" = getelementptr inbounds i8, i8* %"call4.i'mi", i64 64
  %"'ipc23" = bitcast i8* %"arrayidx35'ipg" to double*
  br label %for.body3.lr.ph.i189

for.body3.lr.ph.i189:                             ; preds = %for.inc12.i204, %for.cond1.preheader.lr.ph.i182
  %forward_op.3 = phi i32 [ %forward_op.2.lcssa.lcssa, %for.cond1.preheader.lr.ph.i182 ], [ %forward_op.5.lcssa, %for.inc12.i204 ]
  %iv3 = phi i64 [ 0, %for.cond1.preheader.lr.ph.i182 ], [ %iv.next4, %for.inc12.i204 ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %inc111 = add i32 %forward_op.3, 4
  br label %for.body3.i192

for.body3.i192:                                   ; preds = %for.body3.i192, %for.body3.lr.ph.i189
  %forward_op.4 = phi i32 [ %inc111, %for.body3.lr.ph.i189 ], [ %forward_op.5, %for.body3.i192 ]
  %iv5 = phi i64 [ 0, %for.body3.lr.ph.i189 ], [ %iv.next6, %for.body3.i192 ]
  %iv.next6 = add nuw nsw i64 %iv5, 1
  %cmp4.i191 = icmp eq i64 %iv3, %iv5
  %inc113 = add i32 %forward_op.4, 1
  %inc115 = add i32 %forward_op.4, 2
  %forward_op.5 = select i1 %cmp4.i191, i32 %inc113, i32 %inc115
  %exitcond.not.i200 = icmp eq i64 %iv.next6, 3
  br i1 %exitcond.not.i200, label %for.inc12.i204, label %for.body3.i192, !llvm.loop !188

for.inc12.i204:                                   ; preds = %for.body3.i192
  %forward_op.5.lcssa = phi i32 [ %forward_op.5, %for.body3.i192 ]
  %exitcond37.not.i203 = icmp eq i64 %iv.next4, 3
  br i1 %exitcond37.not.i203, label %for.cond1.preheader.lr.ph.i211, label %for.body3.lr.ph.i189, !llvm.loop !189

for.cond1.preheader.lr.ph.i211:                   ; preds = %for.inc12.i204
  %forward_op.5.lcssa.lcssa = phi i32 [ %forward_op.5.lcssa, %for.inc12.i204 ]
  %"arrayidx47'ipg" = getelementptr inbounds i8, i8* %"call4.i170'mi", i64 48
  %"'ipc46" = bitcast i8* %"arrayidx47'ipg" to double*
  %"arrayidx60'ipg" = getelementptr inbounds i8, i8* %"call4.i170'mi", i64 16
  %"'ipc43" = bitcast i8* %"arrayidx60'ipg" to double*
  %"arrayidx72'ipg" = getelementptr inbounds i8, i8* %"call4.i170'mi", i64 64
  %"'ipc40" = bitcast i8* %"arrayidx72'ipg" to double*
  br label %for.body3.lr.ph.i218

for.body3.lr.ph.i218:                             ; preds = %for.inc12.i233, %for.cond1.preheader.lr.ph.i211
  %forward_op.6 = phi i32 [ %forward_op.5.lcssa.lcssa, %for.cond1.preheader.lr.ph.i211 ], [ %forward_op.8.lcssa, %for.inc12.i233 ]
  %iv7 = phi i64 [ 0, %for.cond1.preheader.lr.ph.i211 ], [ %iv.next8, %for.inc12.i233 ]
  %iv.next8 = add nuw nsw i64 %iv7, 1
  %inc123 = add i32 %forward_op.6, 4
  br label %for.body3.i221

for.body3.i221:                                   ; preds = %for.body3.i221, %for.body3.lr.ph.i218
  %forward_op.7 = phi i32 [ %inc123, %for.body3.lr.ph.i218 ], [ %forward_op.8, %for.body3.i221 ]
  %iv9 = phi i64 [ 0, %for.body3.lr.ph.i218 ], [ %iv.next10, %for.body3.i221 ]
  %iv.next10 = add nuw nsw i64 %iv9, 1
  %cmp4.i220 = icmp eq i64 %iv7, %iv9
  %inc125 = add i32 %forward_op.7, 1
  %inc127 = add i32 %forward_op.7, 2
  %forward_op.8 = select i1 %cmp4.i220, i32 %inc125, i32 %inc127
  %exitcond.not.i229 = icmp eq i64 %iv.next10, 3
  br i1 %exitcond.not.i229, label %for.inc12.i233, label %for.body3.i221, !llvm.loop !188

for.inc12.i233:                                   ; preds = %for.body3.i221
  %forward_op.8.lcssa = phi i32 [ %forward_op.8, %for.body3.i221 ]
  %exitcond37.not.i232 = icmp eq i64 %iv.next8, 3
  br i1 %exitcond37.not.i232, label %set_identity.exit234, label %for.body3.lr.ph.i218, !llvm.loop !189

set_identity.exit234:                             ; preds = %for.inc12.i233
  %forward_op.8.lcssa.lcssa = phi i32 [ %forward_op.8.lcssa, %for.inc12.i233 ]
  %"arrayidx84'ipg" = getelementptr inbounds i8, i8* %"call4.i175'mi", i64 8
  %"'ipc66" = bitcast i8* %"arrayidx84'ipg" to double*
  %"arrayidx97'ipg" = getelementptr inbounds i8, i8* %"call4.i175'mi", i64 24
  %"'ipc63" = bitcast i8* %"arrayidx97'ipg" to double*
  %"arrayidx109'ipg" = getelementptr inbounds i8, i8* %"call4.i175'mi", i64 32
  %"'ipc60" = bitcast i8* %"arrayidx109'ipg" to double*
  %call.i235 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 12
  %"call.i235'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 11
  %"'ipc54" = bitcast i8* %"call.i235'mi" to %struct.Matrix*
  %6 = bitcast i8* %call.i235 to %struct.Matrix*
  %tapeArg59 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 10
  %tapeArg56 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double } %tapeArg, 9
  call void @diffemat_mult.7(%struct.Matrix* %6, %struct.Matrix* %"'ipc54", %struct.Matrix* %3, %struct.Matrix* %"'ipc55", %struct.Matrix* %R, %struct.Matrix* %"R'", { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg56), !node !285
  call void @diffemat_mult.8(%struct.Matrix* %5, %struct.Matrix* %"'ipc57", %struct.Matrix* %4, %struct.Matrix* %"'ipc58", %struct.Matrix* %6, %struct.Matrix* %"'ipc54", { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg59)
  tail call void @free(i8* nonnull %"call.i235'mi")
  tail call void @free(i8* %call.i235)
  %7 = load double, double* %"'ipc60", align 8
  store double 0.000000e+00, double* %"'ipc60", align 8
  %8 = load double, double* %"'ipc63", align 8
  store double 0.000000e+00, double* %"'ipc63", align 8
  %9 = load double, double* %"'ipc66", align 8
  store double 0.000000e+00, double* %"'ipc66", align 8
  %10 = load double, double* %"'ipc49", align 8
  store double 0.000000e+00, double* %"'ipc49", align 8
  br label %invertfor.inc12.i233

invertfor.cond1.preheader.lr.ph.i:                ; preds = %invertfor.body3.lr.ph.i
  %reverse_mem.1.in.lcssa.lcssa = phi i32 [ %reverse_mem.1.in.lcssa, %invertfor.body3.lr.ph.i ]
  %reverse_op.1.lcssa.lcssa = phi i32 [ %reverse_op.1.lcssa, %invertfor.body3.lr.ph.i ]
  %11 = fsub fast double %45, %44
  %12 = call fast double @llvm.cos.f64(double %0)
  %13 = fmul fast double %11, %12
  %14 = call fast double @llvm.sin.f64(double %0)
  %15 = fadd fast double %43, %46
  %16 = fmul fast double %14, %15
  %17 = fsub fast double %13, %16
  %18 = fsub fast double %53, %52
  %19 = call fast double @llvm.cos.f64(double %1)
  %20 = fmul fast double %18, %19
  %21 = call fast double @llvm.sin.f64(double %1)
  %22 = fadd fast double %51, %54
  %23 = fmul fast double %21, %22
  %24 = fsub fast double %20, %23
  %25 = fsub fast double %9, %8
  %26 = call fast double @llvm.cos.f64(double %2)
  %27 = fmul fast double %25, %26
  %28 = call fast double @llvm.sin.f64(double %2)
  %29 = fadd fast double %7, %10
  %30 = fmul fast double %28, %29
  %31 = fsub fast double %27, %30
  tail call void @free(i8* nonnull %"call4.i175'mi")
  tail call void @free(i8* nonnull %"call.i172'mi")
  tail call void @free(i8* %call.i172)
  tail call void @free(i8* nonnull %"call4.i170'mi")
  tail call void @free(i8* nonnull %"call.i167'mi")
  tail call void @free(i8* %call.i167)
  tail call void @free(i8* nonnull %"call4.i'mi")
  tail call void @free(i8* nonnull %"call.i'mi")
  tail call void @free(i8* %call.i)
  %32 = load double, double* %"arrayidx2'ipg", align 8, !node !285
  %33 = fadd fast double %32, %31, !node !285
  store double %33, double* %"arrayidx2'ipg", align 8
  %34 = load double, double* %"arrayidx1'ipg", align 8, !node !285
  %35 = fadd fast double %34, %24, !node !285
  store double %35, double* %"arrayidx1'ipg", align 8
  %36 = load double, double* %"xzy'", align 8, !node !285
  %37 = fadd fast double %36, %17, !node !285
  %inc157 = add i32 %reverse_op.1.lcssa.lcssa, 7
  %inc159 = add i32 %reverse_mem.1.in.lcssa.lcssa, 20
  store double %37, double* %"xzy'", align 8
  %38 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.8.lcssa.lcssa, i32 %inc157, i32 13, i32 %inc159)
  ret void

invertfor.body3.lr.ph.i:                          ; preds = %invertfor.body3.i
  %reverse_mem.1.in.lcssa = phi i32 [ %reverse_mem.1.in, %invertfor.body3.i ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.body3.i ]
  %39 = icmp eq i64 %"iv'ac.0", 0
  br i1 %39, label %invertfor.cond1.preheader.lr.ph.i, label %incinvertfor.body3.lr.ph.i

incinvertfor.body3.lr.ph.i:                       ; preds = %invertfor.body3.lr.ph.i
  %40 = add nsw i64 %"iv'ac.0", -1
  %inc171 = add i32 %reverse_op.1.lcssa, 5
  %inc173 = add i32 %reverse_mem.1.in.lcssa, 10
  br label %invertfor.inc12.i

invertfor.body3.i:                                ; preds = %invertif.else.i, %invertif.then.i
  %41 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %41, label %invertfor.body3.lr.ph.i, label %incinvertfor.body3.i

incinvertfor.body3.i:                             ; preds = %invertfor.body3.i
  %inc179 = add i32 %reverse_mem.1.in, 8
  %42 = add nsw i64 %"iv1'ac.0", -1
  %inc181 = add i32 %reverse_op.1, 4
  br label %invertfor.inc.i

invertif.then.i:                                  ; preds = %invertfor.inc.i
  %_unwrap20 = shl nuw nsw i64 %"iv'ac.0", 2
  %"arrayidx.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc", i64 %_unwrap20
  store double 0.000000e+00, double* %"arrayidx.i'ipg_unwrap", align 8
  br label %invertfor.body3.i

invertif.else.i:                                  ; preds = %invertfor.inc.i
  %_unwrap21 = mul nuw nsw i64 %"iv'ac.0", 3
  %_unwrap22 = add nuw nsw i64 %"iv1'ac.0", %_unwrap21
  %"arrayidx11.i'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc", i64 %_unwrap22
  store double 0.000000e+00, double* %"arrayidx11.i'ipg_unwrap", align 8
  br label %invertfor.body3.i

invertfor.inc.i:                                  ; preds = %invertfor.inc12.i, %incinvertfor.body3.i
  %"iv1'ac.0" = phi i64 [ 2, %invertfor.inc12.i ], [ %42, %incinvertfor.body3.i ]
  %reverse_mem.1.in = phi i32 [ %reverse_mem.2, %invertfor.inc12.i ], [ %inc179, %incinvertfor.body3.i ]
  %reverse_op.1 = phi i32 [ %reverse_op.2, %invertfor.inc12.i ], [ %inc181, %incinvertfor.body3.i ]
  %cmp4.i_unwrap = icmp eq i64 %"iv'ac.0", %"iv1'ac.0"
  br i1 %cmp4.i_unwrap, label %invertif.then.i, label %invertif.else.i

invertfor.inc12.i:                                ; preds = %invertfor.cond1.preheader.lr.ph.i182, %incinvertfor.body3.lr.ph.i
  %"iv'ac.0" = phi i64 [ 2, %invertfor.cond1.preheader.lr.ph.i182 ], [ %40, %incinvertfor.body3.lr.ph.i ]
  %reverse_mem.2 = phi i32 [ %inc285, %invertfor.cond1.preheader.lr.ph.i182 ], [ %inc173, %incinvertfor.body3.lr.ph.i ]
  %reverse_op.2 = phi i32 [ %inc281, %invertfor.cond1.preheader.lr.ph.i182 ], [ %inc171, %incinvertfor.body3.lr.ph.i ]
  br label %invertfor.inc.i

invertfor.cond1.preheader.lr.ph.i182:             ; preds = %invertfor.body3.lr.ph.i189
  %reverse_mem.4.in.lcssa.lcssa = phi i32 [ %reverse_mem.4.in.lcssa, %invertfor.body3.lr.ph.i189 ]
  %reverse_op.4.lcssa.lcssa = phi i32 [ %reverse_op.4.lcssa, %invertfor.body3.lr.ph.i189 ]
  %43 = load double, double* %"'ipc23", align 8
  store double 0.000000e+00, double* %"'ipc23", align 8
  %44 = load double, double* %"'ipc26", align 8
  store double 0.000000e+00, double* %"'ipc26", align 8
  %45 = load double, double* %"'ipc29", align 8
  store double 0.000000e+00, double* %"'ipc29", align 8
  %46 = load double, double* %"'ipc31", align 8
  store double 0.000000e+00, double* %"'ipc31", align 8
  %inc281 = add i32 %reverse_op.4.lcssa.lcssa, 13
  %inc285 = add i32 %reverse_mem.4.in.lcssa.lcssa, 37
  br label %invertfor.inc12.i

invertfor.body3.lr.ph.i189:                       ; preds = %invertfor.body3.i192
  %reverse_mem.4.in.lcssa = phi i32 [ %reverse_mem.4.in, %invertfor.body3.i192 ]
  %reverse_op.4.lcssa = phi i32 [ %reverse_op.4, %invertfor.body3.i192 ]
  %47 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %47, label %invertfor.cond1.preheader.lr.ph.i182, label %incinvertfor.body3.lr.ph.i189

incinvertfor.body3.lr.ph.i189:                    ; preds = %invertfor.body3.lr.ph.i189
  %48 = add nsw i64 %"iv3'ac.0", -1
  %inc293 = add i32 %reverse_op.4.lcssa, 5
  %inc295 = add i32 %reverse_mem.4.in.lcssa, 10
  br label %invertfor.inc12.i204

invertfor.body3.i192:                             ; preds = %invertif.else.i198, %invertif.then.i194
  %49 = icmp eq i64 %"iv5'ac.0", 0
  br i1 %49, label %invertfor.body3.lr.ph.i189, label %incinvertfor.body3.i192

incinvertfor.body3.i192:                          ; preds = %invertfor.body3.i192
  %inc301 = add i32 %reverse_mem.4.in, 8
  %50 = add nsw i64 %"iv5'ac.0", -1
  %inc303 = add i32 %reverse_op.4, 4
  br label %invertfor.inc.i201

invertif.then.i194:                               ; preds = %invertfor.inc.i201
  %_unwrap37 = shl nuw nsw i64 %"iv3'ac.0", 2
  %"arrayidx.i193'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc35", i64 %_unwrap37
  store double 0.000000e+00, double* %"arrayidx.i193'ipg_unwrap", align 8
  br label %invertfor.body3.i192

invertif.else.i198:                               ; preds = %invertfor.inc.i201
  %_unwrap38 = mul nuw nsw i64 %"iv3'ac.0", 3
  %_unwrap39 = add nuw nsw i64 %"iv5'ac.0", %_unwrap38
  %"arrayidx11.i197'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc35", i64 %_unwrap39
  store double 0.000000e+00, double* %"arrayidx11.i197'ipg_unwrap", align 8
  br label %invertfor.body3.i192

invertfor.inc.i201:                               ; preds = %invertfor.inc12.i204, %incinvertfor.body3.i192
  %"iv5'ac.0" = phi i64 [ 2, %invertfor.inc12.i204 ], [ %50, %incinvertfor.body3.i192 ]
  %reverse_mem.4.in = phi i32 [ %reverse_mem.5, %invertfor.inc12.i204 ], [ %inc301, %incinvertfor.body3.i192 ]
  %reverse_op.4 = phi i32 [ %reverse_op.5, %invertfor.inc12.i204 ], [ %inc303, %incinvertfor.body3.i192 ]
  %cmp4.i191_unwrap = icmp eq i64 %"iv3'ac.0", %"iv5'ac.0"
  br i1 %cmp4.i191_unwrap, label %invertif.then.i194, label %invertif.else.i198

invertfor.inc12.i204:                             ; preds = %invertfor.cond1.preheader.lr.ph.i211, %incinvertfor.body3.lr.ph.i189
  %"iv3'ac.0" = phi i64 [ 2, %invertfor.cond1.preheader.lr.ph.i211 ], [ %48, %incinvertfor.body3.lr.ph.i189 ]
  %reverse_mem.5 = phi i32 [ %inc407, %invertfor.cond1.preheader.lr.ph.i211 ], [ %inc295, %incinvertfor.body3.lr.ph.i189 ]
  %reverse_op.5 = phi i32 [ %inc403, %invertfor.cond1.preheader.lr.ph.i211 ], [ %inc293, %incinvertfor.body3.lr.ph.i189 ]
  br label %invertfor.inc.i201

invertfor.cond1.preheader.lr.ph.i211:             ; preds = %invertfor.body3.lr.ph.i218
  %reverse_mem.7.in.lcssa.lcssa = phi i32 [ %reverse_mem.7.in.lcssa, %invertfor.body3.lr.ph.i218 ]
  %reverse_op.7.lcssa.lcssa = phi i32 [ %reverse_op.7.lcssa, %invertfor.body3.lr.ph.i218 ]
  %51 = load double, double* %"'ipc40", align 8
  store double 0.000000e+00, double* %"'ipc40", align 8
  %52 = load double, double* %"'ipc43", align 8
  store double 0.000000e+00, double* %"'ipc43", align 8
  %53 = load double, double* %"'ipc46", align 8
  store double 0.000000e+00, double* %"'ipc46", align 8
  %54 = load double, double* %"'ipc35", align 8
  store double 0.000000e+00, double* %"'ipc35", align 8
  %inc403 = add i32 %reverse_op.7.lcssa.lcssa, 13
  %inc407 = add i32 %reverse_mem.7.in.lcssa.lcssa, 37
  br label %invertfor.inc12.i204

invertfor.body3.lr.ph.i218:                       ; preds = %invertfor.body3.i221
  %reverse_mem.7.in.lcssa = phi i32 [ %reverse_mem.7.in, %invertfor.body3.i221 ]
  %reverse_op.7.lcssa = phi i32 [ %reverse_op.7, %invertfor.body3.i221 ]
  %55 = icmp eq i64 %"iv7'ac.0", 0
  br i1 %55, label %invertfor.cond1.preheader.lr.ph.i211, label %incinvertfor.body3.lr.ph.i218

incinvertfor.body3.lr.ph.i218:                    ; preds = %invertfor.body3.lr.ph.i218
  %56 = add nsw i64 %"iv7'ac.0", -1
  %inc415 = add i32 %reverse_op.7.lcssa, 5
  %inc417 = add i32 %reverse_mem.7.in.lcssa, 10
  br label %invertfor.inc12.i233

invertfor.body3.i221:                             ; preds = %invertif.else.i227, %invertif.then.i223
  %57 = icmp eq i64 %"iv9'ac.0", 0
  br i1 %57, label %invertfor.body3.lr.ph.i218, label %incinvertfor.body3.i221

incinvertfor.body3.i221:                          ; preds = %invertfor.body3.i221
  %inc423 = add i32 %reverse_mem.7.in, 8
  %58 = add nsw i64 %"iv9'ac.0", -1
  %inc425 = add i32 %reverse_op.7, 4
  br label %invertfor.inc.i230

invertif.then.i223:                               ; preds = %invertfor.inc.i230
  %_unwrap51 = shl nuw nsw i64 %"iv7'ac.0", 2
  %"arrayidx.i222'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc49", i64 %_unwrap51
  store double 0.000000e+00, double* %"arrayidx.i222'ipg_unwrap", align 8
  br label %invertfor.body3.i221

invertif.else.i227:                               ; preds = %invertfor.inc.i230
  %_unwrap52 = mul nuw nsw i64 %"iv7'ac.0", 3
  %_unwrap53 = add nuw nsw i64 %"iv9'ac.0", %_unwrap52
  %"arrayidx11.i226'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc49", i64 %_unwrap53
  store double 0.000000e+00, double* %"arrayidx11.i226'ipg_unwrap", align 8
  br label %invertfor.body3.i221

invertfor.inc.i230:                               ; preds = %invertfor.inc12.i233, %incinvertfor.body3.i221
  %"iv9'ac.0" = phi i64 [ 2, %invertfor.inc12.i233 ], [ %58, %incinvertfor.body3.i221 ]
  %reverse_mem.7.in = phi i32 [ %reverse_mem.8, %invertfor.inc12.i233 ], [ %inc423, %incinvertfor.body3.i221 ]
  %reverse_op.7 = phi i32 [ %reverse_op.8, %invertfor.inc12.i233 ], [ %inc425, %incinvertfor.body3.i221 ]
  %cmp4.i220_unwrap = icmp eq i64 %"iv7'ac.0", %"iv9'ac.0"
  br i1 %cmp4.i220_unwrap, label %invertif.then.i223, label %invertif.else.i227

invertfor.inc12.i233:                             ; preds = %incinvertfor.body3.lr.ph.i218, %set_identity.exit234
  %"iv7'ac.0" = phi i64 [ 2, %set_identity.exit234 ], [ %56, %incinvertfor.body3.lr.ph.i218 ]
  %reverse_mem.8 = phi i32 [ 29, %set_identity.exit234 ], [ %inc417, %incinvertfor.body3.lr.ph.i218 ]
  %reverse_op.8 = phi i32 [ 9, %set_identity.exit234 ], [ %inc415, %incinvertfor.body3.lr.ph.i218 ]
  br label %invertfor.inc.i230
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffemat_mult.7(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 8
  %2 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 5
  %3 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 6
  %4 = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 7
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0, !node !285
  %5 = load i32, i32* %nrows, align 8, !tbaa !138, !node !285
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1, !node !285
  %6 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %mul3.i = mul nsw i32 %6, %5, !node !285
  %cmp.not.i = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 3
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i32 2, i32 1
  %forward_op.0 = select i1 %cmp.not.i, i32 1, i32 %spec.select
  %cmp85 = icmp sgt i32 %5, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertfor.end49

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %6, 0
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1, !node !285
  %7 = zext i32 %5 to i64, !node !285
  %wide.trip.count96 = zext i32 %6 to i64, !node !285
  %inc157 = or i32 %forward_op.0, 12
  %inc159 = add nuw nsw i32 %inc157, 1
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %forward_mem.0 = phi i32 [ 16, %for.cond2.preheader.lr.ph ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.1 = phi i32 [ %inc159, %for.cond2.preheader.lr.ph ], [ %forward_op.5, %for.inc47 ]
  %iv = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %iv.next, %for.inc47 ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc161 = add i32 %forward_op.1, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %inc173 = add i32 %forward_mem.0, 6
  %8 = load i32, i32* %ncols21, align 4, !tbaa !139, !invariant.group !393, !node !285
  %cmp2281 = icmp sgt i32 %8, 1
  %wide.trip.count = zext i32 %8 to i64, !node !285
  %inc175 = add i32 %forward_op.1, 2
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %forward_mem.1 = phi i32 [ %inc173, %for.body5.lr.ph ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.2 = phi i32 [ %inc175, %for.body5.lr.ph ], [ %forward_op.4, %for.inc44 ]
  %iv4 = phi i64 [ 0, %for.body5.lr.ph ], [ %iv.next5, %for.inc44 ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %inc205 = add i32 %forward_mem.1, 4
  %inc215 = add i32 %forward_op.2, 16
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %forward_mem.2 = phi i32 [ %inc267, %for.body23 ], [ %inc205, %for.body5 ]
  %forward_op.3 = phi i32 [ %inc281, %for.body23 ], [ %inc215, %for.body5 ]
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body5 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc267 = add i32 %forward_mem.2, 4
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %inc281 = add i32 %forward_op.3, 29
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %forward_mem.3 = phi i32 [ %inc205, %for.body5 ], [ %inc267, %for.body23 ]
  %forward_op.4 = phi i32 [ %inc215, %for.body5 ], [ %inc281, %for.body23 ]
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %forward_mem.4 = phi i32 [ %forward_mem.0, %for.cond2.preheader ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.5 = phi i32 [ %inc161, %for.cond2.preheader ], [ %forward_op.4, %for.inc44 ]
  %exitcond101.not = icmp eq i64 %iv.next, %7
  br i1 %exitcond101.not, label %invertfor.end49, label %for.cond2.preheader, !llvm.loop !187

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  %9 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.6, i32 %reverse_op.0, i32 %forward_mem.5, i32 %reverse_mem.0)
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 0
  tail call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, i1, i1, double*, double*, double*, double* } %tapeArg, 1
  tail call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.end49, %invertfor.cond2.preheader.lr.ph
  %reverse_mem.0 = phi i32 [ %inc337, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %reverse_op.0 = phi i32 [ %inc341, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %cmp.not.i.not = xor i1 %cmp.not.i, true
  %cmp8.i_unwrap = icmp sgt i32 %mul3.i, 0
  %or.cond = and i1 %cmp.not.i.not, %cmp8.i_unwrap
  br i1 %or.cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.cond2.preheader ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.cond2.preheader ]
  %inc341 = add i32 %reverse_op.1.lcssa, 1
  %10 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %10)
  %11 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double* %2 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %13)
  %inc337 = add i32 %reverse_mem.1.lcssa, 27
  %14 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %14)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5.lr.ph
  %"add43'de.0" = phi double [ %"add43'de.1.lcssa", %invertfor.body5.lr.ph ], [ %"add43'de.4", %invertfor.inc47 ]
  %reverse_mem.1 = phi i32 [ %inc479, %invertfor.body5.lr.ph ], [ %inc729, %invertfor.inc47 ]
  %reverse_op.1 = phi i32 [ %inc481.lcssa, %invertfor.body5.lr.ph ], [ %reverse_op.5, %invertfor.inc47 ]
  %15 = icmp eq i64 %"iv'ac.0", 0
  br i1 %15, label %invertfor.cond2.preheader.lr.ph, label %incinvertfor.cond2.preheader

incinvertfor.cond2.preheader:                     ; preds = %invertfor.cond2.preheader
  %inc345 = add i32 %reverse_op.1, 2
  %inc347 = add i32 %reverse_mem.1, 3
  br label %invertfor.inc47

invertfor.body5.lr.ph:                            ; preds = %invertfor.body5
  %"add43'de.1.lcssa" = phi double [ %"add43'de.1", %invertfor.body5 ]
  %reverse_mem.2.lcssa = phi i32 [ %reverse_mem.2, %invertfor.body5 ]
  %inc481.lcssa = phi i32 [ %inc481, %invertfor.body5 ]
  %inc479 = add i32 %reverse_mem.2.lcssa, 42
  br label %invertfor.cond2.preheader

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa735, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %reverse_mem.2 = phi i32 [ %inc699, %invertfor.body23.preheader ], [ %inc721, %invertfor.inc44 ]
  %reverse_op.2 = phi i32 [ %inc697, %invertfor.body23.preheader ], [ %reverse_op.4, %invertfor.inc44 ]
  %_unwrap16 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0", !node !285
  %"'il_phi3_unwrap" = load double*, double** %_unwrap16, align 8, !invariant.group !394, !node !285
  %_unwrap18 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap90, !node !285
  %_unwrap19 = add nuw nsw i64 %_unwrap18, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap19, !node !285
  %16 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8
  %17 = fadd fast double %"mul13'de.1", %16, !node !285
  %_unwrap23 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap = zext i32 %_unwrap23 to i64, !node !285
  %18 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap, !node !285
  %19 = add nuw nsw i64 %"iv4'ac.1", %18, !node !285
  %20 = getelementptr inbounds double, double* %2, i64 %19, !node !285
  %21 = load double, double* %20, align 8, !invariant.group !395, !node !285
  %m0diffe = fmul fast double %17, %21, !node !285
  %22 = getelementptr inbounds double, double* %3, i64 %19, !node !285
  %23 = load double, double* %22, align 8, !invariant.group !396, !node !285
  %m1diffe = fmul fast double %17, %23, !node !285
  %"data7'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2, !node !285
  %"'ipl_unwrap" = load double*, double** %"data7'ipg_unwrap", align 8, !invariant.group !397, !node !285
  %nrows8_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0, !node !285
  %_unwrap31 = load i32, i32* %nrows8_unwrap, align 8, !tbaa !138, !invariant.group !398, !node !285
  %_unwrap32 = sext i32 %_unwrap31 to i64, !node !285
  %_unwrap33 = mul nsw i64 %"iv4'ac.1", %_unwrap32, !node !285
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap33, !node !285
  %24 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !node !285
  %25 = fadd fast double %24, %m0diffe, !node !285
  store double %25, double* %"arrayidx12'ipg_unwrap", align 8
  %"data'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2, !node !285
  %"'ipl14_unwrap" = load double*, double** %"data'ipg_unwrap", align 8, !invariant.group !399, !node !285
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl14_unwrap", i64 %"iv'ac.0", !node !285
  %26 = load double, double* %"arrayidx'ipg_unwrap", align 8, !node !285
  %27 = fadd fast double %26, %m1diffe, !node !285
  store double %27, double* %"arrayidx'ipg_unwrap", align 8
  %28 = icmp eq i64 %"iv4'ac.1", 0
  %inc481 = add i32 %reverse_op.2, 25
  br i1 %28, label %invertfor.body5.lr.ph, label %incinvertfor.body5

incinvertfor.body5:                               ; preds = %invertfor.body5
  %inc487 = add i32 %reverse_mem.2, 44
  br label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body23 ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.body23 ]
  %.lcssa735 = phi double [ %46, %invertfor.body23 ]
  %.lcssa = phi double [ %48, %invertfor.body23 ]
  %inc697 = add i32 %reverse_op.3.lcssa, 44
  %inc699 = add i32 %reverse_mem.3.lcssa, 62
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %46, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %48, %incinvertfor.body23 ]
  %"iv6'ac.2" = phi i64 [ %_unwrap85, %mergeinvertfor.body23_for.inc44.loopexit ], [ %49, %incinvertfor.body23 ]
  %reverse_mem.3 = phi i32 [ %inc715, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc705, %incinvertfor.body23 ]
  %reverse_op.3 = phi i32 [ %inc713, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc703, %incinvertfor.body23 ]
  %_unwrap35 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0", !node !285
  %"'il_phi3_unwrap36" = load double*, double** %_unwrap35, align 8, !invariant.group !394, !node !285
  %_unwrap38 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap90, !node !285
  %_unwrap39 = add nuw nsw i64 %_unwrap38, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap40" = getelementptr inbounds double, double* %"'il_phi3_unwrap36", i64 %_unwrap39, !node !285
  %29 = load double, double* %"arrayidx19'ipg_unwrap40", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap40", align 8
  %30 = fadd fast double %"add43'de.2", %29, !node !285
  %_unwrap54 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap55 = zext i32 %_unwrap54 to i64, !node !285
  %_unwrap57 = load i32, i32* %ncols21_unwrap86, align 4, !tbaa !139, !node !285
  %wide.trip.count_unwrap58 = zext i32 %_unwrap57 to i64, !node !285
  %31 = add nsw i64 %wide.trip.count_unwrap58, -1, !node !285
  %32 = mul nuw nsw i64 %31, %wide.trip.count96_unwrap55, !node !285
  %33 = mul nuw nsw i64 %"iv4'ac.1", %31, !node !285
  %34 = add nuw nsw i64 %"iv6'ac.2", %33, !node !285
  %35 = mul nuw nsw i64 %"iv'ac.0", %32, !node !285
  %36 = add nuw nsw i64 %34, %35, !node !285
  %37 = getelementptr inbounds double, double* %4, i64 %36, !node !285
  %38 = load double, double* %37, align 8, !invariant.group !400, !node !285
  %m0diffe60 = fmul fast double %30, %38, !node !285
  %39 = getelementptr inbounds double, double* %1, i64 %36, !node !285
  %40 = load double, double* %39, align 8, !invariant.group !401, !node !285
  %m1diffe66 = fmul fast double %30, %40, !node !285
  %"data7'ipg_unwrap69" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2, !node !285
  %"'ipl_unwrap70" = load double*, double** %"data7'ipg_unwrap69", align 8, !invariant.group !397, !node !285
  %iv.next7_unwrap = add nuw nsw i64 %"iv6'ac.2", 1, !node !285
  %nrows8_unwrap71 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0, !node !285
  %_unwrap72 = load i32, i32* %nrows8_unwrap71, align 8, !tbaa !138, !invariant.group !398, !node !285
  %_unwrap73 = sext i32 %_unwrap72 to i64, !node !285
  %_unwrap74 = mul nsw i64 %"iv4'ac.1", %_unwrap73, !node !285
  %_unwrap75 = add nsw i64 %iv.next7_unwrap, %_unwrap74, !node !285
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap70", i64 %_unwrap75, !node !285
  %41 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !node !285
  %42 = fadd fast double %41, %m0diffe60, !node !285
  store double %42, double* %"arrayidx35'ipg_unwrap", align 8
  %"data'ipg_unwrap76" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2, !node !285
  %"'ipl14_unwrap77" = load double*, double** %"data'ipg_unwrap76", align 8, !invariant.group !399, !node !285
  %_unwrap78 = mul nuw nsw i64 %iv.next7_unwrap, %wide.trip.count100_unwrap90, !node !285
  %_unwrap79 = add nuw nsw i64 %_unwrap78, %"iv'ac.0", !node !285
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl14_unwrap77", i64 %_unwrap79, !node !285
  %43 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !node !285
  %44 = fadd fast double %43, %m1diffe66, !node !285
  store double %44, double* %"arrayidx29'ipg_unwrap", align 8
  %45 = icmp eq i64 %"iv6'ac.2", 0
  %46 = select fast i1 %45, double 0.000000e+00, double %30
  %47 = fadd fast double %"mul13'de.2", %30, !node !285
  %48 = select fast i1 %45, double %47, double %"mul13'de.2"
  br i1 %45, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %49 = add nsw i64 %"iv6'ac.2", -1, !node !285
  %inc703 = add i32 %reverse_op.3, 45
  %inc705 = add i32 %reverse_mem.3, 64
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %inc713 = add i32 %reverse_op.4.in, 2
  %wide.trip.count_unwrap84 = zext i32 %_unwrap87 to i64, !node !285
  %_unwrap85 = add nsw i64 %wide.trip.count_unwrap84, -2, !node !285
  %inc715 = add i32 %reverse_mem.4, 7
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %mergeinvertfor.body5_for.inc47.loopexit, %incinvertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %mergeinvertfor.body5_for.inc47.loopexit ], [ %"add43'de.1", %incinvertfor.body5 ]
  %"iv4'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap88, %mergeinvertfor.body5_for.inc47.loopexit ], [ %"iv4'ac.1", %incinvertfor.body5 ]
  %reverse_mem.4 = phi i32 [ %inc727, %mergeinvertfor.body5_for.inc47.loopexit ], [ %inc487, %incinvertfor.body5 ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %mergeinvertfor.body5_for.inc47.loopexit ], [ %inc481, %incinvertfor.body5 ]
  %reverse_op.4 = add i32 %reverse_op.4.in, 1
  %"iv4'ac.1" = add nsw i64 %"iv4'ac.1.in", -1
  %ncols21_unwrap86 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1, !node !285
  %inc721 = add i32 %reverse_mem.4, 3
  %_unwrap87 = load i32, i32* %ncols21_unwrap86, align 4, !tbaa !139, !invariant.group !393, !node !285
  %cmp2281_unwrap = icmp sgt i32 %_unwrap87, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

mergeinvertfor.body5_for.inc47.loopexit:          ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap88 = zext i32 %6 to i64, !node !285
  %inc727 = add i32 %reverse_mem.5, 3
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.end49.loopexit, %incinvertfor.cond2.preheader
  %"add43'de.4" = phi double [ 0.000000e+00, %invertfor.end49.loopexit ], [ %"add43'de.0", %incinvertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap90, %invertfor.end49.loopexit ], [ %"iv'ac.0", %incinvertfor.cond2.preheader ]
  %reverse_mem.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc347, %incinvertfor.cond2.preheader ]
  %reverse_op.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc345, %incinvertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %inc729 = add i32 %reverse_mem.5, 1
  %cmp483_unwrap = icmp sgt i32 %6, 0
  br i1 %cmp483_unwrap, label %mergeinvertfor.body5_for.inc47.loopexit, label %invertfor.cond2.preheader

invertfor.end49.loopexit:                         ; preds = %invertfor.end49
  %wide.trip.count100_unwrap90 = zext i32 %5 to i64, !node !285
  br label %invertfor.inc47

invertfor.end49:                                  ; preds = %for.inc47, %entry
  %forward_mem.5 = phi i32 [ 15, %entry ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.6 = phi i32 [ %forward_op.0, %entry ], [ %forward_op.5, %for.inc47 ]
  br i1 %cmp85, label %invertfor.end49.loopexit, label %invertresize.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffemat_mult.8(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 7
  %1 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 4
  %2 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 5
  %3 = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 6
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0, !node !285
  %4 = load i32, i32* %nrows, align 8, !tbaa !138, !node !285
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1, !node !285
  %5 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %mul3.i = mul nsw i32 %5, %4, !node !285
  %cmp.not.i = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 2
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i32 2, i32 1
  %forward_op.0 = select i1 %cmp.not.i, i32 1, i32 %spec.select
  %cmp85 = icmp sgt i32 %4, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertfor.end49

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %5, 0
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1, !node !285
  %6 = zext i32 %4 to i64, !node !285
  %wide.trip.count96 = zext i32 %5 to i64, !node !285
  %inc150 = or i32 %forward_op.0, 12
  %inc152 = add nuw nsw i32 %inc150, 1
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %forward_mem.0 = phi i32 [ 15, %for.cond2.preheader.lr.ph ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.1 = phi i32 [ %inc152, %for.cond2.preheader.lr.ph ], [ %forward_op.5, %for.inc47 ]
  %iv = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %iv.next, %for.inc47 ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc154 = add i32 %forward_op.1, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %inc164 = add i32 %forward_mem.0, 5
  %7 = load i32, i32* %ncols21, align 4, !tbaa !139, !invariant.group !402, !node !285
  %cmp2281 = icmp sgt i32 %7, 1
  %wide.trip.count = zext i32 %7 to i64, !node !285
  %inc166 = add i32 %forward_op.1, 2
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %forward_mem.1 = phi i32 [ %inc164, %for.body5.lr.ph ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.2 = phi i32 [ %inc166, %for.body5.lr.ph ], [ %forward_op.4, %for.inc44 ]
  %iv4 = phi i64 [ 0, %for.body5.lr.ph ], [ %iv.next5, %for.inc44 ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %inc196 = add i32 %forward_mem.1, 4
  %inc206 = add i32 %forward_op.2, 16
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %forward_mem.2 = phi i32 [ %inc258, %for.body23 ], [ %inc196, %for.body5 ]
  %forward_op.3 = phi i32 [ %inc272, %for.body23 ], [ %inc206, %for.body5 ]
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body5 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc258 = add i32 %forward_mem.2, 4
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %inc272 = add i32 %forward_op.3, 29
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %forward_mem.3 = phi i32 [ %inc196, %for.body5 ], [ %inc258, %for.body23 ]
  %forward_op.4 = phi i32 [ %inc206, %for.body5 ], [ %inc272, %for.body23 ]
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %forward_mem.4 = phi i32 [ %forward_mem.0, %for.cond2.preheader ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.5 = phi i32 [ %inc154, %for.cond2.preheader ], [ %forward_op.4, %for.inc44 ]
  %exitcond101.not = icmp eq i64 %iv.next, %6
  br i1 %exitcond101.not, label %invertfor.end49, label %for.cond2.preheader, !llvm.loop !187

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  %8 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.6, i32 %reverse_op.0, i32 %forward_mem.5, i32 %reverse_mem.0)
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 0
  tail call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, i1, i1, double*, double*, double*, double* } %tapeArg, 1
  tail call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.end49, %invertfor.cond2.preheader.lr.ph
  %reverse_mem.0 = phi i32 [ %inc324, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %reverse_op.0 = phi i32 [ %inc328, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %cmp.not.i.not = xor i1 %cmp.not.i, true
  %cmp8.i_unwrap = icmp sgt i32 %mul3.i, 0
  %or.cond = and i1 %cmp.not.i.not, %cmp8.i_unwrap
  br i1 %or.cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.cond2.preheader ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.cond2.preheader ]
  %inc328 = add i32 %reverse_op.1.lcssa, 1
  %9 = bitcast double* %0 to i8*
  tail call void @free(i8* nonnull %9)
  %10 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %10)
  %11 = bitcast double* %2 to i8*
  tail call void @free(i8* nonnull %11)
  %inc324 = add i32 %reverse_mem.1.lcssa, 25
  %12 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %12)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5.lr.ph
  %"add43'de.0" = phi double [ %"add43'de.1.lcssa", %invertfor.body5.lr.ph ], [ %"add43'de.4", %invertfor.inc47 ]
  %reverse_mem.1 = phi i32 [ %inc464, %invertfor.body5.lr.ph ], [ %inc712, %invertfor.inc47 ]
  %reverse_op.1 = phi i32 [ %inc466.lcssa, %invertfor.body5.lr.ph ], [ %reverse_op.5, %invertfor.inc47 ]
  %13 = icmp eq i64 %"iv'ac.0", 0
  br i1 %13, label %invertfor.cond2.preheader.lr.ph, label %incinvertfor.cond2.preheader

incinvertfor.cond2.preheader:                     ; preds = %invertfor.cond2.preheader
  %inc332 = add i32 %reverse_op.1, 2
  %inc334 = add i32 %reverse_mem.1, 3
  br label %invertfor.inc47

invertfor.body5.lr.ph:                            ; preds = %invertfor.body5
  %"add43'de.1.lcssa" = phi double [ %"add43'de.1", %invertfor.body5 ]
  %reverse_mem.2.lcssa = phi i32 [ %reverse_mem.2, %invertfor.body5 ]
  %inc466.lcssa = phi i32 [ %inc466, %invertfor.body5 ]
  %inc464 = add i32 %reverse_mem.2.lcssa, 41
  br label %invertfor.cond2.preheader

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa718, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %reverse_mem.2 = phi i32 [ %inc682, %invertfor.body23.preheader ], [ %inc704, %invertfor.inc44 ]
  %reverse_op.2 = phi i32 [ %inc680, %invertfor.body23.preheader ], [ %reverse_op.4, %invertfor.inc44 ]
  %"data14'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2, !node !285
  %"'ipl_unwrap" = load double*, double** %"data14'ipg_unwrap", align 8, !invariant.group !403, !node !285
  %_unwrap17 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap87, !node !285
  %_unwrap18 = add nuw nsw i64 %_unwrap17, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap18, !node !285
  %14 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8
  %15 = fadd fast double %"mul13'de.1", %14, !node !285
  %_unwrap21 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap = zext i32 %_unwrap21 to i64, !node !285
  %16 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap, !node !285
  %17 = add nuw nsw i64 %"iv4'ac.1", %16, !node !285
  %18 = getelementptr inbounds double, double* %1, i64 %17, !node !285
  %19 = load double, double* %18, align 8, !invariant.group !404, !node !285
  %m0diffe = fmul fast double %15, %19, !node !285
  %20 = getelementptr inbounds double, double* %2, i64 %17, !node !285
  %21 = load double, double* %20, align 8, !invariant.group !405, !node !285
  %m1diffe = fmul fast double %15, %21, !node !285
  %"data7'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2, !node !285
  %"'ipl13_unwrap" = load double*, double** %"data7'ipg_unwrap", align 8, !invariant.group !406, !node !285
  %nrows8_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0, !node !285
  %_unwrap29 = load i32, i32* %nrows8_unwrap, align 8, !tbaa !138, !invariant.group !407, !node !285
  %_unwrap30 = sext i32 %_unwrap29 to i64, !node !285
  %_unwrap31 = mul nsw i64 %"iv4'ac.1", %_unwrap30, !node !285
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl13_unwrap", i64 %_unwrap31, !node !285
  %22 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !node !285
  %23 = fadd fast double %22, %m0diffe, !node !285
  store double %23, double* %"arrayidx12'ipg_unwrap", align 8
  %"data'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2, !node !285
  %"'ipl15_unwrap" = load double*, double** %"data'ipg_unwrap", align 8, !invariant.group !408, !node !285
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl15_unwrap", i64 %"iv'ac.0", !node !285
  %24 = load double, double* %"arrayidx'ipg_unwrap", align 8, !node !285
  %25 = fadd fast double %24, %m1diffe, !node !285
  store double %25, double* %"arrayidx'ipg_unwrap", align 8
  %26 = icmp eq i64 %"iv4'ac.1", 0
  %inc466 = add i32 %reverse_op.2, 25
  br i1 %26, label %invertfor.body5.lr.ph, label %incinvertfor.body5

incinvertfor.body5:                               ; preds = %invertfor.body5
  %inc472 = add i32 %reverse_mem.2, 43
  br label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body23 ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.body23 ]
  %.lcssa718 = phi double [ %44, %invertfor.body23 ]
  %.lcssa = phi double [ %46, %invertfor.body23 ]
  %inc680 = add i32 %reverse_op.3.lcssa, 44
  %inc682 = add i32 %reverse_mem.3.lcssa, 61
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %44, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %46, %incinvertfor.body23 ]
  %"iv6'ac.2" = phi i64 [ %_unwrap82, %mergeinvertfor.body23_for.inc44.loopexit ], [ %47, %incinvertfor.body23 ]
  %reverse_mem.3 = phi i32 [ %inc698, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc688, %incinvertfor.body23 ]
  %reverse_op.3 = phi i32 [ %inc696, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc686, %incinvertfor.body23 ]
  %"data14'ipg_unwrap32" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2, !node !285
  %"'ipl_unwrap33" = load double*, double** %"data14'ipg_unwrap32", align 8, !invariant.group !403, !node !285
  %_unwrap35 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap87, !node !285
  %_unwrap36 = add nuw nsw i64 %_unwrap35, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap37" = getelementptr inbounds double, double* %"'ipl_unwrap33", i64 %_unwrap36, !node !285
  %27 = load double, double* %"arrayidx19'ipg_unwrap37", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap37", align 8
  %28 = fadd fast double %"add43'de.2", %27, !node !285
  %_unwrap51 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap52 = zext i32 %_unwrap51 to i64, !node !285
  %_unwrap54 = load i32, i32* %ncols21_unwrap83, align 4, !tbaa !139, !node !285
  %wide.trip.count_unwrap55 = zext i32 %_unwrap54 to i64, !node !285
  %29 = add nsw i64 %wide.trip.count_unwrap55, -1, !node !285
  %30 = mul nuw nsw i64 %29, %wide.trip.count96_unwrap52, !node !285
  %31 = mul nuw nsw i64 %"iv4'ac.1", %29, !node !285
  %32 = add nuw nsw i64 %"iv6'ac.2", %31, !node !285
  %33 = mul nuw nsw i64 %"iv'ac.0", %30, !node !285
  %34 = add nuw nsw i64 %32, %33, !node !285
  %35 = getelementptr inbounds double, double* %3, i64 %34, !node !285
  %36 = load double, double* %35, align 8, !invariant.group !409, !node !285
  %m0diffe57 = fmul fast double %28, %36, !node !285
  %37 = getelementptr inbounds double, double* %0, i64 %34, !node !285
  %38 = load double, double* %37, align 8, !invariant.group !410, !node !285
  %m1diffe63 = fmul fast double %28, %38, !node !285
  %"data7'ipg_unwrap66" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2, !node !285
  %"'ipl13_unwrap67" = load double*, double** %"data7'ipg_unwrap66", align 8, !invariant.group !406, !node !285
  %iv.next7_unwrap = add nuw nsw i64 %"iv6'ac.2", 1, !node !285
  %nrows8_unwrap68 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0, !node !285
  %_unwrap69 = load i32, i32* %nrows8_unwrap68, align 8, !tbaa !138, !invariant.group !407, !node !285
  %_unwrap70 = sext i32 %_unwrap69 to i64, !node !285
  %_unwrap71 = mul nsw i64 %"iv4'ac.1", %_unwrap70, !node !285
  %_unwrap72 = add nsw i64 %iv.next7_unwrap, %_unwrap71, !node !285
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl13_unwrap67", i64 %_unwrap72, !node !285
  %39 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !node !285
  %40 = fadd fast double %39, %m0diffe57, !node !285
  store double %40, double* %"arrayidx35'ipg_unwrap", align 8
  %"data'ipg_unwrap73" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2, !node !285
  %"'ipl15_unwrap74" = load double*, double** %"data'ipg_unwrap73", align 8, !invariant.group !408, !node !285
  %_unwrap75 = mul nuw nsw i64 %iv.next7_unwrap, %wide.trip.count100_unwrap87, !node !285
  %_unwrap76 = add nuw nsw i64 %_unwrap75, %"iv'ac.0", !node !285
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl15_unwrap74", i64 %_unwrap76, !node !285
  %41 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !node !285
  %42 = fadd fast double %41, %m1diffe63, !node !285
  store double %42, double* %"arrayidx29'ipg_unwrap", align 8
  %43 = icmp eq i64 %"iv6'ac.2", 0
  %44 = select fast i1 %43, double 0.000000e+00, double %28
  %45 = fadd fast double %"mul13'de.2", %28, !node !285
  %46 = select fast i1 %43, double %45, double %"mul13'de.2"
  br i1 %43, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %47 = add nsw i64 %"iv6'ac.2", -1, !node !285
  %inc686 = add i32 %reverse_op.3, 45
  %inc688 = add i32 %reverse_mem.3, 63
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %inc696 = add i32 %reverse_op.4.in, 2
  %wide.trip.count_unwrap81 = zext i32 %_unwrap84 to i64, !node !285
  %_unwrap82 = add nsw i64 %wide.trip.count_unwrap81, -2, !node !285
  %inc698 = add i32 %reverse_mem.4, 7
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %mergeinvertfor.body5_for.inc47.loopexit, %incinvertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %mergeinvertfor.body5_for.inc47.loopexit ], [ %"add43'de.1", %incinvertfor.body5 ]
  %"iv4'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap85, %mergeinvertfor.body5_for.inc47.loopexit ], [ %"iv4'ac.1", %incinvertfor.body5 ]
  %reverse_mem.4 = phi i32 [ %inc710, %mergeinvertfor.body5_for.inc47.loopexit ], [ %inc472, %incinvertfor.body5 ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %mergeinvertfor.body5_for.inc47.loopexit ], [ %inc466, %incinvertfor.body5 ]
  %reverse_op.4 = add i32 %reverse_op.4.in, 1
  %"iv4'ac.1" = add nsw i64 %"iv4'ac.1.in", -1
  %ncols21_unwrap83 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1, !node !285
  %inc704 = add i32 %reverse_mem.4, 3
  %_unwrap84 = load i32, i32* %ncols21_unwrap83, align 4, !tbaa !139, !invariant.group !402, !node !285
  %cmp2281_unwrap = icmp sgt i32 %_unwrap84, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

mergeinvertfor.body5_for.inc47.loopexit:          ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap85 = zext i32 %5 to i64, !node !285
  %inc710 = add i32 %reverse_mem.5, 3
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.end49.loopexit, %incinvertfor.cond2.preheader
  %"add43'de.4" = phi double [ 0.000000e+00, %invertfor.end49.loopexit ], [ %"add43'de.0", %incinvertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap87, %invertfor.end49.loopexit ], [ %"iv'ac.0", %incinvertfor.cond2.preheader ]
  %reverse_mem.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc334, %incinvertfor.cond2.preheader ]
  %reverse_op.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc332, %incinvertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %inc712 = add i32 %reverse_mem.5, 1
  %cmp483_unwrap = icmp sgt i32 %5, 0
  br i1 %cmp483_unwrap, label %mergeinvertfor.body5_for.inc47.loopexit, label %invertfor.cond2.preheader

invertfor.end49.loopexit:                         ; preds = %invertfor.end49
  %wide.trip.count100_unwrap87 = zext i32 %4 to i64, !node !285
  br label %invertfor.inc47

invertfor.end49:                                  ; preds = %for.inc47, %entry
  %forward_mem.5 = phi i32 [ 14, %entry ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.6 = phi i32 [ %forward_op.0, %entry ], [ %forward_op.5, %for.inc47 ]
  br i1 %cmp85, label %invertfor.end49.loopexit, label %invertresize.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffemat_mult.9(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 6
  %2 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 7
  %3 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 8
  %4 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 3
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1, !node !285
  %5 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %mul3.i = mul nsw i32 %5, %4, !node !285
  %cmp.not.i = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 4
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i32 2, i32 1
  %forward_op.0 = select i1 %cmp.not.i, i32 1, i32 %spec.select
  %cmp85 = icmp sgt i32 %4, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertfor.end49

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %5, 0
  %6 = zext i32 %4 to i64
  %wide.trip.count96 = zext i32 %5 to i64, !node !285
  %inc145 = or i32 %forward_op.0, 4
  %inc153 = add nuw nsw i32 %inc145, 4
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %forward_mem.0 = phi i32 [ 11, %for.cond2.preheader.lr.ph ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.1 = phi i32 [ %inc153, %for.cond2.preheader.lr.ph ], [ %forward_op.5, %for.inc47 ]
  %iv = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %iv.next, %for.inc47 ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc155 = add i32 %forward_op.1, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %7 = getelementptr inbounds i32, i32* %1, i64 %iv
  %inc167 = add i32 %forward_mem.0, 6
  %8 = load i32, i32* %7, align 4, !invariant.group !411
  %cmp2281 = icmp sgt i32 %8, 1
  %wide.trip.count = zext i32 %8 to i64
  %inc169 = add i32 %forward_op.1, 2
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %forward_mem.1 = phi i32 [ %inc167, %for.body5.lr.ph ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.2 = phi i32 [ %inc169, %for.body5.lr.ph ], [ %forward_op.4, %for.inc44 ]
  %iv4 = phi i64 [ 0, %for.body5.lr.ph ], [ %iv.next5, %for.inc44 ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %inc181 = add i32 %forward_mem.1, 2
  %inc193 = add i32 %forward_op.2, 10
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %inc209 = add i32 %forward_op.2, 18
  %inc211 = add i32 %forward_mem.1, 3
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %forward_mem.2 = phi i32 [ %inc211, %for.body23.preheader ], [ %inc225, %for.body23 ]
  %forward_op.3 = phi i32 [ %inc209, %for.body23.preheader ], [ %inc235, %for.body23 ]
  %iv6 = phi i64 [ 0, %for.body23.preheader ], [ %iv.next7, %for.body23 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc225 = add i32 %forward_mem.2, 3
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %inc235 = add i32 %forward_op.3, 9
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %forward_mem.3 = phi i32 [ %inc181, %for.body5 ], [ %inc225, %for.body23 ]
  %forward_op.4 = phi i32 [ %inc193, %for.body5 ], [ %inc235, %for.body23 ]
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %forward_mem.4 = phi i32 [ %forward_mem.0, %for.cond2.preheader ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.5 = phi i32 [ %inc155, %for.cond2.preheader ], [ %forward_op.4, %for.inc44 ]
  %exitcond101.not = icmp eq i64 %iv.next, %6
  br i1 %exitcond101.not, label %invertfor.end49, label %for.cond2.preheader, !llvm.loop !187

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  %9 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.6, i32 %reverse_op.0, i32 %forward_mem.5, i32 %reverse_mem.0)
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 0
  tail call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 1
  tail call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.end49, %invertfor.cond2.preheader.lr.ph
  %reverse_mem.0 = phi i32 [ %inc269, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %reverse_op.0 = phi i32 [ %inc273, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %cmp.not.i.not = xor i1 %cmp.not.i, true
  %cmp8.i_unwrap = icmp sgt i32 %mul3.i, 0
  %or.cond = and i1 %cmp.not.i.not, %cmp8.i_unwrap
  br i1 %or.cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.cond2.preheader ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.cond2.preheader ]
  %inc273 = add i32 %reverse_op.1.lcssa, 1
  %10 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %10)
  %11 = bitcast i32* %1 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double* %2 to i8*
  tail call void @free(i8* nonnull %12)
  %inc269 = add i32 %reverse_mem.1.lcssa, 16
  %13 = bitcast double** %3 to i8*
  tail call void @free(i8* nonnull %13)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5.lr.ph
  %"add43'de.0" = phi double [ %"add43'de.1.lcssa", %invertfor.body5.lr.ph ], [ %"add43'de.4", %invertfor.inc47 ]
  %reverse_mem.1 = phi i32 [ %inc363, %invertfor.body5.lr.ph ], [ %inc581, %invertfor.inc47 ]
  %reverse_op.1 = phi i32 [ %inc365.lcssa, %invertfor.body5.lr.ph ], [ %reverse_op.5, %invertfor.inc47 ]
  %14 = icmp eq i64 %"iv'ac.0", 0
  br i1 %14, label %invertfor.cond2.preheader.lr.ph, label %incinvertfor.cond2.preheader

incinvertfor.cond2.preheader:                     ; preds = %invertfor.cond2.preheader
  %inc277 = add i32 %reverse_op.1, 2
  %inc279 = add i32 %reverse_mem.1, 3
  br label %invertfor.inc47

invertfor.body5.lr.ph:                            ; preds = %invertfor.body5
  %"add43'de.1.lcssa" = phi double [ %"add43'de.1", %invertfor.body5 ]
  %reverse_mem.2.lcssa = phi i32 [ %reverse_mem.2, %invertfor.body5 ]
  %inc365.lcssa = phi i32 [ %inc365, %invertfor.body5 ]
  %inc363 = add i32 %reverse_mem.2.lcssa, 27
  br label %invertfor.cond2.preheader

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa588, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %reverse_mem.2 = phi i32 [ %inc393, %invertfor.body23.preheader ], [ %inc573, %invertfor.inc44 ]
  %reverse_op.2 = phi i32 [ %inc391, %invertfor.body23.preheader ], [ %inc569, %invertfor.inc44 ]
  %_unwrap15 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap15, align 8, !invariant.group !412
  %_unwrap17 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap91, !node !285
  %_unwrap18 = add nuw nsw i64 %_unwrap17, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap18, !node !285
  %15 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8
  %16 = fadd fast double %"mul13'de.1", %15, !node !285
  %_unwrap21 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap = zext i32 %_unwrap21 to i64, !node !285
  %17 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap, !node !285
  %18 = add nuw nsw i64 %"iv4'ac.1", %17, !node !285
  %19 = getelementptr inbounds double, double* %2, i64 %18, !node !285
  %20 = load double, double* %19, align 8, !invariant.group !413, !node !285
  %m0diffe = fmul fast double %16, %20, !node !285
  %"data7'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2, !node !285
  %"'ipl_unwrap" = load double*, double** %"data7'ipg_unwrap", align 8, !invariant.group !414, !node !285
  %nrows8_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0, !node !285
  %_unwrap23 = load i32, i32* %nrows8_unwrap, align 8, !tbaa !138, !invariant.group !415, !node !285
  %_unwrap24 = sext i32 %_unwrap23 to i64, !node !285
  %_unwrap25 = mul nsw i64 %"iv4'ac.1", %_unwrap24, !node !285
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap25, !node !285
  %21 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !node !285
  %22 = fadd fast double %21, %m0diffe, !node !285
  store double %22, double* %"arrayidx12'ipg_unwrap", align 8
  %23 = icmp eq i64 %"iv4'ac.1", 0
  %inc365 = add i32 %reverse_op.2, 16
  br i1 %23, label %invertfor.body5.lr.ph, label %incinvertfor.body5

incinvertfor.body5:                               ; preds = %invertfor.body5
  %inc371 = add i32 %reverse_mem.2, 29
  br label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body23 ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.body23 ]
  %.lcssa588 = phi double [ %36, %invertfor.body23 ]
  %.lcssa = phi double [ %38, %invertfor.body23 ]
  %_unwrap45 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap46 = zext i32 %_unwrap45 to i64, !node !285
  %_unwrap100 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap46, !node !285
  %_unwrap101 = add nuw nsw i64 %"iv4'ac.1", %_unwrap100, !node !285
  %inc391 = add i32 %reverse_op.3.lcssa, 29
  %_unwrap102 = getelementptr inbounds double*, double** %3, i64 %_unwrap101, !node !285
  %inc393 = add i32 %reverse_mem.3.lcssa, 55
  %24 = bitcast double** %_unwrap102 to i8**
  %forfree103586 = load i8*, i8** %24, align 8, !dereferenceable !298
  tail call void @free(i8* nonnull %forfree103586), !node !285
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %36, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %38, %incinvertfor.body23 ]
  %"iv6'ac.0" = phi i64 [ %_unwrap85, %mergeinvertfor.body23_for.inc44.loopexit ], [ %39, %incinvertfor.body23 ]
  %reverse_mem.3 = phi i32 [ %inc561, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc545, %incinvertfor.body23 ]
  %reverse_op.3 = phi i32 [ %inc559, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc543, %incinvertfor.body23 ]
  %_unwrap28 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap29" = load double*, double** %_unwrap28, align 8, !invariant.group !412
  %_unwrap31 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap91, !node !285
  %_unwrap32 = add nuw nsw i64 %_unwrap31, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap33" = getelementptr inbounds double, double* %"'il_phi3_unwrap29", i64 %_unwrap32, !node !285
  %25 = load double, double* %"arrayidx19'ipg_unwrap33", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap33", align 8
  %26 = fadd fast double %"add43'de.2", %25, !node !285
  %_unwrap57 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap58 = zext i32 %_unwrap57 to i64, !node !285
  %27 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap58, !node !285
  %28 = add nuw nsw i64 %"iv4'ac.1", %27, !node !285
  %29 = getelementptr inbounds double*, double** %3, i64 %28, !node !285
  %30 = load double*, double** %29, align 8, !dereferenceable !298, !invariant.group !416, !node !285
  %31 = getelementptr inbounds double, double* %30, i64 %"iv6'ac.0", !node !285
  %32 = load double, double* %31, align 8, !invariant.group !417, !node !285
  %m0diffe62 = fmul fast double %26, %32, !node !285
  %"data7'ipg_unwrap64" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"rhs'", i64 0, i32 2, !node !285
  %"'ipl_unwrap65" = load double*, double** %"data7'ipg_unwrap64", align 8, !invariant.group !414, !node !285
  %iv.next7_unwrap = add nuw nsw i64 %"iv6'ac.0", 1
  %nrows8_unwrap66 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 0, !node !285
  %_unwrap67 = load i32, i32* %nrows8_unwrap66, align 8, !tbaa !138, !invariant.group !415, !node !285
  %_unwrap68 = sext i32 %_unwrap67 to i64, !node !285
  %_unwrap69 = mul nsw i64 %"iv4'ac.1", %_unwrap68, !node !285
  %_unwrap70 = add nsw i64 %iv.next7_unwrap, %_unwrap69, !node !285
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap65", i64 %_unwrap70, !node !285
  %33 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !node !285
  %34 = fadd fast double %33, %m0diffe62, !node !285
  store double %34, double* %"arrayidx35'ipg_unwrap", align 8
  %35 = icmp eq i64 %"iv6'ac.0", 0
  %36 = select fast i1 %35, double 0.000000e+00, double %26
  %37 = fadd fast double %"mul13'de.2", %26, !node !285
  %38 = select fast i1 %35, double %37, double %"mul13'de.2"
  br i1 %35, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %39 = add nsw i64 %"iv6'ac.0", -1
  %inc543 = add i32 %reverse_op.3, 26
  %inc545 = add i32 %reverse_mem.3, 50
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %inc559 = add i32 %reverse_op.4.in, 6
  %wide.trip.count_unwrap84 = zext i32 %41 to i64
  %_unwrap85 = add nsw i64 %wide.trip.count_unwrap84, -2
  %inc561 = add i32 %reverse_mem.4, 9
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %mergeinvertfor.body5_for.inc47.loopexit, %incinvertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %mergeinvertfor.body5_for.inc47.loopexit ], [ %"add43'de.1", %incinvertfor.body5 ]
  %"iv4'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap89, %mergeinvertfor.body5_for.inc47.loopexit ], [ %"iv4'ac.1", %incinvertfor.body5 ]
  %reverse_mem.4 = phi i32 [ %inc579, %mergeinvertfor.body5_for.inc47.loopexit ], [ %inc371, %incinvertfor.body5 ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %mergeinvertfor.body5_for.inc47.loopexit ], [ %inc365, %incinvertfor.body5 ]
  %"iv4'ac.1" = add nsw i64 %"iv4'ac.1.in", -1
  %inc569 = add i32 %reverse_op.4.in, 3
  %40 = getelementptr inbounds i32, i32* %1, i64 %"iv'ac.0"
  %inc573 = add i32 %reverse_mem.4, 4
  %41 = load i32, i32* %40, align 4, !invariant.group !418
  %cmp2281_unwrap = icmp sgt i32 %41, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

mergeinvertfor.body5_for.inc47.loopexit:          ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap89 = zext i32 %5 to i64, !node !285
  %inc579 = add i32 %reverse_mem.5, 3
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.end49.loopexit, %incinvertfor.cond2.preheader
  %"add43'de.4" = phi double [ 0.000000e+00, %invertfor.end49.loopexit ], [ %"add43'de.0", %incinvertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap91, %invertfor.end49.loopexit ], [ %"iv'ac.0", %incinvertfor.cond2.preheader ]
  %reverse_mem.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc279, %incinvertfor.cond2.preheader ]
  %reverse_op.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc277, %incinvertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %inc581 = add i32 %reverse_mem.5, 1
  %cmp483_unwrap = icmp sgt i32 %5, 0
  br i1 %cmp483_unwrap, label %mergeinvertfor.body5_for.inc47.loopexit, label %invertfor.cond2.preheader

invertfor.end49.loopexit:                         ; preds = %invertfor.end49
  %wide.trip.count100_unwrap91 = zext i32 %4 to i64
  br label %invertfor.inc47

invertfor.end49:                                  ; preds = %for.inc47, %entry
  %forward_mem.5 = phi i32 [ 11, %entry ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.6 = phi i32 [ %forward_op.0, %entry ], [ %forward_op.5, %for.inc47 ]
  br i1 %cmp85, label %invertfor.end49.loopexit, label %invertresize.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffemat_mult.10(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 3
  %2 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 10
  %3 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 8
  %4 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 9
  %5 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 4
  %6 = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 5
  %mul3.i = mul nsw i32 %6, %5
  %cmp.not.i = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 6
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i32 2, i32 1
  %forward_op.0 = select i1 %cmp.not.i, i32 1, i32 %spec.select
  %cmp85 = icmp sgt i32 %5, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertfor.end49

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %6, 0
  %7 = zext i32 %5 to i64
  %wide.trip.count96 = zext i32 %6 to i64
  %inc146 = or i32 %forward_op.0, 4
  %inc154 = add nuw nsw i32 %inc146, 4
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %forward_mem.0 = phi i32 [ 11, %for.cond2.preheader.lr.ph ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.1 = phi i32 [ %inc154, %for.cond2.preheader.lr.ph ], [ %forward_op.5, %for.inc47 ]
  %iv = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %iv.next, %for.inc47 ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc156 = add i32 %forward_op.1, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %8 = getelementptr inbounds i32, i32* %3, i64 %iv
  %inc168 = add i32 %forward_mem.0, 6
  %9 = load i32, i32* %8, align 4, !invariant.group !419
  %cmp2281 = icmp sgt i32 %9, 1
  %wide.trip.count = zext i32 %9 to i64
  %inc170 = add i32 %forward_op.1, 2
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %forward_mem.1 = phi i32 [ %inc168, %for.body5.lr.ph ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.2 = phi i32 [ %inc170, %for.body5.lr.ph ], [ %forward_op.4, %for.inc44 ]
  %iv4 = phi i64 [ 0, %for.body5.lr.ph ], [ %iv.next5, %for.inc44 ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %inc182 = add i32 %forward_mem.1, 2
  %inc192 = add i32 %forward_op.2, 9
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %inc208 = add i32 %forward_op.2, 17
  %inc210 = add i32 %forward_mem.1, 3
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %forward_mem.2 = phi i32 [ %inc210, %for.body23.preheader ], [ %inc228, %for.body23 ]
  %forward_op.3 = phi i32 [ %inc208, %for.body23.preheader ], [ %inc236, %for.body23 ]
  %iv6 = phi i64 [ 0, %for.body23.preheader ], [ %iv.next7, %for.body23 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc228 = add i32 %forward_mem.2, 3
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %inc236 = add i32 %forward_op.3, 10
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %forward_mem.3 = phi i32 [ %inc182, %for.body5 ], [ %inc228, %for.body23 ]
  %forward_op.4 = phi i32 [ %inc192, %for.body5 ], [ %inc236, %for.body23 ]
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %forward_mem.4 = phi i32 [ %forward_mem.0, %for.cond2.preheader ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.5 = phi i32 [ %inc156, %for.cond2.preheader ], [ %forward_op.4, %for.inc44 ]
  %exitcond101.not = icmp eq i64 %iv.next, %7
  br i1 %exitcond101.not, label %invertfor.end49, label %for.cond2.preheader, !llvm.loop !187

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.6, i32 %reverse_op.0, i32 %forward_mem.5, i32 %reverse_mem.0)
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 0
  tail call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg, 1
  tail call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.end49, %invertfor.cond2.preheader.lr.ph
  %reverse_mem.0 = phi i32 [ %inc274, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %reverse_op.0 = phi i32 [ %inc278, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %cmp.not.i.not = xor i1 %cmp.not.i, true
  %cmp8.i_unwrap = icmp sgt i32 %mul3.i, 0
  %or.cond = and i1 %cmp.not.i.not, %cmp8.i_unwrap
  br i1 %or.cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.cond2.preheader ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.cond2.preheader ]
  %inc278 = add i32 %reverse_op.1.lcssa, 1
  %11 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double** %1 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %13)
  %14 = bitcast i32* %3 to i8*
  tail call void @free(i8* nonnull %14)
  %inc274 = add i32 %reverse_mem.1.lcssa, 18
  %15 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %15)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5.lr.ph
  %"add43'de.0" = phi double [ %"add43'de.1.lcssa", %invertfor.body5.lr.ph ], [ %"add43'de.4", %invertfor.inc47 ]
  %reverse_mem.1 = phi i32 [ %inc364, %invertfor.body5.lr.ph ], [ %inc578, %invertfor.inc47 ]
  %reverse_op.1 = phi i32 [ %inc366.lcssa, %invertfor.body5.lr.ph ], [ %reverse_op.5, %invertfor.inc47 ]
  %16 = icmp eq i64 %"iv'ac.0", 0
  br i1 %16, label %invertfor.cond2.preheader.lr.ph, label %incinvertfor.cond2.preheader

incinvertfor.cond2.preheader:                     ; preds = %invertfor.cond2.preheader
  %inc282 = add i32 %reverse_op.1, 2
  %inc284 = add i32 %reverse_mem.1, 3
  br label %invertfor.inc47

invertfor.body5.lr.ph:                            ; preds = %invertfor.body5
  %"add43'de.1.lcssa" = phi double [ %"add43'de.1", %invertfor.body5 ]
  %reverse_mem.2.lcssa = phi i32 [ %reverse_mem.2, %invertfor.body5 ]
  %inc366.lcssa = phi i32 [ %inc366, %invertfor.body5 ]
  %inc364 = add i32 %reverse_mem.2.lcssa, 26
  br label %invertfor.cond2.preheader

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa585, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %reverse_mem.2 = phi i32 [ %inc392, %invertfor.body23.preheader ], [ %inc570, %invertfor.inc44 ]
  %reverse_op.2 = phi i32 [ %inc390, %invertfor.body23.preheader ], [ %inc566, %invertfor.inc44 ]
  %_unwrap19 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap19, align 8, !invariant.group !420
  %_unwrap21 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap89
  %_unwrap22 = add nuw nsw i64 %_unwrap21, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap22
  %17 = load double, double* %"arrayidx19'ipg_unwrap", align 8
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8
  %18 = fadd fast double %"mul13'de.1", %17
  %19 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap87
  %20 = add nuw nsw i64 %"iv4'ac.1", %19
  %21 = getelementptr inbounds double, double* %4, i64 %20
  %22 = load double, double* %21, align 8, !invariant.group !421
  %m1diffe = fmul fast double %18, %22
  %_unwrap29 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap29, align 8, !invariant.group !422
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %"iv'ac.0"
  %23 = load double, double* %"arrayidx'ipg_unwrap", align 8
  %24 = fadd fast double %23, %m1diffe
  store double %24, double* %"arrayidx'ipg_unwrap", align 8
  %25 = icmp eq i64 %"iv4'ac.1", 0
  %inc366 = add i32 %reverse_op.2, 15
  br i1 %25, label %invertfor.body5.lr.ph, label %incinvertfor.body5

incinvertfor.body5:                               ; preds = %invertfor.body5
  %inc372 = add i32 %reverse_mem.2, 28
  br label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body23 ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.body23 ]
  %.lcssa586 = phi double** [ %31, %invertfor.body23 ]
  %.lcssa585 = phi double [ %38, %invertfor.body23 ]
  %.lcssa = phi double [ %40, %invertfor.body23 ]
  %inc390 = add i32 %reverse_op.3.lcssa, 29
  %inc392 = add i32 %reverse_mem.3.lcssa, 53
  %26 = bitcast double** %.lcssa586 to i8**
  %forfree97583 = load i8*, i8** %26, align 8, !dereferenceable !298
  tail call void @free(i8* nonnull %forfree97583)
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %38, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %40, %incinvertfor.body23 ]
  %"iv6'ac.0" = phi i64 [ %_unwrap83, %mergeinvertfor.body23_for.inc44.loopexit ], [ %41, %incinvertfor.body23 ]
  %reverse_mem.3 = phi i32 [ %inc558, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc542, %incinvertfor.body23 ]
  %reverse_op.3 = phi i32 [ %inc556, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc540, %incinvertfor.body23 ]
  %_unwrap32 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap33" = load double*, double** %_unwrap32, align 8, !invariant.group !420
  %_unwrap35 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap89
  %_unwrap36 = add nuw nsw i64 %_unwrap35, %"iv'ac.0"
  %"arrayidx19'ipg_unwrap37" = getelementptr inbounds double, double* %"'il_phi3_unwrap33", i64 %_unwrap36
  %27 = load double, double* %"arrayidx19'ipg_unwrap37", align 8
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap37", align 8
  %28 = fadd fast double %"add43'de.2", %27
  %29 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap87
  %30 = add nuw nsw i64 %"iv4'ac.1", %29
  %31 = getelementptr inbounds double*, double** %2, i64 %30
  %32 = load double*, double** %31, align 8, !dereferenceable !298, !invariant.group !423
  %33 = getelementptr inbounds double, double* %32, i64 %"iv6'ac.0"
  %34 = load double, double* %33, align 8, !invariant.group !424
  %m1diffe63 = fmul fast double %28, %34
  %_unwrap67 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap68" = load double*, double** %_unwrap67, align 8, !invariant.group !422
  %iv.next7_unwrap = add nuw nsw i64 %"iv6'ac.0", 1
  %_unwrap69 = mul nuw nsw i64 %iv.next7_unwrap, %wide.trip.count100_unwrap89
  %_unwrap70 = add nuw nsw i64 %_unwrap69, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap68", i64 %_unwrap70
  %35 = load double, double* %"arrayidx29'ipg_unwrap", align 8
  %36 = fadd fast double %35, %m1diffe63
  store double %36, double* %"arrayidx29'ipg_unwrap", align 8
  %37 = icmp eq i64 %"iv6'ac.0", 0
  %38 = select fast i1 %37, double 0.000000e+00, double %28
  %39 = fadd fast double %"mul13'de.2", %28
  %40 = select fast i1 %37, double %39, double %"mul13'de.2"
  br i1 %37, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %41 = add nsw i64 %"iv6'ac.0", -1
  %inc540 = add i32 %reverse_op.3, 26
  %inc542 = add i32 %reverse_mem.3, 49
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %inc556 = add i32 %reverse_op.4.in, 6
  %wide.trip.count_unwrap82 = zext i32 %43 to i64
  %_unwrap83 = add nsw i64 %wide.trip.count_unwrap82, -2
  %inc558 = add i32 %reverse_mem.4, 9
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %invertfor.inc47.loopexit, %incinvertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %invertfor.inc47.loopexit ], [ %"add43'de.1", %incinvertfor.body5 ]
  %"iv4'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap87, %invertfor.inc47.loopexit ], [ %"iv4'ac.1", %incinvertfor.body5 ]
  %reverse_mem.4 = phi i32 [ %inc576, %invertfor.inc47.loopexit ], [ %inc372, %incinvertfor.body5 ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %invertfor.inc47.loopexit ], [ %inc366, %incinvertfor.body5 ]
  %"iv4'ac.1" = add nsw i64 %"iv4'ac.1.in", -1
  %inc566 = add i32 %reverse_op.4.in, 3
  %42 = getelementptr inbounds i32, i32* %3, i64 %"iv'ac.0"
  %inc570 = add i32 %reverse_mem.4, 4
  %43 = load i32, i32* %42, align 4, !invariant.group !425
  %cmp2281_unwrap = icmp sgt i32 %43, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

invertfor.inc47.loopexit:                         ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap87 = zext i32 %6 to i64
  %inc576 = add i32 %reverse_mem.5, 3
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.end49.loopexit, %incinvertfor.cond2.preheader
  %"add43'de.4" = phi double [ 0.000000e+00, %invertfor.end49.loopexit ], [ %"add43'de.0", %incinvertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap89, %invertfor.end49.loopexit ], [ %"iv'ac.0", %incinvertfor.cond2.preheader ]
  %reverse_mem.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc284, %incinvertfor.cond2.preheader ]
  %reverse_op.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc282, %incinvertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %inc578 = add i32 %reverse_mem.5, 1
  %cmp483_unwrap = icmp sgt i32 %6, 0
  br i1 %cmp483_unwrap, label %invertfor.inc47.loopexit, label %invertfor.cond2.preheader

invertfor.end49.loopexit:                         ; preds = %invertfor.end49
  %wide.trip.count100_unwrap89 = zext i32 %5 to i64
  br label %invertfor.inc47

invertfor.end49:                                  ; preds = %for.inc47, %entry
  %forward_mem.5 = phi i32 [ 11, %entry ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.6 = phi i32 [ %forward_op.0, %entry ], [ %forward_op.5, %for.inc47 ]
  br i1 %cmp85, label %invertfor.end49.loopexit, label %invertresize.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffemat_mult.11(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 3
  %2 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 9
  %3 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 7
  %4 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 8
  %5 = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 4
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %rhs, i64 0, i32 1, !node !285
  %6 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %mul3.i = mul nsw i32 %6, %5, !node !285
  %cmp.not.i = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 5
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i32 2, i32 1
  %forward_op.0 = select i1 %cmp.not.i, i32 1, i32 %spec.select
  %cmp85 = icmp sgt i32 %5, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertfor.end49

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %6, 0
  %7 = zext i32 %5 to i64
  %wide.trip.count96 = zext i32 %6 to i64, !node !285
  %inc148 = or i32 %forward_op.0, 4
  %inc156 = add nuw nsw i32 %inc148, 4
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %forward_mem.0 = phi i32 [ 12, %for.cond2.preheader.lr.ph ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.1 = phi i32 [ %inc156, %for.cond2.preheader.lr.ph ], [ %forward_op.5, %for.inc47 ]
  %iv = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %iv.next, %for.inc47 ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc158 = add i32 %forward_op.1, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %8 = getelementptr inbounds i32, i32* %3, i64 %iv
  %inc170 = add i32 %forward_mem.0, 6
  %9 = load i32, i32* %8, align 4, !invariant.group !426
  %cmp2281 = icmp sgt i32 %9, 1
  %wide.trip.count = zext i32 %9 to i64
  %inc172 = add i32 %forward_op.1, 2
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %forward_mem.1 = phi i32 [ %inc170, %for.body5.lr.ph ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.2 = phi i32 [ %inc172, %for.body5.lr.ph ], [ %forward_op.4, %for.inc44 ]
  %iv4 = phi i64 [ 0, %for.body5.lr.ph ], [ %iv.next5, %for.inc44 ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %inc184 = add i32 %forward_mem.1, 2
  %inc194 = add i32 %forward_op.2, 9
  br i1 %cmp2281, label %for.body23.preheader, label %for.inc44

for.body23.preheader:                             ; preds = %for.body5
  %inc210 = add i32 %forward_op.2, 17
  %inc212 = add i32 %forward_mem.1, 3
  br label %for.body23

for.body23:                                       ; preds = %for.body23, %for.body23.preheader
  %forward_mem.2 = phi i32 [ %inc212, %for.body23.preheader ], [ %inc230, %for.body23 ]
  %forward_op.3 = phi i32 [ %inc210, %for.body23.preheader ], [ %inc238, %for.body23 ]
  %iv6 = phi i64 [ 0, %for.body23.preheader ], [ %iv.next7, %for.body23 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc230 = add i32 %forward_mem.2, 3
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %inc238 = add i32 %forward_op.3, 10
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %forward_mem.3 = phi i32 [ %inc184, %for.body5 ], [ %inc230, %for.body23 ]
  %forward_op.4 = phi i32 [ %inc194, %for.body5 ], [ %inc238, %for.body23 ]
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %forward_mem.4 = phi i32 [ %forward_mem.0, %for.cond2.preheader ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.5 = phi i32 [ %inc158, %for.cond2.preheader ], [ %forward_op.4, %for.inc44 ]
  %exitcond101.not = icmp eq i64 %iv.next, %7
  br i1 %exitcond101.not, label %invertfor.end49, label %for.cond2.preheader, !llvm.loop !187

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.6, i32 %reverse_op.0, i32 %forward_mem.5, i32 %reverse_mem.0)
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 0
  tail call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, double**, i32, i1, i1, i32*, double*, double** } %tapeArg, 1
  tail call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.end49, %invertfor.cond2.preheader.lr.ph
  %reverse_mem.0 = phi i32 [ %inc276, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %reverse_op.0 = phi i32 [ %inc280, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %cmp.not.i.not = xor i1 %cmp.not.i, true
  %cmp8.i_unwrap = icmp sgt i32 %mul3.i, 0
  %or.cond = and i1 %cmp.not.i.not, %cmp8.i_unwrap
  br i1 %or.cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.cond2.preheader ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.cond2.preheader ]
  %inc280 = add i32 %reverse_op.1.lcssa, 1
  %11 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double** %1 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %13)
  %14 = bitcast i32* %3 to i8*
  tail call void @free(i8* nonnull %14)
  %inc276 = add i32 %reverse_mem.1.lcssa, 18
  %15 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %15)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5.lr.ph
  %"add43'de.0" = phi double [ %"add43'de.1.lcssa", %invertfor.body5.lr.ph ], [ %"add43'de.4", %invertfor.inc47 ]
  %reverse_mem.1 = phi i32 [ %inc368, %invertfor.body5.lr.ph ], [ %inc586, %invertfor.inc47 ]
  %reverse_op.1 = phi i32 [ %inc370.lcssa, %invertfor.body5.lr.ph ], [ %reverse_op.5, %invertfor.inc47 ]
  %16 = icmp eq i64 %"iv'ac.0", 0
  br i1 %16, label %invertfor.cond2.preheader.lr.ph, label %incinvertfor.cond2.preheader

incinvertfor.cond2.preheader:                     ; preds = %invertfor.cond2.preheader
  %inc284 = add i32 %reverse_op.1, 2
  %inc286 = add i32 %reverse_mem.1, 3
  br label %invertfor.inc47

invertfor.body5.lr.ph:                            ; preds = %invertfor.body5
  %"add43'de.1.lcssa" = phi double [ %"add43'de.1", %invertfor.body5 ]
  %reverse_mem.2.lcssa = phi i32 [ %reverse_mem.2, %invertfor.body5 ]
  %inc370.lcssa = phi i32 [ %inc370, %invertfor.body5 ]
  %inc368 = add i32 %reverse_mem.2.lcssa, 27
  br label %invertfor.cond2.preheader

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa593, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %reverse_mem.2 = phi i32 [ %inc398, %invertfor.body23.preheader ], [ %inc578, %invertfor.inc44 ]
  %reverse_op.2 = phi i32 [ %inc396, %invertfor.body23.preheader ], [ %inc574, %invertfor.inc44 ]
  %_unwrap19 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap" = load double*, double** %_unwrap19, align 8, !invariant.group !427
  %_unwrap21 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap92, !node !285
  %_unwrap22 = add nuw nsw i64 %_unwrap21, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap22, !node !285
  %17 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8
  %18 = fadd fast double %"mul13'de.1", %17, !node !285
  %_unwrap25 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap = zext i32 %_unwrap25 to i64, !node !285
  %19 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap, !node !285
  %20 = add nuw nsw i64 %"iv4'ac.1", %19, !node !285
  %21 = getelementptr inbounds double, double* %4, i64 %20, !node !285
  %22 = load double, double* %21, align 8, !invariant.group !428, !node !285
  %m1diffe = fmul fast double %18, %22, !node !285
  %_unwrap29 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap" = load double*, double** %_unwrap29, align 8, !invariant.group !429
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap", i64 %"iv'ac.0", !node !285
  %23 = load double, double* %"arrayidx'ipg_unwrap", align 8, !node !285
  %24 = fadd fast double %23, %m1diffe, !node !285
  store double %24, double* %"arrayidx'ipg_unwrap", align 8
  %25 = icmp eq i64 %"iv4'ac.1", 0
  %inc370 = add i32 %reverse_op.2, 15
  br i1 %25, label %invertfor.body5.lr.ph, label %incinvertfor.body5

incinvertfor.body5:                               ; preds = %invertfor.body5
  %inc376 = add i32 %reverse_mem.2, 29
  br label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body23 ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.body23 ]
  %.lcssa593 = phi double [ %38, %invertfor.body23 ]
  %.lcssa = phi double [ %40, %invertfor.body23 ]
  %_unwrap49 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap50 = zext i32 %_unwrap49 to i64, !node !285
  %_unwrap97 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap50, !node !285
  %_unwrap98 = add nuw nsw i64 %"iv4'ac.1", %_unwrap97, !node !285
  %inc396 = add i32 %reverse_op.3.lcssa, 29
  %_unwrap99 = getelementptr inbounds double*, double** %2, i64 %_unwrap98, !node !285
  %inc398 = add i32 %reverse_mem.3.lcssa, 55
  %26 = bitcast double** %_unwrap99 to i8**
  %forfree100591 = load i8*, i8** %26, align 8, !dereferenceable !298
  tail call void @free(i8* nonnull %forfree100591), !node !285
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %38, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %40, %incinvertfor.body23 ]
  %"iv6'ac.0" = phi i64 [ %_unwrap86, %mergeinvertfor.body23_for.inc44.loopexit ], [ %41, %incinvertfor.body23 ]
  %reverse_mem.3 = phi i32 [ %inc566, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc550, %incinvertfor.body23 ]
  %reverse_op.3 = phi i32 [ %inc564, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc548, %incinvertfor.body23 ]
  %_unwrap32 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0"
  %"'il_phi3_unwrap33" = load double*, double** %_unwrap32, align 8, !invariant.group !427
  %_unwrap35 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap92, !node !285
  %_unwrap36 = add nuw nsw i64 %_unwrap35, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap37" = getelementptr inbounds double, double* %"'il_phi3_unwrap33", i64 %_unwrap36, !node !285
  %27 = load double, double* %"arrayidx19'ipg_unwrap37", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap37", align 8
  %28 = fadd fast double %"add43'de.2", %27, !node !285
  %_unwrap61 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %wide.trip.count96_unwrap62 = zext i32 %_unwrap61 to i64, !node !285
  %29 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap62, !node !285
  %30 = add nuw nsw i64 %"iv4'ac.1", %29, !node !285
  %31 = getelementptr inbounds double*, double** %2, i64 %30, !node !285
  %32 = load double*, double** %31, align 8, !dereferenceable !298, !invariant.group !430, !node !285
  %33 = getelementptr inbounds double, double* %32, i64 %"iv6'ac.0", !node !285
  %34 = load double, double* %33, align 8, !invariant.group !431, !node !285
  %m1diffe66 = fmul fast double %28, %34, !node !285
  %_unwrap70 = getelementptr inbounds double*, double** %1, i64 %"iv'ac.0"
  %"'il_phi1_unwrap71" = load double*, double** %_unwrap70, align 8, !invariant.group !429
  %iv.next7_unwrap = add nuw nsw i64 %"iv6'ac.0", 1
  %_unwrap72 = mul nuw nsw i64 %iv.next7_unwrap, %wide.trip.count100_unwrap92
  %_unwrap73 = add nuw nsw i64 %_unwrap72, %"iv'ac.0"
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1_unwrap71", i64 %_unwrap73, !node !285
  %35 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !node !285
  %36 = fadd fast double %35, %m1diffe66, !node !285
  store double %36, double* %"arrayidx29'ipg_unwrap", align 8
  %37 = icmp eq i64 %"iv6'ac.0", 0
  %38 = select fast i1 %37, double 0.000000e+00, double %28
  %39 = fadd fast double %"mul13'de.2", %28, !node !285
  %40 = select fast i1 %37, double %39, double %"mul13'de.2"
  br i1 %37, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %41 = add nsw i64 %"iv6'ac.0", -1
  %inc548 = add i32 %reverse_op.3, 26
  %inc550 = add i32 %reverse_mem.3, 50
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %inc564 = add i32 %reverse_op.4.in, 6
  %wide.trip.count_unwrap85 = zext i32 %43 to i64
  %_unwrap86 = add nsw i64 %wide.trip.count_unwrap85, -2
  %inc566 = add i32 %reverse_mem.4, 9
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %mergeinvertfor.body5_for.inc47.loopexit, %incinvertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %mergeinvertfor.body5_for.inc47.loopexit ], [ %"add43'de.1", %incinvertfor.body5 ]
  %"iv4'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap90, %mergeinvertfor.body5_for.inc47.loopexit ], [ %"iv4'ac.1", %incinvertfor.body5 ]
  %reverse_mem.4 = phi i32 [ %inc584, %mergeinvertfor.body5_for.inc47.loopexit ], [ %inc376, %incinvertfor.body5 ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %mergeinvertfor.body5_for.inc47.loopexit ], [ %inc370, %incinvertfor.body5 ]
  %"iv4'ac.1" = add nsw i64 %"iv4'ac.1.in", -1
  %inc574 = add i32 %reverse_op.4.in, 3
  %42 = getelementptr inbounds i32, i32* %3, i64 %"iv'ac.0"
  %inc578 = add i32 %reverse_mem.4, 4
  %43 = load i32, i32* %42, align 4, !invariant.group !432
  %cmp2281_unwrap = icmp sgt i32 %43, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

mergeinvertfor.body5_for.inc47.loopexit:          ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap90 = zext i32 %6 to i64, !node !285
  %inc584 = add i32 %reverse_mem.5, 3
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.end49.loopexit, %incinvertfor.cond2.preheader
  %"add43'de.4" = phi double [ 0.000000e+00, %invertfor.end49.loopexit ], [ %"add43'de.0", %incinvertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap92, %invertfor.end49.loopexit ], [ %"iv'ac.0", %incinvertfor.cond2.preheader ]
  %reverse_mem.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc286, %incinvertfor.cond2.preheader ]
  %reverse_op.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc284, %incinvertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %inc586 = add i32 %reverse_mem.5, 1
  %cmp483_unwrap = icmp sgt i32 %6, 0
  br i1 %cmp483_unwrap, label %mergeinvertfor.body5_for.inc47.loopexit, label %invertfor.cond2.preheader

invertfor.end49.loopexit:                         ; preds = %invertfor.end49
  %wide.trip.count100_unwrap92 = zext i32 %5 to i64
  br label %invertfor.inc47

invertfor.end49:                                  ; preds = %for.inc47, %entry
  %forward_mem.5 = phi i32 [ 12, %entry ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.6 = phi i32 [ %forward_op.0, %entry ], [ %forward_op.5, %for.inc47 ]
  br i1 %cmp85, label %invertfor.end49.loopexit, label %invertresize.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffeapply_global_transform(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* nocapture readonly %positions, %struct.Matrix* nocapture %"positions'", { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 11
  %1 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 12
  %call.i = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 5
  %"call.i'mi" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 4
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %2 = bitcast i8* %call.i to %struct.Matrix*
  %"call4.i'mi" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 3
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2, !node !285
  %"'il_phi1" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 0
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0, !node !285
  %3 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 10
  %"'ipc16" = bitcast i8* %"call4.i'mi" to double*
  %4 = sext i32 %3 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %forward_mem.0 = phi i32 [ 8, %entry ], [ %inc101.lcssa, %for.inc12 ]
  %forward_op.0 = phi i32 [ 0, %entry ], [ %inc105.lcssa, %for.inc12 ]
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %for.inc12 ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc77 = add i32 %forward_op.0, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %forward_mem.1 = phi i32 [ %forward_mem.0, %for.cond1.preheader ], [ %inc101, %for.body3 ]
  %forward_op.1 = phi i32 [ %inc77, %for.cond1.preheader ], [ %inc105, %for.body3 ]
  %iv2 = phi i64 [ 0, %for.cond1.preheader ], [ %iv.next3, %for.body3 ]
  %iv.next3 = add nuw nsw i64 %iv2, 1
  %inc101 = add i32 %forward_mem.1, 4
  %inc105 = add i32 %forward_op.1, 10
  %exitcond102.not = icmp eq i64 %iv.next3, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !195

for.inc12:                                        ; preds = %for.body3
  %forward_mem.1.lcssa = phi i32 [ %forward_mem.1, %for.body3 ]
  %forward_op.1.lcssa = phi i32 [ %forward_op.1, %for.body3 ]
  %inc101.lcssa = phi i32 [ %inc101, %for.body3 ]
  %inc105.lcssa = phi i32 [ %inc105, %for.body3 ]
  %exitcond107.not = icmp eq i64 %iv.next, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !196

for.end14:                                        ; preds = %for.inc12
  %forward_mem.1.lcssa.lcssa = phi i32 [ %forward_mem.1.lcssa, %for.inc12 ]
  %forward_op.1.lcssa.lcssa = phi i32 [ %forward_op.1.lcssa, %for.inc12 ]
  %inc105.lcssa.lcssa = phi i32 [ %inc105.lcssa, %for.inc12 ]
  %call.i81 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 8
  %"call.i81'mi" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 7
  %"'ipc24" = bitcast i8* %"call.i81'mi" to %struct.Matrix*
  %5 = bitcast i8* %call.i81 to %struct.Matrix*
  %tapeArg25 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 6
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1, !node !285
  %inc107 = add i32 %forward_mem.1.lcssa.lcssa, 5
  %6 = load i32, i32* %ncols, align 4, !tbaa !139, !node !285
  %cmp1789 = icmp sgt i32 %6, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %invertdelete_matrix.exit86

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0, !node !285
  %inc109 = add i32 %forward_mem.1.lcssa.lcssa, 6
  %7 = load i32, i32* %nrows20, align 8, !tbaa !138, !invariant.group !433, !node !285
  %cmp2187 = icmp sgt i32 %7, 0
  %wide.trip.count = zext i32 %7 to i64, !node !285
  %8 = zext i32 %6 to i64, !node !285
  %inc113 = add i32 %forward_op.1.lcssa.lcssa, 12
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %forward_mem.2 = phi i32 [ %inc109, %for.cond19.preheader.lr.ph ], [ %forward_mem.3, %for.inc45 ]
  %forward_op.2 = phi i32 [ %inc113, %for.cond19.preheader.lr.ph ], [ %forward_op.4, %for.inc45 ]
  %iv4 = phi i64 [ 0, %for.cond19.preheader.lr.ph ], [ %iv.next5, %for.inc45 ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %inc115 = add i32 %forward_op.2, 1
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %inc129 = add i32 %forward_mem.2, 5
  %inc131 = add i32 %forward_op.2, 4
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %forward_op.3 = phi i32 [ %inc131, %for.body22.lr.ph ], [ %inc139, %for.body22 ]
  %iv9 = phi i64 [ 0, %for.body22.lr.ph ], [ %iv.next10, %for.body22 ]
  %iv.next10 = add nuw nsw i64 %iv9, 1
  %inc139 = add i32 %forward_op.3, 4
  %exitcond.not = icmp eq i64 %iv.next10, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !197

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %forward_mem.3 = phi i32 [ %forward_mem.2, %for.cond19.preheader ], [ %inc129, %for.body22 ]
  %forward_op.4 = phi i32 [ %inc115, %for.cond19.preheader ], [ %inc139, %for.body22 ]
  %exitcond98.not = icmp eq i64 %iv.next5, %8
  br i1 %exitcond98.not, label %invertdelete_matrix.exit86, label %for.cond19.preheader, !llvm.loop !198

invertentry:                                      ; preds = %invertfor.cond1.preheader
  %reverse_mem.0.in.lcssa.lcssa = phi i32 [ %reverse_mem.0.in.lcssa, %invertfor.cond1.preheader ]
  %reverse_op.0.lcssa.lcssa = phi i32 [ %reverse_op.0.lcssa, %invertfor.cond1.preheader ]
  %inc169 = add i32 %reverse_op.0.lcssa.lcssa, 16
  %inc141 = add i32 %forward_mem.4, 1
  %tapeArg13 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 1
  %9 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 9
  %"'il_phi" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double*, i32, double*, double* } %tapeArg, 2
  call void @diffeangle_axis_to_rotation_matrix(double* %9, double* %"'il_phi", %struct.Matrix* %2, %struct.Matrix* %"'ipc", { double, double*, double, double, double } %tapeArg13)
  tail call void @free(i8* nonnull %"call4.i'mi")
  tail call void @free(i8* nonnull %"call.i'mi")
  tail call void @free(i8* %call.i)
  %10 = bitcast double* %0 to i8*
  tail call void @free(i8* nonnull %10)
  %inc161 = add i32 %reverse_mem.0.in.lcssa.lcssa, 45
  %11 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.5, i32 %inc169, i32 %inc141, i32 %inc161)
  ret void

invertfor.cond1.preheader:                        ; preds = %invertfor.body3
  %reverse_mem.0.in.lcssa = phi i32 [ %reverse_mem.0.in, %invertfor.body3 ]
  %reverse_op.0.lcssa = phi i32 [ %reverse_op.0, %invertfor.body3 ]
  %13 = icmp eq i64 %"iv'ac.0", 0
  br i1 %13, label %invertentry, label %incinvertfor.cond1.preheader

incinvertfor.cond1.preheader:                     ; preds = %invertfor.cond1.preheader
  %14 = add nsw i64 %"iv'ac.0", -1
  %inc173 = add i32 %reverse_op.0.lcssa, 17
  %inc175 = add i32 %reverse_mem.0.in.lcssa, 37
  br label %invertfor.inc12

invertfor.body3:                                  ; preds = %invertfor.inc12, %incinvertfor.body3
  %"iv2'ac.0" = phi i64 [ 2, %invertfor.inc12 ], [ %23, %incinvertfor.body3 ]
  %reverse_mem.0.in = phi i32 [ %reverse_mem.1, %invertfor.inc12 ], [ %inc273, %incinvertfor.body3 ]
  %reverse_op.0 = phi i32 [ %reverse_op.1, %invertfor.inc12 ], [ %inc275, %incinvertfor.body3 ]
  %_unwrap = mul nuw nsw i64 %"iv'ac.0", 3
  %_unwrap17 = add nuw nsw i64 %_unwrap, %"iv2'ac.0"
  %"arrayidx10'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc16", i64 %_unwrap17
  %15 = load double, double* %"arrayidx10'ipg_unwrap", align 8
  store double 0.000000e+00, double* %"arrayidx10'ipg_unwrap", align 8
  %16 = getelementptr inbounds double, double* %0, i64 %_unwrap17
  %17 = load double, double* %16, align 8, !invariant.group !434
  %m0diffe = fmul fast double %15, %17
  %18 = getelementptr inbounds double, double* %1, i64 %_unwrap17
  %19 = load double, double* %18, align 8, !invariant.group !435
  %m1diffe = fmul fast double %15, %19
  store double %m0diffe, double* %"arrayidx10'ipg_unwrap", align 8
  %_unwrap23 = add nsw i64 %"iv'ac.0", %4
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1", i64 %_unwrap23
  %20 = load double, double* %"arrayidx'ipg_unwrap", align 8
  %21 = fadd fast double %20, %m1diffe
  store double %21, double* %"arrayidx'ipg_unwrap", align 8
  %22 = icmp eq i64 %"iv2'ac.0", 0
  br i1 %22, label %invertfor.cond1.preheader, label %incinvertfor.body3

incinvertfor.body3:                               ; preds = %invertfor.body3
  %inc273 = add i32 %reverse_mem.0.in, 35
  %23 = add nsw i64 %"iv2'ac.0", -1
  %inc275 = add i32 %reverse_op.0, 16
  br label %invertfor.body3

invertfor.inc12:                                  ; preds = %invertfor.end14, %incinvertfor.cond1.preheader
  %"iv'ac.0" = phi i64 [ 2, %invertfor.end14 ], [ %14, %incinvertfor.cond1.preheader ]
  %reverse_mem.1 = phi i32 [ %reverse_mem.2, %invertfor.end14 ], [ %inc175, %incinvertfor.cond1.preheader ]
  %reverse_op.1 = phi i32 [ %reverse_op.2, %invertfor.end14 ], [ %inc173, %incinvertfor.cond1.preheader ]
  br label %invertfor.body3

invertfor.end14:                                  ; preds = %invertdelete_matrix.exit86, %invertfor.cond19.preheader.lr.ph
  %reverse_mem.2 = phi i32 [ %phi.bo, %invertfor.cond19.preheader.lr.ph ], [ 1, %invertdelete_matrix.exit86 ]
  %reverse_op.2 = phi i32 [ %inc285, %invertfor.cond19.preheader.lr.ph ], [ 0, %invertdelete_matrix.exit86 ]
  call void @diffemat_mult.12(%struct.Matrix* %2, %struct.Matrix* %"'ipc", %struct.Matrix* %positions, %struct.Matrix* %"positions'", %struct.Matrix* %5, %struct.Matrix* %"'ipc24", { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg25), !node !285
  tail call void @free(i8* nonnull %"call.i81'mi")
  tail call void @free(i8* %call.i81)
  br label %invertfor.inc12

invertfor.cond19.preheader.lr.ph:                 ; preds = %invertfor.cond19.preheader
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.cond19.preheader ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.cond19.preheader ]
  %inc285 = add i32 %reverse_op.3.lcssa, 1
  %phi.bo = add i32 %reverse_mem.3.lcssa, 2
  br label %invertfor.end14

invertfor.cond19.preheader:                       ; preds = %invertfor.inc45, %invertfor.body22.lr.ph
  %reverse_mem.3 = phi i32 [ %inc375, %invertfor.body22.lr.ph ], [ %inc395, %invertfor.inc45 ]
  %reverse_op.3 = phi i32 [ %inc377.lcssa, %invertfor.body22.lr.ph ], [ %reverse_op.5, %invertfor.inc45 ]
  %24 = icmp eq i64 %"iv4'ac.0", 0
  br i1 %24, label %invertfor.cond19.preheader.lr.ph, label %incinvertfor.cond19.preheader

incinvertfor.cond19.preheader:                    ; preds = %invertfor.cond19.preheader
  %inc289 = add i32 %reverse_op.3, 2
  %inc291 = add i32 %reverse_mem.3, 3
  br label %invertfor.inc45

invertfor.body22.lr.ph:                           ; preds = %invertfor.body22
  %reverse_mem.4.lcssa = phi i32 [ %reverse_mem.4, %invertfor.body22 ]
  %inc377.lcssa = phi i32 [ %inc377, %invertfor.body22 ]
  %inc375 = add i32 %reverse_mem.4.lcssa, 31
  br label %invertfor.cond19.preheader

invertfor.body22:                                 ; preds = %mergeinvertfor.body22_for.inc45.loopexit, %incinvertfor.body22
  %"iv9'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %mergeinvertfor.body22_for.inc45.loopexit ], [ %"iv9'ac.0", %incinvertfor.body22 ]
  %reverse_mem.4 = phi i32 [ %inc391, %mergeinvertfor.body22_for.inc45.loopexit ], [ %inc383, %incinvertfor.body22 ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %mergeinvertfor.body22_for.inc45.loopexit ], [ %inc377, %incinvertfor.body22 ]
  %"iv9'ac.0" = add nsw i64 %"iv9'ac.0.in", -1
  %"data36'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2, !node !285
  %"'ipl_unwrap" = load double*, double** %"data36'ipg_unwrap", align 8, !invariant.group !436, !node !285
  %_unwrap33 = load i32, i32* %nrows20_unwrap51, align 8, !tbaa !138, !invariant.group !433, !node !285
  %_unwrap34 = sext i32 %_unwrap33 to i64, !node !285
  %_unwrap35 = mul nsw i64 %"iv4'ac.0", %_unwrap34, !node !285
  %_unwrap36 = add nsw i64 %"iv9'ac.0", %_unwrap35, !node !285
  %"arrayidx41'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap36, !node !285
  %25 = load double, double* %"arrayidx41'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx41'ipg_unwrap", align 8
  %"'ipl28_unwrap" = load double*, double** %"data'ipg", align 8, !invariant.group !437, !node !285
  %_unwrap39 = load i32, i32* %nrows, align 8, !tbaa !138, !invariant.group !438, !node !285
  %mul31_unwrap = shl nsw i32 %_unwrap39, 1, !node !285
  %_unwrap40 = sext i32 %mul31_unwrap to i64, !node !285
  %_unwrap41 = add nsw i64 %"iv9'ac.0", %_unwrap40, !node !285
  %"arrayidx34'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl28_unwrap", i64 %_unwrap41, !node !285
  %26 = load double, double* %"arrayidx34'ipg_unwrap", align 8, !node !285
  %27 = fadd fast double %26, %25, !node !285
  store double %27, double* %"arrayidx34'ipg_unwrap", align 8
  %"data23'ipg_unwrap" = getelementptr inbounds i8, i8* %"call.i81'mi", i64 8
  %"'ipc30_unwrap" = bitcast i8* %"data23'ipg_unwrap" to double**
  %"'ipl31_unwrap" = load double*, double** %"'ipc30_unwrap", align 8, !invariant.group !439
  %nrows24_unwrap = bitcast i8* %call.i81 to i32*
  %_unwrap43 = load i32, i32* %nrows24_unwrap, align 8, !tbaa !138, !invariant.group !440
  %_unwrap44 = sext i32 %_unwrap43 to i64
  %_unwrap45 = mul nsw i64 %"iv4'ac.0", %_unwrap44, !node !285
  %_unwrap46 = add nsw i64 %"iv9'ac.0", %_unwrap45, !node !285
  %"arrayidx28'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl31_unwrap", i64 %_unwrap46, !node !285
  %28 = load double, double* %"arrayidx28'ipg_unwrap", align 8, !node !285
  %29 = fadd fast double %28, %25, !node !285
  store double %29, double* %"arrayidx28'ipg_unwrap", align 8
  %30 = icmp eq i64 %"iv9'ac.0", 0
  %inc377 = add i32 %reverse_op.4.in, 13
  br i1 %30, label %invertfor.body22.lr.ph, label %incinvertfor.body22

incinvertfor.body22:                              ; preds = %invertfor.body22
  %inc383 = add i32 %reverse_mem.4, 33
  br label %invertfor.body22

mergeinvertfor.body22_for.inc45.loopexit:         ; preds = %invertfor.inc45
  %wide.trip.count_unwrap = zext i32 %_unwrap52 to i64, !node !285
  %inc391 = add i32 %reverse_mem.5, 5
  br label %invertfor.body22

invertfor.inc45:                                  ; preds = %mergeinvertfor.cond19.preheader_for.end47, %incinvertfor.cond19.preheader
  %"iv4'ac.0.in" = phi i64 [ %_unwrap53, %mergeinvertfor.cond19.preheader_for.end47 ], [ %"iv4'ac.0", %incinvertfor.cond19.preheader ]
  %reverse_mem.5 = phi i32 [ 1, %mergeinvertfor.cond19.preheader_for.end47 ], [ %inc291, %incinvertfor.cond19.preheader ]
  %reverse_op.5 = phi i32 [ 1, %mergeinvertfor.cond19.preheader_for.end47 ], [ %inc289, %incinvertfor.cond19.preheader ]
  %"iv4'ac.0" = add nsw i64 %"iv4'ac.0.in", -1
  %nrows20_unwrap51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0, !node !285
  %inc395 = add i32 %reverse_mem.5, 2
  %_unwrap52 = load i32, i32* %nrows20_unwrap51, align 8, !tbaa !138, !invariant.group !433, !node !285
  %cmp2187_unwrap = icmp sgt i32 %_unwrap52, 0
  br i1 %cmp2187_unwrap, label %mergeinvertfor.body22_for.inc45.loopexit, label %invertfor.cond19.preheader

mergeinvertfor.cond19.preheader_for.end47:        ; preds = %invertdelete_matrix.exit86
  %_unwrap53 = zext i32 %6 to i64, !node !285
  br label %invertfor.inc45

invertdelete_matrix.exit86:                       ; preds = %for.inc45, %for.end14
  %forward_mem.4 = phi i32 [ %inc107, %for.end14 ], [ %forward_mem.3, %for.inc45 ]
  %forward_op.5 = phi i32 [ %inc105.lcssa.lcssa, %for.end14 ], [ %forward_op.4, %for.inc45 ]
  br i1 %cmp1789, label %mergeinvertfor.cond19.preheader_for.end47, label %invertfor.end14
}

; Function Attrs: nofree nounwind uwtable mustprogress
define internal void @diffeangle_axis_to_rotation_matrix(double* nocapture readonly %angle_axis, double* nocapture %"angle_axis'", %struct.Matrix* nocapture readonly %R, %struct.Matrix* nocapture %"R'", { double, double*, double, double, double } %tapeArg) local_unnamed_addr #9 {
entry:
  %0 = extractvalue { double, double*, double, double, double } %tapeArg, 1
  %1 = extractvalue { double, double*, double, double, double } %tapeArg, 0
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %entry
  %forward_mem.0 = phi i32 [ 43, %entry ], [ %inc147, %for.body.i ]
  %forward_op.0 = phi i32 [ 0, %entry ], [ %inc149, %for.body.i ]
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %for.body.i ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc147 = add i32 %forward_mem.0, 2
  %inc149 = add i32 %forward_op.0, 2
  %exitcond.not.i = icmp eq i64 %iv, 1
  br i1 %exitcond.not.i, label %square_sum.exit, label %for.body.i, !llvm.loop !194

square_sum.exit:                                  ; preds = %for.body.i
  %forward_mem.0.lcssa = phi i32 [ %forward_mem.0, %for.body.i ]
  %forward_op.0.lcssa = phi i32 [ %forward_op.0, %for.body.i ]
  %inc149.lcssa = phi i32 [ %inc149, %for.body.i ]
  %add.i.lcssa = extractvalue { double, double*, double, double, double } %tapeArg, 2
  %2 = tail call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %cmp = fcmp fast olt double %2, 1.000000e-04
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %square_sum.exit
  %ncols.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1, !node !285
  %inc151 = add i32 %forward_mem.0.lcssa, 3
  %3 = load i32, i32* %ncols.i, align 4, !tbaa !139, !invariant.group !441, !node !285
  %cmp33.i = icmp sgt i32 %3, 0
  br i1 %cmp33.i, label %for.cond1.preheader.lr.ph.i, label %invertcleanup

for.cond1.preheader.lr.ph.i:                      ; preds = %if.then
  %nrows.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0, !node !285
  %inc153 = add i32 %forward_mem.0.lcssa, 4
  %4 = load i32, i32* %nrows.i, align 8, !tbaa !138, !invariant.group !442, !node !285
  %cmp230.i = icmp sgt i32 %4, 0
  %5 = zext i32 %4 to i64, !node !285
  %6 = zext i32 %3 to i64, !node !285
  %inc157 = add i32 %forward_op.0.lcssa, 4
  br label %for.cond1.preheader.i

for.cond1.preheader.i:                            ; preds = %for.inc12.i, %for.cond1.preheader.lr.ph.i
  %forward_mem.1 = phi i32 [ %inc153, %for.cond1.preheader.lr.ph.i ], [ %forward_mem.3, %for.inc12.i ]
  %forward_op.1 = phi i32 [ %inc157, %for.cond1.preheader.lr.ph.i ], [ %forward_op.3, %for.inc12.i ]
  %iv1 = phi i64 [ 0, %for.cond1.preheader.lr.ph.i ], [ %iv.next2, %for.inc12.i ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %inc159 = add i32 %forward_op.1, 1
  br i1 %cmp230.i, label %for.body3.lr.ph.i, label %for.inc12.i

for.body3.lr.ph.i:                                ; preds = %for.cond1.preheader.i
  %inc165 = add i32 %forward_op.1, 4
  br label %for.body3.i

for.body3.i:                                      ; preds = %for.body3.i, %for.body3.lr.ph.i
  %forward_mem.2 = phi i32 [ %forward_mem.1, %for.body3.lr.ph.i ], [ %inc169, %for.body3.i ]
  %forward_op.2 = phi i32 [ %inc165, %for.body3.lr.ph.i ], [ %inc171, %for.body3.i ]
  %iv3 = phi i64 [ 0, %for.body3.lr.ph.i ], [ %iv.next4, %for.body3.i ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %inc169 = add i32 %forward_mem.2, 1
  %inc171 = add i32 %forward_op.2, 2
  %exitcond.not.i172 = icmp eq i64 %iv.next4, %5
  br i1 %exitcond.not.i172, label %for.inc12.i, label %for.body3.i, !llvm.loop !188

for.inc12.i:                                      ; preds = %for.body3.i, %for.cond1.preheader.i
  %forward_mem.3 = phi i32 [ %forward_mem.1, %for.cond1.preheader.i ], [ %inc169, %for.body3.i ]
  %forward_op.3 = phi i32 [ %inc159, %for.cond1.preheader.i ], [ %inc171, %for.body3.i ]
  %exitcond37.not.i = icmp eq i64 %iv.next2, %6
  br i1 %exitcond37.not.i, label %invertcleanup, label %for.cond1.preheader.i, !llvm.loop !189

if.end:                                           ; preds = %square_sum.exit
  %inc189 = add i32 %forward_mem.0.lcssa, 4
  %inc209 = add i32 %forward_op.0.lcssa, 19
  br label %invertcleanup

invertentry:                                      ; preds = %invertfor.body.i
  %reverse_mem.0.lcssa = phi i32 [ %reverse_mem.0, %invertfor.body.i ]
  %reverse_op.0.lcssa = phi i32 [ %reverse_op.0, %invertfor.body.i ]
  %.lcssa = phi double [ %20, %invertfor.body.i ]
  %m0diffe = fmul fast double %.lcssa, %1
  %7 = fadd fast double %"'de.0", %m0diffe, !node !285
  %8 = fadd fast double %7, %m0diffe, !node !285
  %9 = load double, double* %"angle_axis'", align 8, !node !285
  %10 = fadd fast double %9, %8, !node !285
  %inc237 = add i32 %reverse_op.0.lcssa, 16
  store double %10, double* %"angle_axis'", align 8
  %inc245 = add i32 %reverse_mem.0.lcssa, 40
  %11 = bitcast double* %0 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.4, i32 %inc237, i32 %forward_mem.4, i32 %inc245)
  ret void

invertfor.body.i:                                 ; preds = %mergeinvertfor.body.i_square_sum.exit, %incinvertfor.body.i
  %"mul.i'de.0" = phi double [ 0.000000e+00, %mergeinvertfor.body.i_square_sum.exit ], [ %20, %incinvertfor.body.i ]
  %"iv'ac.0" = phi i64 [ 1, %mergeinvertfor.body.i_square_sum.exit ], [ %21, %incinvertfor.body.i ]
  %reverse_mem.0 = phi i32 [ %inc357, %mergeinvertfor.body.i_square_sum.exit ], [ %inc331, %incinvertfor.body.i ]
  %reverse_op.0 = phi i32 [ %inc353, %mergeinvertfor.body.i_square_sum.exit ], [ %inc329, %incinvertfor.body.i ]
  %13 = getelementptr inbounds double, double* %0, i64 %"iv'ac.0"
  %14 = load double, double* %13, align 8, !invariant.group !443
  %m0diffe6 = fmul fast double %25, %14
  %15 = fadd fast double %m0diffe6, %m0diffe6
  %iv.next_unwrap = add nuw nsw i64 %"iv'ac.0", 1
  %"arrayidx2.i'ipg_unwrap" = getelementptr inbounds double, double* %"angle_axis'", i64 %iv.next_unwrap, !node !285
  %16 = load double, double* %"arrayidx2.i'ipg_unwrap", align 8, !node !285
  %17 = fadd fast double %16, %15, !node !285
  store double %17, double* %"arrayidx2.i'ipg_unwrap", align 8
  %18 = icmp eq i64 %"iv'ac.0", 0
  %19 = fadd fast double %"mul.i'de.0", %25
  %20 = select fast i1 %18, double %19, double %"mul.i'de.0"
  br i1 %18, label %invertentry, label %incinvertfor.body.i

incinvertfor.body.i:                              ; preds = %invertfor.body.i
  %21 = add nsw i64 %"iv'ac.0", -1
  %inc329 = add i32 %reverse_op.0, 12
  %inc331 = add i32 %reverse_mem.0, 29
  br label %invertfor.body.i

mergeinvertfor.body.i_square_sum.exit:            ; preds = %staging, %invertif.end, %invertfor.cond1.preheader.lr.ph.i
  %"'de10.0" = phi double [ %phi.bo, %invertif.end ], [ 0.000000e+00, %staging ], [ 0.000000e+00, %invertfor.cond1.preheader.lr.ph.i ]
  %"'de.0" = phi double [ %d0diffe48, %invertif.end ], [ 0.000000e+00, %staging ], [ 0.000000e+00, %invertfor.cond1.preheader.lr.ph.i ]
  %reverse_mem.1 = phi i32 [ 227, %invertif.end ], [ %inc359, %invertfor.cond1.preheader.lr.ph.i ], [ 1, %staging ]
  %reverse_op.1 = phi i32 [ 125, %invertif.end ], [ %inc361, %invertfor.cond1.preheader.lr.ph.i ], [ 0, %staging ]
  %inc353 = add i32 %reverse_op.1, 4
  %22 = fcmp fast oeq double %add.i.lcssa, 0.000000e+00
  %23 = call fast double @llvm.sqrt.f64(double %add.i.lcssa)
  %24 = fdiv fast double %"'de10.0", %23, !node !285
  %25 = select fast i1 %22, double 0.000000e+00, double %24
  %inc357 = add i32 %reverse_mem.1, 9
  br label %invertfor.body.i

invertfor.cond1.preheader.lr.ph.i:                ; preds = %invertfor.cond1.preheader.i
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.cond1.preheader.i ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.cond1.preheader.i ]
  %inc361 = add i32 %reverse_op.3.lcssa, 1
  %inc359 = add i32 %reverse_mem.3.lcssa, 1
  br label %mergeinvertfor.body.i_square_sum.exit

invertfor.cond1.preheader.i:                      ; preds = %invertfor.inc12.i, %invertfor.body3.lr.ph.i
  %reverse_mem.3 = phi i32 [ %inc391, %invertfor.body3.lr.ph.i ], [ %inc411, %invertfor.inc12.i ]
  %reverse_op.3 = phi i32 [ %inc393.lcssa, %invertfor.body3.lr.ph.i ], [ %reverse_op.5, %invertfor.inc12.i ]
  %26 = icmp eq i64 %"iv1'ac.0", 0
  br i1 %26, label %invertfor.cond1.preheader.lr.ph.i, label %incinvertfor.cond1.preheader.i

incinvertfor.cond1.preheader.i:                   ; preds = %invertfor.cond1.preheader.i
  %inc365 = add i32 %reverse_op.3, 2
  %inc367 = add i32 %reverse_mem.3, 3
  br label %invertfor.inc12.i

invertfor.body3.lr.ph.i:                          ; preds = %invertfor.body3.i
  %reverse_mem.4.lcssa = phi i32 [ %reverse_mem.4, %invertfor.body3.i ]
  %inc393.lcssa = phi i32 [ %inc393, %invertfor.body3.i ]
  %inc391 = add i32 %reverse_mem.4.lcssa, 8
  br label %invertfor.cond1.preheader.i

invertfor.body3.i:                                ; preds = %mergeinvertfor.body3.i_for.inc12.i.loopexit, %incinvertfor.body3.i
  %"iv3'ac.0.in" = phi i64 [ %_unwrap19, %mergeinvertfor.body3.i_for.inc12.i.loopexit ], [ %"iv3'ac.0", %incinvertfor.body3.i ]
  %reverse_mem.4 = phi i32 [ %inc407, %mergeinvertfor.body3.i_for.inc12.i.loopexit ], [ %inc399, %incinvertfor.body3.i ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %mergeinvertfor.body3.i_for.inc12.i.loopexit ], [ %inc393, %incinvertfor.body3.i ]
  %"iv3'ac.0" = add nsw i64 %"iv3'ac.0.in", -1
  %"data6.i'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"R'", i64 0, i32 2, !node !285
  %"'il_phi_unwrap" = load double*, double** %"data6.i'ipg_unwrap", align 8, !tbaa !137, !node !285
  %cmp4.i_unwrap = icmp eq i64 %"iv1'ac.0.in", %"iv3'ac.0.in"
  %_unwrap = load i32, i32* %nrows.i_unwrap21, align 8, !tbaa !138, !invariant.group !442, !node !285
  %_unwrap11 = sext i32 %_unwrap to i64, !node !285
  %_unwrap12 = mul nsw i64 %"iv1'ac.0", %_unwrap11, !node !285
  %.sink178_unwrap.v = select i1 %cmp4.i_unwrap, i64 %"iv1'ac.0", i64 %"iv3'ac.0"
  %.sink178_unwrap = add nsw i64 %.sink178_unwrap.v, %_unwrap12
  %"arrayidx11.i'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi_unwrap", i64 %.sink178_unwrap, !node !285
  store double 0.000000e+00, double* %"arrayidx11.i'ipg_unwrap", align 8
  %27 = icmp eq i64 %"iv3'ac.0", 0
  %inc393 = add i32 %reverse_op.4.in, 6
  br i1 %27, label %invertfor.body3.lr.ph.i, label %incinvertfor.body3.i

incinvertfor.body3.i:                             ; preds = %invertfor.body3.i
  %inc399 = add i32 %reverse_mem.4, 10
  br label %invertfor.body3.i

mergeinvertfor.body3.i_for.inc12.i.loopexit:      ; preds = %invertfor.inc12.i
  %_unwrap19 = zext i32 %_unwrap22 to i64, !node !285
  %inc407 = add i32 %reverse_mem.5, 5
  br label %invertfor.body3.i

invertfor.inc12.i:                                ; preds = %mergeinvertfor.cond1.preheader.i_cleanup.loopexit, %incinvertfor.cond1.preheader.i
  %"iv1'ac.0.in" = phi i64 [ %_unwrap50, %mergeinvertfor.cond1.preheader.i_cleanup.loopexit ], [ %"iv1'ac.0", %incinvertfor.cond1.preheader.i ]
  %reverse_mem.5 = phi i32 [ 3, %mergeinvertfor.cond1.preheader.i_cleanup.loopexit ], [ %inc367, %incinvertfor.cond1.preheader.i ]
  %reverse_op.5 = phi i32 [ 1, %mergeinvertfor.cond1.preheader.i_cleanup.loopexit ], [ %inc365, %incinvertfor.cond1.preheader.i ]
  %"iv1'ac.0" = add nsw i64 %"iv1'ac.0.in", -1
  %nrows.i_unwrap21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0, !node !285
  %inc411 = add i32 %reverse_mem.5, 2
  %_unwrap22 = load i32, i32* %nrows.i_unwrap21, align 8, !tbaa !138, !invariant.group !442, !node !285
  %cmp230.i_unwrap = icmp sgt i32 %_unwrap22, 0
  br i1 %cmp230.i_unwrap, label %mergeinvertfor.body3.i_for.inc12.i.loopexit, label %invertfor.cond1.preheader.i

invertif.end:                                     ; preds = %invertcleanup
  %"data'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"R'", i64 0, i32 2, !node !285
  %"'il_phi5_unwrap" = load double*, double** %"data'ipg_unwrap", align 8, !tbaa !137, !node !285
  %nrows_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 0, !node !285
  %_unwrap23 = load i32, i32* %nrows_unwrap, align 8, !tbaa !138, !invariant.group !444, !node !285
  %mul28_unwrap = shl nsw i32 %_unwrap23, 1, !node !285
  %add95_unwrap = add nsw i32 %mul28_unwrap, 2, !node !285
  %idxprom96_unwrap = sext i32 %add95_unwrap to i64, !node !285
  %"arrayidx97'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi5_unwrap", i64 %idxprom96_unwrap, !node !285
  %28 = load double, double* %"arrayidx97'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx97'ipg_unwrap", align 8
  %29 = tail call fast double @llvm.cos.f64(double %2)
  %_unwrap57 = extractvalue { double, double*, double, double, double } %tapeArg, 4
  %div4_unwrap = fdiv fast double %_unwrap57, %2
  %mul87_unwrap = fmul fast double %div4_unwrap, %div4_unwrap
  %sub89_unwrap = fsub fast double 1.000000e+00, %mul87_unwrap
  %m1diffe25 = fmul fast double %28, %sub89_unwrap, !node !285
  %30 = fmul fast double %28, %29
  %31 = fsub fast double %28, %30
  %m0diffediv4 = fmul fast double %31, %div4_unwrap, !node !285
  %32 = fadd fast double %m0diffediv4, %m0diffediv4, !node !285
  %add84_unwrap = add nsw i32 %_unwrap23, 2, !node !285
  %idxprom85_unwrap = sext i32 %add84_unwrap to i64, !node !285
  %"arrayidx86'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi5_unwrap", i64 %idxprom85_unwrap, !node !285
  %33 = load double, double* %"arrayidx86'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx86'ipg_unwrap", align 8
  %"arrayidx75'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi5_unwrap", i64 2, !node !285
  %34 = load double, double* %"arrayidx75'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx75'ipg_unwrap", align 8
  %add62_unwrap = or i32 %mul28_unwrap, 1, !node !285
  %idxprom63_unwrap = sext i32 %add62_unwrap to i64, !node !285
  %"arrayidx64'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi5_unwrap", i64 %idxprom63_unwrap, !node !285
  %35 = load double, double* %"arrayidx64'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx64'ipg_unwrap", align 8
  %36 = fadd fast double %33, %35, !node !285
  %37 = fsub fast double %33, %35
  %38 = tail call fast double @llvm.sin.f64(double %2)
  %m0diffediv = fmul fast double %37, %38, !node !285
  %div_unwrap = fdiv fast double %1, %2
  %m1diffe27 = fmul fast double %37, %div_unwrap, !node !285
  %m0diffemul54 = fmul fast double %36, %div4_unwrap, !node !285
  %_unwrap56 = extractvalue { double, double*, double, double, double } %tapeArg, 3
  %div2_unwrap = fdiv fast double %_unwrap56, %2
  %sub11_unwrap = fsub fast double 1.000000e+00, %29
  %mul54_unwrap = fmul fast double %div2_unwrap, %sub11_unwrap
  %m1diffediv430 = fmul fast double %36, %mul54_unwrap, !node !285
  %39 = fadd fast double %32, %m1diffediv430, !node !285
  %m0diffediv2 = fmul fast double %m0diffemul54, %sub11_unwrap, !node !285
  %m1diffesub11 = fmul fast double %m0diffemul54, %div2_unwrap, !node !285
  %add51_unwrap = add nsw i32 %_unwrap23, 1, !node !285
  %idxprom52_unwrap = sext i32 %add51_unwrap to i64, !node !285
  %"arrayidx53'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi5_unwrap", i64 %idxprom52_unwrap, !node !285
  %40 = load double, double* %"arrayidx53'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx53'ipg_unwrap", align 8
  %mul43_unwrap = fmul fast double %div2_unwrap, %div2_unwrap
  %sub45_unwrap = fsub fast double 1.000000e+00, %mul43_unwrap
  %m1diffe31 = fmul fast double %40, %sub45_unwrap, !node !285
  %41 = fadd fast double %m1diffe25, %m1diffe31, !node !285
  %42 = fmul fast double %40, %29
  %43 = fsub fast double %40, %42
  %m0diffediv232 = fmul fast double %43, %div2_unwrap, !node !285
  %44 = fadd fast double %m0diffediv2, %m0diffediv232, !node !285
  %45 = fadd fast double %44, %m0diffediv232, !node !285
  %"arrayidx42'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi5_unwrap", i64 1, !node !285
  %46 = load double, double* %"arrayidx42'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx42'ipg_unwrap", align 8
  %idxprom30_unwrap = sext i32 %mul28_unwrap to i64, !node !285
  %"arrayidx31'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi5_unwrap", i64 %idxprom30_unwrap, !node !285
  %47 = load double, double* %"arrayidx31'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx31'ipg_unwrap", align 8
  %48 = fadd fast double %34, %47, !node !285
  %49 = fsub fast double %47, %34
  %m0diffediv233 = fmul fast double %49, %38, !node !285
  %m1diffe34 = fmul fast double %49, %div2_unwrap, !node !285
  %50 = fadd fast double %45, %m0diffediv233, !node !285
  %51 = fadd fast double %m1diffe27, %m1diffe34, !node !285
  %m0diffemul10 = fmul fast double %48, %div4_unwrap, !node !285
  %mul10_unwrap = fmul fast double %sub11_unwrap, %div_unwrap
  %m1diffediv435 = fmul fast double %48, %mul10_unwrap, !node !285
  %52 = fadd fast double %39, %m1diffediv435, !node !285
  %idxprom19_unwrap = sext i32 %_unwrap23 to i64, !node !285
  %"arrayidx20'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi5_unwrap", i64 %idxprom19_unwrap, !node !285
  %53 = load double, double* %"arrayidx20'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx20'ipg_unwrap", align 8
  %54 = fadd fast double %46, %53, !node !285
  %55 = fsub fast double %46, %53
  %m0diffediv436 = fmul fast double %55, %38, !node !285
  %m1diffe37 = fmul fast double %55, %div4_unwrap, !node !285
  %56 = fadd fast double %52, %m0diffediv436, !node !285
  %57 = fadd fast double %51, %m1diffe37, !node !285
  %m0diffemul1038 = fmul fast double %54, %div2_unwrap, !node !285
  %m1diffediv239 = fmul fast double %54, %mul10_unwrap, !node !285
  %58 = fadd fast double %m0diffemul10, %m0diffemul1038, !node !285
  %59 = fadd fast double %50, %m1diffediv239, !node !285
  %m0diffesub11 = fmul fast double %58, %div_unwrap, !node !285
  %m1diffediv = fmul fast double %58, %sub11_unwrap, !node !285
  %60 = fadd fast double %m1diffesub11, %m0diffesub11, !node !285
  %61 = fadd fast double %m0diffediv, %m1diffediv, !node !285
  %62 = fsub fast double %41, %60
  %63 = load double, double* %"'il_phi5_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"'il_phi5_unwrap", align 8
  %mul_unwrap = fmul fast double %div_unwrap, %div_unwrap
  %sub_unwrap = fsub fast double 1.000000e+00, %mul_unwrap
  %m1diffe42 = fmul fast double %63, %sub_unwrap, !node !285
  %64 = fadd fast double %62, %m1diffe42, !node !285
  %65 = fmul fast double %63, %29
  %66 = fsub fast double %63, %65
  %m0diffediv43 = fmul fast double %66, %div_unwrap, !node !285
  %67 = fadd fast double %61, %m0diffediv43, !node !285
  %68 = fadd fast double %67, %m0diffediv43, !node !285
  %69 = call fast double @llvm.sin.f64(double %2)
  %70 = call fast double @llvm.cos.f64(double %2)
  %71 = fmul fast double %57, %70, !node !285
  %72 = fmul fast double %69, %64
  %d0diffe = fdiv fast double %56, %2, !node !285
  %73 = fmul fast double %div4_unwrap, %d0diffe
  %74 = fadd fast double %72, %73
  %"arrayidx3'ipg_unwrap" = getelementptr inbounds double, double* %"angle_axis'", i64 2, !node !285
  %75 = load double, double* %"arrayidx3'ipg_unwrap", align 8, !node !285
  %76 = fadd fast double %75, %d0diffe, !node !285
  store double %76, double* %"arrayidx3'ipg_unwrap", align 8
  %d0diffe46 = fdiv fast double %59, %2, !node !285
  %77 = fmul fast double %div2_unwrap, %d0diffe46
  %78 = fadd fast double %74, %77
  %"arrayidx1'ipg_unwrap" = getelementptr inbounds double, double* %"angle_axis'", i64 1, !node !285
  %79 = load double, double* %"arrayidx1'ipg_unwrap", align 8, !node !285
  %80 = fadd fast double %79, %d0diffe46, !node !285
  store double %80, double* %"arrayidx1'ipg_unwrap", align 8
  %d0diffe48 = fdiv fast double %68, %2, !node !285
  %81 = fmul fast double %div_unwrap, %d0diffe48
  %82 = fadd fast double %78, %81
  %83 = fsub fast double %71, %82
  %phi.bo = fmul fast double %83, 5.000000e-01
  br label %mergeinvertfor.body.i_square_sum.exit

mergeinvertfor.cond1.preheader.i_cleanup.loopexit: ; preds = %staging
  %_unwrap50 = zext i32 %_unwrap53 to i64, !node !285
  br label %invertfor.inc12.i

invertcleanup:                                    ; preds = %if.end, %for.inc12.i, %if.then
  %forward_mem.4 = phi i32 [ %inc151, %if.then ], [ %inc189, %if.end ], [ %forward_mem.3, %for.inc12.i ]
  %forward_op.4 = phi i32 [ %inc149.lcssa, %if.then ], [ %inc209, %if.end ], [ %forward_op.3, %for.inc12.i ]
  %ncols.i_unwrap52 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %R, i64 0, i32 1, !node !285
  %_unwrap53 = load i32, i32* %ncols.i_unwrap52, align 4, !tbaa !139, !invariant.group !441, !node !285
  br i1 %cmp, label %staging, label %invertif.end

staging:                                          ; preds = %invertcleanup
  %cmp33.i_unwrap = icmp sgt i32 %_unwrap53, 0
  br i1 %cmp33.i_unwrap, label %mergeinvertfor.cond1.preheader.i_cleanup.loopexit, label %mergeinvertfor.body.i_square_sum.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffemat_mult.12(%struct.Matrix* noalias nocapture readonly %lhs, %struct.Matrix* nocapture %"lhs'", %struct.Matrix* noalias nocapture readonly %rhs, %struct.Matrix* nocapture %"rhs'", %struct.Matrix* noalias nocapture %out, %struct.Matrix* nocapture %"out'", { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 2
  %1 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 10
  %2 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 6
  %3 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 7
  %4 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 8
  %5 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 9
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 0, !node !285
  %6 = load i32, i32* %nrows, align 8, !tbaa !138, !node !285
  %7 = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 3
  %mul3.i = mul nsw i32 %7, %6, !node !285
  %cmp.not.i = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 4
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  %spec.select = select i1 %cmp8.i, i32 2, i32 1
  %forward_op.0 = select i1 %cmp.not.i, i32 1, i32 %spec.select
  %cmp85 = icmp sgt i32 %6, 0
  br i1 %cmp85, label %for.cond2.preheader.lr.ph, label %invertfor.end49

for.cond2.preheader.lr.ph:                        ; preds = %entry
  %cmp483 = icmp sgt i32 %7, 0
  %ncols21 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1, !node !285
  %8 = zext i32 %6 to i64, !node !285
  %wide.trip.count96 = zext i32 %7 to i64
  %inc161 = or i32 %forward_op.0, 12
  %inc165 = add nuw nsw i32 %inc161, 2
  br label %for.cond2.preheader

for.cond2.preheader:                              ; preds = %for.inc47, %for.cond2.preheader.lr.ph
  %forward_mem.0 = phi i32 [ 16, %for.cond2.preheader.lr.ph ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.1 = phi i32 [ %inc165, %for.cond2.preheader.lr.ph ], [ %forward_op.5, %for.inc47 ]
  %iv = phi i64 [ 0, %for.cond2.preheader.lr.ph ], [ %iv.next, %for.inc47 ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc167 = add i32 %forward_op.1, 1
  br i1 %cmp483, label %for.body5.lr.ph, label %for.inc47

for.body5.lr.ph:                                  ; preds = %for.cond2.preheader
  %inc181 = add i32 %forward_mem.0, 7
  %9 = load i32, i32* %ncols21, align 4, !tbaa !139, !invariant.group !445, !node !285
  %cmp2281 = icmp sgt i32 %9, 1
  %wide.trip.count = zext i32 %9 to i64, !node !285
  %inc183 = add i32 %forward_op.1, 2
  br label %for.body5

for.body5:                                        ; preds = %for.inc44, %for.body5.lr.ph
  %forward_mem.1 = phi i32 [ %inc181, %for.body5.lr.ph ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.2 = phi i32 [ %inc183, %for.body5.lr.ph ], [ %forward_op.4, %for.inc44 ]
  %iv4 = phi i64 [ 0, %for.body5.lr.ph ], [ %iv.next5, %for.inc44 ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %inc213 = add i32 %forward_mem.1, 4
  %inc223 = add i32 %forward_op.2, 16
  br i1 %cmp2281, label %for.body23, label %for.inc44

for.body23:                                       ; preds = %for.body23, %for.body5
  %forward_mem.2 = phi i32 [ %inc275, %for.body23 ], [ %inc213, %for.body5 ]
  %forward_op.3 = phi i32 [ %inc289, %for.body23 ], [ %inc223, %for.body5 ]
  %iv6 = phi i64 [ %iv.next7, %for.body23 ], [ 0, %for.body5 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc275 = add i32 %forward_mem.2, 4
  %indvars.iv.next = add nuw nsw i64 %iv6, 2
  %inc289 = add i32 %forward_op.3, 29
  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count
  br i1 %exitcond.not, label %for.inc44, label %for.body23, !llvm.loop !185

for.inc44:                                        ; preds = %for.body23, %for.body5
  %forward_mem.3 = phi i32 [ %inc213, %for.body5 ], [ %inc275, %for.body23 ]
  %forward_op.4 = phi i32 [ %inc223, %for.body5 ], [ %inc289, %for.body23 ]
  %exitcond97.not = icmp eq i64 %iv.next5, %wide.trip.count96
  br i1 %exitcond97.not, label %for.inc47, label %for.body5, !llvm.loop !186

for.inc47:                                        ; preds = %for.inc44, %for.cond2.preheader
  %forward_mem.4 = phi i32 [ %forward_mem.0, %for.cond2.preheader ], [ %forward_mem.3, %for.inc44 ]
  %forward_op.5 = phi i32 [ %inc167, %for.cond2.preheader ], [ %forward_op.4, %for.inc44 ]
  %exitcond101.not = icmp eq i64 %iv.next, %8
  br i1 %exitcond101.not, label %invertfor.end49, label %for.cond2.preheader, !llvm.loop !187

invertentry:                                      ; preds = %invertresize.exit, %invertif.then9.i
  %10 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.6, i32 %reverse_op.0, i32 %forward_mem.5, i32 %reverse_mem.0)
  ret void

invertif.then9.i:                                 ; preds = %invertresize.exit
  %"call.i'mi_unwrap" = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 0
  tail call void @free(i8* nonnull %"call.i'mi_unwrap")
  %call.i_unwrap = extractvalue { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg, 1
  tail call void @free(i8* %call.i_unwrap)
  br label %invertentry

invertresize.exit:                                ; preds = %invertfor.end49, %invertfor.cond2.preheader.lr.ph
  %reverse_mem.0 = phi i32 [ %inc351, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %reverse_op.0 = phi i32 [ %inc355, %invertfor.cond2.preheader.lr.ph ], [ 0, %invertfor.end49 ]
  %cmp.not.i.not = xor i1 %cmp.not.i, true
  %cmp8.i_unwrap = icmp sgt i32 %mul3.i, 0
  %or.cond = and i1 %cmp.not.i.not, %cmp8.i_unwrap
  br i1 %or.cond, label %invertif.then9.i, label %invertentry

invertfor.cond2.preheader.lr.ph:                  ; preds = %invertfor.cond2.preheader
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.cond2.preheader ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.cond2.preheader ]
  %inc355 = add i32 %reverse_op.1.lcssa, 1
  %11 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %11)
  %12 = bitcast double* %1 to i8*
  tail call void @free(i8* nonnull %12)
  %13 = bitcast i32* %2 to i8*
  tail call void @free(i8* nonnull %13)
  %14 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %14)
  %15 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %15)
  %inc351 = add i32 %reverse_mem.1.lcssa, 30
  %16 = bitcast double* %5 to i8*
  tail call void @free(i8* nonnull %16)
  br label %invertresize.exit

invertfor.cond2.preheader:                        ; preds = %invertfor.inc47, %invertfor.body5.lr.ph
  %"add43'de.0" = phi double [ %"add43'de.1.lcssa", %invertfor.body5.lr.ph ], [ %"add43'de.4", %invertfor.inc47 ]
  %reverse_mem.1 = phi i32 [ %inc495, %invertfor.body5.lr.ph ], [ %inc747, %invertfor.inc47 ]
  %reverse_op.1 = phi i32 [ %inc497.lcssa, %invertfor.body5.lr.ph ], [ %reverse_op.5, %invertfor.inc47 ]
  %17 = icmp eq i64 %"iv'ac.0", 0
  br i1 %17, label %invertfor.cond2.preheader.lr.ph, label %incinvertfor.cond2.preheader

incinvertfor.cond2.preheader:                     ; preds = %invertfor.cond2.preheader
  %inc359 = add i32 %reverse_op.1, 2
  %inc361 = add i32 %reverse_mem.1, 3
  br label %invertfor.inc47

invertfor.body5.lr.ph:                            ; preds = %invertfor.body5
  %"add43'de.1.lcssa" = phi double [ %"add43'de.1", %invertfor.body5 ]
  %reverse_mem.2.lcssa = phi i32 [ %reverse_mem.2, %invertfor.body5 ]
  %inc497.lcssa = phi i32 [ %inc497, %invertfor.body5 ]
  %inc495 = add i32 %reverse_mem.2.lcssa, 42
  br label %invertfor.cond2.preheader

invertfor.body5:                                  ; preds = %invertfor.inc44, %invertfor.body23.preheader
  %"add43'de.1" = phi double [ %.lcssa753, %invertfor.body23.preheader ], [ %"add43'de.3", %invertfor.inc44 ]
  %"mul13'de.1" = phi double [ %.lcssa, %invertfor.body23.preheader ], [ 0.000000e+00, %invertfor.inc44 ]
  %reverse_mem.2 = phi i32 [ %inc717, %invertfor.body23.preheader ], [ %inc739, %invertfor.inc44 ]
  %reverse_op.2 = phi i32 [ %inc715, %invertfor.body23.preheader ], [ %reverse_op.4, %invertfor.inc44 ]
  %"data14'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2, !node !285
  %"'ipl_unwrap" = load double*, double** %"data14'ipg_unwrap", align 8, !invariant.group !446, !node !285
  %_unwrap16 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap90, !node !285
  %_unwrap17 = add nuw nsw i64 %_unwrap16, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap17, !node !285
  %18 = load double, double* %"arrayidx19'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap", align 8
  %19 = fadd fast double %"mul13'de.1", %18, !node !285
  %20 = mul nuw nsw i64 %"iv'ac.0", %wide.trip.count96_unwrap88, !node !285
  %21 = add nuw nsw i64 %"iv4'ac.1", %20, !node !285
  %22 = getelementptr inbounds double, double* %3, i64 %21, !node !285
  %23 = load double, double* %22, align 8, !invariant.group !447, !node !285
  %m0diffe = fmul fast double %19, %23, !node !285
  %24 = getelementptr inbounds double, double* %4, i64 %21, !node !285
  %25 = load double, double* %24, align 8, !invariant.group !448, !node !285
  %m1diffe = fmul fast double %19, %25, !node !285
  %_unwrap29 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0", !node !285
  %"'il_phi2_unwrap" = load double*, double** %_unwrap29, align 8, !invariant.group !449, !node !285
  %26 = getelementptr inbounds i32, i32* %2, i64 %"iv'ac.0", !node !285
  %27 = load i32, i32* %26, align 4, !invariant.group !450, !node !285
  %_unwrap35 = sext i32 %27 to i64, !node !285
  %_unwrap36 = mul nsw i64 %"iv4'ac.1", %_unwrap35, !node !285
  %"arrayidx12'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi2_unwrap", i64 %_unwrap36, !node !285
  %28 = load double, double* %"arrayidx12'ipg_unwrap", align 8, !node !285
  %29 = fadd fast double %28, %m0diffe, !node !285
  store double %29, double* %"arrayidx12'ipg_unwrap", align 8
  %"data'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2, !node !285
  %"'ipl14_unwrap" = load double*, double** %"data'ipg_unwrap", align 8, !invariant.group !451, !node !285
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl14_unwrap", i64 %"iv'ac.0", !node !285
  %30 = load double, double* %"arrayidx'ipg_unwrap", align 8, !node !285
  %31 = fadd fast double %30, %m1diffe, !node !285
  store double %31, double* %"arrayidx'ipg_unwrap", align 8
  %32 = icmp eq i64 %"iv4'ac.1", 0
  %inc497 = add i32 %reverse_op.2, 26
  br i1 %32, label %invertfor.body5.lr.ph, label %incinvertfor.body5

incinvertfor.body5:                               ; preds = %invertfor.body5
  %inc503 = add i32 %reverse_mem.2, 44
  br label %invertfor.inc44

invertfor.body23.preheader:                       ; preds = %invertfor.body23
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body23 ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.body23 ]
  %.lcssa753 = phi double [ %52, %invertfor.body23 ]
  %.lcssa = phi double [ %54, %invertfor.body23 ]
  %inc715 = add i32 %reverse_op.3.lcssa, 45
  %inc717 = add i32 %reverse_mem.3.lcssa, 62
  br label %invertfor.body5

invertfor.body23:                                 ; preds = %mergeinvertfor.body23_for.inc44.loopexit, %incinvertfor.body23
  %"add43'de.2" = phi double [ %"add43'de.3", %mergeinvertfor.body23_for.inc44.loopexit ], [ %52, %incinvertfor.body23 ]
  %"mul13'de.2" = phi double [ 0.000000e+00, %mergeinvertfor.body23_for.inc44.loopexit ], [ %54, %incinvertfor.body23 ]
  %"iv6'ac.2" = phi i64 [ %_unwrap85, %mergeinvertfor.body23_for.inc44.loopexit ], [ %55, %incinvertfor.body23 ]
  %reverse_mem.3 = phi i32 [ %inc733, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc723, %incinvertfor.body23 ]
  %reverse_op.3 = phi i32 [ %inc731, %mergeinvertfor.body23_for.inc44.loopexit ], [ %inc721, %incinvertfor.body23 ]
  %"data14'ipg_unwrap37" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"out'", i64 0, i32 2, !node !285
  %"'ipl_unwrap38" = load double*, double** %"data14'ipg_unwrap37", align 8, !invariant.group !446, !node !285
  %_unwrap40 = mul nuw nsw i64 %"iv4'ac.1", %wide.trip.count100_unwrap90, !node !285
  %_unwrap41 = add nuw nsw i64 %_unwrap40, %"iv'ac.0", !node !285
  %"arrayidx19'ipg_unwrap42" = getelementptr inbounds double, double* %"'ipl_unwrap38", i64 %_unwrap41, !node !285
  %33 = load double, double* %"arrayidx19'ipg_unwrap42", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx19'ipg_unwrap42", align 8
  %34 = fadd fast double %"add43'de.2", %33, !node !285
  %_unwrap58 = load i32, i32* %ncols21_unwrap86, align 4, !tbaa !139, !node !285
  %wide.trip.count_unwrap59 = zext i32 %_unwrap58 to i64, !node !285
  %35 = add nsw i64 %wide.trip.count_unwrap59, -1, !node !285
  %36 = mul nuw nsw i64 %35, %wide.trip.count96_unwrap88, !node !285
  %37 = mul nuw nsw i64 %"iv4'ac.1", %35, !node !285
  %38 = add nuw nsw i64 %"iv6'ac.2", %37, !node !285
  %39 = mul nuw nsw i64 %"iv'ac.0", %36, !node !285
  %40 = add nuw nsw i64 %38, %39, !node !285
  %41 = getelementptr inbounds double, double* %5, i64 %40, !node !285
  %42 = load double, double* %41, align 8, !invariant.group !452, !node !285
  %m0diffe61 = fmul fast double %34, %42, !node !285
  %43 = getelementptr inbounds double, double* %1, i64 %40, !node !285
  %44 = load double, double* %43, align 8, !invariant.group !453, !node !285
  %m1diffe67 = fmul fast double %34, %44, !node !285
  %_unwrap71 = getelementptr inbounds double*, double** %0, i64 %"iv'ac.0", !node !285
  %"'il_phi2_unwrap72" = load double*, double** %_unwrap71, align 8, !invariant.group !449, !node !285
  %iv.next7_unwrap = add nuw nsw i64 %"iv6'ac.2", 1, !node !285
  %45 = getelementptr inbounds i32, i32* %2, i64 %"iv'ac.0", !node !285
  %46 = load i32, i32* %45, align 4, !invariant.group !450, !node !285
  %_unwrap73 = sext i32 %46 to i64, !node !285
  %_unwrap74 = mul nsw i64 %"iv4'ac.1", %_unwrap73, !node !285
  %_unwrap75 = add nsw i64 %iv.next7_unwrap, %_unwrap74, !node !285
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi2_unwrap72", i64 %_unwrap75, !node !285
  %47 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !node !285
  %48 = fadd fast double %47, %m0diffe61, !node !285
  store double %48, double* %"arrayidx35'ipg_unwrap", align 8
  %"data'ipg_unwrap76" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"lhs'", i64 0, i32 2, !node !285
  %"'ipl14_unwrap77" = load double*, double** %"data'ipg_unwrap76", align 8, !invariant.group !451, !node !285
  %_unwrap78 = mul nuw nsw i64 %iv.next7_unwrap, %wide.trip.count100_unwrap90, !node !285
  %_unwrap79 = add nuw nsw i64 %_unwrap78, %"iv'ac.0", !node !285
  %"arrayidx29'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl14_unwrap77", i64 %_unwrap79, !node !285
  %49 = load double, double* %"arrayidx29'ipg_unwrap", align 8, !node !285
  %50 = fadd fast double %49, %m1diffe67, !node !285
  store double %50, double* %"arrayidx29'ipg_unwrap", align 8
  %51 = icmp eq i64 %"iv6'ac.2", 0
  %52 = select fast i1 %51, double 0.000000e+00, double %34
  %53 = fadd fast double %"mul13'de.2", %34, !node !285
  %54 = select fast i1 %51, double %53, double %"mul13'de.2"
  br i1 %51, label %invertfor.body23.preheader, label %incinvertfor.body23

incinvertfor.body23:                              ; preds = %invertfor.body23
  %55 = add nsw i64 %"iv6'ac.2", -1, !node !285
  %inc721 = add i32 %reverse_op.3, 46
  %inc723 = add i32 %reverse_mem.3, 64
  br label %invertfor.body23

mergeinvertfor.body23_for.inc44.loopexit:         ; preds = %invertfor.inc44
  %inc731 = add i32 %reverse_op.4.in, 2
  %wide.trip.count_unwrap84 = zext i32 %_unwrap87 to i64, !node !285
  %_unwrap85 = add nsw i64 %wide.trip.count_unwrap84, -2, !node !285
  %inc733 = add i32 %reverse_mem.4, 7
  br label %invertfor.body23

invertfor.inc44:                                  ; preds = %invertfor.inc47.loopexit, %incinvertfor.body5
  %"add43'de.3" = phi double [ %"add43'de.4", %invertfor.inc47.loopexit ], [ %"add43'de.1", %incinvertfor.body5 ]
  %"iv4'ac.1.in" = phi i64 [ %wide.trip.count96_unwrap88, %invertfor.inc47.loopexit ], [ %"iv4'ac.1", %incinvertfor.body5 ]
  %reverse_mem.4 = phi i32 [ %inc745, %invertfor.inc47.loopexit ], [ %inc503, %incinvertfor.body5 ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %invertfor.inc47.loopexit ], [ %inc497, %incinvertfor.body5 ]
  %reverse_op.4 = add i32 %reverse_op.4.in, 1
  %"iv4'ac.1" = add nsw i64 %"iv4'ac.1.in", -1
  %ncols21_unwrap86 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %lhs, i64 0, i32 1, !node !285
  %inc739 = add i32 %reverse_mem.4, 3
  %_unwrap87 = load i32, i32* %ncols21_unwrap86, align 4, !tbaa !139, !invariant.group !445, !node !285
  %cmp2281_unwrap = icmp sgt i32 %_unwrap87, 1
  br i1 %cmp2281_unwrap, label %mergeinvertfor.body23_for.inc44.loopexit, label %invertfor.body5

invertfor.inc47.loopexit:                         ; preds = %invertfor.inc47
  %wide.trip.count96_unwrap88 = zext i32 %7 to i64
  %inc745 = add i32 %reverse_mem.5, 3
  br label %invertfor.inc44

invertfor.inc47:                                  ; preds = %invertfor.end49.loopexit, %incinvertfor.cond2.preheader
  %"add43'de.4" = phi double [ 0.000000e+00, %invertfor.end49.loopexit ], [ %"add43'de.0", %incinvertfor.cond2.preheader ]
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count100_unwrap90, %invertfor.end49.loopexit ], [ %"iv'ac.0", %incinvertfor.cond2.preheader ]
  %reverse_mem.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc361, %incinvertfor.cond2.preheader ]
  %reverse_op.5 = phi i32 [ 1, %invertfor.end49.loopexit ], [ %inc359, %incinvertfor.cond2.preheader ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %inc747 = add i32 %reverse_mem.5, 1
  %cmp483_unwrap = icmp sgt i32 %7, 0
  br i1 %cmp483_unwrap, label %invertfor.inc47.loopexit, label %invertfor.cond2.preheader

invertfor.end49.loopexit:                         ; preds = %invertfor.end49
  %wide.trip.count100_unwrap90 = zext i32 %6 to i64, !node !285
  br label %invertfor.inc47

invertfor.end49:                                  ; preds = %for.inc47, %entry
  %forward_mem.5 = phi i32 [ 15, %entry ], [ %forward_mem.4, %for.inc47 ]
  %forward_op.6 = phi i32 [ %forward_op.0, %entry ], [ %forward_op.5, %for.inc47 ]
  br i1 %cmp85, label %invertfor.end49.loopexit, label %invertresize.exit
}

; Function Attrs: nounwind uwtable mustprogress
define dso_local void @preprocess_hand_objective_complicated(double* nocapture readonly %theta, double* nocapture readonly %us, i32 %bone_count, i8** nocapture readnone %bone_names, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix* nocapture readonly %weights, %struct.Triangle* nocapture readonly %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* nocapture %err) #5 {
entry:
  %call.i = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #31
  tail call void @llvm.experimental.noalias.scope.decl(metadata !217)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !220)
  %theta99.i = bitcast double* %theta to i8*
  %add.i = add nsw i32 %bone_count, 3
  %nrows1.i.i = bitcast i8* %call.i to i32*
  %ncols2.i.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %1 = bitcast i8* %ncols2.i.i to i32*
  %mul3.i.i = mul i32 %add.i, 3
  %cmp.not.i.i = icmp eq i32 %mul3.i.i, 0
  br i1 %cmp.not.i.i, label %resize.exit.fill.exit_crit_edge.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  %data.i.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %cmp8.i.i = icmp sgt i32 %mul3.i.i, 0
  br i1 %cmp8.i.i, label %for.body.lr.ph.i.i, label %resize.exit.thread87.i

resize.exit.thread87.i:                           ; preds = %if.end.i.i
  %2 = bitcast i8* %data.i.i to double**
  store double* null, double** %2, align 8, !tbaa !137, !alias.scope !220, !noalias !217
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !220, !noalias !217
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !220, !noalias !217
  br label %fill.exit.i

resize.exit.fill.exit_crit_edge.i:                ; preds = %entry
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !220, !noalias !217
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !220, !noalias !217
  br label %fill.exit.i

for.body.lr.ph.i.i:                               ; preds = %if.end.i.i
  %conv31.i.i = zext i32 %mul3.i.i to i64
  %mul11.i.i = shl nuw nsw i64 %conv31.i.i, 3
  %call.i.i = tail call noalias i8* @malloc(i64 %mul11.i.i) #31, !noalias !222
  %3 = bitcast i8* %data.i.i to i8**
  store i8* %call.i.i, i8** %3, align 8, !tbaa !137, !alias.scope !220, !noalias !217
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !220, !noalias !217
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !220, !noalias !217
  %4 = bitcast i8* %call.i.i to double*
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i.i, i8 0, i64 %mul11.i.i, i1 false) #31, !noalias !222
  br label %fill.exit.i

fill.exit.i:                                      ; preds = %for.body.lr.ph.i.i, %resize.exit.fill.exit_crit_edge.i, %resize.exit.thread87.i
  %5 = phi double* [ null, %resize.exit.fill.exit_crit_edge.i ], [ %4, %for.body.lr.ph.i.i ], [ null, %resize.exit.thread87.i ]
  %6 = bitcast double* %5 to i8*
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %6, i8* nonnull align 8 dereferenceable(24) %theta99.i, i64 24, i1 false) #31, !noalias !220
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %fill.exit.i
  %tiv3 = phi i64 [ %tiv.next4, %for.body.i ], [ 0, %fill.exit.i ]
  %tiv.next4 = add nuw nsw i64 %tiv3, 1
  %7 = add nuw nsw i64 %tiv3, 3
  %arrayidx7.i = getelementptr inbounds double, double* %5, i64 %7
  store double 1.000000e+00, double* %arrayidx7.i, align 8, !tbaa !75, !noalias !222
  %arrayidx10.i = getelementptr inbounds double, double* %theta, i64 %7
  %8 = load double, double* %arrayidx10.i, align 8, !tbaa !75, !alias.scope !217, !noalias !220
  %9 = add nuw nsw i64 %tiv3, 6
  %arrayidx16.i = getelementptr inbounds double, double* %5, i64 %9
  store double %8, double* %arrayidx16.i, align 8, !tbaa !75, !noalias !222
  %exitcond105.not.i = icmp eq i64 %tiv.next4, 3
  br i1 %exitcond105.not.i, label %for.cond20.preheader.i, label %for.body.i, !llvm.loop !207

for.cond20.preheader.i:                           ; preds = %for.end45.i, %for.body.i
  %tiv1 = phi i64 [ %tiv.next2, %for.end45.i ], [ 0, %for.body.i ]
  %i_pose_params.093.i = phi i32 [ %inc46.i, %for.end45.i ], [ 5, %for.body.i ]
  %i_theta.092.i = phi i32 [ %i_theta.2.i.lcssa, %for.end45.i ], [ 6, %for.body.i ]
  %10 = trunc i64 %tiv1 to i32
  %tiv.next2 = add nuw nsw i64 %tiv1, 1
  %11 = sext i32 %i_pose_params.093.i to i64
  %12 = add i32 %i_pose_params.093.i, 3
  br label %for.body22.i

for.body22.i:                                     ; preds = %if.end.i, %for.cond20.preheader.i
  %indvars.iv.i = phi i64 [ %11, %for.cond20.preheader.i ], [ %indvars.iv.next.i, %if.end.i ]
  %i.191.i = phi i32 [ 2, %for.cond20.preheader.i ], [ %inc44.i, %if.end.i ]
  %i_theta.189.i = phi i32 [ %i_theta.092.i, %for.cond20.preheader.i ], [ %i_theta.2.i, %if.end.i ]
  %idxprom23.i = sext i32 %i_theta.189.i to i64
  %arrayidx24.i = getelementptr inbounds double, double* %theta, i64 %idxprom23.i
  %13 = load double, double* %arrayidx24.i, align 8, !tbaa !75, !alias.scope !217, !noalias !220
  %14 = mul nsw i64 %indvars.iv.i, 3
  %arrayidx30.i = getelementptr inbounds double, double* %5, i64 %14
  store double %13, double* %arrayidx30.i, align 8, !tbaa !75, !noalias !222
  %inc31.i = add nsw i32 %i_theta.189.i, 1
  %cmp32.i = icmp eq i32 %i.191.i, 2
  br i1 %cmp32.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body22.i
  %idxprom33.i = sext i32 %inc31.i to i64
  %arrayidx34.i = getelementptr inbounds double, double* %theta, i64 %idxprom33.i
  %15 = load double, double* %arrayidx34.i, align 8, !tbaa !75, !alias.scope !217, !noalias !220
  %16 = add nsw i64 %14, 1
  %arrayidx40.i = getelementptr inbounds double, double* %5, i64 %16
  store double %15, double* %arrayidx40.i, align 8, !tbaa !75, !noalias !222
  %inc41.i = add nsw i32 %i_theta.189.i, 2
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body22.i
  %i_theta.2.i = phi i32 [ %inc41.i, %if.then.i ], [ %inc31.i, %for.body22.i ]
  %indvars.iv.next.i = add nsw i64 %indvars.iv.i, 1
  %inc44.i = add nuw nsw i32 %i.191.i, 1
  %lftr.wideiv1 = trunc i64 %indvars.iv.next.i to i32
  %exitcond = icmp eq i32 %12, %lftr.wideiv1
  br i1 %exitcond, label %for.end45.i, label %for.body22.i, !llvm.loop !208

for.end45.i:                                      ; preds = %if.end.i
  %i_theta.2.i.lcssa = phi i32 [ %i_theta.2.i, %if.end.i ]
  %indvars.iv.i.lcssa = phi i64 [ %indvars.iv.i, %if.end.i ]
  %17 = trunc i64 %indvars.iv.i.lcssa to i32
  %inc46.i = add nsw i32 %17, 2
  %exitcond98.not.i = icmp eq i32 %10, 4
  br i1 %exitcond98.not.i, label %to_pose_params.exit, label %for.cond20.preheader.i, !llvm.loop !209

to_pose_params.exit:                              ; preds = %for.end45.i
  %call.i84 = tail call noalias dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %18 = bitcast i8* %call.i84 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i84, i8 0, i64 16, i1 false) #31
  tail call fastcc void @_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* %0, %struct.Matrix* %18)
  %cmp89 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp89, label %for.body.lr.ph, label %for.end51

for.body.lr.ph:                                   ; preds = %to_pose_params.exit
  %data = getelementptr inbounds i8, i8* %call.i84, i64 8
  %19 = bitcast i8* %data to double**
  %20 = load double*, double** %19, align 8, !tbaa !137
  %nrows = bitcast i8* %call.i84 to i32*
  %21 = load i32, i32* %nrows, align 8, !tbaa !138
  %data38 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 2
  %22 = load double*, double** %data38, align 8, !tbaa !137
  %nrows39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %points, i64 0, i32 0
  %23 = load i32, i32* %nrows39, align 8, !tbaa !138
  %24 = sext i32 %23 to i64
  %wide.trip.count = zext i32 %corresp_count to i64
  br label %for.body

for.body:                                         ; preds = %for.end, %for.body.lr.ph
  %tiv = phi i64 [ %tiv.next, %for.end ], [ 0, %for.body.lr.ph ]
  %tiv.next = add nuw nsw i64 %tiv, 1
  %arrayidx = getelementptr inbounds i32, i32* %correspondences, i64 %tiv
  %25 = load i32, i32* %arrayidx, align 4, !tbaa !59
  %idxprom2 = sext i32 %25 to i64
  %arraydecay = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 0
  %26 = shl nuw nsw i64 %tiv, 1
  %arrayidx6 = getelementptr inbounds double, double* %us, i64 %26
  %27 = load i32, i32* %arraydecay, align 4, !tbaa !59
  %mul12 = mul nsw i32 %21, %27
  %arrayidx16 = getelementptr inbounds double, double* %arrayidx6, i64 1
  %arrayidx18 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 1
  %28 = load i32, i32* %arrayidx18, align 4, !tbaa !59
  %mul20 = mul nsw i32 %28, %21
  %arrayidx30 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 2
  %29 = load i32, i32* %arrayidx30, align 4, !tbaa !59
  %mul32 = mul nsw i32 %29, %21
  %30 = mul nsw i64 %tiv, %24
  %31 = mul nuw nsw i64 %tiv, 3
  %32 = sext i32 %mul12 to i64
  %33 = sext i32 %mul20 to i64
  %34 = sext i32 %mul32 to i64
  br label %for.body9

for.body9:                                        ; preds = %for.body9, %for.body
  %indvars.iv = phi i64 [ 0, %for.body ], [ %indvars.iv.next, %for.body9 ]
  %35 = load double, double* %arrayidx6, align 8, !tbaa !75
  %36 = add nsw i64 %indvars.iv, %32
  %arrayidx14 = getelementptr inbounds double, double* %20, i64 %36
  %37 = load double, double* %arrayidx14, align 8, !tbaa !75
  %38 = load double, double* %arrayidx16, align 8, !tbaa !75
  %39 = add nsw i64 %indvars.iv, %33
  %arrayidx23 = getelementptr inbounds double, double* %20, i64 %39
  %40 = load double, double* %arrayidx23, align 8, !tbaa !75
  %41 = fadd fast double %35, %38
  %sub28 = fsub fast double 1.000000e+00, %41
  %42 = add nsw i64 %indvars.iv, %34
  %arrayidx35 = getelementptr inbounds double, double* %20, i64 %42
  %43 = load double, double* %arrayidx35, align 8, !tbaa !75
  %44 = add nsw i64 %30, %indvars.iv
  %arrayidx43 = getelementptr inbounds double, double* %22, i64 %44
  %45 = load double, double* %arrayidx43, align 8, !tbaa !75
  %mul15.neg = fmul fast double %37, %35
  %mul24.neg = fmul fast double %40, %38
  %mul36.neg = fmul fast double %43, %sub28
  %reass.add = fadd fast double %mul24.neg, %mul15.neg
  %reass.add87 = fadd fast double %reass.add, %mul36.neg
  %sub44 = fsub fast double %45, %reass.add87
  %46 = add nuw nsw i64 %indvars.iv, %31
  %arrayidx48 = getelementptr inbounds double, double* %err, i64 %46
  store double %sub44, double* %arrayidx48, align 8, !tbaa !75
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 1
  %exitcond.not = icmp eq i64 %indvars.iv.next, 3
  br i1 %exitcond.not, label %for.end, label %for.body9, !llvm.loop !223

for.end:                                          ; preds = %for.body9
  %exitcond101.not = icmp eq i64 %tiv.next, %wide.trip.count
  br i1 %exitcond101.not, label %for.end51, label %for.body, !llvm.loop !224

for.end51:                                        ; preds = %for.end, %to_pose_params.exit
  ret void
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffehand_objective_complicated(double* nocapture readonly %theta, double* nocapture %"theta'", double* nocapture readonly %us, double* nocapture %"us'", i32 %bone_count, i8** nocapture readnone %bone_names, i32* nocapture readonly %parents, %struct.Matrix* nocapture readonly %base_relatives, %struct.Matrix* nocapture readonly %inverse_base_absolutes, %struct.Matrix* nocapture readonly %base_positions, %struct.Matrix* nocapture readonly %weights, %struct.Triangle* nocapture readonly %triangles, i32 %is_mirrored, i32 %corresp_count, i32* noalias nocapture readonly %correspondences, %struct.Matrix* nocapture readonly %points, double* nocapture %err, double* nocapture %"err'") #5 {
entry:
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc28" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %0 = bitcast i8* %call.i to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i, i8 0, i64 16, i1 false) #31
  tail call void @llvm.experimental.noalias.scope.decl(metadata !217)
  tail call void @llvm.experimental.noalias.scope.decl(metadata !220)
  %theta99.i = bitcast double* %theta to i8*, !node !285
  %add.i = add nsw i32 %bone_count, 3, !node !285
  %"nrows1.i.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i.i = bitcast i8* %call.i to i32*
  %"ncols2.i.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc" = bitcast i8* %"ncols2.i.i'ipg" to i32*, !node !285
  %1 = bitcast i8* %ncols2.i.i to i32*, !node !285
  %mul3.i.i = mul i32 %add.i, 3, !node !285
  %cmp.not.i.i = icmp eq i32 %mul3.i.i, 0
  br i1 %cmp.not.i.i, label %resize.exit.fill.exit_crit_edge.i, label %if.end.i.i

if.end.i.i:                                       ; preds = %entry
  %"data.i.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %cmp8.i.i = icmp sgt i32 %mul3.i.i, 0
  br i1 %cmp8.i.i, label %for.body.lr.ph.i.i, label %resize.exit.thread87.i

resize.exit.thread87.i:                           ; preds = %if.end.i.i
  %"'ipc10" = bitcast i8* %"data.i.i'ipg" to double**
  %2 = bitcast i8* %data.i.i to double**
  store double* null, double** %"'ipc10", align 8
  store double* null, double** %2, align 8, !tbaa !137, !alias.scope !220, !noalias !217
  store i32 %add.i, i32* %"'ipc", align 4
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !220, !noalias !217
  store i32 3, i32* %"nrows1.i.i'ipc", align 8
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !220, !noalias !217
  br label %fill.exit.i

resize.exit.fill.exit_crit_edge.i:                ; preds = %entry
  store i32 %add.i, i32* %"'ipc", align 4
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !220, !noalias !217
  store i32 3, i32* %"nrows1.i.i'ipc", align 8
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !220, !noalias !217
  br label %fill.exit.i

for.body.lr.ph.i.i:                               ; preds = %if.end.i.i
  %conv31.i.i = zext i32 %mul3.i.i to i64, !node !285
  %mul11.i.i = shl nuw nsw i64 %conv31.i.i, 3, !node !285
  %call.i.i = tail call noalias i8* @malloc(i64 %mul11.i.i) #31, !noalias !222, !node !285
  %"call.i.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i.i) #31, !node !285
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i.i'mi", i8 0, i64 %mul11.i.i, i1 false), !node !285
  %"'ipc11" = bitcast i8* %"data.i.i'ipg" to i8**, !node !285
  %3 = bitcast i8* %data.i.i to i8**, !node !285
  store i8* %"call.i.i'mi", i8** %"'ipc11", align 8
  store i8* %call.i.i, i8** %3, align 8, !tbaa !137, !alias.scope !220, !noalias !217
  store i32 %add.i, i32* %"'ipc", align 4
  store i32 %add.i, i32* %1, align 4, !tbaa !139, !alias.scope !220, !noalias !217
  store i32 3, i32* %"nrows1.i.i'ipc", align 8
  store i32 3, i32* %nrows1.i.i, align 8, !tbaa !138, !alias.scope !220, !noalias !217
  %"'ipc12" = bitcast i8* %"call.i.i'mi" to double*, !node !285
  %4 = bitcast i8* %call.i.i to double*, !node !285
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i.i, i8 0, i64 %mul11.i.i, i1 false) #31, !noalias !222, !node !285
  br label %fill.exit.i

fill.exit.i:                                      ; preds = %for.body.lr.ph.i.i, %resize.exit.fill.exit_crit_edge.i, %resize.exit.thread87.i
  %call.i.i_cache.0 = phi i8* [ undef, %resize.exit.fill.exit_crit_edge.i ], [ %call.i.i, %for.body.lr.ph.i.i ], [ undef, %resize.exit.thread87.i ]
  %"call.i.i'mi_cache.0" = phi i8* [ undef, %resize.exit.fill.exit_crit_edge.i ], [ %"call.i.i'mi", %for.body.lr.ph.i.i ], [ undef, %resize.exit.thread87.i ]
  %forward_mem.0 = phi i32 [ 20, %resize.exit.fill.exit_crit_edge.i ], [ 24, %for.body.lr.ph.i.i ], [ 22, %resize.exit.thread87.i ]
  %forward_op.0 = phi i32 [ 2, %resize.exit.fill.exit_crit_edge.i ], [ 3, %for.body.lr.ph.i.i ], [ 2, %resize.exit.thread87.i ]
  %5 = phi double* [ null, %resize.exit.fill.exit_crit_edge.i ], [ %"'ipc12", %for.body.lr.ph.i.i ], [ null, %resize.exit.thread87.i ], !node !285
  %6 = phi double* [ null, %resize.exit.fill.exit_crit_edge.i ], [ %4, %for.body.lr.ph.i.i ], [ null, %resize.exit.thread87.i ], !node !285
  %7 = bitcast double* %6 to i8*, !node !285
  tail call void @llvm.memcpy.p0i8.p0i8.i64(i8* nonnull align 8 dereferenceable(24) %7, i8* nonnull align 8 dereferenceable(24) %theta99.i, i64 24, i1 false) #31, !noalias !220, !node !285
  br label %for.body.i

for.body.i:                                       ; preds = %for.body.i, %fill.exit.i
  %forward_mem.1 = phi i32 [ %forward_mem.0, %fill.exit.i ], [ %inc170, %for.body.i ]
  %forward_op.1 = phi i32 [ %forward_op.0, %fill.exit.i ], [ %inc168, %for.body.i ]
  %iv = phi i64 [ 0, %fill.exit.i ], [ %iv.next, %for.body.i ]
  %iv.next = add nuw nsw i64 %iv, 1
  %8 = add nuw nsw i64 %iv, 3
  %arrayidx7.i = getelementptr inbounds double, double* %6, i64 %8, !node !285
  store double 1.000000e+00, double* %arrayidx7.i, align 8, !tbaa !75, !noalias !222
  %arrayidx10.i = getelementptr inbounds double, double* %theta, i64 %8, !node !285
  %9 = load double, double* %arrayidx10.i, align 8, !tbaa !75, !alias.scope !217, !noalias !220, !node !285
  %10 = add nuw nsw i64 %iv, 6
  %inc168 = add i32 %forward_op.1, 3
  %arrayidx16.i = getelementptr inbounds double, double* %6, i64 %10, !node !285
  %inc170 = add i32 %forward_mem.1, 3
  store double %9, double* %arrayidx16.i, align 8, !tbaa !75, !noalias !222
  %exitcond105.not.i = icmp eq i64 %iv.next, 3
  br i1 %exitcond105.not.i, label %for.cond20.preheader.i.preheader, label %for.body.i, !llvm.loop !207

for.cond20.preheader.i.preheader:                 ; preds = %for.body.i
  %forward_mem.1.lcssa = phi i32 [ %forward_mem.1, %for.body.i ]
  %inc168.lcssa = phi i32 [ %inc168, %for.body.i ]
  %malloccall = tail call noalias nonnull dereferenceable(20) dereferenceable_or_null(20) i8* @malloc(i64 20)
  %i_pose_params.093.i_malloccache = bitcast i8* %malloccall to i32*
  %malloccall19 = tail call noalias nonnull dereferenceable(60) dereferenceable_or_null(60) i8* @malloc(i64 60)
  %i_theta.189.i_malloccache = bitcast i8* %malloccall19 to i32*
  %inc174 = add i32 %forward_mem.1.lcssa, 5
  br label %for.cond20.preheader.i

for.cond20.preheader.i:                           ; preds = %for.end45.i, %for.cond20.preheader.i.preheader
  %forward_mem.2 = phi i32 [ %inc174, %for.cond20.preheader.i.preheader ], [ %forward_mem.4.lcssa, %for.end45.i ]
  %forward_op.2 = phi i32 [ %inc168.lcssa, %for.cond20.preheader.i.preheader ], [ %inc220, %for.end45.i ]
  %iv1 = phi i64 [ 0, %for.cond20.preheader.i.preheader ], [ %iv.next2, %for.end45.i ]
  %i_pose_params.093.i = phi i32 [ 5, %for.cond20.preheader.i.preheader ], [ %inc46.i, %for.end45.i ]
  %i_theta.092.i = phi i32 [ 6, %for.cond20.preheader.i.preheader ], [ %i_theta.2.i.lcssa, %for.end45.i ]
  %11 = getelementptr inbounds i32, i32* %i_pose_params.093.i_malloccache, i64 %iv1
  %inc178 = add i32 %forward_mem.2, 2
  store i32 %i_pose_params.093.i, i32* %11, align 4, !invariant.group !454
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %12 = trunc i64 %iv1 to i32
  %13 = sext i32 %i_pose_params.093.i to i64
  br label %for.body22.i

for.body22.i:                                     ; preds = %if.end.i, %for.cond20.preheader.i
  %forward_mem.3 = phi i32 [ %inc178, %for.cond20.preheader.i ], [ %forward_mem.4, %if.end.i ]
  %forward_op.3.in = phi i32 [ %forward_op.2, %for.cond20.preheader.i ], [ %forward_op.4, %if.end.i ]
  %iv3 = phi i64 [ 0, %for.cond20.preheader.i ], [ %iv.next4, %if.end.i ]
  %i_theta.189.i = phi i32 [ %i_theta.092.i, %for.cond20.preheader.i ], [ %i_theta.2.i, %if.end.i ]
  %iv.next4 = add nuw nsw i64 %iv3, 1
  %14 = trunc i64 %iv3 to i32
  %15 = add i64 %iv3, %13
  %idxprom23.i = sext i32 %i_theta.189.i to i64
  %arrayidx24.i = getelementptr inbounds double, double* %theta, i64 %idxprom23.i, !node !285
  %16 = load double, double* %arrayidx24.i, align 8, !tbaa !75, !alias.scope !217, !noalias !220, !node !285
  %17 = mul nsw i64 %15, 3
  %arrayidx30.i = getelementptr inbounds double, double* %6, i64 %17, !node !285
  store double %16, double* %arrayidx30.i, align 8, !tbaa !75, !noalias !222
  %18 = mul nuw nsw i64 %iv1, 3
  %19 = add nuw nsw i64 %iv3, %18
  %20 = getelementptr inbounds i32, i32* %i_theta.189.i_malloccache, i64 %19
  %inc202 = add i32 %forward_mem.3, 4
  store i32 %i_theta.189.i, i32* %20, align 4, !invariant.group !455
  %inc31.i = add nsw i32 %i_theta.189.i, 1
  %inc204 = add i32 %forward_op.3.in, 9
  %cmp32.i = icmp eq i32 %14, 0
  br i1 %cmp32.i, label %if.then.i, label %if.end.i

if.then.i:                                        ; preds = %for.body22.i
  %idxprom33.i = sext i32 %inc31.i to i64
  %arrayidx34.i = getelementptr inbounds double, double* %theta, i64 %idxprom33.i, !node !285
  %21 = load double, double* %arrayidx34.i, align 8, !tbaa !75, !alias.scope !217, !noalias !220, !node !285
  %22 = add nsw i64 %17, 1
  %arrayidx40.i = getelementptr inbounds double, double* %6, i64 %22, !node !285
  %inc210 = add i32 %forward_mem.3, 6
  store double %21, double* %arrayidx40.i, align 8, !tbaa !75, !noalias !222
  %inc41.i = add nsw i32 %i_theta.189.i, 2
  %inc212 = add i32 %forward_op.3.in, 11
  br label %if.end.i

if.end.i:                                         ; preds = %if.then.i, %for.body22.i
  %forward_mem.4 = phi i32 [ %inc210, %if.then.i ], [ %inc202, %for.body22.i ]
  %forward_op.4 = phi i32 [ %inc212, %if.then.i ], [ %inc204, %for.body22.i ]
  %i_theta.2.i = phi i32 [ %inc41.i, %if.then.i ], [ %inc31.i, %for.body22.i ]
  %23 = trunc i64 %15 to i32
  %24 = add nsw i32 %i_pose_params.093.i, 2
  %exitcond = icmp eq i32 %24, %23
  br i1 %exitcond, label %for.end45.i, label %for.body22.i, !llvm.loop !208

for.end45.i:                                      ; preds = %if.end.i
  %forward_mem.4.lcssa = phi i32 [ %forward_mem.4, %if.end.i ]
  %forward_op.4.lcssa = phi i32 [ %forward_op.4, %if.end.i ]
  %i_theta.2.i.lcssa = phi i32 [ %i_theta.2.i, %if.end.i ]
  %.lcssa = phi i64 [ %15, %if.end.i ]
  %25 = trunc i64 %.lcssa to i32
  %inc46.i = add nsw i32 %25, 2
  %inc220 = add i32 %forward_op.4.lcssa, 4
  %exitcond98.not.i = icmp eq i32 %12, 4
  br i1 %exitcond98.not.i, label %to_pose_params.exit, label %for.cond20.preheader.i, !llvm.loop !209

to_pose_params.exit:                              ; preds = %for.end45.i
  %inc220.lcssa = phi i32 [ %inc220, %for.end45.i ]
  %forward_mem.4.lcssa.lcssa = phi i32 [ %forward_mem.4.lcssa, %for.end45.i ]
  %forward_op.4.lcssa.lcssa = phi i32 [ %forward_op.4.lcssa, %for.end45.i ]
  %call.i84 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %"call.i84'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i84'mi", i8 0, i64 16, i1 false)
  %"'ipc29" = bitcast i8* %"call.i84'mi" to %struct.Matrix*
  %26 = bitcast i8* %call.i84 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i84, i8 0, i64 16, i1 false) #31
  %_augmented = call fastcc { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } @augmented__ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i.14(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc28", %struct.Matrix* nonnull %26, %struct.Matrix* nonnull %"'ipc29"), !node !285
  %cmp89 = icmp sgt i32 %corresp_count, 0
  br i1 %cmp89, label %for.body.lr.ph, label %invertfor.end51

for.body.lr.ph:                                   ; preds = %to_pose_params.exit
  %data = getelementptr inbounds i8, i8* %call.i84, i64 8
  %27 = bitcast i8* %data to double**
  %28 = load double*, double** %27, align 8, !tbaa !137
  %nrows = bitcast i8* %call.i84 to i32*
  %29 = load i32, i32* %nrows, align 8, !tbaa !138, !invariant.group !456
  %wide.trip.count = zext i32 %corresp_count to i64, !node !285
  %mallocsize = mul nuw nsw i64 %wide.trip.count, 24, !node !285
  %malloccall36 = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !node !285
  %_malloccache = bitcast i8* %malloccall36 to double*, !node !285
  %malloccall41 = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !node !285
  %_malloccache42 = bitcast i8* %malloccall41 to double*, !node !285
  %malloccall47 = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !node !285
  %_malloccache48 = bitcast i8* %malloccall47 to double*, !node !285
  %malloccall55 = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !node !285
  %_malloccache56 = bitcast i8* %malloccall55 to double*, !node !285
  %inc250 = add i32 %forward_op.4.lcssa.lcssa, 12
  %malloccall64 = tail call noalias nonnull i8* @malloc(i64 %mallocsize), !node !285
  %_malloccache65 = bitcast i8* %malloccall64 to double*, !node !285
  %inc252 = add i32 %forward_mem.4.lcssa.lcssa, 8
  br label %for.body

for.body:                                         ; preds = %for.end, %for.body.lr.ph
  %forward_mem.5 = phi i32 [ %inc252, %for.body.lr.ph ], [ %inc344.lcssa, %for.end ]
  %forward_op.5 = phi i32 [ %inc250, %for.body.lr.ph ], [ %inc346.lcssa, %for.end ]
  %iv6 = phi i64 [ 0, %for.body.lr.ph ], [ %iv.next7, %for.end ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %arrayidx = getelementptr inbounds i32, i32* %correspondences, i64 %iv6, !node !285
  %30 = load i32, i32* %arrayidx, align 4, !tbaa !59, !invariant.group !457, !node !285
  %idxprom2 = sext i32 %30 to i64, !node !285
  %arraydecay = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 0, !node !285
  %31 = shl nuw nsw i64 %iv6, 1
  %arrayidx6 = getelementptr inbounds double, double* %us, i64 %31, !node !285
  %32 = load i32, i32* %arraydecay, align 4, !tbaa !59, !invariant.group !458, !node !285
  %mul12 = mul nsw i32 %29, %32, !node !285
  %arrayidx16 = getelementptr inbounds double, double* %arrayidx6, i64 1, !node !285
  %arrayidx18 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 1, !node !285
  %33 = load i32, i32* %arrayidx18, align 4, !tbaa !59, !invariant.group !459, !node !285
  %mul20 = mul nsw i32 %33, %29, !node !285
  %arrayidx30 = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2, i32 0, i64 2, !node !285
  %inc268 = add i32 %forward_mem.5, 4
  %34 = load i32, i32* %arrayidx30, align 4, !tbaa !59, !invariant.group !460, !node !285
  %mul32 = mul nsw i32 %34, %29, !node !285
  %35 = mul nuw nsw i64 %iv6, 3
  %inc272 = add i32 %forward_op.5, 6
  %36 = sext i32 %mul12 to i64, !node !285
  %37 = sext i32 %mul20 to i64, !node !285
  %38 = sext i32 %mul32 to i64, !node !285
  br label %for.body9

for.body9:                                        ; preds = %for.body9, %for.body
  %forward_mem.6 = phi i32 [ %inc268, %for.body ], [ %inc344, %for.body9 ]
  %forward_op.6 = phi i32 [ %inc272, %for.body ], [ %inc346, %for.body9 ]
  %iv8 = phi i64 [ 0, %for.body ], [ %iv.next9, %for.body9 ]
  %iv.next9 = add nuw nsw i64 %iv8, 1
  %39 = load double, double* %arrayidx6, align 8, !tbaa !75, !node !285
  %40 = add nuw nsw i64 %iv8, %35
  %41 = getelementptr inbounds double, double* %_malloccache, i64 %40, !node !285
  store double %39, double* %41, align 8, !invariant.group !461
  %42 = add nsw i64 %iv8, %36, !node !285
  %arrayidx14 = getelementptr inbounds double, double* %28, i64 %42, !node !285
  %43 = load double, double* %arrayidx14, align 8, !tbaa !75, !node !285
  %44 = load double, double* %arrayidx16, align 8, !tbaa !75, !node !285
  %45 = getelementptr inbounds double, double* %_malloccache42, i64 %40, !node !285
  store double %44, double* %45, align 8, !invariant.group !462
  %46 = getelementptr inbounds double, double* %_malloccache65, i64 %40, !node !285
  store double %43, double* %46, align 8, !invariant.group !463
  %47 = add nsw i64 %iv8, %37, !node !285
  %arrayidx23 = getelementptr inbounds double, double* %28, i64 %47, !node !285
  %48 = load double, double* %arrayidx23, align 8, !tbaa !75, !node !285
  %49 = add nsw i64 %iv8, %38, !node !285
  %arrayidx35 = getelementptr inbounds double, double* %28, i64 %49, !node !285
  %50 = load double, double* %arrayidx35, align 8, !tbaa !75, !node !285
  %51 = getelementptr inbounds double, double* %_malloccache48, i64 %40, !node !285
  store double %50, double* %51, align 8, !invariant.group !464
  %52 = getelementptr inbounds double, double* %_malloccache56, i64 %40, !node !285
  %inc344 = add i32 %forward_mem.6, 15
  store double %48, double* %52, align 8, !invariant.group !465
  %inc346 = add i32 %forward_op.6, 22
  %exitcond.not = icmp eq i64 %iv.next9, 3
  br i1 %exitcond.not, label %for.end, label %for.body9, !llvm.loop !223

for.end:                                          ; preds = %for.body9
  %inc344.lcssa = phi i32 [ %inc344, %for.body9 ]
  %inc346.lcssa = phi i32 [ %inc346, %for.body9 ]
  %exitcond101.not = icmp eq i64 %iv.next7, %wide.trip.count
  br i1 %exitcond101.not, label %invertfor.end51, label %for.body, !llvm.loop !224

invertentry:                                      ; preds = %invertfill.exit.i, %invertfor.body.lr.ph.i.i
  %reverse_mem.0 = phi i32 [ %inc354, %invertfor.body.lr.ph.i.i ], [ %inc388.lcssa, %invertfill.exit.i ]
  %inc390 = add i32 %reverse_op.0.lcssa, 5
  tail call void @free(i8* nonnull %"call.i'mi")
  tail call void @free(i8* nonnull %call.i)
  %53 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.7, i32 %inc390, i32 %forward_mem.7, i32 %reverse_mem.0)
  ret void

invertfor.body.lr.ph.i.i:                         ; preds = %invertfill.exit.i
  tail call void @free(i8* nonnull %"call.i.i'mi_cache.0"), !node !285
  %inc354 = add i32 %reverse_mem.2.lcssa, 15
  tail call void @free(i8* %call.i.i_cache.0), !node !285
  br label %invertentry

invertfill.exit.i:                                ; preds = %invertfor.body.i
  %reverse_mem.2.lcssa = phi i32 [ %reverse_mem.2, %invertfor.body.i ]
  %reverse_op.0.lcssa = phi i32 [ %reverse_op.0, %invertfor.body.i ]
  %inc388.lcssa = phi i32 [ %inc388, %invertfor.body.i ]
  call void @__enzyme_memcpyadd_doubleda8sa8(double* %5, double* %"theta'", i64 3), !node !285
  %cmp.not.i.i.not = xor i1 %cmp.not.i.i, true
  %cmp8.i.i_unwrap = icmp sgt i32 %mul3.i.i, 0
  %or.cond = and i1 %cmp.not.i.i.not, %cmp8.i.i_unwrap
  br i1 %or.cond, label %invertfor.body.lr.ph.i.i, label %invertentry

invertfor.body.i:                                 ; preds = %invertfor.cond20.preheader.i.preheader, %incinvertfor.body.i
  %"iv'ac.0" = phi i64 [ 2, %invertfor.cond20.preheader.i.preheader ], [ %58, %incinvertfor.body.i ]
  %reverse_mem.2 = phi i32 [ %inc408, %invertfor.cond20.preheader.i.preheader ], [ %inc396, %incinvertfor.body.i ]
  %reverse_op.0 = phi i32 [ %inc412.lcssa, %invertfor.cond20.preheader.i.preheader ], [ %inc394, %incinvertfor.body.i ]
  %_unwrap = add nuw nsw i64 %"iv'ac.0", 6
  %"arrayidx16.i'ipg_unwrap" = getelementptr inbounds double, double* %5, i64 %_unwrap, !node !285
  %54 = load double, double* %"arrayidx16.i'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx16.i'ipg_unwrap", align 8
  %_unwrap14 = add nuw nsw i64 %"iv'ac.0", 3
  %"arrayidx10.i'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %_unwrap14, !node !285
  %55 = load double, double* %"arrayidx10.i'ipg_unwrap", align 8, !node !285
  %56 = fadd fast double %55, %54, !node !285
  store double %56, double* %"arrayidx10.i'ipg_unwrap", align 8
  %"arrayidx7.i'ipg_unwrap" = getelementptr inbounds double, double* %5, i64 %_unwrap14, !node !285
  store double 0.000000e+00, double* %"arrayidx7.i'ipg_unwrap", align 8
  %inc388 = add i32 %reverse_mem.2, 13
  %57 = icmp eq i64 %"iv'ac.0", 0
  br i1 %57, label %invertfill.exit.i, label %incinvertfor.body.i

incinvertfor.body.i:                              ; preds = %invertfor.body.i
  %58 = add nsw i64 %"iv'ac.0", -1
  %inc394 = add i32 %reverse_op.0, 6
  %inc396 = add i32 %reverse_mem.2, 15
  br label %invertfor.body.i

invertfor.cond20.preheader.i.preheader:           ; preds = %invertfor.cond20.preheader.i
  %inc412.lcssa = phi i32 [ %inc412, %invertfor.cond20.preheader.i ]
  %reverse_mem.3.lcssa.lcssa = phi i32 [ %reverse_mem.3.lcssa, %invertfor.cond20.preheader.i ]
  tail call void @free(i8* nonnull %malloccall)
  tail call void @free(i8* nonnull %malloccall19)
  %inc408 = add i32 %reverse_mem.3.lcssa.lcssa, 27
  br label %invertfor.body.i

invertfor.cond20.preheader.i:                     ; preds = %invertfor.body22.i
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body22.i ]
  %reverse_op.1.lcssa = phi i32 [ %reverse_op.1, %invertfor.body22.i ]
  %59 = icmp eq i64 %"iv1'ac.0", 0
  %inc412 = add i32 %reverse_op.1.lcssa, 8
  br i1 %59, label %invertfor.cond20.preheader.i.preheader, label %incinvertfor.cond20.preheader.i

incinvertfor.cond20.preheader.i:                  ; preds = %invertfor.cond20.preheader.i
  %60 = add nsw i64 %"iv1'ac.0", -1
  %inc416 = add i32 %reverse_op.1.lcssa, 9
  %inc418 = add i32 %reverse_mem.3.lcssa, 23
  br label %invertfor.end45.i

invertfor.body22.i:                               ; preds = %invertif.end.i, %invertif.then.i
  %reverse_mem.3 = phi i32 [ %inc532, %invertif.then.i ], [ %inc536, %invertif.end.i ]
  %reverse_op.1 = phi i32 [ %inc530, %invertif.then.i ], [ %inc538, %invertif.end.i ]
  %61 = getelementptr inbounds i32, i32* %i_pose_params.093.i_malloccache, i64 %"iv1'ac.0"
  %62 = load i32, i32* %61, align 4, !invariant.group !454
  %_unwrap15 = sext i32 %62 to i64
  %_unwrap16 = add i64 %"iv3'ac.0", %_unwrap15
  %_unwrap17 = mul nsw i64 %_unwrap16, 3
  %"arrayidx30.i'ipg_unwrap" = getelementptr inbounds double, double* %5, i64 %_unwrap17, !node !285
  %63 = load double, double* %"arrayidx30.i'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx30.i'ipg_unwrap", align 8
  %64 = mul nuw nsw i64 %"iv1'ac.0", 3
  %65 = add nuw nsw i64 %"iv3'ac.0", %64
  %66 = getelementptr inbounds i32, i32* %i_theta.189.i_malloccache, i64 %65
  %67 = load i32, i32* %66, align 4, !invariant.group !455
  %idxprom23.i_unwrap = sext i32 %67 to i64
  %"arrayidx24.i'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %idxprom23.i_unwrap, !node !285
  %68 = load double, double* %"arrayidx24.i'ipg_unwrap", align 8, !node !285
  %69 = fadd fast double %68, %63, !node !285
  store double %69, double* %"arrayidx24.i'ipg_unwrap", align 8
  %70 = icmp eq i64 %"iv3'ac.0", 0
  br i1 %70, label %invertfor.cond20.preheader.i, label %incinvertfor.body22.i

incinvertfor.body22.i:                            ; preds = %invertfor.body22.i
  %inc474 = add i32 %reverse_mem.3, 21
  %71 = add nsw i64 %"iv3'ac.0", -1
  %inc476 = add i32 %reverse_op.1, 8
  br label %invertif.end.i

invertif.then.i:                                  ; preds = %invertif.end.i
  %72 = getelementptr inbounds i32, i32* %i_pose_params.093.i_malloccache, i64 %"iv1'ac.0"
  %73 = load i32, i32* %72, align 4, !invariant.group !454
  %_unwrap21 = sext i32 %73 to i64
  %_unwrap22 = add i64 %"iv3'ac.0", %_unwrap21
  %_unwrap23 = mul nsw i64 %_unwrap22, 3
  %_unwrap24 = add nsw i64 %_unwrap23, 1
  %"arrayidx40.i'ipg_unwrap" = getelementptr inbounds double, double* %5, i64 %_unwrap24, !node !285
  %74 = load double, double* %"arrayidx40.i'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx40.i'ipg_unwrap", align 8
  %75 = mul nuw nsw i64 %"iv1'ac.0", 3
  %76 = add nuw nsw i64 %"iv3'ac.0", %75
  %77 = getelementptr inbounds i32, i32* %i_theta.189.i_malloccache, i64 %76
  %78 = load i32, i32* %77, align 4, !invariant.group !455
  %inc31.i_unwrap = add nsw i32 %78, 1
  %idxprom33.i_unwrap = sext i32 %inc31.i_unwrap to i64
  %"arrayidx34.i'ipg_unwrap" = getelementptr inbounds double, double* %"theta'", i64 %idxprom33.i_unwrap, !node !285
  %79 = load double, double* %"arrayidx34.i'ipg_unwrap", align 8, !node !285
  %80 = fadd fast double %79, %74, !node !285
  %inc530 = add i32 %reverse_op.2, 9
  %inc532 = add i32 %reverse_mem.4.in, 22
  store double %80, double* %"arrayidx34.i'ipg_unwrap", align 8
  br label %invertfor.body22.i

invertif.end.i:                                   ; preds = %invertfor.end45.i, %incinvertfor.body22.i
  %"iv3'ac.0" = phi i64 [ 2, %invertfor.end45.i ], [ %71, %incinvertfor.body22.i ]
  %reverse_mem.4.in = phi i32 [ %reverse_mem.5, %invertfor.end45.i ], [ %inc474, %incinvertfor.body22.i ]
  %reverse_op.2 = phi i32 [ %reverse_op.3, %invertfor.end45.i ], [ %inc476, %incinvertfor.body22.i ]
  %inc536 = add i32 %reverse_mem.4.in, 3
  %inc538 = add i32 %reverse_op.2, 1
  %81 = trunc i64 %"iv3'ac.0" to i32
  %cmp32.i_unwrap = icmp eq i32 %81, 0
  br i1 %cmp32.i_unwrap, label %invertif.then.i, label %invertfor.body22.i

invertfor.end45.i:                                ; preds = %invertto_pose_params.exit, %incinvertfor.cond20.preheader.i
  %"iv1'ac.0" = phi i64 [ 4, %invertto_pose_params.exit ], [ %60, %incinvertfor.cond20.preheader.i ]
  %reverse_mem.5 = phi i32 [ %reverse_mem.6, %invertto_pose_params.exit ], [ %inc418, %incinvertfor.cond20.preheader.i ]
  %reverse_op.3 = phi i32 [ %reverse_op.4, %invertto_pose_params.exit ], [ %inc416, %incinvertfor.cond20.preheader.i ]
  br label %invertif.end.i

invertto_pose_params.exit:                        ; preds = %invertfor.end51, %invertfor.body.lr.ph
  %reverse_mem.6 = phi i32 [ %phi.bo, %invertfor.body.lr.ph ], [ 1, %invertfor.end51 ]
  %reverse_op.4 = phi i32 [ %inc576, %invertfor.body.lr.ph ], [ 0, %invertfor.end51 ]
  call fastcc void @diffe_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i.15(i32 %bone_count, %struct.Matrix* %base_relatives, i32* %parents, %struct.Matrix* %inverse_base_absolutes, %struct.Matrix* %base_positions, %struct.Matrix* %weights, i32 %is_mirrored, %struct.Matrix* nonnull %0, %struct.Matrix* nonnull %"'ipc28", %struct.Matrix* nonnull %26, %struct.Matrix* nonnull %"'ipc29", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %_augmented), !node !285
  tail call void @free(i8* nonnull %"call.i84'mi")
  tail call void @free(i8* nonnull %call.i84)
  br label %invertfor.end45.i

invertfor.body.lr.ph:                             ; preds = %invertfor.body
  %reverse_mem.7.in.lcssa.lcssa = phi i32 [ %reverse_mem.7.in.lcssa, %invertfor.body ]
  %reverse_op.5.lcssa.lcssa = phi i32 [ %reverse_op.5.lcssa, %invertfor.body ]
  %inc576 = add i32 %reverse_op.5.lcssa.lcssa, 65
  %82 = bitcast double* %_cache.0 to i8*, !node !285
  tail call void @free(i8* nonnull %82), !node !285
  %83 = bitcast double* %_cache39.0 to i8*, !node !285
  tail call void @free(i8* nonnull %83), !node !285
  %84 = bitcast double* %_cache45.0 to i8*, !node !285
  tail call void @free(i8* nonnull %84), !node !285
  %85 = bitcast double* %_cache53.0 to i8*, !node !285
  tail call void @free(i8* nonnull %85), !node !285
  %86 = bitcast double* %_cache62.0 to i8*, !node !285
  tail call void @free(i8* nonnull %86), !node !285
  %phi.bo = add i32 %reverse_mem.7.in.lcssa.lcssa, 131
  br label %invertto_pose_params.exit

invertfor.body:                                   ; preds = %invertfor.body9
  %reverse_mem.7.in.lcssa = phi i32 [ %reverse_mem.7.in, %invertfor.body9 ]
  %reverse_op.5.lcssa = phi i32 [ %reverse_op.5, %invertfor.body9 ]
  %87 = icmp eq i64 %"iv6'ac.0", 0
  br i1 %87, label %invertfor.body.lr.ph, label %incinvertfor.body

incinvertfor.body:                                ; preds = %invertfor.body
  %inc580 = add i32 %reverse_op.5.lcssa, 66
  %inc582 = add i32 %reverse_mem.7.in.lcssa, 117
  br label %invertfor.end

invertfor.body9:                                  ; preds = %invertfor.end, %incinvertfor.body9
  %"iv8'ac.0" = phi i64 [ 2, %invertfor.end ], [ %118, %incinvertfor.body9 ]
  %reverse_mem.7.in = phi i32 [ %reverse_mem.8, %invertfor.end ], [ %inc938, %incinvertfor.body9 ]
  %reverse_op.5 = phi i32 [ %reverse_op.6, %invertfor.end ], [ %inc940, %incinvertfor.body9 ]
  %_unwrap34 = mul nuw nsw i64 %"iv6'ac.0", 3, !node !285
  %_unwrap35 = add nuw nsw i64 %"iv8'ac.0", %_unwrap34, !node !285
  %"arrayidx48'ipg_unwrap" = getelementptr inbounds double, double* %"err'", i64 %_unwrap35, !node !285
  %88 = load double, double* %"arrayidx48'ipg_unwrap", align 8, !node !285
  store double 0.000000e+00, double* %"arrayidx48'ipg_unwrap", align 8
  %89 = getelementptr inbounds double, double* %_cache.0, i64 %_unwrap35, !node !285
  %90 = load double, double* %89, align 8, !invariant.group !461, !node !285
  %91 = getelementptr inbounds double, double* %_cache39.0, i64 %_unwrap35, !node !285
  %92 = load double, double* %91, align 8, !invariant.group !462, !node !285
  %_unwrap44 = fadd fast double %90, %92, !node !285
  %sub28_unwrap = fsub fast double 1.000000e+00, %_unwrap44, !node !285
  %93 = getelementptr inbounds double, double* %_cache45.0, i64 %_unwrap35, !node !285
  %94 = load double, double* %93, align 8, !invariant.group !464, !node !285
  %95 = getelementptr inbounds double, double* %_cache53.0, i64 %_unwrap35, !node !285
  %96 = load double, double* %95, align 8, !invariant.group !465, !node !285
  %97 = getelementptr inbounds double, double* %_cache62.0, i64 %_unwrap35, !node !285
  %98 = load double, double* %97, align 8, !invariant.group !463, !node !285
  %"data'ipg_unwrap" = getelementptr inbounds i8, i8* %"call.i84'mi", i64 8
  %"'ipc32_unwrap" = bitcast i8* %"data'ipg_unwrap" to double**
  %"'ipl_unwrap" = load double*, double** %"'ipc32_unwrap", align 8, !invariant.group !466
  %arrayidx_unwrap = getelementptr inbounds i32, i32* %correspondences, i64 %"iv6'ac.0", !node !285
  %_unwrap72 = load i32, i32* %arrayidx_unwrap, align 4, !tbaa !59, !invariant.group !457, !node !285
  %idxprom2_unwrap = sext i32 %_unwrap72 to i64, !node !285
  %arrayidx30_unwrap = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2_unwrap, i32 0, i64 2, !node !285
  %_unwrap73 = load i32, i32* %arrayidx30_unwrap, align 4, !tbaa !59, !invariant.group !460, !node !285
  %nrows_unwrap = bitcast i8* %call.i84 to i32*
  %_unwrap74 = load i32, i32* %nrows_unwrap, align 8, !tbaa !138, !invariant.group !456
  %mul32_unwrap = mul nsw i32 %_unwrap73, %_unwrap74, !node !285
  %_unwrap75 = sext i32 %mul32_unwrap to i64, !node !285
  %_unwrap76 = add nsw i64 %"iv8'ac.0", %_unwrap75, !node !285
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap76, !node !285
  %99 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !node !285
  %100 = fmul fast double %88, %sub28_unwrap
  %101 = fsub fast double %99, %100
  store double %101, double* %"arrayidx35'ipg_unwrap", align 8
  %102 = fmul fast double %94, %88
  %103 = fmul fast double %88, %98
  %104 = fsub fast double %102, %103
  %105 = fmul fast double %88, %96
  %106 = fsub fast double %102, %105
  %arrayidx18_unwrap = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2_unwrap, i32 0, i64 1, !node !285
  %_unwrap78 = load i32, i32* %arrayidx18_unwrap, align 4, !tbaa !59, !invariant.group !459, !node !285
  %mul20_unwrap = mul nsw i32 %_unwrap78, %_unwrap74, !node !285
  %_unwrap79 = sext i32 %mul20_unwrap to i64, !node !285
  %_unwrap80 = add nsw i64 %"iv8'ac.0", %_unwrap79, !node !285
  %"arrayidx23'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap80, !node !285
  %107 = load double, double* %"arrayidx23'ipg_unwrap", align 8, !node !285
  %108 = fmul fast double %88, %92
  %109 = fsub fast double %107, %108
  store double %109, double* %"arrayidx23'ipg_unwrap", align 8
  %_unwrap81 = shl nuw nsw i64 %"iv6'ac.0", 1, !node !285
  %"arrayidx6'ipg_unwrap" = getelementptr inbounds double, double* %"us'", i64 %_unwrap81, !node !285
  %"arrayidx16'ipg_unwrap" = getelementptr inbounds double, double* %"arrayidx6'ipg_unwrap", i64 1, !node !285
  %110 = load double, double* %"arrayidx16'ipg_unwrap", align 8, !node !285
  %111 = fadd fast double %110, %106, !node !285
  store double %111, double* %"arrayidx16'ipg_unwrap", align 8
  %arraydecay_unwrap = getelementptr inbounds %struct.Triangle, %struct.Triangle* %triangles, i64 %idxprom2_unwrap, i32 0, i64 0, !node !285
  %_unwrap82 = load i32, i32* %arraydecay_unwrap, align 4, !tbaa !59, !invariant.group !458, !node !285
  %mul12_unwrap = mul nsw i32 %_unwrap74, %_unwrap82, !node !285
  %_unwrap83 = sext i32 %mul12_unwrap to i64, !node !285
  %_unwrap84 = add nsw i64 %"iv8'ac.0", %_unwrap83, !node !285
  %"arrayidx14'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap84, !node !285
  %112 = load double, double* %"arrayidx14'ipg_unwrap", align 8, !node !285
  %113 = fmul fast double %88, %90
  %114 = fsub fast double %112, %113
  store double %114, double* %"arrayidx14'ipg_unwrap", align 8
  %115 = load double, double* %"arrayidx6'ipg_unwrap", align 8, !node !285
  %116 = fadd fast double %115, %104, !node !285
  store double %116, double* %"arrayidx6'ipg_unwrap", align 8
  %117 = icmp eq i64 %"iv8'ac.0", 0
  br i1 %117, label %invertfor.body, label %incinvertfor.body9

incinvertfor.body9:                               ; preds = %invertfor.body9
  %inc938 = add i32 %reverse_mem.7.in, 115
  %118 = add nsw i64 %"iv8'ac.0", -1
  %inc940 = add i32 %reverse_op.5, 65
  br label %invertfor.body9

invertfor.end:                                    ; preds = %mergeinvertfor.body_for.end51.loopexit, %incinvertfor.body
  %"iv6'ac.0.in" = phi i64 [ %wide.trip.count_unwrap85, %mergeinvertfor.body_for.end51.loopexit ], [ %"iv6'ac.0", %incinvertfor.body ]
  %reverse_mem.8 = phi i32 [ 1, %mergeinvertfor.body_for.end51.loopexit ], [ %inc582, %incinvertfor.body ]
  %reverse_op.6 = phi i32 [ 1, %mergeinvertfor.body_for.end51.loopexit ], [ %inc580, %incinvertfor.body ]
  %"iv6'ac.0" = add nsw i64 %"iv6'ac.0.in", -1
  br label %invertfor.body9

mergeinvertfor.body_for.end51.loopexit:           ; preds = %invertfor.end51
  %wide.trip.count_unwrap85 = zext i32 %corresp_count to i64, !node !285
  br label %invertfor.end

invertfor.end51:                                  ; preds = %for.end, %to_pose_params.exit
  %_cache62.0 = phi double* [ undef, %to_pose_params.exit ], [ %_malloccache65, %for.end ]
  %_cache53.0 = phi double* [ undef, %to_pose_params.exit ], [ %_malloccache56, %for.end ]
  %_cache45.0 = phi double* [ undef, %to_pose_params.exit ], [ %_malloccache48, %for.end ]
  %_cache39.0 = phi double* [ undef, %to_pose_params.exit ], [ %_malloccache42, %for.end ]
  %_cache.0 = phi double* [ undef, %to_pose_params.exit ], [ %_malloccache, %for.end ]
  %forward_mem.7 = phi i32 [ %forward_mem.4.lcssa.lcssa, %to_pose_params.exit ], [ %inc344.lcssa, %for.end ]
  %forward_op.7 = phi i32 [ %inc220.lcssa, %to_pose_params.exit ], [ %inc346.lcssa, %for.end ]
  br i1 %cmp89, label %mergeinvertfor.body_for.end51.loopexit, label %invertto_pose_params.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } @augmented_apply_global_transform.13(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* nocapture readonly %positions, %struct.Matrix* nocapture %"positions'") local_unnamed_addr #5 {
entry:
  %0 = alloca { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, align 8
  %call.i = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %1 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 5
  store i8* %call.i, i8** %1, align 8
  %"call.i'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %2 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 4
  store i8* %"call.i'mi", i8** %2, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i'mi", i8 0, i64 16, i1 false)
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %3 = bitcast i8* %call.i to %struct.Matrix*
  %"nrows1.i'ipc" = bitcast i8* %"call.i'mi" to i32*
  %nrows1.i = bitcast i8* %call.i to i32*
  store i32 3, i32* %"nrows1.i'ipc", align 8
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 4
  %ncols2.i = getelementptr inbounds i8, i8* %call.i, i64 4
  %"'ipc14" = bitcast i8* %"ncols2.i'ipg" to i32*
  %4 = bitcast i8* %ncols2.i to i32*
  store i32 3, i32* %"'ipc14", align 4
  store i32 3, i32* %4, align 4, !tbaa !139
  %call4.i = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %"call4.i'mi" = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72) #31
  %5 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 3
  store i8* %"call4.i'mi", i8** %5, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(72) dereferenceable_or_null(72) %"call4.i'mi", i8 0, i64 72, i1 false)
  %"data.i'ipg" = getelementptr inbounds i8, i8* %"call.i'mi", i64 8
  %data.i = getelementptr inbounds i8, i8* %call.i, i64 8
  %"'ipc13" = bitcast i8* %"data.i'ipg" to i8**
  %6 = bitcast i8* %data.i to i8**
  store i8* %"call4.i'mi", i8** %"'ipc13", align 8
  store i8* %call4.i, i8** %6, align 8, !tbaa !137
  %"data'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"pose_params'", i64 0, i32 2
  %data = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 2
  %"'ipl12" = load double*, double** %"data'ipg", align 8
  %7 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 2
  store double* %"'ipl12", double** %7, align 8
  %8 = load double*, double** %data, align 8, !tbaa !137
  %9 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 11
  store double* %8, double** %9, align 8
  %_augmented = call { double, double*, double, double, double } @augmented_angle_axis_to_rotation_matrix(double* %8, double* %"'ipl12", %struct.Matrix* nonnull %3, %struct.Matrix* nonnull %"'ipc")
  %.repack = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 0
  %_augmented.elt = extractvalue { double, double*, double, double, double } %_augmented, 0
  store double %_augmented.elt, double* %.repack, align 8
  %.repack1 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 1
  %_augmented.elt2 = extractvalue { double, double*, double, double, double } %_augmented, 1
  store double* %_augmented.elt2, double** %.repack1, align 8
  %.repack3 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 2
  %_augmented.elt4 = extractvalue { double, double*, double, double, double } %_augmented, 2
  store double %_augmented.elt4, double* %.repack3, align 8
  %.repack5 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 3
  %_augmented.elt6 = extractvalue { double, double*, double, double, double } %_augmented, 3
  store double %_augmented.elt6, double* %.repack5, align 8
  %.repack7 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 1, i32 4
  %_augmented.elt8 = extractvalue { double, double*, double, double, double } %_augmented, 4
  store double %_augmented.elt8, double* %.repack7, align 8
  %"'ipl" = load double*, double** %"data'ipg", align 8
  %10 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 0
  store double* %"'ipl", double** %10, align 8
  %11 = load double*, double** %data, align 8, !tbaa !137
  %nrows = getelementptr inbounds %struct.Matrix, %struct.Matrix* %pose_params, i64 0, i32 0
  %12 = load i32, i32* %nrows, align 8, !tbaa !138
  %13 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 12
  store i32 %12, i32* %13, align 8
  %14 = bitcast i8* %call4.i to double*
  %15 = sext i32 %12 to i64
  %malloccall23 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72)
  %_malloccache = bitcast i8* %malloccall23 to double*
  %16 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 13
  %17 = bitcast double** %16 to i8**
  store i8* %malloccall23, i8** %17, align 8
  %malloccall25 = tail call noalias nonnull dereferenceable(72) dereferenceable_or_null(72) i8* @malloc(i64 72)
  %_malloccache26 = bitcast i8* %malloccall25 to double*
  %18 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 14
  %19 = bitcast double** %18 to i8**
  store i8* %malloccall25, i8** %19, align 8
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %iv = phi i64 [ %iv.next, %for.inc12 ], [ 0, %entry ]
  %iv.next = add nuw nsw i64 %iv, 1
  %20 = add nsw i64 %iv, %15
  %arrayidx = getelementptr inbounds double, double* %11, i64 %20
  %21 = mul nuw nsw i64 %iv, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %iv2 = phi i64 [ %iv.next3, %for.body3 ], [ 0, %for.cond1.preheader ]
  %iv.next3 = add nuw nsw i64 %iv2, 1
  %22 = load double, double* %arrayidx, align 8, !tbaa !75
  %23 = add nuw nsw i64 %21, %iv2
  %arrayidx10 = getelementptr inbounds double, double* %14, i64 %23
  %24 = load double, double* %arrayidx10, align 8, !tbaa !75
  %mul11 = fmul fast double %24, %22
  store double %mul11, double* %arrayidx10, align 8, !tbaa !75
  %25 = getelementptr inbounds double, double* %_malloccache26, i64 %23
  store double %24, double* %25, align 8, !invariant.group !467
  %26 = getelementptr inbounds double, double* %_malloccache, i64 %23
  store double %22, double* %26, align 8, !invariant.group !468
  %exitcond102.not = icmp eq i64 %iv.next3, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !195

for.inc12:                                        ; preds = %for.body3
  %exitcond107.not = icmp eq i64 %iv.next, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !196

for.end14:                                        ; preds = %for.inc12
  %call.i81 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %27 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 8
  store i8* %call.i81, i8** %27, align 8
  %"call.i81'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %28 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 7
  store i8* %"call.i81'mi", i8** %28, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i81'mi", i8 0, i64 16, i1 false)
  %"'ipc15" = bitcast i8* %"call.i81'mi" to %struct.Matrix*
  %29 = bitcast i8* %call.i81 to %struct.Matrix*
  tail call void @llvm.memset.p0i8.i64(i8* nonnull align 8 dereferenceable(16) %call.i81, i8 0, i64 16, i1 false) #31
  %_augmented16 = call { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } @augmented_mat_mult.6(%struct.Matrix* nonnull %3, %struct.Matrix* nonnull %"'ipc", %struct.Matrix* %positions, %struct.Matrix* %"positions'", %struct.Matrix* nonnull %29, %struct.Matrix* nonnull %"'ipc15")
  %30 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 6
  store { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %_augmented16, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }* %30, align 8
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %31 = load i32, i32* %ncols, align 4, !tbaa !139
  %32 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 15
  store i32 %31, i32* %32, align 8
  %cmp1789 = icmp sgt i32 %31, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %delete_matrix.exit86

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %nrows20 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %33 = load i32, i32* %nrows20, align 8, !tbaa !138
  %34 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 16
  store i32 %33, i32* %34, align 4
  %cmp2187 = icmp sgt i32 %33, 0
  %data23 = getelementptr inbounds i8, i8* %call.i81, i64 8
  %35 = bitcast i8* %data23 to double**
  %nrows24 = bitcast i8* %call.i81 to i32*
  %"data36'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data36 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count = zext i32 %33 to i64
  %36 = sext i32 %33 to i64
  %37 = zext i32 %31 to i64
  %mallocsize = shl nuw nsw i64 %37, 3
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl17_malloccache" = bitcast i8* %malloccall to double**
  %38 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 9
  %39 = bitcast double*** %38 to i8**
  store i8* %malloccall, i8** %39, align 8
  %malloccall20 = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %"'ipl18_malloccache" = bitcast i8* %malloccall20 to double**
  %40 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 10
  %41 = bitcast double*** %40 to i8**
  store i8* %malloccall20, i8** %41, align 8
  %mallocsize27 = shl nuw nsw i64 %37, 2
  %malloccall28 = tail call noalias nonnull i8* @malloc(i64 %mallocsize27)
  %mul31_malloccache = bitcast i8* %malloccall28 to i32*
  %42 = getelementptr inbounds { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, i64 0, i32 17
  %43 = bitcast i32** %42 to i8**
  store i8* %malloccall28, i8** %43, align 8
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %iv4 = phi i64 [ %iv.next5, %for.inc45 ], [ 0, %for.cond19.preheader.lr.ph ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %44 = load double*, double** %35, align 8, !tbaa !137
  %45 = load i32, i32* %nrows24, align 8, !tbaa !138
  %46 = sext i32 %45 to i64
  %47 = mul nsw i64 %iv4, %46
  %"'ipl18" = load double*, double** %"data'ipg", align 8
  %48 = load double*, double** %data, align 8, !tbaa !137
  %49 = load i32, i32* %nrows, align 8, !tbaa !138
  %mul31 = shl nsw i32 %49, 1
  %"'ipl17" = load double*, double** %"data36'ipg", align 8
  %50 = getelementptr inbounds double*, double** %"'ipl17_malloccache", i64 %iv4
  store double* %"'ipl17", double** %50, align 8, !invariant.group !469
  %51 = getelementptr inbounds i32, i32* %mul31_malloccache, i64 %iv4
  store i32 %mul31, i32* %51, align 4, !invariant.group !470
  %52 = getelementptr inbounds double*, double** %"'ipl18_malloccache", i64 %iv4
  store double* %"'ipl18", double** %52, align 8, !invariant.group !471
  %53 = load double*, double** %data36, align 8, !tbaa !137
  %54 = sext i32 %mul31 to i64
  %55 = mul nsw i64 %iv4, %36
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %iv9 = phi i64 [ %iv.next10, %for.body22 ], [ 0, %for.body22.lr.ph ]
  %iv.next10 = add nuw nsw i64 %iv9, 1
  %56 = add nsw i64 %iv9, %47
  %arrayidx28 = getelementptr inbounds double, double* %44, i64 %56
  %57 = load double, double* %arrayidx28, align 8, !tbaa !75
  %58 = add nsw i64 %iv9, %54
  %arrayidx34 = getelementptr inbounds double, double* %48, i64 %58
  %59 = load double, double* %arrayidx34, align 8, !tbaa !75
  %add35 = fadd fast double %59, %57
  %60 = add nsw i64 %iv9, %55
  %arrayidx41 = getelementptr inbounds double, double* %53, i64 %60
  store double %add35, double* %arrayidx41, align 8, !tbaa !75
  %exitcond.not = icmp eq i64 %iv.next10, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !197

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %exitcond98.not = icmp eq i64 %iv.next5, %37
  br i1 %exitcond98.not, label %delete_matrix.exit86, label %for.cond19.preheader, !llvm.loop !198

delete_matrix.exit86:                             ; preds = %for.inc45, %for.end14
  %61 = load { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %0, align 8
  ret { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %61
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define internal fastcc { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } @augmented__ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i.14(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %positions, %struct.Matrix* nocapture %"positions'") unnamed_addr #18 {
entry:
  %0 = alloca { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, align 8
  %conv.i = sext i32 %bone_count to i64
  %mul.i = shl nsw i64 %conv.i, 4
  %call.i = tail call noalias i8* @malloc(i64 %mul.i) #31
  %1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 1
  store i8* %call.i, i8** %1, align 8
  %"call.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %2 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 0
  store i8* %"call.i'mi", i8** %2, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i'mi", i8 0, i64 %mul.i, i1 false)
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 5
  store i8* %call.i3, i8** %3, align 8
  %"call.i3'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %4 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 4
  store i8* %"call.i3'mi", i8** %4, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i3'mi", i8 0, i64 %mul.i, i1 false)
  %call.i9 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 3
  store i8* %call.i9, i8** %5, align 8
  %"call.i9'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %6 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 2
  store i8* %"call.i9'mi", i8** %6, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i9'mi", i8 0, i64 %mul.i, i1 false)
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %7 = zext i32 %bone_count to i64
  %8 = shl nuw nsw i64 %7, 4
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i, i8 0, i64 %8, i1 false) #31
  %call.i359 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 9
  store i8* %call.i359, i8** %9, align 8
  %"call.i359'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %10 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 8
  store i8* %"call.i359'mi", i8** %10, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i359'mi", i8 0, i64 %mul.i, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i359, i8 0, i64 %8, i1 false) #31
  %call.i963 = tail call noalias i8* @malloc(i64 %mul.i) #31
  %11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 7
  store i8* %call.i963, i8** %11, align 8
  %"call.i963'mi" = tail call noalias nonnull i8* @malloc(i64 %mul.i) #31
  %12 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 6
  store i8* %"call.i963'mi", i8** %12, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i963'mi", i8 0, i64 %mul.i, i1 false)
  tail call void @llvm.memset.p0i8.i64(i8* align 8 %call.i963, i8 0, i64 %8, i1 false) #31
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %13 = phi i8* [ %"call.i9'mi", %get_matrix_array.exit6 ], [ %"call.i963'mi", %for.body.preheader.i11 ]
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %14 = phi i8* [ %"call.i3'mi", %get_matrix_array.exit6 ], [ %"call.i359'mi", %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %15 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc23" = bitcast i8* %14 to %struct.Matrix*
  %16 = bitcast i8* %call.i36064 to %struct.Matrix*
  %"'ipc25" = bitcast i8* %13 to %struct.Matrix*
  %17 = bitcast i8* %call.i966 to %struct.Matrix*
  %_augmented24 = call { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } @augmented_get_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %15, %struct.Matrix* nonnull %"'ipc")
  %18 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 11
  store { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %_augmented24, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }* %18, align 8
  %_augmented = call { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } @augmented_relatives_to_absolutes(i32 %bone_count, %struct.Matrix* %15, %struct.Matrix* nonnull %"'ipc", i32* %parents, %struct.Matrix* %16, %struct.Matrix* nonnull %"'ipc23")
  %.repack = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 0
  %_augmented.elt = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 0
  store i8** %_augmented.elt, i8*** %.repack, align 8
  %.repack1 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 1
  %_augmented.elt2 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 1
  store i8** %_augmented.elt2, i8*** %.repack1, align 8
  %.repack3 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 2
  %_augmented.elt4 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 2
  store double** %_augmented.elt4, double*** %.repack3, align 8
  %.repack5 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 3
  %_augmented.elt6 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 3
  store { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }* %_augmented.elt6, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }** %.repack5, align 8
  %.repack7 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 4
  %_augmented.elt8 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 4
  store i32* %_augmented.elt8, i32** %.repack7, align 8
  %.repack9 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 5
  %_augmented.elt10 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 5
  store i1* %_augmented.elt10, i1** %.repack9, align 8
  %.repack11 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 10, i32 6
  %_augmented.elt12 = extractvalue { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %_augmented, 6
  store i32* %_augmented.elt12, i32** %.repack11, align 8
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64
  %mallocsize = mul nuw nsw i64 %wide.trip.count101, 72
  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)
  %_augmented26_malloccache = bitcast i8* %malloccall to { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*
  %19 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 12
  %20 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }** %19 to i8**
  store i8* %malloccall, i8** %20, align 8
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %iv = phi i64 [ %iv.next, %for.body ], [ 0, %for.body.preheader ]
  %iv.next = add nuw nsw i64 %iv, 1
  %"arrayidx'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc23", i64 %iv
  %arrayidx = getelementptr inbounds %struct.Matrix, %struct.Matrix* %16, i64 %iv
  %arrayidx4 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %iv
  %"arrayidx6'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc25", i64 %iv
  %arrayidx6 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv
  %_augmented26 = call { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.4(%struct.Matrix* %arrayidx, %struct.Matrix* nonnull %"arrayidx'ipg", %struct.Matrix* %arrayidx4, %struct.Matrix* %arrayidx6, %struct.Matrix* nonnull %"arrayidx6'ipg")
  %21 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_augmented26_malloccache, i64 %iv
  store { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %_augmented26, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %21, align 8, !invariant.group !472
  %exitcond102.not = icmp eq i64 %iv.next, %wide.trip.count101
  br i1 %exitcond102.not, label %for.end, label %for.body, !llvm.loop !212

for.end:                                          ; preds = %for.body, %get_matrix_array.exit12
  %ncols = getelementptr inbounds %struct.Matrix, %struct.Matrix* %base_positions, i64 0, i32 1
  %22 = load i32, i32* %ncols, align 4, !tbaa !139
  %23 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 24
  store i32 %22, i32* %23, align 8
  %"nrows1.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 0
  %nrows1.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 0
  %24 = load i32, i32* %nrows1.i, align 8, !tbaa !138
  %"ncols2.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 1
  %ncols2.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 1
  %25 = load i32, i32* %ncols2.i, align 4, !tbaa !139
  %mul.i13 = mul nsw i32 %25, %24
  %26 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 25
  store i32 %mul.i13, i32* %26, align 4
  %mul3.i = mul i32 %22, 3
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.then.i

if.then.i:                                        ; preds = %for.end
  %"data.i'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data.i = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %27 = load double*, double** %data.i, align 8, !tbaa !137
  %cmp4.not.i = icmp eq double* %27, null
  %28 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 26
  store i1 %cmp4.not.i, i1* %28, align 8
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread69

resize.exit.thread:                               ; preds = %if.then.i
  %conv31.i = zext i32 %mul3.i to i64
  %mul11.i = shl nuw nsw i64 %conv31.i, 3
  %call.i14 = tail call noalias i8* @malloc(i64 %mul11.i) #31
  %29 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 14
  store i8* %call.i14, i8** %29, align 8
  %"call.i14'mi" = tail call noalias nonnull i8* @malloc(i64 %mul11.i) #31
  %30 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 13
  store i8* %"call.i14'mi", i8** %30, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call.i14'mi", i8 0, i64 %mul11.i, i1 false)
  %"'ipc27" = bitcast double** %"data.i'ipg" to i8**
  %31 = bitcast double** %data.i to i8**
  store i8* %"call.i14'mi", i8** %"'ipc27", align 8
  store i8* %call.i14, i8** %31, align 8, !tbaa !137
  store i32 %22, i32* %"ncols2.i'ipg", align 4
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %"nrows1.i'ipg", align 8
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %for.body.lr.ph.i

resize.exit.thread69:                             ; preds = %if.then.i
  store double* null, double** %"data.i'ipg", align 8
  store double* null, double** %data.i, align 8, !tbaa !137
  store i32 %22, i32* %"ncols2.i'ipg", align 4
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %"nrows1.i'ipg", align 8
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  br label %fill.exit

resize.exit:                                      ; preds = %for.end
  store i32 %22, i32* %"ncols2.i'ipg", align 4
  store i32 %22, i32* %ncols2.i, align 4, !tbaa !139
  store i32 3, i32* %"nrows1.i'ipg", align 8
  store i32 3, i32* %nrows1.i, align 8, !tbaa !138
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  br i1 %cmp7.i, label %resize.exit.for.body.lr.ph.i_crit_edge, label %fill.exit

resize.exit.for.body.lr.ph.i_crit_edge:           ; preds = %resize.exit
  %data.i15.phi.trans.insert = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %32 = bitcast double** %data.i15.phi.trans.insert to i8**
  %.pre105 = load i8*, i8** %32, align 8, !tbaa !137
  %.pre103 = zext i32 %mul3.i to i64
  %.pre104 = shl nuw nsw i64 %.pre103, 3
  br label %for.body.lr.ph.i

for.body.lr.ph.i:                                 ; preds = %resize.exit.for.body.lr.ph.i_crit_edge, %resize.exit.thread
  %.pre-phi = phi i64 [ %.pre104, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %mul11.i, %resize.exit.thread ]
  %33 = phi i8* [ %.pre105, %resize.exit.for.body.lr.ph.i_crit_edge ], [ %call.i14, %resize.exit.thread ]
  call void @llvm.memset.p0i8.i64(i8* align 8 %33, i8 0, i64 %.pre-phi, i1 false)
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread69
  %call.i16 = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %34 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 18
  store i8* %call.i16, i8** %34, align 8
  %"call.i16'mi" = tail call noalias nonnull dereferenceable(16) dereferenceable_or_null(16) i8* @malloc(i64 16) #31
  %35 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 17
  store i8* %"call.i16'mi", i8** %35, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 dereferenceable(16) dereferenceable_or_null(16) %"call.i16'mi", i8 0, i64 16, i1 false)
  %"'ipc30" = bitcast i8* %"call.i16'mi" to %struct.Matrix*
  %36 = bitcast i8* %call.i16 to %struct.Matrix*
  %"nrows1.i17'ipc" = bitcast i8* %"call.i16'mi" to i32*
  %nrows1.i17 = bitcast i8* %call.i16 to i32*
  store i32 4, i32* %"nrows1.i17'ipc", align 8
  store i32 4, i32* %nrows1.i17, align 8, !tbaa !138
  %"ncols2.i18'ipg" = getelementptr inbounds i8, i8* %"call.i16'mi", i64 4
  %ncols2.i18 = getelementptr inbounds i8, i8* %call.i16, i64 4
  %"'ipc29" = bitcast i8* %"ncols2.i18'ipg" to i32*
  %37 = bitcast i8* %ncols2.i18 to i32*
  store i32 %22, i32* %"'ipc29", align 4
  store i32 %22, i32* %37, align 4, !tbaa !139
  %mul.i19 = shl nsw i32 %22, 2
  %conv.i20 = sext i32 %mul.i19 to i64
  %mul3.i21 = shl nsw i64 %conv.i20, 3
  %call4.i = tail call noalias i8* @malloc(i64 %mul3.i21) #31
  %38 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 16
  store i8* %call4.i, i8** %38, align 8
  %"call4.i'mi" = tail call noalias nonnull i8* @malloc(i64 %mul3.i21) #31
  %39 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 15
  store i8* %"call4.i'mi", i8** %39, align 8
  call void @llvm.memset.p0i8.i64(i8* nonnull align 1 %"call4.i'mi", i8 0, i64 %mul3.i21, i1 false)
  %"data.i22'ipg" = getelementptr inbounds i8, i8* %"call.i16'mi", i64 8
  %data.i22 = getelementptr inbounds i8, i8* %call.i16, i64 8
  %"'ipc28" = bitcast i8* %"data.i22'ipg" to i8**
  %40 = bitcast i8* %data.i22 to i8**
  store i8* %"call4.i'mi", i8** %"'ipc28", align 8
  store i8* %call4.i, i8** %40, align 8, !tbaa !137
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %22, 0
  %"'ipc36" = bitcast i8* %"data.i22'ipg" to double**
  %41 = bitcast i8* %data.i22 to double**
  %data23 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 2
  %nrows24 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %weights, i64 0, i32 0
  %"data30'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %wide.trip.count97 = zext i32 %bone_count to i64
  %wide.trip.count93 = zext i32 %22 to i64
  %mallocsize32 = mul nuw nsw i64 %wide.trip.count97, 72
  %malloccall33 = tail call noalias nonnull i8* @malloc(i64 %mallocsize32)
  %_augmented31_malloccache = bitcast i8* %malloccall33 to { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*
  %42 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 19
  %43 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }** %42 to i8**
  store i8* %malloccall33, i8** %43, align 8
  %mallocsize34 = shl nuw nsw i64 %wide.trip.count97, 3
  %malloccall35 = tail call noalias nonnull i8* @malloc(i64 %mallocsize34)
  %"'ipl_malloccache" = bitcast i8* %malloccall35 to double**
  %44 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 20
  %45 = bitcast double*** %44 to i8**
  store i8* %malloccall35, i8** %45, align 8
  %malloccall39 = tail call noalias nonnull i8* @malloc(i64 %mallocsize34)
  %"'ipl37_malloccache" = bitcast i8* %malloccall39 to double**
  %46 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 21
  %47 = bitcast double*** %46 to i8**
  store i8* %malloccall39, i8** %47, align 8
  %mallocsize46 = shl nuw nsw i64 %wide.trip.count97, 2
  %malloccall47 = tail call noalias nonnull i8* @malloc(i64 %mallocsize46)
  %_malloccache = bitcast i8* %malloccall47 to i32*
  %48 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 27
  %49 = bitcast i32** %48 to i8**
  store i8* %malloccall47, i8** %49, align 8
  %50 = mul nuw nsw i64 %wide.trip.count93, 3
  %51 = mul nuw nsw i64 %50, %wide.trip.count97
  %mallocsize49 = shl nuw nsw i64 %51, 3
  %malloccall50 = tail call noalias nonnull i8* @malloc(i64 %mallocsize49)
  %_malloccache51 = bitcast i8* %malloccall50 to double*
  %52 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 28
  %53 = bitcast double** %52 to i8**
  store i8* %malloccall50, i8** %53, align 8
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %iv1 = phi i64 [ %iv.next2, %for.inc43 ], [ 0, %for.body11.lr.ph ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %"arrayidx13'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc25", i64 %iv1
  %arrayidx13 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv1
  %_augmented31 = call { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } @augmented_mat_mult.4(%struct.Matrix* %arrayidx13, %struct.Matrix* nonnull %"arrayidx13'ipg", %struct.Matrix* %base_positions, %struct.Matrix* nonnull %36, %struct.Matrix* nonnull %"'ipc30")
  %54 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_augmented31_malloccache, i64 %iv1
  store { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %_augmented31, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %54, align 8, !invariant.group !473
  br i1 %cmp1674, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %"'ipl37" = load double*, double** %"'ipc36", align 8
  %55 = load double*, double** %41, align 8, !tbaa !137
  %56 = load i32, i32* %nrows1.i17, align 8, !tbaa !138
  %57 = load double*, double** %data23, align 8, !tbaa !137
  %58 = load i32, i32* %nrows24, align 8, !tbaa !138
  %"'ipl" = load double*, double** %"data30'ipg", align 8
  %59 = getelementptr inbounds double*, double** %"'ipl_malloccache", i64 %iv1
  store double* %"'ipl", double** %59, align 8, !invariant.group !474
  %60 = getelementptr inbounds i32, i32* %_malloccache, i64 %iv1
  store i32 %56, i32* %60, align 4, !invariant.group !475
  %61 = getelementptr inbounds double*, double** %"'ipl37_malloccache", i64 %iv1
  store double* %"'ipl37", double** %61, align 8, !invariant.group !476
  %62 = load double*, double** %data30, align 8, !tbaa !137
  %63 = sext i32 %56 to i64
  %64 = sext i32 %58 to i64
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %iv6 = phi i64 [ %iv.next7, %for.inc40 ], [ 0, %for.cond18.preheader.lr.ph ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %65 = mul nsw i64 %iv6, %63
  %66 = mul nsw i64 %iv6, %64
  %67 = add nsw i64 %66, %iv1
  %arrayidx28 = getelementptr inbounds double, double* %57, i64 %67
  %68 = mul nuw nsw i64 %iv6, 3
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %iv8 = phi i64 [ %iv.next9, %for.body20 ], [ 0, %for.cond18.preheader ]
  %iv.next9 = add nuw nsw i64 %iv8, 1
  %69 = add nsw i64 %65, %iv8
  %arrayidx22 = getelementptr inbounds double, double* %55, i64 %69
  %70 = load double, double* %arrayidx22, align 8, !tbaa !75
  %71 = load double, double* %arrayidx28, align 8, !tbaa !75
  %mul29 = fmul fast double %71, %70
  %72 = add nuw nsw i64 %iv8, %68
  %arrayidx35 = getelementptr inbounds double, double* %62, i64 %72
  %73 = load double, double* %arrayidx35, align 8, !tbaa !75
  %add36 = fadd fast double %73, %mul29
  store double %add36, double* %arrayidx35, align 8, !tbaa !75
  %74 = mul nuw nsw i64 %iv1, %50
  %75 = add nuw nsw i64 %72, %74
  %76 = getelementptr inbounds double, double* %_malloccache51, i64 %75
  store double %71, double* %76, align 8, !invariant.group !477
  %exitcond86.not = icmp eq i64 %iv.next9, 3
  br i1 %exitcond86.not, label %for.inc40, label %for.body20, !llvm.loop !213

for.inc40:                                        ; preds = %for.body20
  %exitcond94.not = icmp eq i64 %iv.next7, %wide.trip.count93
  br i1 %exitcond94.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !214

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %exitcond98.not = icmp eq i64 %iv.next2, %wide.trip.count97
  br i1 %exitcond98.not, label %for.end45, label %for.body11, !llvm.loop !215

for.end45:                                        ; preds = %for.inc43, %fill.exit
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %22, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %"data50'ipg" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"positions'", i64 0, i32 2
  %data50 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %positions, i64 0, i32 2
  %"'ipl40" = load double*, double** %"data50'ipg", align 8
  %77 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 22
  store double* %"'ipl40", double** %77, align 8
  %78 = load double*, double** %data50, align 8, !tbaa !137
  %wide.trip.count = zext i32 %22 to i64
  %mallocsize53 = shl nuw nsw i64 %wide.trip.count, 3
  %malloccall54 = tail call noalias nonnull i8* @malloc(i64 %mallocsize53)
  %_malloccache55 = bitcast i8* %malloccall54 to double*
  %79 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 29
  %80 = bitcast double** %79 to i8**
  store i8* %malloccall54, i8** %80, align 8
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %iv11 = phi i64 [ %iv.next12, %for.body49 ], [ 0, %for.body49.lr.ph ]
  %iv.next12 = add nuw nsw i64 %iv11, 1
  %81 = mul nuw nsw i64 %iv11, 3
  %arrayidx55 = getelementptr inbounds double, double* %78, i64 %81
  %82 = load double, double* %arrayidx55, align 8, !tbaa !75
  %mul56 = fneg fast double %82
  store double %mul56, double* %arrayidx55, align 8, !tbaa !75
  %83 = getelementptr inbounds double, double* %_malloccache55, i64 %iv11
  store double %82, double* %83, align 8, !invariant.group !478
  %exitcond.not = icmp eq i64 %iv.next12, %wide.trip.count
  br i1 %exitcond.not, label %if.then61, label %for.body49, !llvm.loop !216

if.then61:                                        ; preds = %for.body49, %for.end45
  %_augmented41 = call { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } @augmented_apply_global_transform.13(%struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %positions, %struct.Matrix* %"positions'")
  %84 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 23
  store { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %_augmented41, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }* %84, align 8
  br i1 %cmp15.i, label %for.body.preheader.i28, label %delete_light_matrix_array.exit58

for.body.preheader.i28:                           ; preds = %if.then61
  %wide.trip.count.i27 = zext i32 %bone_count to i64
  %malloccall56 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %85 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 30
  %86 = bitcast i1** %85 to i8**
  store i8* %malloccall56, i8** %86, align 8
  br label %for.body.i31

for.body.i31:                                     ; preds = %for.body.i31, %for.body.preheader.i28
  %iv14 = phi i64 [ %iv.next15, %for.body.i31 ], [ 0, %for.body.preheader.i28 ]
  %iv.next15 = add nuw nsw i64 %iv14, 1
  %data.i30 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %15, i64 %iv14, i32 2
  %87 = load double*, double** %data.i30, align 8, !tbaa !137
  %cmp1.not.i = icmp eq double* %87, null
  %88 = getelementptr inbounds i8, i8* %malloccall56, i64 %iv14
  %89 = bitcast i8* %88 to i1*
  store i1 %cmp1.not.i, i1* %89, align 1, !invariant.group !479
  %exitcond.not.i34 = icmp eq i64 %iv.next15, %wide.trip.count.i27
  br i1 %exitcond.not.i34, label %for.body.preheader.i37, label %for.body.i31, !llvm.loop !184

for.body.preheader.i37:                           ; preds = %for.body.i31
  %malloccall57 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %90 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 31
  %91 = bitcast i1** %90 to i8**
  store i8* %malloccall57, i8** %91, align 8
  br label %for.body.i41

for.body.i41:                                     ; preds = %for.body.i41, %for.body.preheader.i37
  %iv17 = phi i64 [ %iv.next18, %for.body.i41 ], [ 0, %for.body.preheader.i37 ]
  %iv.next18 = add nuw nsw i64 %iv17, 1
  %data.i39 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %16, i64 %iv17, i32 2
  %92 = load double*, double** %data.i39, align 8, !tbaa !137
  %cmp1.not.i40 = icmp eq double* %92, null
  %93 = getelementptr inbounds i8, i8* %malloccall57, i64 %iv17
  %94 = bitcast i8* %93 to i1*
  store i1 %cmp1.not.i40, i1* %94, align 1, !invariant.group !480
  %exitcond.not.i44 = icmp eq i64 %iv.next18, %wide.trip.count.i27
  br i1 %exitcond.not.i44, label %for.body.preheader.i49, label %for.body.i41, !llvm.loop !184

for.body.preheader.i49:                           ; preds = %for.body.i41
  %malloccall58 = tail call noalias nonnull i8* @malloc(i64 %wide.trip.count.i27)
  %95 = getelementptr inbounds { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, i64 0, i32 32
  %96 = bitcast i1** %95 to i8**
  store i8* %malloccall58, i8** %96, align 8
  br label %for.body.i53

for.body.i53:                                     ; preds = %for.body.i53, %for.body.preheader.i49
  %iv20 = phi i64 [ %iv.next21, %for.body.i53 ], [ 0, %for.body.preheader.i49 ]
  %iv.next21 = add nuw nsw i64 %iv20, 1
  %data.i51 = getelementptr inbounds %struct.Matrix, %struct.Matrix* %17, i64 %iv20, i32 2
  %97 = load double*, double** %data.i51, align 8, !tbaa !137
  %cmp1.not.i52 = icmp eq double* %97, null
  %98 = getelementptr inbounds i8, i8* %malloccall58, i64 %iv20
  %99 = bitcast i8* %98 to i1*
  store i1 %cmp1.not.i52, i1* %99, align 1, !invariant.group !481
  %exitcond.not.i56 = icmp eq i64 %iv.next21, %wide.trip.count.i27
  br i1 %exitcond.not.i56, label %delete_light_matrix_array.exit58, label %for.body.i53, !llvm.loop !184

delete_light_matrix_array.exit58:                 ; preds = %for.body.i53, %if.then61
  %100 = load { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* }* %0, align 8
  ret { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %100
}

; Function Attrs: inlinehint nounwind uwtable mustprogress
define internal fastcc void @diffe_ZL28get_skinned_vertex_positionsiPK6MatrixPKiS1_S1_S1_iS1_PS_i.15(i32 %bone_count, %struct.Matrix* noalias nocapture readonly %base_relatives, i32* nocapture readonly %parents, %struct.Matrix* noalias nocapture readonly %inverse_base_absolutes, %struct.Matrix* noalias nocapture readonly %base_positions, %struct.Matrix* noalias nocapture readonly %weights, i32 %is_mirrored, %struct.Matrix* noalias nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* noalias nocapture %positions, %struct.Matrix* nocapture %"positions'", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg) unnamed_addr #18 {
entry:
  %0 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 12
  %1 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 19
  %2 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 20
  %3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 21
  %4 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 28
  %5 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 29
  %6 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 30
  %7 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 31
  %8 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 32
  %9 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 27
  %call.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 1
  %"call.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 0
  %cmp15.i = icmp sgt i32 %bone_count, 0
  br i1 %cmp15.i, label %for.body.preheader.i11, label %get_matrix_array.exit6

get_matrix_array.exit6:                           ; preds = %entry
  %call.i3 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 5
  %"call.i3'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 4
  %call.i9 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 3
  %"call.i9'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 2
  br label %get_matrix_array.exit12

for.body.preheader.i11:                           ; preds = %entry
  %call.i359 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 9
  %"call.i359'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 8
  %call.i963 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 7
  %"call.i963'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 6
  br label %get_matrix_array.exit12

get_matrix_array.exit12:                          ; preds = %for.body.preheader.i11, %get_matrix_array.exit6
  %10 = phi i8* [ %"call.i9'mi", %get_matrix_array.exit6 ], [ %"call.i963'mi", %for.body.preheader.i11 ]
  %call.i966 = phi i8* [ %call.i9, %get_matrix_array.exit6 ], [ %call.i963, %for.body.preheader.i11 ]
  %11 = phi i8* [ %"call.i3'mi", %get_matrix_array.exit6 ], [ %"call.i359'mi", %for.body.preheader.i11 ]
  %call.i36064 = phi i8* [ %call.i3, %get_matrix_array.exit6 ], [ %call.i359, %for.body.preheader.i11 ]
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %12 = bitcast i8* %call.i to %struct.Matrix*
  %"'ipc24" = bitcast i8* %11 to %struct.Matrix*
  %13 = bitcast i8* %call.i36064 to %struct.Matrix*
  %"'ipc27" = bitcast i8* %10 to %struct.Matrix*
  %14 = bitcast i8* %call.i966 to %struct.Matrix*
  %tapeArg26 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 11
  %tapeArg25 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 10
  br i1 %cmp15.i, label %for.body.preheader, label %for.end

for.body.preheader:                               ; preds = %get_matrix_array.exit12
  %wide.trip.count101 = zext i32 %bone_count to i64, !node !285
  br label %for.body

for.body:                                         ; preds = %for.body, %for.body.preheader
  %forward_mem.0 = phi i32 [ 16, %for.body.preheader ], [ %inc166, %for.body ]
  %forward_op.0 = phi i32 [ 3, %for.body.preheader ], [ %inc162, %for.body ]
  %iv = phi i64 [ 0, %for.body.preheader ], [ %iv.next, %for.body ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc162 = add i32 %forward_op.0, 1
  %inc166 = add i32 %forward_mem.0, 2
  %exitcond102.not = icmp eq i64 %iv.next, %wide.trip.count101
  br i1 %exitcond102.not, label %for.end, label %for.body, !llvm.loop !212

for.end:                                          ; preds = %for.body, %get_matrix_array.exit12
  %forward_mem.1 = phi i32 [ 16, %get_matrix_array.exit12 ], [ %inc166, %for.body ]
  %forward_op.1 = phi i32 [ 1, %get_matrix_array.exit12 ], [ %inc162, %for.body ]
  %15 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 24
  %mul.i13 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 25
  %mul3.i = mul i32 %15, 3
  %inc168 = add i32 %forward_op.1, 1
  %cmp.not.i = icmp eq i32 %mul.i13, %mul3.i
  br i1 %cmp.not.i, label %resize.exit, label %if.end.i

if.end.i:                                         ; preds = %for.end
  %cmp8.i = icmp sgt i32 %mul3.i, 0
  br i1 %cmp8.i, label %resize.exit.thread, label %resize.exit.thread69

resize.exit.thread:                               ; preds = %if.end.i
  %inc170 = add i32 %forward_op.1, 2
  br label %for.body.lr.ph.i

resize.exit.thread69:                             ; preds = %if.end.i
  %inc172 = add i32 %forward_mem.1, 1
  br label %fill.exit

resize.exit:                                      ; preds = %for.end
  %cmp7.i = icmp sgt i32 %mul.i13, 0
  %inc174 = add i32 %forward_mem.1, 1
  br i1 %cmp7.i, label %for.body.lr.ph.i, label %fill.exit

for.body.lr.ph.i:                                 ; preds = %resize.exit, %resize.exit.thread
  %forward_mem.2 = phi i32 [ %forward_mem.1, %resize.exit.thread ], [ %inc174, %resize.exit ]
  %forward_op.2 = phi i32 [ %inc170, %resize.exit.thread ], [ %inc168, %resize.exit ]
  %inc176 = add i32 %forward_mem.2, 1
  br label %fill.exit

fill.exit:                                        ; preds = %for.body.lr.ph.i, %resize.exit, %resize.exit.thread69
  %_cache.0 = phi i8 [ 0, %for.body.lr.ph.i ], [ 2, %resize.exit ], [ 1, %resize.exit.thread69 ]
  %forward_mem.3 = phi i32 [ %inc176, %for.body.lr.ph.i ], [ %inc174, %resize.exit ], [ %inc172, %resize.exit.thread69 ]
  %forward_op.3 = phi i32 [ %forward_op.2, %for.body.lr.ph.i ], [ %inc168, %resize.exit ], [ %inc168, %resize.exit.thread69 ]
  %call.i16 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 18
  %"call.i16'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 17
  %"'ipc41" = bitcast i8* %"call.i16'mi" to %struct.Matrix*
  %16 = bitcast i8* %call.i16 to %struct.Matrix*
  %inc180 = add i32 %forward_op.3, 2
  %call4.i = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 16
  %"call4.i'mi" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 15
  br i1 %cmp15.i, label %for.body11.lr.ph, label %for.end45

for.body11.lr.ph:                                 ; preds = %fill.exit
  %cmp1674 = icmp sgt i32 %15, 0
  %wide.trip.count97 = zext i32 %bone_count to i64, !node !285
  %wide.trip.count93 = zext i32 %15 to i64
  %inc196 = add i32 %forward_op.3, 10
  br label %for.body11

for.body11:                                       ; preds = %for.inc43, %for.body11.lr.ph
  %forward_mem.4 = phi i32 [ %forward_mem.3, %for.body11.lr.ph ], [ %forward_mem.7, %for.inc43 ]
  %forward_op.4 = phi i32 [ %inc196, %for.body11.lr.ph ], [ %forward_op.7, %for.inc43 ]
  %iv1 = phi i64 [ 0, %for.body11.lr.ph ], [ %iv.next2, %for.inc43 ]
  %iv.next2 = add nuw nsw i64 %iv1, 1
  %inc198 = add i32 %forward_op.4, 1
  %inc202 = add i32 %forward_mem.4, 2
  br i1 %cmp1674, label %for.cond18.preheader.lr.ph, label %for.inc43

for.cond18.preheader.lr.ph:                       ; preds = %for.body11
  %inc214 = add i32 %forward_mem.4, 8
  br label %for.cond18.preheader

for.cond18.preheader:                             ; preds = %for.inc40, %for.cond18.preheader.lr.ph
  %forward_mem.5 = phi i32 [ %inc214, %for.cond18.preheader.lr.ph ], [ %inc240.lcssa, %for.inc40 ]
  %forward_op.5 = phi i32 [ %inc198, %for.cond18.preheader.lr.ph ], [ %inc254.lcssa, %for.inc40 ]
  %iv6 = phi i64 [ 0, %for.cond18.preheader.lr.ph ], [ %iv.next7, %for.inc40 ]
  %iv.next7 = add nuw nsw i64 %iv6, 1
  %inc220 = add i32 %forward_op.5, 3
  br label %for.body20

for.body20:                                       ; preds = %for.body20, %for.cond18.preheader
  %forward_mem.6 = phi i32 [ %forward_mem.5, %for.cond18.preheader ], [ %inc240, %for.body20 ]
  %forward_op.6 = phi i32 [ %inc220, %for.cond18.preheader ], [ %inc254, %for.body20 ]
  %iv8 = phi i64 [ 0, %for.cond18.preheader ], [ %iv.next9, %for.body20 ]
  %iv.next9 = add nuw nsw i64 %iv8, 1
  %inc240 = add i32 %forward_mem.6, 2
  %inc254 = add i32 %forward_op.6, 15
  %exitcond86.not = icmp eq i64 %iv.next9, 3
  br i1 %exitcond86.not, label %for.inc40, label %for.body20, !llvm.loop !213

for.inc40:                                        ; preds = %for.body20
  %inc240.lcssa = phi i32 [ %inc240, %for.body20 ]
  %inc254.lcssa = phi i32 [ %inc254, %for.body20 ]
  %exitcond94.not = icmp eq i64 %iv.next7, %wide.trip.count93
  br i1 %exitcond94.not, label %for.inc43, label %for.cond18.preheader, !llvm.loop !214

for.inc43:                                        ; preds = %for.inc40, %for.body11
  %forward_mem.7 = phi i32 [ %inc202, %for.body11 ], [ %inc240.lcssa, %for.inc40 ]
  %forward_op.7 = phi i32 [ %inc198, %for.body11 ], [ %inc254.lcssa, %for.inc40 ]
  %exitcond98.not = icmp eq i64 %iv.next2, %wide.trip.count97
  br i1 %exitcond98.not, label %for.end45, label %for.body11, !llvm.loop !215

for.end45:                                        ; preds = %for.inc43, %fill.exit
  %forward_mem.8 = phi i32 [ %forward_mem.3, %fill.exit ], [ %forward_mem.7, %for.inc43 ]
  %forward_op.8 = phi i32 [ %inc180, %fill.exit ], [ %forward_op.7, %for.inc43 ]
  %tobool.not = icmp ne i32 %is_mirrored, 0
  %cmp4871 = icmp sgt i32 %15, 0
  %or.cond = and i1 %tobool.not, %cmp4871
  %inc256 = add i32 %forward_op.8, 1
  br i1 %or.cond, label %for.body49.lr.ph, label %if.then61

for.body49.lr.ph:                                 ; preds = %for.end45
  %wide.trip.count = zext i32 %15 to i64
  %inc260 = add i32 %forward_op.8, 3
  br label %for.body49

for.body49:                                       ; preds = %for.body49, %for.body49.lr.ph
  %forward_mem.9 = phi i32 [ %forward_mem.8, %for.body49.lr.ph ], [ %inc268, %for.body49 ]
  %forward_op.9 = phi i32 [ %inc260, %for.body49.lr.ph ], [ %inc264, %for.body49 ]
  %iv11 = phi i64 [ 0, %for.body49.lr.ph ], [ %iv.next12, %for.body49 ]
  %iv.next12 = add nuw nsw i64 %iv11, 1
  %inc264 = add i32 %forward_op.9, 2
  %inc268 = add i32 %forward_mem.9, 2
  %exitcond.not = icmp eq i64 %iv.next12, %wide.trip.count
  br i1 %exitcond.not, label %if.then61, label %for.body49, !llvm.loop !216

if.then61:                                        ; preds = %for.body49, %for.end45
  %forward_mem.10 = phi i32 [ %forward_mem.8, %for.end45 ], [ %inc268, %for.body49 ]
  %forward_op.10 = phi i32 [ %inc256, %for.end45 ], [ %inc264, %for.body49 ]
  %tapeArg87 = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 23
  %inc270 = add i32 %forward_mem.10, 1
  br i1 %cmp15.i, label %for.body.preheader.i28, label %invertdelete_light_matrix_array.exit58

for.body.preheader.i28:                           ; preds = %if.then61
  %wide.trip.count.i27 = zext i32 %bone_count to i64, !node !285
  %inc274 = add i32 %forward_op.10, 2
  br label %for.body.i31

for.body.i31:                                     ; preds = %for.body.i31, %for.body.preheader.i28
  %forward_mem.11 = phi i32 [ %inc270, %for.body.preheader.i28 ], [ %inc280, %for.body.i31 ]
  %forward_op.11 = phi i32 [ %inc274, %for.body.preheader.i28 ], [ %inc276, %for.body.i31 ]
  %iv14 = phi i64 [ 0, %for.body.preheader.i28 ], [ %iv.next15, %for.body.i31 ]
  %iv.next15 = add nuw nsw i64 %iv14, 1
  %inc276 = add i32 %forward_op.11, 1
  %inc280 = add i32 %forward_mem.11, 2
  %exitcond.not.i34 = icmp eq i64 %iv.next15, %wide.trip.count.i27
  br i1 %exitcond.not.i34, label %for.body.preheader.i37, label %for.body.i31, !llvm.loop !184

for.body.preheader.i37:                           ; preds = %for.body.i31
  %forward_op.11.lcssa = phi i32 [ %forward_op.11, %for.body.i31 ]
  %inc280.lcssa = phi i32 [ %inc280, %for.body.i31 ]
  %inc284 = add i32 %forward_op.11.lcssa, 3
  br label %for.body.i41

for.body.i41:                                     ; preds = %for.body.i41, %for.body.preheader.i37
  %forward_mem.12 = phi i32 [ %inc280.lcssa, %for.body.preheader.i37 ], [ %inc290, %for.body.i41 ]
  %forward_op.12 = phi i32 [ %inc284, %for.body.preheader.i37 ], [ %inc286, %for.body.i41 ]
  %iv17 = phi i64 [ 0, %for.body.preheader.i37 ], [ %iv.next18, %for.body.i41 ]
  %iv.next18 = add nuw nsw i64 %iv17, 1
  %inc286 = add i32 %forward_op.12, 1
  %inc290 = add i32 %forward_mem.12, 2
  %exitcond.not.i44 = icmp eq i64 %iv.next18, %wide.trip.count.i27
  br i1 %exitcond.not.i44, label %for.body.preheader.i49, label %for.body.i41, !llvm.loop !184

for.body.preheader.i49:                           ; preds = %for.body.i41
  %forward_op.12.lcssa = phi i32 [ %forward_op.12, %for.body.i41 ]
  %inc290.lcssa = phi i32 [ %inc290, %for.body.i41 ]
  %inc294 = add i32 %forward_op.12.lcssa, 3
  br label %for.body.i53

for.body.i53:                                     ; preds = %for.body.i53, %for.body.preheader.i49
  %forward_mem.13 = phi i32 [ %inc290.lcssa, %for.body.preheader.i49 ], [ %inc300, %for.body.i53 ]
  %forward_op.13 = phi i32 [ %inc294, %for.body.preheader.i49 ], [ %inc296, %for.body.i53 ]
  %iv20 = phi i64 [ 0, %for.body.preheader.i49 ], [ %iv.next21, %for.body.i53 ]
  %iv.next21 = add nuw nsw i64 %iv20, 1
  %inc296 = add i32 %forward_op.13, 1
  %inc300 = add i32 %forward_mem.13, 2
  %exitcond.not.i56 = icmp eq i64 %iv.next21, %wide.trip.count.i27
  br i1 %exitcond.not.i56, label %invertdelete_light_matrix_array.exit58, label %for.body.i53, !llvm.loop !184

invertentry:                                      ; preds = %invertfor.body.preheader.i11, %invertget_matrix_array.exit6
  tail call void @free(i8* nonnull %"call.i'mi")
  tail call void @free(i8* %call.i)
  %17 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.14, i32 %reverse_op.0, i32 %forward_mem.14, i32 %reverse_mem.0)
  ret void

invertget_matrix_array.exit6:                     ; preds = %invertget_matrix_array.exit12
  %"call.i9'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 2
  tail call void @free(i8* nonnull %"call.i9'mi_unwrap")
  %call.i9_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 3
  tail call void @free(i8* %call.i9_unwrap)
  %"call.i3'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 4
  tail call void @free(i8* nonnull %"call.i3'mi_unwrap")
  %call.i3_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 5
  tail call void @free(i8* %call.i3_unwrap)
  br label %invertentry

invertfor.body.preheader.i11:                     ; preds = %invertget_matrix_array.exit12
  %"call.i963'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 6
  tail call void @free(i8* nonnull %"call.i963'mi_unwrap")
  %call.i963_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 7
  tail call void @free(i8* %call.i963_unwrap)
  %"call.i359'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 8
  tail call void @free(i8* nonnull %"call.i359'mi_unwrap")
  %call.i359_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 9
  tail call void @free(i8* %call.i359_unwrap)
  br label %invertentry

invertget_matrix_array.exit12:                    ; preds = %invertfor.end, %invertfor.body.preheader
  %reverse_mem.0 = phi i32 [ %inc308, %invertfor.body.preheader ], [ %inc340, %invertfor.end ]
  %reverse_op.0 = phi i32 [ %inc328.lcssa, %invertfor.body.preheader ], [ %reverse_op.2, %invertfor.end ]
  call void @differelatives_to_absolutes(i32 %bone_count, %struct.Matrix* %12, %struct.Matrix* %"'ipc", i32* %parents, %struct.Matrix* %13, %struct.Matrix* %"'ipc24", { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* } %tapeArg25), !node !285
  call void @diffeget_posed_relatives(i32 %bone_count, %struct.Matrix* %base_relatives, %struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %12, %struct.Matrix* %"'ipc", { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* } %tapeArg26), !node !285
  br i1 %cmp15.i, label %invertfor.body.preheader.i11, label %invertget_matrix_array.exit6

invertfor.body.preheader:                         ; preds = %invertfor.body
  %reverse_mem.1.lcssa = phi i32 [ %reverse_mem.1, %invertfor.body ]
  %inc328.lcssa = phi i32 [ %inc328, %invertfor.body ]
  %inc308 = add i32 %reverse_mem.1.lcssa, 11
  %18 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0 to i8*
  tail call void @free(i8* nonnull %18)
  br label %invertget_matrix_array.exit12

invertfor.body:                                   ; preds = %mergeinvertfor.body_for.end.loopexit, %incinvertfor.body
  %"iv'ac.0.in" = phi i64 [ %wide.trip.count101_unwrap, %mergeinvertfor.body_for.end.loopexit ], [ %"iv'ac.0", %incinvertfor.body ]
  %reverse_mem.1 = phi i32 [ %inc338, %mergeinvertfor.body_for.end.loopexit ], [ %inc334, %incinvertfor.body ]
  %reverse_op.1.in = phi i32 [ %reverse_op.2, %mergeinvertfor.body_for.end.loopexit ], [ %inc328, %incinvertfor.body ]
  %"iv'ac.0" = add nsw i64 %"iv'ac.0.in", -1
  %arrayidx_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %13, i64 %"iv'ac.0", !node !285
  %"arrayidx'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc24", i64 %"iv'ac.0", !node !285
  %arrayidx4_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %inverse_base_absolutes, i64 %"iv'ac.0", !node !285
  %arrayidx6_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %14, i64 %"iv'ac.0", !node !285
  %"arrayidx6'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc27", i64 %"iv'ac.0", !node !285
  %_unwrap29 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %0, i64 %"iv'ac.0", !node !285
  %tapeArg28_unwrap = load { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_unwrap29, align 8, !invariant.group !482, !node !285
  call void @diffemat_mult.10(%struct.Matrix* %arrayidx_unwrap, %struct.Matrix* %"arrayidx'ipg_unwrap", %struct.Matrix* %arrayidx4_unwrap, %struct.Matrix* %arrayidx6_unwrap, %struct.Matrix* %"arrayidx6'ipg_unwrap", { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg28_unwrap), !node !285
  %19 = icmp eq i64 %"iv'ac.0", 0
  %inc328 = add i32 %reverse_op.1.in, 2
  br i1 %19, label %invertfor.body.preheader, label %incinvertfor.body

incinvertfor.body:                                ; preds = %invertfor.body
  %inc334 = add i32 %reverse_mem.1, 11
  br label %invertfor.body

mergeinvertfor.body_for.end.loopexit:             ; preds = %invertfor.end
  %wide.trip.count101_unwrap = zext i32 %bone_count to i64, !node !285
  %inc338 = add i32 %reverse_mem.2, 2
  br label %invertfor.body

invertfor.end:                                    ; preds = %invertfill.exit, %invertresize.exit.thread
  br i1 %cmp15.i, label %mergeinvertfor.body_for.end.loopexit, label %invertget_matrix_array.exit12

invertresize.exit.thread:                         ; preds = %invertfill.exit
  %"call.i14'mi_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 13
  tail call void @free(i8* nonnull %"call.i14'mi_unwrap")
  %call.i14_unwrap = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 14
  tail call void @free(i8* %call.i14_unwrap)
  br label %invertfor.end

invertfill.exit:                                  ; preds = %invertfor.end45, %invertfor.body11.lr.ph
  %reverse_mem.2 = phi i32 [ %inc372, %invertfor.body11.lr.ph ], [ %reverse_mem.7, %invertfor.end45 ]
  %reverse_op.2 = phi i32 [ %inc386.lcssa, %invertfor.body11.lr.ph ], [ %reverse_op.7, %invertfor.end45 ]
  tail call void @free(i8* nonnull %"call4.i'mi")
  tail call void @free(i8* %call4.i)
  tail call void @free(i8* nonnull %"call.i16'mi")
  tail call void @free(i8* %call.i16)
  %inc340 = add i32 %reverse_mem.2, 1
  %cond = icmp eq i8 %_cache.0, 0
  %cond.not = xor i1 %cond, true
  %brmerge = or i1 %cond.not, %cmp.not.i
  br i1 %brmerge, label %invertfor.end, label %invertresize.exit.thread

invertfor.body11.lr.ph:                           ; preds = %invertfor.body11
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.body11 ]
  %inc386.lcssa = phi i32 [ %inc386, %invertfor.body11 ]
  %20 = bitcast { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %1 to i8*
  tail call void @free(i8* nonnull %20)
  %21 = bitcast double** %2 to i8*
  tail call void @free(i8* nonnull %21)
  %22 = bitcast double** %3 to i8*
  tail call void @free(i8* nonnull %22)
  %23 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %23)
  %inc372 = add i32 %reverse_mem.3.lcssa, 22
  %24 = bitcast i32* %9 to i8*
  tail call void @free(i8* nonnull %24)
  br label %invertfill.exit

invertfor.body11:                                 ; preds = %invertfor.inc43, %invertfor.cond18.preheader.lr.ph
  %reverse_mem.3 = phi i32 [ %inc394, %invertfor.cond18.preheader.lr.ph ], [ %inc552, %invertfor.inc43 ]
  %reverse_op.3 = phi i32 [ %inc396, %invertfor.cond18.preheader.lr.ph ], [ %reverse_op.6, %invertfor.inc43 ]
  %arrayidx13_unwrap = getelementptr inbounds %struct.Matrix, %struct.Matrix* %14, i64 %"iv1'ac.0", !node !285
  %"arrayidx13'ipg_unwrap" = getelementptr inbounds %struct.Matrix, %struct.Matrix* %"'ipc27", i64 %"iv1'ac.0", !node !285
  %_unwrap46 = getelementptr inbounds { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %1, i64 %"iv1'ac.0", !node !285
  %tapeArg42_unwrap = load { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }* %_unwrap46, align 8, !invariant.group !483, !node !285
  call void @diffemat_mult.10(%struct.Matrix* %arrayidx13_unwrap, %struct.Matrix* %"arrayidx13'ipg_unwrap", %struct.Matrix* %base_positions, %struct.Matrix* %16, %struct.Matrix* %"'ipc41", { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** } %tapeArg42_unwrap), !node !285
  %25 = icmp eq i64 %"iv1'ac.0", 0
  %inc386 = add i32 %reverse_op.3, 1
  br i1 %25, label %invertfor.body11.lr.ph, label %incinvertfor.body11

incinvertfor.body11:                              ; preds = %invertfor.body11
  %inc388 = add i32 %reverse_mem.3, 7
  br label %invertfor.inc43

invertfor.cond18.preheader.lr.ph:                 ; preds = %invertfor.cond18.preheader
  %reverse_mem.4.in.lcssa.lcssa = phi i32 [ %reverse_mem.4.in.lcssa, %invertfor.cond18.preheader ]
  %reverse_op.4.lcssa.lcssa = phi i32 [ %reverse_op.4.lcssa, %invertfor.cond18.preheader ]
  %inc396 = add i32 %reverse_op.4.lcssa.lcssa, 26
  %inc394 = add i32 %reverse_mem.4.in.lcssa.lcssa, 44
  br label %invertfor.body11

invertfor.cond18.preheader:                       ; preds = %invertfor.body20
  %reverse_mem.4.in.lcssa = phi i32 [ %reverse_mem.4.in, %invertfor.body20 ]
  %reverse_op.4.lcssa = phi i32 [ %reverse_op.4, %invertfor.body20 ]
  %26 = icmp eq i64 %"iv6'ac.1", 0
  br i1 %26, label %invertfor.cond18.preheader.lr.ph, label %incinvertfor.cond18.preheader

incinvertfor.cond18.preheader:                    ; preds = %invertfor.cond18.preheader
  %inc400 = add i32 %reverse_op.4.lcssa, 27
  %inc402 = add i32 %reverse_mem.4.in.lcssa, 46
  br label %invertfor.inc40

invertfor.body20:                                 ; preds = %invertfor.inc40, %incinvertfor.body20
  %"iv8'ac.1" = phi i64 [ 2, %invertfor.inc40 ], [ %38, %incinvertfor.body20 ]
  %reverse_mem.4.in = phi i32 [ %reverse_mem.5, %invertfor.inc40 ], [ %inc538, %incinvertfor.body20 ]
  %reverse_op.4 = phi i32 [ %reverse_op.5, %invertfor.inc40 ], [ %inc540, %incinvertfor.body20 ]
  %_unwrap59 = getelementptr inbounds double*, double** %2, i64 %"iv1'ac.0", !node !285
  %"'il_phi5_unwrap" = load double*, double** %_unwrap59, align 8, !invariant.group !484, !node !285
  %_unwrap60 = mul nuw nsw i64 %"iv6'ac.1", 3
  %_unwrap61 = add nuw nsw i64 %"iv8'ac.1", %_unwrap60
  %"arrayidx35'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi5_unwrap", i64 %_unwrap61, !node !285
  %27 = load double, double* %"arrayidx35'ipg_unwrap", align 8, !node !285
  %28 = mul nuw nsw i64 %wide.trip.count93_unwrap79, 3
  %29 = mul nuw nsw i64 %"iv1'ac.0", %28, !node !285
  %30 = add nuw nsw i64 %_unwrap61, %29, !node !285
  %31 = getelementptr inbounds double, double* %4, i64 %30, !node !285
  %32 = load double, double* %31, align 8, !invariant.group !485, !node !285
  %m1diffe = fmul fast double %27, %32, !node !285
  %_unwrap69 = getelementptr inbounds double*, double** %3, i64 %"iv1'ac.0", !node !285
  %"'il_phi3_unwrap" = load double*, double** %_unwrap69, align 8, !invariant.group !486, !node !285
  %33 = getelementptr inbounds i32, i32* %9, i64 %"iv1'ac.0", !node !285
  %34 = load i32, i32* %33, align 4, !invariant.group !487, !node !285
  %_unwrap75 = sext i32 %34 to i64, !node !285
  %_unwrap76 = mul nsw i64 %"iv6'ac.1", %_unwrap75, !node !285
  %_unwrap77 = add nsw i64 %_unwrap76, %"iv8'ac.1", !node !285
  %"arrayidx22'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi3_unwrap", i64 %_unwrap77, !node !285
  %35 = load double, double* %"arrayidx22'ipg_unwrap", align 8, !node !285
  %36 = fadd fast double %35, %m1diffe, !node !285
  store double %36, double* %"arrayidx22'ipg_unwrap", align 8
  %37 = icmp eq i64 %"iv8'ac.1", 0
  br i1 %37, label %invertfor.cond18.preheader, label %incinvertfor.body20

incinvertfor.body20:                              ; preds = %invertfor.body20
  %inc538 = add i32 %reverse_mem.4.in, 44
  %38 = add nsw i64 %"iv8'ac.1", -1
  %inc540 = add i32 %reverse_op.4, 26
  br label %invertfor.body20

invertfor.inc40:                                  ; preds = %invertfor.inc43.loopexit, %incinvertfor.cond18.preheader
  %"iv6'ac.1.in" = phi i64 [ %wide.trip.count93_unwrap79, %invertfor.inc43.loopexit ], [ %"iv6'ac.1", %incinvertfor.cond18.preheader ]
  %reverse_mem.5 = phi i32 [ %inc550, %invertfor.inc43.loopexit ], [ %inc402, %incinvertfor.cond18.preheader ]
  %reverse_op.5 = phi i32 [ %inc548, %invertfor.inc43.loopexit ], [ %inc400, %incinvertfor.cond18.preheader ]
  %"iv6'ac.1" = add nsw i64 %"iv6'ac.1.in", -1
  br label %invertfor.body20

invertfor.inc43.loopexit:                         ; preds = %invertfor.inc43
  %wide.trip.count93_unwrap79 = zext i32 %15 to i64
  %inc548 = add i32 %reverse_op.6.in, 2
  %inc550 = add i32 %reverse_mem.6.in, 4
  br label %invertfor.inc40

invertfor.inc43:                                  ; preds = %mergeinvertfor.body11_for.end45.loopexit, %incinvertfor.body11
  %"iv1'ac.0.in" = phi i64 [ %wide.trip.count97_unwrap81, %mergeinvertfor.body11_for.end45.loopexit ], [ %"iv1'ac.0", %incinvertfor.body11 ]
  %reverse_mem.6.in = phi i32 [ %reverse_mem.7, %mergeinvertfor.body11_for.end45.loopexit ], [ %inc388, %incinvertfor.body11 ]
  %reverse_op.6.in = phi i32 [ %reverse_op.7, %mergeinvertfor.body11_for.end45.loopexit ], [ %inc386, %incinvertfor.body11 ]
  %reverse_op.6 = add i32 %reverse_op.6.in, 1
  %"iv1'ac.0" = add nsw i64 %"iv1'ac.0.in", -1
  %inc552 = add i32 %reverse_mem.6.in, 2
  br i1 %cmp4871, label %invertfor.inc43.loopexit, label %invertfor.body11

mergeinvertfor.body11_for.end45.loopexit:         ; preds = %invertfor.end45
  %wide.trip.count97_unwrap81 = zext i32 %bone_count to i64, !node !285
  br label %invertfor.inc43

invertfor.end45:                                  ; preds = %invertdelete_matrix.exit, %invertfor.body49.lr.ph
  %reverse_mem.7 = phi i32 [ %inc560, %invertfor.body49.lr.ph ], [ %reverse_mem.9, %invertdelete_matrix.exit ]
  %reverse_op.7 = phi i32 [ %inc598.lcssa, %invertfor.body49.lr.ph ], [ %reverse_op.9, %invertdelete_matrix.exit ]
  br i1 %cmp15.i, label %mergeinvertfor.body11_for.end45.loopexit, label %invertfill.exit

invertfor.body49.lr.ph:                           ; preds = %invertfor.body49
  %reverse_mem.8.in.lcssa = phi i32 [ %reverse_mem.8.in, %invertfor.body49 ]
  %inc598.lcssa = phi i32 [ %inc598, %invertfor.body49 ]
  %inc560 = add i32 %reverse_mem.8.in.lcssa, 17
  %39 = bitcast double* %5 to i8*
  tail call void @free(i8* nonnull %39)
  br label %invertfor.end45

invertfor.body49:                                 ; preds = %mergeinvertfor.body49_if.then61.loopexit, %incinvertfor.body49
  %"iv11'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %mergeinvertfor.body49_if.then61.loopexit ], [ %"iv11'ac.0", %incinvertfor.body49 ]
  %reverse_mem.8.in = phi i32 [ %reverse_mem.9, %mergeinvertfor.body49_if.then61.loopexit ], [ %inc600, %incinvertfor.body49 ]
  %reverse_op.8.in = phi i32 [ %reverse_op.9, %mergeinvertfor.body49_if.then61.loopexit ], [ %inc598, %incinvertfor.body49 ]
  %"iv11'ac.0" = add nsw i64 %"iv11'ac.0.in", -1
  %"'il_phi10_unwrap" = extractvalue { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8**, i8**, double**, { i8*, i8*, double**, double**, double**, i32, i32, i1, i1, i32*, i32*, double*, double*, double**, double** }*, i32*, i1*, i32* }, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, double*, { i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, i1, i1, double*, double*, double*, double* }, { i8*, i8*, i1, i1, double*, double*, double*, double* }, i8*, i8*, double, double, double }*, double***, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double** }*, double*, i32, i32*, i32* }, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, i8*, i8*, i8*, i8*, i8*, i8*, { i8*, i8*, double**, double**, i32, i32, i1, i1, i32*, double*, double** }*, double**, double**, double*, { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* }, i32, i32, i1, i32*, double*, double*, i1*, i1*, i1* } %tapeArg, 22
  %_unwrap84 = mul nuw nsw i64 %"iv11'ac.0", 3
  %"arrayidx55'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi10_unwrap", i64 %_unwrap84
  %40 = load double, double* %"arrayidx55'ipg_unwrap", align 8
  %41 = fneg fast double %40
  store double %41, double* %"arrayidx55'ipg_unwrap", align 8
  %42 = icmp eq i64 %"iv11'ac.0", 0
  %inc598 = add i32 %reverse_op.8.in, 6
  br i1 %42, label %invertfor.body49.lr.ph, label %incinvertfor.body49

incinvertfor.body49:                              ; preds = %invertfor.body49
  %inc600 = add i32 %reverse_mem.8.in, 16
  br label %invertfor.body49

mergeinvertfor.body49_if.then61.loopexit:         ; preds = %invertdelete_matrix.exit
  %wide.trip.count_unwrap = zext i32 %15 to i64
  br label %invertfor.body49

invertdelete_matrix.exit:                         ; preds = %invertdelete_light_matrix_array.exit58, %invertfor.body.preheader.i28
  %reverse_mem.9 = phi i32 [ %inc614, %invertfor.body.preheader.i28 ], [ 0, %invertdelete_light_matrix_array.exit58 ]
  %reverse_op.9 = phi i32 [ %inc618, %invertfor.body.preheader.i28 ], [ 0, %invertdelete_light_matrix_array.exit58 ]
  call void @diffeapply_global_transform.16(%struct.Matrix* %pose_params, %struct.Matrix* %"pose_params'", %struct.Matrix* %positions, %struct.Matrix* %"positions'", { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg87), !node !285
  br i1 %or.cond, label %mergeinvertfor.body49_if.then61.loopexit, label %invertfor.end45

invertfor.body.preheader.i28:                     ; preds = %invertfor.inc.i
  %reverse_mem.10.lcssa = phi i32 [ %reverse_mem.10, %invertfor.inc.i ]
  %reverse_op.10.lcssa = phi i32 [ %reverse_op.10, %invertfor.inc.i ]
  %inc618 = add i32 %reverse_op.10.lcssa, 3
  %inc614 = add i32 %reverse_mem.10.lcssa, 7
  %43 = bitcast i1* %6 to i8*
  tail call void @free(i8* nonnull %43)
  br label %invertdelete_matrix.exit

incinvertfor.body.i31:                            ; preds = %invertfor.inc.i
  %44 = add nsw i64 %"iv14'ac.0", -1, !node !285
  %inc622 = add i32 %reverse_op.10, 4
  %inc624 = add i32 %reverse_mem.10, 6
  br label %invertfor.inc.i

invertfor.inc.i:                                  ; preds = %invertfor.body.preheader.i37, %incinvertfor.body.i31
  %"iv14'ac.0" = phi i64 [ %_unwrap111, %invertfor.body.preheader.i37 ], [ %44, %incinvertfor.body.i31 ]
  %reverse_mem.10 = phi i32 [ %inc644, %invertfor.body.preheader.i37 ], [ %inc624, %incinvertfor.body.i31 ]
  %reverse_op.10 = phi i32 [ %inc636, %invertfor.body.preheader.i37 ], [ %inc622, %incinvertfor.body.i31 ]
  %45 = icmp eq i64 %"iv14'ac.0", 0
  br i1 %45, label %invertfor.body.preheader.i28, label %incinvertfor.body.i31

invertfor.body.preheader.i37:                     ; preds = %invertfor.inc.i45
  %reverse_mem.11.lcssa = phi i32 [ %reverse_mem.11, %invertfor.inc.i45 ]
  %reverse_op.11.in.lcssa = phi i32 [ %reverse_op.11.in, %invertfor.inc.i45 ]
  %46 = bitcast i1* %7 to i8*
  tail call void @free(i8* nonnull %46)
  %inc636 = add i32 %reverse_op.11.in.lcssa, 8
  %inc644 = add i32 %reverse_mem.11.lcssa, 8
  br label %invertfor.inc.i

incinvertfor.body.i41:                            ; preds = %invertfor.inc.i45
  %47 = add nsw i64 %"iv17'ac.0", -1, !node !285
  %inc654 = add i32 %reverse_mem.11, 6
  br label %invertfor.inc.i45

invertfor.inc.i45:                                ; preds = %invertfor.body.preheader.i49, %incinvertfor.body.i41
  %"iv17'ac.0" = phi i64 [ %_unwrap111, %invertfor.body.preheader.i49 ], [ %47, %incinvertfor.body.i41 ]
  %reverse_mem.11 = phi i32 [ %inc674, %invertfor.body.preheader.i49 ], [ %inc654, %incinvertfor.body.i41 ]
  %reverse_op.11.in = phi i32 [ %reverse_op.12.lcssa, %invertfor.body.preheader.i49 ], [ %reverse_op.11, %incinvertfor.body.i41 ]
  %reverse_op.11 = add i32 %reverse_op.11.in, 4
  %48 = icmp eq i64 %"iv17'ac.0", 0
  br i1 %48, label %invertfor.body.preheader.i37, label %incinvertfor.body.i41

invertfor.body.preheader.i49:                     ; preds = %invertfor.inc.i57
  %reverse_mem.12.lcssa = phi i32 [ %reverse_mem.12, %invertfor.inc.i57 ]
  %reverse_op.12.lcssa = phi i32 [ %reverse_op.12, %invertfor.inc.i57 ]
  %49 = bitcast i1* %8 to i8*
  tail call void @free(i8* nonnull %49)
  %inc674 = add i32 %reverse_mem.12.lcssa, 8
  br label %invertfor.inc.i45

incinvertfor.body.i53:                            ; preds = %invertfor.inc.i57
  %50 = add nsw i64 %"iv20'ac.0", -1, !node !285
  %inc682 = add i32 %reverse_op.12, 4
  %inc684 = add i32 %reverse_mem.12, 6
  br label %invertfor.inc.i57

invertfor.inc.i57:                                ; preds = %invertdelete_light_matrix_array.exit58.loopexit, %incinvertfor.body.i53
  %"iv20'ac.0" = phi i64 [ %_unwrap111, %invertdelete_light_matrix_array.exit58.loopexit ], [ %50, %incinvertfor.body.i53 ]
  %reverse_mem.12 = phi i32 [ 1, %invertdelete_light_matrix_array.exit58.loopexit ], [ %inc684, %incinvertfor.body.i53 ]
  %reverse_op.12 = phi i32 [ 1, %invertdelete_light_matrix_array.exit58.loopexit ], [ %inc682, %incinvertfor.body.i53 ]
  %51 = icmp eq i64 %"iv20'ac.0", 0
  br i1 %51, label %invertfor.body.preheader.i49, label %incinvertfor.body.i53

invertdelete_light_matrix_array.exit58.loopexit:  ; preds = %invertdelete_light_matrix_array.exit58
  %wide.trip.count.i27_unwrap110 = zext i32 %bone_count to i64, !node !285
  %_unwrap111 = add nsw i64 %wide.trip.count.i27_unwrap110, -1, !node !285
  br label %invertfor.inc.i57

invertdelete_light_matrix_array.exit58:           ; preds = %for.body.i53, %if.then61
  %forward_mem.14 = phi i32 [ %inc270, %if.then61 ], [ %inc300, %for.body.i53 ]
  %forward_op.14 = phi i32 [ %forward_op.10, %if.then61 ], [ %inc296, %for.body.i53 ]
  br i1 %cmp15.i, label %invertdelete_light_matrix_array.exit58.loopexit, label %invertdelete_matrix.exit
}

; Function Attrs: nounwind uwtable mustprogress
define internal void @diffeapply_global_transform.16(%struct.Matrix* nocapture readonly %pose_params, %struct.Matrix* nocapture %"pose_params'", %struct.Matrix* nocapture readonly %positions, %struct.Matrix* nocapture %"positions'", { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg) local_unnamed_addr #5 {
entry:
  %0 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 9
  %1 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 10
  %2 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 17
  %3 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 13
  %4 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 14
  %call.i = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 5
  %"call.i'mi" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 4
  %"'ipc" = bitcast i8* %"call.i'mi" to %struct.Matrix*
  %5 = bitcast i8* %call.i to %struct.Matrix*
  %"call4.i'mi" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 3
  %"'il_phi1" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 0
  %6 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 12
  %"'ipc16" = bitcast i8* %"call4.i'mi" to double*
  %7 = sext i32 %6 to i64
  br label %for.cond1.preheader

for.cond1.preheader:                              ; preds = %for.inc12, %entry
  %forward_mem.0 = phi i32 [ 11, %entry ], [ %inc121.lcssa, %for.inc12 ]
  %forward_op.0 = phi i32 [ 0, %entry ], [ %inc125.lcssa, %for.inc12 ]
  %iv = phi i64 [ 0, %entry ], [ %iv.next, %for.inc12 ]
  %iv.next = add nuw nsw i64 %iv, 1
  %inc97 = add i32 %forward_op.0, 3
  br label %for.body3

for.body3:                                        ; preds = %for.body3, %for.cond1.preheader
  %forward_mem.1 = phi i32 [ %forward_mem.0, %for.cond1.preheader ], [ %inc121, %for.body3 ]
  %forward_op.1 = phi i32 [ %inc97, %for.cond1.preheader ], [ %inc125, %for.body3 ]
  %iv2 = phi i64 [ 0, %for.cond1.preheader ], [ %iv.next3, %for.body3 ]
  %iv.next3 = add nuw nsw i64 %iv2, 1
  %inc121 = add i32 %forward_mem.1, 4
  %inc125 = add i32 %forward_op.1, 10
  %exitcond102.not = icmp eq i64 %iv.next3, 3
  br i1 %exitcond102.not, label %for.inc12, label %for.body3, !llvm.loop !195

for.inc12:                                        ; preds = %for.body3
  %forward_op.1.lcssa = phi i32 [ %forward_op.1, %for.body3 ]
  %inc121.lcssa = phi i32 [ %inc121, %for.body3 ]
  %inc125.lcssa = phi i32 [ %inc125, %for.body3 ]
  %exitcond107.not = icmp eq i64 %iv.next, 3
  br i1 %exitcond107.not, label %for.end14, label %for.cond1.preheader, !llvm.loop !196

for.end14:                                        ; preds = %for.inc12
  %forward_op.1.lcssa.lcssa = phi i32 [ %forward_op.1.lcssa, %for.inc12 ]
  %inc121.lcssa.lcssa = phi i32 [ %inc121.lcssa, %for.inc12 ]
  %inc125.lcssa.lcssa = phi i32 [ %inc125.lcssa, %for.inc12 ]
  %call.i81 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 8
  %"call.i81'mi" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 7
  %"'ipc24" = bitcast i8* %"call.i81'mi" to %struct.Matrix*
  %8 = bitcast i8* %call.i81 to %struct.Matrix*
  %tapeArg25 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 6
  %9 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 15
  %cmp1789 = icmp sgt i32 %9, 0
  br i1 %cmp1789, label %for.cond19.preheader.lr.ph, label %invertdelete_matrix.exit86

for.cond19.preheader.lr.ph:                       ; preds = %for.end14
  %10 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 16
  %cmp2187 = icmp sgt i32 %10, 0
  %wide.trip.count = zext i32 %10 to i64
  %11 = zext i32 %9 to i64
  %inc133 = add i32 %forward_op.1.lcssa.lcssa, 14
  br label %for.cond19.preheader

for.cond19.preheader:                             ; preds = %for.inc45, %for.cond19.preheader.lr.ph
  %forward_mem.2 = phi i32 [ %inc121.lcssa.lcssa, %for.cond19.preheader.lr.ph ], [ %forward_mem.3, %for.inc45 ]
  %forward_op.2 = phi i32 [ %inc133, %for.cond19.preheader.lr.ph ], [ %forward_op.4, %for.inc45 ]
  %iv4 = phi i64 [ 0, %for.cond19.preheader.lr.ph ], [ %iv.next5, %for.inc45 ]
  %iv.next5 = add nuw nsw i64 %iv4, 1
  %inc135 = add i32 %forward_op.2, 1
  br i1 %cmp2187, label %for.body22.lr.ph, label %for.inc45

for.body22.lr.ph:                                 ; preds = %for.cond19.preheader
  %inc153 = add i32 %forward_mem.2, 8
  %inc155 = add i32 %forward_op.2, 3
  br label %for.body22

for.body22:                                       ; preds = %for.body22, %for.body22.lr.ph
  %forward_op.3 = phi i32 [ %inc155, %for.body22.lr.ph ], [ %inc163, %for.body22 ]
  %iv9 = phi i64 [ 0, %for.body22.lr.ph ], [ %iv.next10, %for.body22 ]
  %iv.next10 = add nuw nsw i64 %iv9, 1
  %inc163 = add i32 %forward_op.3, 4
  %exitcond.not = icmp eq i64 %iv.next10, %wide.trip.count
  br i1 %exitcond.not, label %for.inc45, label %for.body22, !llvm.loop !197

for.inc45:                                        ; preds = %for.body22, %for.cond19.preheader
  %forward_mem.3 = phi i32 [ %forward_mem.2, %for.cond19.preheader ], [ %inc153, %for.body22 ]
  %forward_op.4 = phi i32 [ %inc135, %for.cond19.preheader ], [ %inc163, %for.body22 ]
  %exitcond98.not = icmp eq i64 %iv.next5, %11
  br i1 %exitcond98.not, label %invertdelete_matrix.exit86, label %for.cond19.preheader, !llvm.loop !198

invertentry:                                      ; preds = %invertfor.cond1.preheader
  %reverse_mem.0.in.lcssa.lcssa = phi i32 [ %reverse_mem.0.in.lcssa, %invertfor.cond1.preheader ]
  %reverse_op.0.lcssa.lcssa = phi i32 [ %reverse_op.0.lcssa, %invertfor.cond1.preheader ]
  %inc193 = add i32 %reverse_op.0.lcssa.lcssa, 16
  %inc165 = add i32 %forward_mem.4, 1
  %tapeArg13 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 1
  %12 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 11
  %"'il_phi" = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 2
  call void @diffeangle_axis_to_rotation_matrix(double* %12, double* %"'il_phi", %struct.Matrix* %5, %struct.Matrix* %"'ipc", { double, double*, double, double, double } %tapeArg13)
  tail call void @free(i8* nonnull %"call4.i'mi")
  tail call void @free(i8* nonnull %"call.i'mi")
  tail call void @free(i8* %call.i)
  %13 = bitcast double* %3 to i8*
  tail call void @free(i8* nonnull %13)
  %inc185 = add i32 %reverse_mem.0.in.lcssa.lcssa, 45
  %14 = bitcast double* %4 to i8*
  tail call void @free(i8* nonnull %14)
  %15 = call i32 (i8*, ...) @printf(i8* nonnull dereferenceable(1) getelementptr inbounds ([80 x i8], [80 x i8]* @ResultFormatStrIR, i64 0, i64 0), i32 %forward_op.5, i32 %inc193, i32 %inc165, i32 %inc185)
  ret void

invertfor.cond1.preheader:                        ; preds = %invertfor.body3
  %reverse_mem.0.in.lcssa = phi i32 [ %reverse_mem.0.in, %invertfor.body3 ]
  %reverse_op.0.lcssa = phi i32 [ %reverse_op.0, %invertfor.body3 ]
  %16 = icmp eq i64 %"iv'ac.0", 0
  br i1 %16, label %invertentry, label %incinvertfor.cond1.preheader

incinvertfor.cond1.preheader:                     ; preds = %invertfor.cond1.preheader
  %17 = add nsw i64 %"iv'ac.0", -1
  %inc197 = add i32 %reverse_op.0.lcssa, 17
  %inc199 = add i32 %reverse_mem.0.in.lcssa, 37
  br label %invertfor.inc12

invertfor.body3:                                  ; preds = %invertfor.inc12, %incinvertfor.body3
  %"iv2'ac.0" = phi i64 [ 2, %invertfor.inc12 ], [ %26, %incinvertfor.body3 ]
  %reverse_mem.0.in = phi i32 [ %reverse_mem.1, %invertfor.inc12 ], [ %inc297, %incinvertfor.body3 ]
  %reverse_op.0 = phi i32 [ %reverse_op.1, %invertfor.inc12 ], [ %inc299, %incinvertfor.body3 ]
  %_unwrap = mul nuw nsw i64 %"iv'ac.0", 3
  %_unwrap17 = add nuw nsw i64 %_unwrap, %"iv2'ac.0"
  %"arrayidx10'ipg_unwrap" = getelementptr inbounds double, double* %"'ipc16", i64 %_unwrap17
  %18 = load double, double* %"arrayidx10'ipg_unwrap", align 8
  store double 0.000000e+00, double* %"arrayidx10'ipg_unwrap", align 8
  %19 = getelementptr inbounds double, double* %3, i64 %_unwrap17
  %20 = load double, double* %19, align 8, !invariant.group !488
  %m0diffe = fmul fast double %18, %20
  %21 = getelementptr inbounds double, double* %4, i64 %_unwrap17
  %22 = load double, double* %21, align 8, !invariant.group !489
  %m1diffe = fmul fast double %18, %22
  store double %m0diffe, double* %"arrayidx10'ipg_unwrap", align 8
  %_unwrap23 = add nsw i64 %"iv'ac.0", %7
  %"arrayidx'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi1", i64 %_unwrap23
  %23 = load double, double* %"arrayidx'ipg_unwrap", align 8
  %24 = fadd fast double %23, %m1diffe
  store double %24, double* %"arrayidx'ipg_unwrap", align 8
  %25 = icmp eq i64 %"iv2'ac.0", 0
  br i1 %25, label %invertfor.cond1.preheader, label %incinvertfor.body3

incinvertfor.body3:                               ; preds = %invertfor.body3
  %inc297 = add i32 %reverse_mem.0.in, 35
  %26 = add nsw i64 %"iv2'ac.0", -1
  %inc299 = add i32 %reverse_op.0, 16
  br label %invertfor.body3

invertfor.inc12:                                  ; preds = %invertfor.end14, %incinvertfor.cond1.preheader
  %"iv'ac.0" = phi i64 [ 2, %invertfor.end14 ], [ %17, %incinvertfor.cond1.preheader ]
  %reverse_mem.1 = phi i32 [ %reverse_mem.2, %invertfor.end14 ], [ %inc199, %incinvertfor.cond1.preheader ]
  %reverse_op.1 = phi i32 [ %reverse_op.2, %invertfor.end14 ], [ %inc197, %incinvertfor.cond1.preheader ]
  br label %invertfor.body3

invertfor.end14:                                  ; preds = %invertdelete_matrix.exit86, %invertfor.cond19.preheader.lr.ph
  %reverse_mem.2 = phi i32 [ %phi.bo, %invertfor.cond19.preheader.lr.ph ], [ 1, %invertdelete_matrix.exit86 ]
  %reverse_op.2 = phi i32 [ %inc323, %invertfor.cond19.preheader.lr.ph ], [ 0, %invertdelete_matrix.exit86 ]
  call void @diffemat_mult.12(%struct.Matrix* %5, %struct.Matrix* %"'ipc", %struct.Matrix* %positions, %struct.Matrix* %"positions'", %struct.Matrix* %8, %struct.Matrix* %"'ipc24", { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* } %tapeArg25), !node !285
  tail call void @free(i8* nonnull %"call.i81'mi")
  tail call void @free(i8* %call.i81)
  br label %invertfor.inc12

invertfor.cond19.preheader.lr.ph:                 ; preds = %invertfor.cond19.preheader
  %reverse_mem.3.lcssa = phi i32 [ %reverse_mem.3, %invertfor.cond19.preheader ]
  %reverse_op.3.lcssa = phi i32 [ %reverse_op.3, %invertfor.cond19.preheader ]
  %inc323 = add i32 %reverse_op.3.lcssa, 1
  %27 = bitcast double** %0 to i8*
  tail call void @free(i8* nonnull %27)
  %28 = bitcast double** %1 to i8*
  tail call void @free(i8* nonnull %28)
  %29 = bitcast i32* %2 to i8*
  tail call void @free(i8* nonnull %29)
  %phi.bo = add i32 %reverse_mem.3.lcssa, 9
  br label %invertfor.end14

invertfor.cond19.preheader:                       ; preds = %invertfor.inc45, %invertfor.body22.lr.ph
  %reverse_mem.3 = phi i32 [ %inc419, %invertfor.body22.lr.ph ], [ %inc435, %invertfor.inc45 ]
  %reverse_op.3 = phi i32 [ %inc421.lcssa, %invertfor.body22.lr.ph ], [ %reverse_op.5, %invertfor.inc45 ]
  %30 = icmp eq i64 %"iv4'ac.0", 0
  br i1 %30, label %invertfor.cond19.preheader.lr.ph, label %incinvertfor.cond19.preheader

incinvertfor.cond19.preheader:                    ; preds = %invertfor.cond19.preheader
  %inc327 = add i32 %reverse_op.3, 2
  %inc329 = add i32 %reverse_mem.3, 3
  br label %invertfor.inc45

invertfor.body22.lr.ph:                           ; preds = %invertfor.body22
  %reverse_mem.4.lcssa = phi i32 [ %reverse_mem.4, %invertfor.body22 ]
  %inc421.lcssa = phi i32 [ %inc421, %invertfor.body22 ]
  %inc419 = add i32 %reverse_mem.4.lcssa, 33
  br label %invertfor.cond19.preheader

invertfor.body22:                                 ; preds = %mergeinvertfor.body22_for.inc45.loopexit, %incinvertfor.body22
  %"iv9'ac.0.in" = phi i64 [ %wide.trip.count_unwrap, %mergeinvertfor.body22_for.inc45.loopexit ], [ %"iv9'ac.0", %incinvertfor.body22 ]
  %reverse_mem.4 = phi i32 [ %inc433, %mergeinvertfor.body22_for.inc45.loopexit ], [ %inc427, %incinvertfor.body22 ]
  %reverse_op.4.in = phi i32 [ %reverse_op.5, %mergeinvertfor.body22_for.inc45.loopexit ], [ %inc421, %incinvertfor.body22 ]
  %"iv9'ac.0" = add nsw i64 %"iv9'ac.0.in", -1
  %_unwrap36 = getelementptr inbounds double*, double** %0, i64 %"iv4'ac.0"
  %"'il_phi8_unwrap" = load double*, double** %_unwrap36, align 8, !invariant.group !490
  %_unwrap38 = sext i32 %_unwrap69 to i64
  %_unwrap39 = mul nsw i64 %"iv4'ac.0", %_unwrap38
  %_unwrap40 = add nsw i64 %"iv9'ac.0", %_unwrap39
  %"arrayidx41'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi8_unwrap", i64 %_unwrap40
  %31 = load double, double* %"arrayidx41'ipg_unwrap", align 8
  store double 0.000000e+00, double* %"arrayidx41'ipg_unwrap", align 8
  %_unwrap44 = getelementptr inbounds double*, double** %1, i64 %"iv4'ac.0"
  %"'il_phi7_unwrap" = load double*, double** %_unwrap44, align 8, !invariant.group !491
  %32 = getelementptr inbounds i32, i32* %2, i64 %"iv4'ac.0"
  %33 = load i32, i32* %32, align 4, !invariant.group !492
  %_unwrap49 = sext i32 %33 to i64
  %_unwrap50 = add nsw i64 %"iv9'ac.0", %_unwrap49
  %"arrayidx34'ipg_unwrap" = getelementptr inbounds double, double* %"'il_phi7_unwrap", i64 %_unwrap50
  %34 = load double, double* %"arrayidx34'ipg_unwrap", align 8
  %35 = fadd fast double %34, %31
  store double %35, double* %"arrayidx34'ipg_unwrap", align 8
  %"data23'ipg_unwrap" = getelementptr inbounds i8, i8* %"call.i81'mi", i64 8
  %"'ipc33_unwrap" = bitcast i8* %"data23'ipg_unwrap" to double**
  %"'ipl_unwrap" = load double*, double** %"'ipc33_unwrap", align 8, !invariant.group !493
  %nrows24_unwrap = bitcast i8* %call.i81 to i32*
  %_unwrap52 = load i32, i32* %nrows24_unwrap, align 8, !tbaa !138, !invariant.group !494
  %_unwrap53 = sext i32 %_unwrap52 to i64
  %_unwrap54 = mul nsw i64 %"iv4'ac.0", %_unwrap53
  %_unwrap55 = add nsw i64 %"iv9'ac.0", %_unwrap54
  %"arrayidx28'ipg_unwrap" = getelementptr inbounds double, double* %"'ipl_unwrap", i64 %_unwrap55
  %36 = load double, double* %"arrayidx28'ipg_unwrap", align 8
  %37 = fadd fast double %36, %31
  store double %37, double* %"arrayidx28'ipg_unwrap", align 8
  %38 = icmp eq i64 %"iv9'ac.0", 0
  %inc421 = add i32 %reverse_op.4.in, 14
  br i1 %38, label %invertfor.body22.lr.ph, label %incinvertfor.body22

incinvertfor.body22:                              ; preds = %invertfor.body22
  %inc427 = add i32 %reverse_mem.4, 35
  br label %invertfor.body22

mergeinvertfor.body22_for.inc45.loopexit:         ; preds = %invertfor.inc45
  %wide.trip.count_unwrap = zext i32 %_unwrap69 to i64
  %inc433 = add i32 %reverse_mem.5, 3
  br label %invertfor.body22

invertfor.inc45:                                  ; preds = %mergeinvertfor.cond19.preheader_for.end47, %incinvertfor.cond19.preheader
  %"iv4'ac.0.in" = phi i64 [ %_unwrap58, %mergeinvertfor.cond19.preheader_for.end47 ], [ %"iv4'ac.0", %incinvertfor.cond19.preheader ]
  %reverse_mem.5 = phi i32 [ 1, %mergeinvertfor.cond19.preheader_for.end47 ], [ %inc329, %incinvertfor.cond19.preheader ]
  %reverse_op.5 = phi i32 [ 1, %mergeinvertfor.cond19.preheader_for.end47 ], [ %inc327, %incinvertfor.cond19.preheader ]
  %"iv4'ac.0" = add nsw i64 %"iv4'ac.0.in", -1
  %inc435 = add i32 %reverse_mem.5, 1
  %_unwrap69 = extractvalue { double*, { double, double*, double, double, double }, double*, i8*, i8*, i8*, { i8*, i8*, double**, i32, i1, i1, i32*, double*, double*, double*, double* }, i8*, i8*, double**, double**, double*, i32, double*, double*, i32, i32, i32* } %tapeArg, 16
  %cmp2187_unwrap = icmp sgt i32 %_unwrap69, 0
  br i1 %cmp2187_unwrap, label %mergeinvertfor.body22_for.inc45.loopexit, label %invertfor.cond19.preheader

mergeinvertfor.cond19.preheader_for.end47:        ; preds = %invertdelete_matrix.exit86
  %_unwrap58 = zext i32 %9 to i64
  br label %invertfor.inc45

invertdelete_matrix.exit86:                       ; preds = %for.inc45, %for.end14
  %forward_mem.4 = phi i32 [ %inc121.lcssa.lcssa, %for.end14 ], [ %forward_mem.3, %for.inc45 ]
  %forward_op.5 = phi i32 [ %inc125.lcssa.lcssa, %for.end14 ], [ %forward_op.4, %for.inc45 ]
  br i1 %cmp1789, label %mergeinvertfor.cond19.preheader_for.end47, label %invertfor.end14
}

attributes #0 = { nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { nofree nounwind "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #3 = { "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #4 = { argmemonly nofree nounwind readonly willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #5 = { nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #6 = { nounwind "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #7 = { nofree nounwind }
attributes #8 = { norecurse nounwind readonly uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #9 = { nofree nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #10 = { nobuiltin nofree allocsize(0) "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #11 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #12 = { norecurse nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #13 = { nofree nounwind uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #14 = { inaccessiblememonly nofree nounwind willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #15 = { nounwind uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #16 = { inaccessiblemem_or_argmemonly nounwind willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #17 = { nofree norecurse nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #18 = { inlinehint nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #19 = { norecurse nounwind readnone uwtable willreturn mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #20 = { noreturn nounwind uwtable mustprogress "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #21 = { nofree nounwind willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #22 = { noreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #23 = { nounwind readnone willreturn "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #24 = { inlinehint nounwind uwtable "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="true" "no-jump-tables"="false" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #25 = { nobuiltin nounwind "denormal-fp-math"="preserve-sign,preserve-sign" "denormal-fp-math-f32"="ieee,ieee" "disable-tail-calls"="false" "frame-pointer"="none" "less-precise-fpmad"="false" "no-infs-fp-math"="true" "no-nans-fp-math"="true" "no-signed-zeros-fp-math"="true" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="true" "use-soft-float"="false" }
attributes #26 = { nofree nosync nounwind willreturn }
attributes #27 = { cold noreturn nounwind }
attributes #28 = { inaccessiblememonly nofree nosync nounwind willreturn }
attributes #29 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #30 = { argmemonly nounwind }
attributes #31 = { nounwind }
attributes #32 = { nounwind readonly willreturn }
attributes #33 = { noreturn nounwind }
attributes #34 = { nounwind readnone willreturn }
attributes #35 = { nounwind allocsize(0) }
attributes #36 = { builtin nounwind allocsize(0) }
attributes #37 = { builtin nounwind }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 12.0.1 (https://github.com/llvm/llvm-project.git fed41342a82f5a3a9201819a82bf7a48313e296b)"}
!2 = !{!3, !5, i64 18}
!3 = !{!"_ZTS6dirent", !4, i64 0, !4, i64 8, !7, i64 16, !5, i64 18, !5, i64 19}
!4 = !{!"long", !5, i64 0}
!5 = !{!"omnipotent char", !6, i64 0}
!6 = !{!"Simple C++ TBAA"}
!7 = !{!"short", !5, i64 0}
!8 = distinct !{!8, !9, !10}
!9 = !{!"llvm.loop.mustprogress"}
!10 = !{!"llvm.loop.unroll.disable"}
!11 = !{!12}
!12 = distinct !{!12, !13, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!13 = distinct !{!13, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!14 = !{!15, !16, i64 0}
!15 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderE", !16, i64 0}
!16 = !{!"any pointer", !5, i64 0}
!17 = !{!18, !16, i64 0}
!18 = !{!"_ZTSNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE", !15, i64 0, !4, i64 8, !5, i64 16}
!19 = !{!18, !4, i64 8}
!20 = !{!4, !4, i64 0}
!21 = !{!5, !5, i64 0}
!22 = !{!23}
!23 = distinct !{!23, !24, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_: %agg.result"}
!24 = distinct !{!24, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_"}
!25 = !{!26}
!26 = distinct !{!26, !27, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv: %agg.result"}
!27 = distinct !{!27, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6rbeginEv"}
!28 = distinct !{!28, !9, !10}
!29 = !{!30}
!30 = distinct !{!30, !31, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!31 = distinct !{!31, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!32 = !{!33, !16, i64 8}
!33 = !{!"_ZTSNSt12_Vector_baseINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!34 = !{!33, !16, i64 16}
!35 = !{!36}
!36 = distinct !{!36, !37, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: %agg.result"}
!37 = distinct !{!37, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm"}
!38 = !{!39}
!39 = distinct !{!39, !40, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: %agg.result"}
!40 = distinct !{!40, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm"}
!41 = !{!42}
!42 = distinct !{!42, !43, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: %agg.result"}
!43 = distinct !{!43, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm"}
!44 = !{!45, !4, i64 0}
!45 = !{!"_ZTS7timeval", !4, i64 0, !4, i64 8}
!46 = !{!45, !4, i64 8}
!47 = !{!48}
!48 = distinct !{!48, !49, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!49 = distinct !{!49, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!50 = !{!51, !51, i64 0}
!51 = !{!"vtable pointer", !6, i64 0}
!52 = !{!53, !55, i64 32}
!53 = !{!"_ZTSSt8ios_base", !4, i64 8, !4, i64 16, !54, i64 24, !55, i64 28, !55, i64 32, !16, i64 40, !56, i64 48, !5, i64 64, !57, i64 192, !16, i64 200, !58, i64 208}
!54 = !{!"_ZTSSt13_Ios_Fmtflags", !5, i64 0}
!55 = !{!"_ZTSSt12_Ios_Iostate", !5, i64 0}
!56 = !{!"_ZTSNSt8ios_base6_WordsE", !16, i64 0, !4, i64 8}
!57 = !{!"int", !5, i64 0}
!58 = !{!"_ZTSSt6locale", !16, i64 0}
!59 = !{!57, !57, i64 0}
!60 = !{!16, !16, i64 0}
!61 = !{!62, !16, i64 8}
!62 = !{!"_ZTSNSt12_Vector_baseIiSaIiEE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!63 = !{!62, !16, i64 16}
!64 = !{!62, !16, i64 0}
!65 = !{!66, !16, i64 8}
!66 = !{!"_ZTSNSt12_Vector_baseI11LightMatrixIdESaIS1_EE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!67 = !{!66, !16, i64 16}
!68 = !{!69, !70, i64 0}
!69 = !{!"_ZTS11LightMatrixIdE", !70, i64 0, !57, i64 4, !57, i64 8, !16, i64 16}
!70 = !{!"bool", !5, i64 0}
!71 = !{!69, !57, i64 4}
!72 = !{!69, !57, i64 8}
!73 = !{!69, !16, i64 16}
!74 = distinct !{!74, !9, !10}
!75 = !{!76, !76, i64 0}
!76 = !{!"double", !5, i64 0}
!77 = distinct !{!77, !9, !10}
!78 = distinct !{!78, !9, !10}
!79 = distinct !{!79, !9, !10}
!80 = distinct !{!80, !9, !10}
!81 = !{!33, !16, i64 0}
!82 = !{!83}
!83 = distinct !{!83, !84, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!84 = distinct !{!84, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!85 = !{!86, !16, i64 240}
!86 = !{!"_ZTSSt9basic_iosIcSt11char_traitsIcEE", !16, i64 216, !5, i64 224, !70, i64 225, !16, i64 232, !16, i64 240, !16, i64 248, !16, i64 256}
!87 = !{!88, !5, i64 56}
!88 = !{!"_ZTSSt5ctypeIcE", !16, i64 16, !70, i64 24, !16, i64 32, !16, i64 40, !16, i64 48, !5, i64 56, !5, i64 57, !5, i64 313, !5, i64 569}
!89 = distinct !{!89, !9, !10}
!90 = !{i8 0, i8 2}
!91 = distinct !{!91, !9, !10}
!92 = !{!93}
!93 = distinct !{!93, !94, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!94 = distinct !{!94, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!95 = !{!70, !70, i64 0}
!96 = !{!97, !4, i64 8}
!97 = !{!"_ZTSSi", !4, i64 8}
!98 = !{!99}
!99 = distinct !{!99, !100, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_: %agg.result"}
!100 = distinct !{!100, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_PKS5_"}
!101 = distinct !{!101, !9, !10}
!102 = distinct !{!102, !9, !10}
!103 = distinct !{!103, !9, !10}
!104 = distinct !{!104, !9, !10}
!105 = !{!106, !16, i64 8}
!106 = !{!"_ZTSNSt12_Vector_baseI8TriangleSaIS0_EE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!107 = !{!106, !16, i64 16}
!108 = !{i64 0, i64 12, !21}
!109 = distinct !{!109, !9, !10}
!110 = distinct !{!110, !9, !10}
!111 = !{!112, !70, i64 168}
!112 = !{!"_ZTS20HandModelLightMatrix", !113, i64 0, !114, i64 24, !115, i64 48, !115, i64 72, !69, i64 96, !69, i64 120, !116, i64 144, !70, i64 168}
!113 = !{!"_ZTSSt6vectorINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEESaIS5_EE"}
!114 = !{!"_ZTSSt6vectorIiSaIiEE"}
!115 = !{!"_ZTSSt6vectorI11LightMatrixIdESaIS1_EE"}
!116 = !{!"_ZTSSt6vectorI8TriangleSaIS0_EE"}
!117 = distinct !{!117, !9, !10}
!118 = distinct !{!118, !9, !10}
!119 = !{!120, !16, i64 8}
!120 = !{!"_ZTSNSt12_Vector_baseIdSaIdEE17_Vector_impl_dataE", !16, i64 0, !16, i64 8, !16, i64 16}
!121 = !{!120, !16, i64 0}
!122 = distinct !{!122, !9, !10}
!123 = distinct !{!123, !9, !10}
!124 = !{!125, !57, i64 0}
!125 = !{!"_ZTS17HandObjectiveData", !57, i64 0, !16, i64 8, !16, i64 16, !16, i64 24, !16, i64 32, !126, i64 40, !126, i64 56, !16, i64 72, !57, i64 80, !57, i64 84, !16, i64 88, !126, i64 96}
!126 = !{!"_ZTS6Matrix", !57, i64 0, !57, i64 4, !16, i64 8}
!127 = !{!125, !16, i64 8}
!128 = !{!125, !16, i64 16}
!129 = !{!125, !16, i64 24}
!130 = !{!125, !16, i64 32}
!131 = !{!125, !16, i64 72}
!132 = !{!125, !57, i64 80}
!133 = !{!125, !57, i64 84}
!134 = !{!125, !16, i64 88}
!135 = distinct !{!135, !9, !10}
!136 = distinct !{!136, !9, !10}
!137 = !{!126, !16, i64 8}
!138 = !{!126, !57, i64 0}
!139 = !{!126, !57, i64 4}
!140 = !{i64 0, i64 4, !59, i64 4, i64 4, !59, i64 8, i64 8, !60}
!141 = !{i64 0, i64 8, !60}
!142 = !{!106, !16, i64 0}
!143 = !{!66, !16, i64 0}
!144 = distinct !{!144, !9, !10}
!145 = !{!146}
!146 = distinct !{!146, !147, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_: %agg.result"}
!147 = distinct !{!147, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_"}
!148 = !{!149}
!149 = distinct !{!149, !150, !"_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE: %agg.result"}
!150 = distinct !{!150, !"_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"}
!151 = !{!152}
!152 = distinct !{!152, !153, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: %agg.result"}
!153 = distinct !{!153, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm"}
!154 = !{!152, !149}
!155 = !{!156}
!156 = distinct !{!156, !157, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_: %agg.result"}
!157 = distinct !{!157, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_"}
!158 = !{!159}
!159 = distinct !{!159, !160, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_: %agg.result"}
!160 = distinct !{!160, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_"}
!161 = !{!120, !16, i64 16}
!162 = !{!163, !57, i64 24}
!163 = !{!"_ZTS10HandOutput", !164, i64 0, !57, i64 24, !57, i64 28, !164, i64 32}
!164 = !{!"_ZTSSt6vectorIdSaIdEE"}
!165 = !{!163, !57, i64 28}
!166 = !{!167}
!167 = distinct !{!167, !168, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_: %agg.result"}
!168 = distinct !{!168, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_"}
!169 = !{!170}
!170 = distinct !{!170, !171, !"_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE: %agg.result"}
!171 = distinct !{!171, !"_Z19filepath_to_dirnameRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE"}
!172 = !{!173}
!173 = distinct !{!173, !174, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm: %agg.result"}
!174 = distinct !{!174, !"_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6substrEmm"}
!175 = !{!173, !170}
!176 = !{!177}
!177 = distinct !{!177, !178, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_: %agg.result"}
!178 = distinct !{!178, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_"}
!179 = !{!180}
!180 = distinct !{!180, !181, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_: %agg.result"}
!181 = distinct !{!181, !"_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_"}
!182 = distinct !{!182, !9, !10}
!183 = distinct !{!183, !9, !10}
!184 = distinct !{!184, !9, !10}
!185 = distinct !{!185, !9, !10}
!186 = distinct !{!186, !9, !10}
!187 = distinct !{!187, !9, !10}
!188 = distinct !{!188, !9, !10}
!189 = distinct !{!189, !9, !10}
!190 = distinct !{!190, !9, !10}
!191 = distinct !{!191, !9, !10}
!192 = distinct !{!192, !9, !10}
!193 = distinct !{!193, !9, !10}
!194 = distinct !{!194, !9, !10}
!195 = distinct !{!195, !9, !10}
!196 = distinct !{!196, !9, !10}
!197 = distinct !{!197, !9, !10}
!198 = distinct !{!198, !9, !10}
!199 = distinct !{!199, !9, !10}
!200 = distinct !{!200, !9, !10}
!201 = !{!202}
!202 = distinct !{!202, !203, !"to_pose_params: %theta"}
!203 = distinct !{!203, !"to_pose_params"}
!204 = !{!205}
!205 = distinct !{!205, !203, !"to_pose_params: %pose_params"}
!206 = !{!202, !205}
!207 = distinct !{!207, !9, !10}
!208 = distinct !{!208, !9, !10}
!209 = distinct !{!209, !9, !10}
!210 = distinct !{!210, !9, !10}
!211 = distinct !{!211, !9, !10}
!212 = distinct !{!212, !9, !10}
!213 = distinct !{!213, !9, !10}
!214 = distinct !{!214, !9, !10}
!215 = distinct !{!215, !9, !10}
!216 = distinct !{!216, !9, !10}
!217 = !{!218}
!218 = distinct !{!218, !219, !"to_pose_params: %theta"}
!219 = distinct !{!219, !"to_pose_params"}
!220 = !{!221}
!221 = distinct !{!221, !219, !"to_pose_params: %pose_params"}
!222 = !{!218, !221}
!223 = distinct !{!223, !9, !10}
!224 = distinct !{!224, !9, !10}
!225 = !{!226, !16, i64 0}
!226 = !{!"_ZTS11Matrix_diff", !16, i64 0}
!227 = distinct !{!227, !9, !10}
!228 = distinct !{!228, !9, !10}
!229 = distinct !{!229, !9, !10}
!230 = distinct !{!230, !9, !10}
!231 = distinct !{!231, !9, !10}
!232 = distinct !{!232, !9, !10}
!233 = distinct !{!233, !9, !10}
!234 = distinct !{!234, !9, !10}
!235 = distinct !{!235, !9, !10}
!236 = distinct !{!236, !9, !10}
!237 = distinct !{!237, !9, !10}
!238 = distinct !{!238, !9, !10}
!239 = distinct !{!239, !9, !10}
!240 = distinct !{!240, !9, !10}
!241 = distinct !{!241, !9, !10}
!242 = distinct !{!242, !9, !10}
!243 = distinct !{!243, !9, !10}
!244 = distinct !{!244, !9, !10}
!245 = distinct !{!245, !9, !10}
!246 = distinct !{!246, !9, !10}
!247 = distinct !{!247, !9, !10}
!248 = distinct !{!248, !9, !10}
!249 = distinct !{!249, !9, !10}
!250 = distinct !{!250, !9, !10}
!251 = distinct !{!251, !9, !10}
!252 = distinct !{!252, !9, !10}
!253 = distinct !{!253, !9, !10}
!254 = distinct !{!254, !9, !10}
!255 = distinct !{!255, !9, !10}
!256 = distinct !{!256, !9, !10}
!257 = distinct !{!257, !9, !10}
!258 = distinct !{!258, !9, !10}
!259 = distinct !{!259, !9, !10}
!260 = distinct !{!260, !9, !10}
!261 = distinct !{!261, !9, !10}
!262 = distinct !{!262, !9, !10}
!263 = distinct !{!263, !9, !10}
!264 = distinct !{!264, !9, !10}
!265 = distinct !{!265, !9, !10}
!266 = distinct !{!266, !9, !10}
!267 = distinct !{!267, !9, !10}
!268 = distinct !{!268, !9, !10}
!269 = distinct !{!269, !9, !10}
!270 = distinct !{!270, !9, !10}
!271 = distinct !{!271, !9, !10}
!272 = distinct !{!272, !9, !10}
!273 = distinct !{!273, !9, !10}
!274 = distinct !{!274, !9, !10}
!275 = distinct !{!275, !9, !10}
!276 = distinct !{!276, !9, !10}
!277 = distinct !{!277, !9, !10}
!278 = distinct !{!278, !9, !10}
!279 = distinct !{!279, !9, !10}
!280 = distinct !{!280, !9, !10}
!281 = distinct !{!281, !9, !10}
!282 = distinct !{!282, !9, !10}
!283 = distinct !{!283, !9, !10}
!284 = distinct !{!284, !9, !10}
!285 = !{!"true"}
!286 = distinct !{}
!287 = distinct !{}
!288 = distinct !{}
!289 = distinct !{}
!290 = distinct !{}
!291 = distinct !{}
!292 = distinct !{}
!293 = distinct !{}
!294 = distinct !{}
!295 = distinct !{}
!296 = distinct !{}
!297 = distinct !{}
!298 = !{i64 8}
!299 = distinct !{}
!300 = distinct !{}
!301 = distinct !{}
!302 = distinct !{}
!303 = distinct !{}
!304 = distinct !{}
!305 = distinct !{}
!306 = distinct !{}
!307 = distinct !{}
!308 = distinct !{}
!309 = distinct !{}
!310 = distinct !{}
!311 = distinct !{}
!312 = distinct !{}
!313 = distinct !{}
!314 = distinct !{}
!315 = distinct !{}
!316 = distinct !{}
!317 = distinct !{}
!318 = distinct !{}
!319 = distinct !{}
!320 = distinct !{}
!321 = distinct !{}
!322 = distinct !{}
!323 = distinct !{}
!324 = distinct !{}
!325 = distinct !{}
!326 = distinct !{}
!327 = distinct !{}
!328 = distinct !{}
!329 = distinct !{}
!330 = distinct !{}
!331 = distinct !{}
!332 = distinct !{}
!333 = distinct !{}
!334 = distinct !{}
!335 = distinct !{}
!336 = distinct !{}
!337 = distinct !{}
!338 = distinct !{}
!339 = distinct !{}
!340 = distinct !{}
!341 = distinct !{}
!342 = distinct !{}
!343 = distinct !{}
!344 = distinct !{}
!345 = distinct !{}
!346 = distinct !{}
!347 = distinct !{}
!348 = distinct !{}
!349 = distinct !{}
!350 = distinct !{}
!351 = distinct !{}
!352 = distinct !{}
!353 = distinct !{}
!354 = distinct !{}
!355 = distinct !{}
!356 = distinct !{}
!357 = distinct !{}
!358 = distinct !{}
!359 = distinct !{}
!360 = distinct !{}
!361 = distinct !{}
!362 = distinct !{}
!363 = distinct !{}
!364 = distinct !{}
!365 = distinct !{}
!366 = distinct !{}
!367 = distinct !{}
!368 = distinct !{}
!369 = distinct !{}
!370 = distinct !{}
!371 = distinct !{}
!372 = distinct !{}
!373 = distinct !{}
!374 = distinct !{}
!375 = distinct !{}
!376 = distinct !{}
!377 = distinct !{}
!378 = distinct !{}
!379 = distinct !{}
!380 = distinct !{}
!381 = distinct !{}
!382 = distinct !{}
!383 = distinct !{}
!384 = distinct !{}
!385 = distinct !{}
!386 = distinct !{}
!387 = distinct !{}
!388 = distinct !{}
!389 = distinct !{}
!390 = distinct !{}
!391 = distinct !{}
!392 = distinct !{}
!393 = distinct !{}
!394 = distinct !{}
!395 = distinct !{}
!396 = distinct !{}
!397 = distinct !{}
!398 = distinct !{}
!399 = distinct !{}
!400 = distinct !{}
!401 = distinct !{}
!402 = distinct !{}
!403 = distinct !{}
!404 = distinct !{}
!405 = distinct !{}
!406 = distinct !{}
!407 = distinct !{}
!408 = distinct !{}
!409 = distinct !{}
!410 = distinct !{}
!411 = distinct !{}
!412 = distinct !{}
!413 = distinct !{}
!414 = distinct !{}
!415 = distinct !{}
!416 = distinct !{}
!417 = distinct !{}
!418 = distinct !{}
!419 = distinct !{}
!420 = distinct !{}
!421 = distinct !{}
!422 = distinct !{}
!423 = distinct !{}
!424 = distinct !{}
!425 = distinct !{}
!426 = distinct !{}
!427 = distinct !{}
!428 = distinct !{}
!429 = distinct !{}
!430 = distinct !{}
!431 = distinct !{}
!432 = distinct !{}
!433 = distinct !{}
!434 = distinct !{}
!435 = distinct !{}
!436 = distinct !{}
!437 = distinct !{}
!438 = distinct !{}
!439 = distinct !{}
!440 = distinct !{}
!441 = distinct !{}
!442 = distinct !{}
!443 = distinct !{}
!444 = distinct !{}
!445 = distinct !{}
!446 = distinct !{}
!447 = distinct !{}
!448 = distinct !{}
!449 = distinct !{}
!450 = distinct !{}
!451 = distinct !{}
!452 = distinct !{}
!453 = distinct !{}
!454 = distinct !{}
!455 = distinct !{}
!456 = distinct !{}
!457 = distinct !{}
!458 = distinct !{}
!459 = distinct !{}
!460 = distinct !{}
!461 = distinct !{}
!462 = distinct !{}
!463 = distinct !{}
!464 = distinct !{}
!465 = distinct !{}
!466 = distinct !{}
!467 = distinct !{}
!468 = distinct !{}
!469 = distinct !{}
!470 = distinct !{}
!471 = distinct !{}
!472 = distinct !{}
!473 = distinct !{}
!474 = distinct !{}
!475 = distinct !{}
!476 = distinct !{}
!477 = distinct !{}
!478 = distinct !{}
!479 = distinct !{}
!480 = distinct !{}
!481 = distinct !{}
!482 = distinct !{}
!483 = distinct !{}
!484 = distinct !{}
!485 = distinct !{}
!486 = distinct !{}
!487 = distinct !{}
!488 = distinct !{}
!489 = distinct !{}
!490 = distinct !{}
!491 = distinct !{}
!492 = distinct !{}
!493 = distinct !{}
!494 = distinct !{}
