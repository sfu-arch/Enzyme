digraph "CFG for 'diffe_Z3fooPdi' function" {
	label="CFG for 'diffe_Z3fooPdi' function";

	Node0x95ac9f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{entry:\l  %\"iv'ac\" = alloca i64, align 8\l  %\"mul'de\" = alloca double, align 8\l  store double 0.000000e+00, double* %\"mul'de\", align 8\l  %\"'de\" = alloca double, align 8\l  store double 0.000000e+00, double* %\"'de\", align 8\l  %\"mul4'de\" = alloca double, align 8\l  store double 0.000000e+00, double* %\"mul4'de\", align 8\l  %_cache = alloca double*, align 8\l  %_cache4 = alloca double*, align 8\l  %\"'de9\" = alloca double, align 8\l  store double 0.000000e+00, double* %\"'de9\", align 8\l  %\"'de10\" = alloca double, align 8\l  store double 0.000000e+00, double* %\"'de10\", align 8\l  %0 = load double, double* %in_0, align 8, !tbaa !2\l  %mul = fmul fast double %0, 2.000000e+00\l  %cmp15 = icmp sgt i32 %len, 1\l  br i1 %cmp15, label %for.body.preheader, label %for.cond.cleanup\l|{<s0>T|<s1>F}}"];
	Node0x95ac9f0:s0 -> Node0x95ad560;
	Node0x95ac9f0:s1 -> Node0x95ad5d0;
	Node0x95ad560 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{for.body.preheader:                               \l  %wide.trip.count = zext i32 %len to i64\l  %1 = add nsw i64 %wide.trip.count, -2\l  %2 = add nuw i64 %1, 1\l  %mallocsize = mul nuw nsw i64 %2, 8\l  %malloccall = tail call noalias nonnull i8* @malloc(i64 %mallocsize)\l  %_malloccache = bitcast i8* %malloccall to double*\l  store double* %_malloccache, double** %_cache, align 8, !invariant.group !6\l  %3 = add nuw nsw i64 %1, 1\l  %scevgep = getelementptr double, double* %in_0, i64 1\l  %mallocsize5 = mul nuw nsw i64 %2, 8\l  %malloccall6 = tail call noalias nonnull i8* @malloc(i64 %mallocsize5)\l  %_malloccache7 = bitcast i8* %malloccall6 to double*\l  store double* %_malloccache7, double** %_cache4, align 8, !invariant.group !7\l  br label %for.body\l}"];
	Node0x95ad560 -> Node0x95a8fb0;
	Node0x95af010 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{for.cond.cleanup.loopexit:                        \l  br label %for.cond.cleanup\l}"];
	Node0x95af010 -> Node0x95ad5d0;
	Node0x95ad5d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{for.cond.cleanup:                                 \l  br label %invertfor.cond.cleanup\l}"];
	Node0x95ad5d0 -> Node0x95af1d0;
	Node0x95a8fb0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{for.body:                                         \l  %iv = phi i64 [ %iv.next, %for.body ], [ 0, %for.body.preheader ]\l  %4 = phi double [ %mul, %for.body.preheader ], [ %mul4, %for.body ]\l  %5 = load double*, double** %_cache, align 8, !dereferenceable !8,\l... !invariant.group !6\l  %6 = getelementptr inbounds double, double* %5, i64 %iv\l  store double %4, double* %6, align 8, !invariant.group !9\l  %iv.next = add nuw nsw i64 %iv, 1\l  %\"arrayidx3'ipg\" = getelementptr inbounds double, double* %\"in_0'\", i64\l... %iv.next\l  %arrayidx3 = getelementptr inbounds double, double* %in_0, i64 %iv.next\l  %7 = load double, double* %arrayidx3, align 8, !tbaa !2\l  %8 = load double*, double** %_cache4, align 8, !dereferenceable !8,\l... !invariant.group !7\l  %9 = getelementptr inbounds double, double* %8, i64 %iv\l  store double %7, double* %9, align 8, !invariant.group !10\l  %mul4 = fmul fast double %7, %4\l  %indvars.iv.next = add nuw nsw i64 %iv.next, 1\l  %exitcond.not = icmp eq i64 %indvars.iv.next, %wide.trip.count\l  br i1 %exitcond.not, label %for.cond.cleanup.loopexit, label %for.body,\l... !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x95a8fb0:s0 -> Node0x95af010;
	Node0x95a8fb0:s1 -> Node0x95a8fb0;
	Node0x95af460 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{invertentry:                                      \l  %10 = load double, double* %\"in_0'\", align 8\l  store double 0.000000e+00, double* %\"in_0'\", align 8\l  %11 = load double, double* %\"mul'de\", align 8\l  %12 = fadd fast double %11, %10\l  store double %12, double* %\"mul'de\", align 8\l  %13 = load double, double* %\"mul'de\", align 8\l  %m0diffe = fmul fast double %13, 2.000000e+00\l  store double 0.000000e+00, double* %\"mul'de\", align 8\l  %14 = load double, double* %\"'de\", align 8\l  %15 = fadd fast double %14, %m0diffe\l  store double %15, double* %\"'de\", align 8\l  %16 = load double, double* %\"'de\", align 8\l  store double 0.000000e+00, double* %\"'de\", align 8\l  %17 = load double, double* %\"in_0'\", align 8\l  %18 = fadd fast double %17, %16\l  store double %18, double* %\"in_0'\", align 8\l  ret void\l}"];
	Node0x95b2170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{invertfor.body.preheader:                         \l  %19 = load i64, i64* %\"iv'ac\", align 8\l  %forfree = load double*, double** %_cache, align 8, !dereferenceable !8,\l... !invariant.group !6\l  %20 = bitcast double* %forfree to i8*\l  tail call void @free(i8* nonnull %20)\l  %21 = load i64, i64* %\"iv'ac\", align 8\l  %forfree8 = load double*, double** %_cache4, align 8, !dereferenceable !8,\l... !invariant.group !7\l  %22 = bitcast double* %forfree8 to i8*\l  tail call void @free(i8* nonnull %22)\l  br label %invertentry\l}"];
	Node0x95b2170 -> Node0x95af460;
	Node0x95b2840 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{invertfor.cond.cleanup.loopexit:                  \l  %wide.trip.count_unwrap = zext i32 %len to i64\l  %_unwrap = add nsw i64 %wide.trip.count_unwrap, -2\l  br label %mergeinvertfor.body_for.cond.cleanup.loopexit\l}"];
	Node0x95b2840 -> Node0x95b2ad0;
	Node0x95b2ad0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{mergeinvertfor.body_for.cond.cleanup.loopexit:    \l  store i64 %_unwrap, i64* %\"iv'ac\", align 8\l  br label %invertfor.body\l}"];
	Node0x95b2ad0 -> Node0x95b2cf0;
	Node0x95af1d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{invertfor.cond.cleanup:                           \l  br i1 %cmp15, label %invertfor.cond.cleanup.loopexit, label %invertentry\l|{<s0>T|<s1>F}}"];
	Node0x95af1d0:s0 -> Node0x95b2840;
	Node0x95af1d0:s1 -> Node0x95af460;
	Node0x95b2cf0 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{invertfor.body:                                   \l  %23 = load i64, i64* %\"iv'ac\", align 8\l  %iv.next_unwrap = add nuw nsw i64 %23, 1\l  %\"arrayidx3'ipg_unwrap\" = getelementptr inbounds double, double* %\"in_0'\",\l... i64 %iv.next_unwrap\l  %24 = load double, double* %\"arrayidx3'ipg_unwrap\", align 8\l  store double 0.000000e+00, double* %\"arrayidx3'ipg_unwrap\", align 8\l  %25 = load double, double* %\"mul4'de\", align 8\l  %26 = fadd fast double %25, %24\l  store double %26, double* %\"mul4'de\", align 8\l  %27 = load double, double* %\"mul4'de\", align 8\l  %28 = load i64, i64* %\"iv'ac\", align 8\l  %wide.trip.count_unwrap1 = zext i32 %len to i64\l  %_unwrap2 = add nsw i64 %wide.trip.count_unwrap1, -2\l  %29 = add nuw i64 %_unwrap2, 1\l  %30 = load double*, double** %_cache, align 8, !dereferenceable !8,\l... !invariant.group !6\l  %31 = load i64, i64* %\"iv'ac\", align 8\l  %32 = getelementptr inbounds double, double* %30, i64 %31\l  %33 = load double, double* %32, align 8, !invariant.group !9\l  %m0diffe3 = fmul fast double %27, %33\l  %34 = load i64, i64* %\"iv'ac\", align 8\l  %35 = add nuw i64 %_unwrap2, 1\l  %36 = load double*, double** %_cache4, align 8, !dereferenceable !8,\l... !invariant.group !7\l  %37 = load i64, i64* %\"iv'ac\", align 8\l  %38 = getelementptr inbounds double, double* %36, i64 %37\l  %39 = load double, double* %38, align 8, !invariant.group !10\l  %m1diffe = fmul fast double %27, %39\l  store double 0.000000e+00, double* %\"mul4'de\", align 8\l  %40 = load double, double* %\"'de9\", align 8\l  %41 = fadd fast double %40, %m0diffe3\l  store double %41, double* %\"'de9\", align 8\l  %42 = load double, double* %\"'de10\", align 8\l  %43 = fadd fast double %42, %m1diffe\l  store double %43, double* %\"'de10\", align 8\l  %44 = load double, double* %\"'de9\", align 8\l  store double 0.000000e+00, double* %\"'de9\", align 8\l  %45 = load double, double* %\"arrayidx3'ipg_unwrap\", align 8\l  %46 = fadd fast double %45, %44\l  store double %46, double* %\"arrayidx3'ipg_unwrap\", align 8\l  %47 = load double, double* %\"'de10\", align 8\l  store double 0.000000e+00, double* %\"'de10\", align 8\l  %48 = load i64, i64* %\"iv'ac\", align 8\l  %49 = icmp eq i64 %48, 0\l  %50 = xor i1 %49, true\l  %51 = select fast i1 %50, double %47, double 0.000000e+00\l  %52 = load double, double* %\"mul4'de\", align 8\l  %53 = fadd fast double %52, %47\l  %54 = select fast i1 %49, double %52, double %53\l  store double %54, double* %\"mul4'de\", align 8\l  %55 = select fast i1 %49, double %47, double 0.000000e+00\l  %56 = load double, double* %\"mul'de\", align 8\l  %57 = fadd fast double %56, %47\l  %58 = select fast i1 %49, double %57, double %56\l  store double %58, double* %\"mul'de\", align 8\l  br i1 %49, label %invertfor.body.preheader, label %incinvertfor.body\l|{<s0>T|<s1>F}}"];
	Node0x95b2cf0:s0 -> Node0x95b2170;
	Node0x95b2cf0:s1 -> Node0x95b5f20;
	Node0x95b5f20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#bb1b2c70",label="{incinvertfor.body:                                \l  %59 = load i64, i64* %\"iv'ac\", align 8\l  %60 = add nsw i64 %59, -1\l  store i64 %60, i64* %\"iv'ac\", align 8\l  br label %invertfor.body\l}"];
	Node0x95b5f20 -> Node0x95b2cf0;
}
