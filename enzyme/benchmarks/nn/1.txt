OVERVIEW: LLVM 'Clang' Compiler: http://clang.llvm.org

USAGE: clang -cc1 [options] file...

OPTIONS:
  -add-plugin <name>      Use the named plugin action in addition to the default action
  -analyze-function <value>
                          Run analysis on specific function (for C++ include parameters in name)
  -analyzer-checker-help-alpha
                          Display the list of in development analyzer checkers. These are NOT considered safe, they are unstable and will emit incorrect reports. Enable ONLY FOR DEVELOPMENT purposes
  -analyzer-checker-help-developer
                          Display the list of developer-only checkers such as modeling and debug checkers
  -analyzer-checker-help  Display the list of analyzer checkers that are available
  -analyzer-checker-option-help-alpha
                          Display the list of in development checker and package options. These are NOT considered safe, they are unstable and will emit incorrect reports. Enable ONLY FOR DEVELOPMENT purposes
  -analyzer-checker-option-help-developer
                          Display the list of checker and package options meant for development purposes only
  -analyzer-checker-option-help
                          Display the list of checker and package options
  -analyzer-checker <value>
                          Choose analyzer checkers to enable
  -analyzer-config-compatibility-mode <value>
                          Don't emit errors on invalid analyzer-config inputs
  -analyzer-config-help   Display the list of -analyzer-config options. These are meant for development purposes only!
  -analyzer-config <value>
                          Choose analyzer options to enable
  -analyzer-constraints <value>
                          Source Code Analysis - Symbolic Constraint Engines
  -analyzer-disable-all-checks
                          Disable all static analyzer checks
  -analyzer-disable-checker <value>
                          Choose analyzer checkers to disable
  -analyzer-disable-retry-exhausted
                          Do not re-analyze paths leading to exhausted nodes with a different strategy (may decrease code coverage)
  -analyzer-display-progress
                          Emit verbose output about the analyzer's progress
  -analyzer-dump-egraph <value>
                          Dump exploded graph to the specified file
  -analyzer-inline-max-stack-depth <value>
                          Bound on stack depth while inlining (4 by default)
  -analyzer-inlining-mode <value>
                          Specify the function selection heuristic used during inlining
  -analyzer-list-enabled-checkers
                          Display the list of enabled analyzer checkers
  -analyzer-max-loop <value>
                          The maximum number of times the analyzer will go through a loop
  -analyzer-opt-analyze-headers
                          Force the static analyzer to analyze functions defined in header files
  -analyzer-opt-analyze-nested-blocks
                          Analyze the definitions of blocks in addition to functions
  -analyzer-output <value>
                          Source Code Analysis - Output Options
  -analyzer-purge <value> Source Code Analysis - Dead Symbol Removal Frequency
  -analyzer-stats         Print internal analyzer statistics.
  -analyzer-store <value> Source Code Analysis - Abstract Memory Store Models
  -analyzer-viz-egraph-graphviz
                          Display exploded graph using GraphViz
  -analyzer-werror        Emit analyzer results as errors rather than warnings
  -analyze                Run static analysis engine
  -arcmt-action=<value>   The ARC migration action to take
  -arcmt-migrate-emit-errors
                          Emit ARC errors even if the migrator can fix them
  -arcmt-migrate-report-output <value>
                          Output path for the plist report
  -ast-dump-all=<value>   Build ASTs and then debug dump them in the specified format, forcing deserialization. Supported formats include: default, json
  -ast-dump-all           Build ASTs and then debug dump them, forcing deserialization
  -ast-dump-decl-types    Include declaration types in AST dumps
  -ast-dump-filter <dump_filter>
                          Use with -ast-dump or -ast-print to dump/print only AST declaration nodes having a certain substring in a qualified name. Use -ast-list to list all filterable declaration node names.
  -ast-dump-lookups       Build ASTs and then debug dump their name lookup tables
  -ast-dump=<value>       Build ASTs and then debug dump them in the specified format. Supported formats include: default, json
  -ast-dump               Build ASTs and then debug dump them
  -ast-list               Build ASTs and print the list of declaration node qualified names
  -ast-merge <ast file>   Merge the given AST file into the translation unit being compiled.
  -ast-print              Build ASTs and then pretty-print them
  -ast-view               Build ASTs and view them with GraphViz
  -aux-target-cpu <value> Target a specific auxiliary cpu type
  -aux-target-feature <value>
                          Target specific auxiliary attributes
  -aux-triple <value>     Auxiliary target triple.
  -building-pch-with-obj  This compilation is part of building a PCH with corresponding object file.
  -c-isystem <directory>  Add directory to the C SYSTEM include search path
  -CC                     Include comments from within macros in preprocessed output
  -cfg-add-implicit-dtors Add C++ implicit destructors to CFGs for all analyses
  -cfguard-no-checks      Emit Windows Control Flow Guard tables only (no checks)
  -cfguard                Emit Windows Control Flow Guard tables and checks
  -chain-include <file>   Include and chain a header file after turning it into PCH
  -cl-ext=<value>         OpenCL only. Enable or disable OpenCL extensions. The argument is a comma-separated sequence of one or more extension names, each prefixed by '+' or '-'.
  -cl-fast-relaxed-math   OpenCL only. Sets -cl-finite-math-only and -cl-unsafe-math-optimizations, and defines __FAST_RELAXED_MATH__.
  -cl-finite-math-only    OpenCL only. Allow floating-point optimizations that assume arguments and results are not NaNs or +-Inf.
  -cl-fp32-correctly-rounded-divide-sqrt
                          OpenCL only. Specify that single precision floating-point divide and sqrt used in the program source are correctly rounded.
  -cl-kernel-arg-info     OpenCL only. Generate kernel argument metadata.
  -cl-mad-enable          OpenCL only. Allow use of less precise MAD computations in the generated binary.
  -cl-no-signed-zeros     OpenCL only. Allow use of less precise no signed zeros computations in the generated binary.
  -cl-opt-disable         OpenCL only. This option disables all optimizations. By default optimizations are enabled.
  -cl-single-precision-constant
                          OpenCL only. Treat double precision floating-point constant as single precision constant.
  -cl-std=<value>         OpenCL language standard to compile for.
  -cl-strict-aliasing     OpenCL only. This option is added for compatibility with OpenCL 1.0.
  -cl-uniform-work-group-size
                          OpenCL only. Defines that the global work-size be a multiple of the work-group size specified to clEnqueueNDRangeKernel
  -cl-unsafe-math-optimizations
                          OpenCL only. Allow unsafe floating-point optimizations.  Also implies -cl-no-signed-zeros and -cl-mad-enable.
  -code-completion-at <file>:<line>:<column>
                          Dump code-completion information at a location
  -code-completion-brief-comments
                          Include brief documentation comments in code-completion results.
  -code-completion-macros Include macros in code-completion results
  -code-completion-patterns
                          Include code patterns in code-completion results
  -code-completion-with-fixits
                          Include code completion results which require small fix-its.
  -compiler-options-dump  Dump the compiler configuration options
  -compress-debug-sections=<value>
                          DWARF debug sections compression type
  -coverage-data-file <value>
                          Emit coverage data to this filename.
  -coverage-notes-file <value>
                          Emit coverage notes to this filename.
  -coverage-version=<value>
                          Four-byte version string for gcov files.
  -cxx-isystem <directory>
                          Add directory to the C++ SYSTEM include search path
  -C                      Include comments in preprocessed output
  -dD                     Print macro definitions in -E mode in addition to normal output
  -debug-forward-template-params
                          Emit complete descriptions of template parameters in forward declarations
  -debug-info-macro       Emit macro debug information
  -default-function-attr <value>
                          Apply given attribute to all functions
  -dependency-dot <value> Filename to write DOT-formatted header dependencies to
  -dependency-file <value>
                          Filename (or -) to write dependency output to
  --dependent-lib=<value> Add dependent library
  -detailed-preprocessing-record
                          include a detailed record of preprocessing actions
  -diagnostic-log-file <value>
                          Filename (or -) to log diagnostics to
  -disable-free           Disable freeing of memory on exit
  -disable-lifetime-markers
                          Disable lifetime-markers emission even when optimizations are enabled
  -disable-llvm-passes    Use together with -emit-llvm to get pristine LLVM IR from the frontend by not running any LLVM passes at all
  -disable-llvm-verifier  Don't run the LLVM IR verifier pass
  -disable-O0-optnone     Disable adding the optnone attribute to functions at O0
  -disable-objc-default-synthesize-properties
                          disable the default synthesis of Objective-C properties
  -disable-pragma-debug-crash
                          Disable any #pragma clang __debug that can lead to crashing behavior. This is meant for testing.
  -disable-red-zone       Do not emit code that uses the red zone.
  -discard-value-names    Discard value names in LLVM IR
  -dI                     Print include directives in -E mode in addition to normal output
  -dM                     Print macro definitions in -E mode instead of normal output
  -dump-coverage-mapping  Dump the coverage mapping records, for testing
  -dump-deserialized-decls
                          Dump declarations that are deserialized from PCH, for testing
  -dump-raw-tokens        Lex file in raw mode and dump raw tokens
  -dump-tokens            Run preprocessor, dump internal rep of tokens
  -dwarf-debug-flags <value>
                          The string to embed in the Dwarf debug flags record.
  -dwarf-explicit-import  Generate explicit import from anonymous namespace to containing scope
  -dwarf-ext-refs         Generate debug info with external references to clang modules or precompiled headers
  -D <macro>=<value>      Define <macro> to <value> (or 1 if <value> omitted)
  -emit-codegen-only      Generate machine code, but discard output
  -emit-header-module     Generate pre-compiled module file from a set of header files
  -emit-html              Output input source as HTML
  -emit-interface-stubs   Generate Interface Stub Files.
  -emit-llvm-bc           Build ASTs then convert to LLVM, emit .bc file
  -emit-llvm-only         Build ASTs and convert to LLVM, discarding output
  -emit-llvm-uselists     Preserve order of LLVM use-lists when serializing
  -emit-llvm              Use the LLVM representation for assembler and object files
  -emit-merged-ifs        Generate Interface Stub Files, emit merged text not binary.
  -emit-module-interface  Generate pre-compiled module file from a C++ module interface
  -emit-module            Generate pre-compiled module file from a module map
  -emit-obj               Emit native object files
  -emit-pch               Generate pre-compiled header file
  -enable-trivial-auto-var-init-zero-knowing-it-will-be-removed-from-clang
                          Trivial automatic variable initialization to zero is only here for benchmarks, it'll eventually be removed, and I'm OK with that because I'm only using it to benchmark
  -Eonly                  Just run preprocessor, no output (for timings)
  -error-on-deserialized-decl <value>
                          Emit error if a specific declaration is deserialized from PCH, for testing
  -exception-model <value>
                          The exception model: dwarf|sjlj|seh|wasm
  -E                      Only run the preprocessor
  -faapcs-bitfield-load   Follows the AAPCS standard that all volatile bit-field write generates at least one load. (ARM only).
  -faapcs-bitfield-width  Follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -faddress-space-map-mangling=<yes|no|target>
                          Set the mode for address space map based mangling; OpenCL testing purposes only
  -faddrsig               Emit an address-significance table
  -faligned-alloc-unavailable
                          Aligned allocation/deallocation functions are unavailable
  -faligned-allocation    Enable C++17 aligned allocation functions
  -fallow-editor-placeholders
                          Treat editor placeholders as valid source code
  -fallow-half-arguments-and-returns
                          Allow function arguments and returns of type half
  -fallow-pch-with-compiler-errors
                          Accept a PCH file that was created with compiler errors
  -fallow-pcm-with-compiler-errors
                          Accept a PCM file that was created with compiler errors
  -fansi-escape-codes     Use ANSI escape codes for diagnostics
  -fapple-kext            Use Apple's kernel extensions ABI
  -fapple-pragma-pack     Enable Apple gcc-compatible #pragma pack handling
  -fapplication-extension Restrict code to those available for App Extensions
  -fapply-global-visibility-to-externs
                          Apply global symbol visibility to external declarations without an explicit visibility
  -fasm-blocks            
  -fbasic-block-sections=<value>
                          Place each function's basic blocks in unique sections (ELF Only) : all | labels | none | list=<file>
  -fbinutils-version=<major.minor>
                          Produced object files can use all ELF features supported by this binutils version and newer. If -fno-integrated-as is specified, the generated assembly will consider GNU as support. 'none' means that all ELF features can be used, regardless of binutils support. Defaults to 2.26.
  -fblocks-runtime-optional
                          Weakly link in the blocks runtime
  -fblocks                Enable the 'blocks' language feature
  -fborland-extensions    Accept non-standard constructs supported by the Borland compiler
  -fbracket-depth <value> Maximum nesting level for parentheses, brackets, and braces
  -fbuild-session-timestamp=<time since Epoch in seconds>
                          Time when the current build session started
  -fcaret-diagnostics-max-lines <N>
                          Set the maximum number of source lines to show in a caret diagnostic
  -fcf-protection=<value> Instrument control-flow architecture protection. Options: return, branch, full, none.
  -fcf-protection         Enable cf-protection in 'full' mode
  -fchar8_t               Enable C++ builtin type char8_t
  -fclang-abi-compat=<version>
                          Attempt to match the ABI of Clang <version>
  -fcolor-diagnostics     Enable colors in diagnostics
  -fcomment-block-commands=<arg>
                          Treat each comma separated argument in <arg> as a documentation comment block command
  -fcommon                Place uninitialized global variables in a common block
  -fcompatibility-qualified-id-block-type-checking
                          Allow using blocks with parameters of more specific type than the type system guarantees when a parameter is qualified id
  -fcomplete-member-pointers
                          Require member pointer base types to be complete if they would be significant under the Microsoft ABI
  -fconcepts-ts           Enable C++ Extensions for Concepts. (deprecated - use -std=c++2a)
  -fconst-strings         Use a const qualified type for string literals in C and ObjC
  -fconstant-string-class <class name>
                          Specify the class to use for constant Objective-C string objects.
  -fconstexpr-backtrace-limit <N>
                          Set the maximum number of entries to print in a constexpr evaluation backtrace (0 = no limit).
  -fconstexpr-depth <value>
                          Maximum depth of recursive constexpr function calls
  -fconstexpr-steps <value>
                          Maximum number of steps in constexpr function evaluation
  -fconvergent-functions  Assume functions may be convergent
  -fcoroutines-ts         Enable support for the C++ Coroutines TS
  -fcoverage-mapping      Generate coverage mapping to enable code coverage analysis
  -fcuda-allow-variadic-functions
                          Allow variadic functions in CUDA device code.
  -fcuda-approx-transcendentals
                          Use approximate transcendental functions
  -fcuda-include-gpubinary <value>
                          Incorporate CUDA device-side binary into host object file.
  -fcuda-is-device        Generate code for CUDA device
  -fcuda-short-ptr        Use 32-bit pointers for accessing const/local/shared address spaces
  -fcxx-exceptions        Enable C++ exceptions
  -fdata-sections         Place each data in its own section
  -fdebug-compilation-dir <value>
                          The compilation directory to embed in the debug info.
  -fdebug-info-for-profiling
                          Emit extra debug info to make sample profile more accurate
  -fdebug-pass-manager    Prints debug information for the new pass manager
  -fdebug-prefix-map=<value>
                          remap file source paths in debug info
  -fdebug-ranges-base-address
                          Use DWARF base address selection entries in .debug_ranges
  -fdebugger-cast-result-to-id
                          Enable casting unknown expression results to id
  -fdebugger-objc-literal Enable special debugger support for Objective-C subscripting and literals
  -fdebugger-support      Enable special debugger support behavior
  -fdeclare-opencl-builtins
                          Add OpenCL builtin function declarations (experimental)
  -fdeclspec              Allow __declspec as a keyword
  -fdefault-calling-conv=<value>
                          Set default calling convention
  -fdelayed-template-parsing
                          Parse templated function definitions at the end of the translation unit
  -fdeprecated-macro      Defines the __DEPRECATED macro
  -fdiagnostics-absolute-paths
                          Print absolute paths in diagnostics
  -fdiagnostics-format <value>
                          Change diagnostic formatting to match IDE and command line tools
  -fdiagnostics-hotness-threshold=<value>
                          Prevent optimization remarks from being output if they do not have at least this profile count. Use 'auto' to apply the threshold from profile summary
  -fdiagnostics-parseable-fixits
                          Print fix-its in machine parseable form
  -fdiagnostics-print-source-range-info
                          Print source range spans in numeric form
  -fdiagnostics-show-category <value>
                          Print diagnostic category
  -fdiagnostics-show-hotness
                          Enable profile hotness information in diagnostic line
  -fdiagnostics-show-note-include-stack
                          Display include stacks for diagnostic notes
  -fdiagnostics-show-template-tree
                          Print a template comparison tree for differing templates
  -fdigraphs              Enable alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:' (default)
  -fdirect-access-external-data
                          Don't use GOT indirection to reference external data symbols
  -fdisable-module-hash   Disable the module hash
  -fdollars-in-identifiers
                          Allow '$' in identifiers
  -fdouble-square-bracket-attributes
                          Enable '[[]]' attributes in all C and C++ language modes
  -fdump-record-layouts-simple
                          Dump record layout information in a simple form used for testing
  -fdump-record-layouts   Dump record layout information
  -fdump-vtable-layouts   Dump the layouts of all vtables that will be emitted in a translation unit
  -fembed-bitcode=<option>
                          Embed LLVM bitcode (option: off, all, bitcode, marker)
  -femit-all-decls        Emit all declarations, even if unused
  -femulated-tls          Use emutls functions to access thread_local variables
  -fenable-matrix         Enable matrix data type and related builtin functions
  -fencode-extended-block-signature
                          enable extended encoding of block type signature
  -ferror-limit <N>       Set the maximum number of errors to emit before stopping (0 = no limit).
  -fexceptions            Enable support for exception handling
  -fexperimental-debug-variable-locations
                          Use experimental new value-tracking variable locations
  -fexperimental-new-constant-interpreter
                          Enable the experimental new constant interpreter
  -fexperimental-relative-c++-abi-vtables
                          Use the experimental C++ class ABI for classes with virtual tables
  -fexperimental-strict-floating-point
                          Enables experimental strict floating point in LLVM.
  -fexternc-nounwind      Assume all functions with C linkage do not unwind
  -ffake-address-space-map
                          Use a fake address space map; OpenCL testing purposes only
  -ffast-math             Allow aggressive, lossy floating-point optimizations
  -ffine-grained-bitfield-accesses
                          Use separate accesses for consecutive bitfield runs with legal widths and alignments.
  -ffinite-loops          Assume all loops are finite.
  -ffinite-math-only      
  -ffixed-point           Enable fixed point types
  -fforbid-guard-variables
                          Emit an error if a C++ static local initializer would need a guard variable
  -fforce-dwarf-frame     Always emit a debug frame section
  -fforce-emit-vtables    Emits more virtual tables to improve devirtualization
  -fforce-enable-int128   Enable support for int128_t type
  -ffp-contract=<value>   Form fused FP ops (e.g. FMAs): fast (fuses across statements disregarding pragmas) | on (only fuses in the same statement unless dictated by pragmas) | off (never fuses) | fast-honor-pragmas (fuses across statements unless diectated by pragmas). Default is 'fast' for CUDA, 'fast-honor-pragmas' for HIP, and 'on' otherwise.
  -ffp-exception-behavior=<value>
                          Specifies the exception behavior of floating-point operations.
  -ffreestanding          Assert that the compilation takes place in a freestanding environment
  -ffunction-sections     Place each function in its own section
  -fgnu-keywords          Allow GNU-extension keywords regardless of language standard
  -fgnu89-inline          Use the gnu89 inline semantics
  -fgnuc-version=<value>  Sets various macros to claim compatibility with the given GCC version (default is 4.2.1)
  -fgpu-allow-device-init Allow device side init function in HIP
  -fgpu-defer-diag        Defer host/device related diagnostic messages for CUDA/HIP
  -fgpu-exclude-wrong-side-overloads
                          Always exclude wrong side overloads in overloading resolution for CUDA/HIP
  -fgpu-rdc               Generate relocatable device code, also known as separate compilation mode
  -fhalf-no-semantic-interposition
                          Like -fno-semantic-interposition but don't use local aliases
  -fhip-new-launch-api    Use new kernel launching API for HIP
  -fignore-exceptions     Enable support for ignoring exception handling constructs
  -fimplicit-module-maps  Implicitly search the file system for module map files.
  -finclude-default-header
                          Include default header file for OpenCL
  -finline-functions      Inline suitable functions
  -finline-hint-functions Inline functions which are (explicitly or implicitly) marked inline
  -finstrument-function-entry-bare
                          Instrument function entry only, after inlining, without arguments to the instrumentation call
  -finstrument-functions-after-inlining
                          Like -finstrument-functions, but insert the calls after inlining
  -finstrument-functions  Generate calls to instrument function entry and exit
  -fix-only-warnings      Apply fix-it advice only for warnings, not errors
  -fix-what-you-can       Apply fix-it advice even in the presence of unfixable errors
  -fixit-recompile        Apply fix-it changes and recompile
  -fixit-to-temporary     Apply fix-it changes to temporary files
  -fixit=<value>          Apply fix-it advice creating a file with the given suffix
  -fixit                  Apply fix-it advice to the input source
  -fkeep-static-consts    Keep static const variables if unused
  -flax-vector-conversions=<value>
                          Enable implicit vector bit-casts
  -flegacy-pass-manager   Use the legacy pass manager in LLVM
  -flto-jobs=<value>      Controls the backend parallelism of -flto=thin (default of 0 means the number of threads will be derived from the number of CPUs detected)
  -flto-unit              Emit IR to support LTO unit features (CFI, whole program vtable opt)
  -flto-visibility-public-std
                          Use public LTO visibility for classes in std and stdext namespaces
  -flto=<value>           Set LTO mode to either 'full' or 'thin'
  -flto                   Enable LTO in 'full' mode
  -fmacro-backtrace-limit <N>
                          Set the maximum number of entries to print in a macro expansion backtrace (0 = no limit).
  -fmacro-prefix-map=<value>
                          remap file source paths in predefined preprocessor macros
  -fmath-errno            Require math functions to indicate errors by setting errno
  -fmax-tokens=<value>    Max total number of preprocessed tokens for -Wmax-tokens.
  -fmax-type-align=<value>
                          Specify the maximum alignment to enforce on pointers lacking an explicit alignment
  -fmemory-profile=<directory>
                          Enable heap memory profiling and dump results into <directory>
  -fmemory-profile        Enable heap memory profiling
  -fmerge-all-constants   Allow merging of constants
  -fmerge-functions       Permit merging of identical functions when optimizing.
  -fmessage-length=<value>
                          Format message diagnostics so that they fit within N columns
  -fmodule-feature <feature>
                          Enable <feature> in module map requires declarations
  -fmodule-file=[<name>=]<file>
                          Specify the mapping of module name to precompiled module file, or load a module file if name is omitted.
  -fmodule-format=<value> Select the container format for clang modules and PCH. Supported options are 'raw' and 'obj'.
  -fmodule-map-file-home-is-cwd
                          Use the current working directory as the home directory of module maps specified by -fmodule-map-file=<FILE>
  -fmodule-map-file=<file>
                          Load this module map file
  -fmodule-name=<name>    Specify the name of the module to build
  -fmodules-cache-path=<directory>
                          Specify the module cache path
  -fmodules-codegen       Generate code for uses of this module that assumes an explicit object file will be built for the module
  -fmodules-debuginfo     Generate debug info for types in an object file built from this module and do not generate them elsewhere
  -fmodules-decluse       Require declaration of modules used within a module
  -fmodules-disable-diagnostic-validation
                          Disable validation of the diagnostic options when loading the module
  -fmodules-embed-all-files<value>
                          Embed the contents of all files read by this compilation into the produced module file.
  -fmodules-embed-file=<file>
                          Embed the contents of the specified file into the module file being compiled.
  -fmodules-hash-content  Enable hashing the content of a module file
  -fmodules-ignore-macro=<value>
                          Ignore the definition of the given macro when building and loading modules
  -fmodules-local-submodule-visibility
                          Enforce name visibility rules across submodules of the same top-level module.
  -fmodules-prune-after=<seconds>
                          Specify the interval (in seconds) after which a module file will be considered unused
  -fmodules-prune-interval=<seconds>
                          Specify the interval (in seconds) between attempts to prune the module cache
  -fmodules-search-all    Search even non-imported modules to resolve references
  -fmodules-strict-context-hash
                          Enable hashing of all compiler options that could impact the semantics of a module in an implicit build
  -fmodules-strict-decluse
                          Like -fmodules-decluse but requires all headers to be in modules
  -fmodules-ts            Enable support for the C++ Modules TS
  -fmodules-user-build-path <directory>
                          Specify the module user build path
  -fmodules-validate-once-per-build-session
                          Don't verify input files for the modules if the module has been successfully validated or loaded during this build session
  -fmodules-validate-system-headers
                          Validate the system headers that a module depends on when loading the module
  -fmodules               Enable the 'modules' language feature
  -fms-compatibility-version=<value>
                          Dot-separated value representing the Microsoft compiler version number to report in _MSC_VER (0 = don't define it (default))
  -fms-compatibility      Enable full Microsoft Visual C++ compatibility
  -fms-extensions         Accept some non-standard constructs supported by the Microsoft compiler
  -fnative-half-arguments-and-returns
                          Use the native __fp16 type for arguments and returns (and skip ABI-specific lowering)
  -fnative-half-type      Use the native half type for __fp16 instead of promoting to float
  -fnew-alignment=<align> Specifies the largest alignment guaranteed by '::operator new(size_t)'
  -fno-aapcs-bitfield-width
                          Do not follow the AAPCS standard requirement stating that volatile bit-field width is dictated by the field container type. (ARM only).
  -fno-access-control     Disable C++ access control
  -fno-assume-sane-operator-new
                          Don't assume that C++'s global operator new can't alias any pointer
  -fno-autolink           Disable generation of linker directives for automatic library linking
  -fno-bitfield-type-align
                          Ignore bit-field types when aligning structures
  -fno-builtin-<value>    Disable implicit builtin knowledge of a specific function
  -fno-builtin            Disable implicit builtin knowledge of functions
  -fno-c++-static-destructors
                          Disable C++ static destructor registration
  -fno-caret-diagnostics  
  -fno-char8_t            Disable C++ builtin type char8_t
  -fno-common             Compile common globals like normal definitions
  -fno-concept-satisfaction-caching
                          Disable satisfaction caching for C++2a Concepts.
  -fno-const-strings      Don't use a const qualified type for string literals in C and ObjC
  -fno-constant-cfstrings Disable creation of CodeFoundation-type constant strings
  -fno-cuda-host-device-constexpr
                          Don't treat unattributed constexpr functions as __host__ __device__.
  -fno-debug-pass-manager Disables debug printing for the new pass manager
  -fno-declspec           Disallow __declspec as a keyword
  -fno-delete-null-pointer-checks
                          Do not treat usage of null pointers as undefined behavior
  -fno-deprecated-macro   Undefines the __DEPRECATED macro
  -fno-diagnostics-fixit-info
                          Do not include fixit information in diagnostics
  -fno-diagnostics-show-note-include-stack
                          
  -fno-diagnostics-show-option
                          
  -fno-diagnostics-use-presumed-location
                          Ignore #line directives when displaying diagnostic locations
  -fno-digraphs           Disallow alternative token representations '<:', ':>', '<%', '%>', '%:', '%:%:'
  -fno-direct-access-external-data
                          Use GOT indirection to reference external data symbols
  -fno-dollars-in-identifiers
                          Disallow '$' in identifiers
  -fno-double-square-bracket-attributes
                          Disable '[[]]' attributes in all C and C++ language modes
  -fno-dwarf-directory-asm
                          
  -fno-elide-constructors Disable C++ copy constructor elision
  -fno-elide-type         Do not elide types when printing diagnostics
  -fno-eliminate-unused-debug-types
                          Emit  debug info for defined but unused types
  -fno-emulated-tls       
  -fno-escaping-block-tail-calls
                          
  -fno-experimental-relative-c++-abi-vtables
                          Do not use the experimental C++ class ABI for classes with virtual tables
  -fno-fine-grained-bitfield-accesses
                          Use large-integer access for consecutive bitfield runs.
  -fno-finite-loops       Do not assume that any loop is finite.
  -fno-gnu-inline-asm     Disable GNU style inline asm
  -fno-gnu-keywords       
  -fno-implicit-modules   
  -fno-integrated-as      Disable the integrated assembler
  -fno-jump-tables        Do not use jump tables for lowering switches
  -fno-legacy-pass-manager
                          Use the new pass manager in LLVM
  -fno-lto-unit           
  -fno-lto                Disable LTO mode (default)
  -fno-math-builtin       Disable implicit builtin knowledge of math functions
  -fno-modules-error-recovery
                          Do not automatically import modules for error recovery
  -fno-modules-global-index
                          Do not automatically generate or update the global module index
  -fno-objc-convert-messages-to-runtime-calls
                          
  -fno-objc-infer-related-result-type
                          do not infer Objective-C related result type based on method family
  -fno-operator-names     Do not treat C++ operator name keywords as synonyms for operators
  -fno-pch-instantiate-templates
                          
  -fno-pch-timestamp      Disable inclusion of timestamp in precompiled headers
  -fno-plt                Use GOT indirection instead of PLT to make external function calls (x86 only)
  -fno-prebuilt-implicit-modules
                          
  -fno-preserve-as-comments
                          Do not preserve comments in inline assembly
  -fno-pseudo-probe-for-profiling
                          Do not emit pseudo probes for sample profiling
  -fno-recovery-ast-type  
  -fno-recovery-ast       
  -fno-rtti-data          Disable generation of RTTI data
  -fno-rtti               Disable generation of rtti information
  -fno-sanitize-address-poison-custom-array-cookie
                          Disable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fno-sanitize-address-use-after-scope
                          Disable use-after-scope detection in AddressSanitizer
  -fno-sanitize-address-use-odr-indicator
                          Disable ODR indicator globals
  -fno-sanitize-blacklist Don't use blacklist file for sanitizers
  -fno-sanitize-cfi-canonical-jump-tables
                          Do not make the jump table addresses canonical in the symbol table
  -fno-sanitize-cfi-cross-dso
                          Disable control flow integrity (CFI) checks for cross-DSO calls.
  -fno-sanitize-coverage=<value>
                          Disable specified features of coverage instrumentation for Sanitizers
  -fno-sanitize-memory-track-origins
                          Disable origins tracking in MemorySanitizer
  -fno-sanitize-memory-use-after-dtor
                          Disable use-after-destroy detection in MemorySanitizer
  -fno-sanitize-minimal-runtime
                          
  -fno-sanitize-recover=<value>
                          Disable recovery for specified sanitizers
  -fno-sanitize-stats     Disable sanitizer statistics gathering.
  -fno-sanitize-thread-atomics
                          Disable atomic operations instrumentation in ThreadSanitizer
  -fno-sanitize-thread-func-entry-exit
                          Disable function entry/exit instrumentation in ThreadSanitizer
  -fno-sanitize-thread-memory-access
                          Disable memory access instrumentation in ThreadSanitizer
  -fno-sanitize-trap=<value>
                          Disable trapping for specified sanitizers
  -fno-sanitize-trap      Disable trapping for all sanitizers
  -fno-show-column        Do not include column number on diagnostics
  -fno-show-source-location
                          Do not include source location information with diagnostics
  -fno-signed-char        char is unsigned
  -fno-signed-wchar       Use an unsigned type for wchar_t
  -fno-signed-zeros       Allow optimizations that ignore the sign of floating point zeros
  -fno-spell-checking     Disable spell-checking
  -fno-split-dwarf-inlining
                          
  -fno-strict-float-cast-overflow
                          Relax language rules and try to match the behavior of the target's native float-to-int conversion instructions
  -fno-strict-return      Don't treat control flow paths that fall off the end of a non-void function as unreachable
  -fno-temp-file          Directly create compilation output files. This may lead to incorrect incremental builds if the compiler crashes
  -fno-threadsafe-statics Do not emit code to make initialization of local statics thread safe
  -fno-trigraphs          Do not process trigraph sequences
  -fno-unique-section-names
                          Don't use unique names for text and data sections
  -fno-unroll-loops       Turn off loop unroller
  -fno-use-cxa-atexit     Don't use __cxa_atexit for calling destructors
  -fno-use-init-array     Use .ctors/.dtors instead of .init_array/.fini_array
  -fno-validate-pch       Disable validation of precompiled headers
  -fno-visibility-inlines-hidden-static-local-var
                          Disables -fvisibility-inlines-hidden-static-local-var (this is the default on non-darwin targets)
  -fno-wchar              Disable C++ builtin type wchar_t
  -fno-xray-function-index
                          Omit function index section at the expense of single-function patching performance
  -fno-zero-initialized-in-bss
                          Don't place zero initialized data in BSS
  -fobjc-arc-cxxlib=<value>
                          Objective-C++ Automatic Reference Counting standard library kind
  -fobjc-arc-exceptions   Use EH-safe code when synthesizing retains and releases in -fobjc-arc
  -fobjc-arc              Synthesize retain and release calls for Objective-C pointers
  -fobjc-dispatch-method=<value>
                          Objective-C dispatch method to use
  -fobjc-exceptions       Enable Objective-C exceptions
  -fobjc-gc-only          Use GC exclusively for Objective-C related memory management
  -fobjc-gc               Enable Objective-C garbage collection
  -fobjc-runtime-has-weak The target Objective-C runtime supports ARC weak operations
  -fobjc-runtime=<value>  Specify the target Objective-C runtime kind and version
  -fobjc-subscripting-legacy-runtime
                          Allow Objective-C array and dictionary subscripting in legacy runtime
  -fobjc-weak             Enable ARC-style weak references in Objective-C
  -fopenmp-cuda-parallel-target-regions
                          Support parallel execution of target regions on Cuda-based devices.
  -fopenmp-enable-irbuilder
                          Use the experimental OpenMP-IR-Builder codegen path.
  -fopenmp-host-ir-file-path <value>
                          Path to the IR file produced by the frontend for the host.
  -fopenmp-is-device      Generate code only for an OpenMP target device.
  -fopenmp-optimistic-collapse
                          
  -fopenmp-simd           Emit OpenMP code only for SIMD-based constructs.
  -fopenmp-targets=<value>
                          Specify comma-separated list of triples OpenMP offloading targets to be supported
  -fopenmp                Parse OpenMP pragmas and generate parallel code.
  -foperator-arrow-depth <value>
                          Maximum number of 'operator->'s to call for a member access
  -forder-file-instrumentation
                          Generate instrumented code to collect order file into default.profraw file (overridden by '=' form of option or LLVM_PROFILE_FILE env var)
  -foverride-record-layout=<value>
                          Override record layouts with those in the given file
  -fpack-struct=<value>   Specify the default maximum struct packing alignment
  -fpadding-on-unsigned-fixed-point
                          Force each unsigned fixed point type to have an extra bit of padding to align their scales with those of signed fixed point types
  -fpascal-strings        Recognize and construct Pascal-style string literals
  -fpass-by-value-is-noalias
                          Allows assuming by-value parameters do not alias any other value. Has no effect on non-trivially-copyable classes in C++.
  -fpass-plugin=<dsopath> Load pass plugin from a dynamic shared object file (only with new pass manager).
  -fpatchable-function-entry-offset=<M>
                          Generate M NOPs before function entry
  -fpatchable-function-entry=<N,M>
                          Generate M NOPs before function entry and N-M NOPs after function entry
  -fpcc-struct-return     Override the default ABI to return all structs on the stack
  -fpch-codegen           Generate code for uses of this PCH that assumes an explicit object file will be built for the PCH
  -fpch-debuginfo         Generate debug info for types in an object file built from this PCH and do not generate them elsewhere
  -fpch-instantiate-templates
                          Instantiate templates already while building a PCH
  -fprebuilt-implicit-modules
                          Look up implicit modules in the prebuilt module path
  -fprebuilt-module-path=<directory>
                          Specify the prebuilt module path
  -fpreserve-vec3-type    Preserve 3-component vector type
  -fprofile-arcs          
  -fprofile-exclude-files=<value>
                          Instrument only functions from files where names don't match all the regexes separated by a semi-colon
  -fprofile-filter-files=<value>
                          Instrument only functions from files where names match any regex separated by a semi-colon
  -fprofile-instrument-path=<value>
                          Generate instrumented code to collect execution counts into <file> (overridden by LLVM_PROFILE_FILE env var)
  -fprofile-instrument-use-path=<value>
                          Specify the profile path in PGO use compilation
  -fprofile-instrument=<value>
                          Enable PGO instrumentation. The accepted value is clang, llvm, or none
  -fprofile-list=<value>  Filename defining the list of functions/files to instrument
  -fprofile-prefix-map=<value>
                          remap file source paths in coverage info
  -fprofile-remapping-file=<file>
                          Use the remappings described in <file> to match the profile data against names in the program
  -fprofile-sample-accurate
                          Specifies that the sample profile is accurate
  -fprofile-sample-use=<value>
                          Enable sample-based profile guided optimizations
  -fprofile-update=<method>
                          Set update method of profile counters (atomic,prefer-atomic,single)
  -fpseudo-probe-for-profiling
                          Emit pseudo probes for sample profiling
  -freciprocal-math       Allow division operations to be reassociated
  -frecovery-ast-type     Preserve the type for recovery expressions when possible
  -frecovery-ast          Preserve expressions in AST rather than dropping them when encountering semantic errors
  -freg-struct-return     Override the default ABI to return small structs in registers
  -fregister-global-dtors-with-atexit
                          Use atexit or __cxa_atexit to register global destructors
  -frelaxed-template-template-args
                          Enable C++17 relaxed template template argument matching
  -freroll-loops          Turn on loop reroller
  -frewrite-imports       
  -frewrite-includes      
  -fropi                  Generate read-only position independent code (ARM only)
  -frwpi                  Generate read-write position independent code (ARM only)
  -fsanitize-address-field-padding=<value>
                          Level of field padding for AddressSanitizer
  -fsanitize-address-globals-dead-stripping
                          Enable linker dead stripping of globals in AddressSanitizer
  -fsanitize-address-poison-custom-array-cookie
                          Enable poisoning array cookies when using custom operator new[] in AddressSanitizer
  -fsanitize-address-use-after-scope
                          Enable use-after-scope detection in AddressSanitizer
  -fsanitize-address-use-odr-indicator
                          Enable ODR indicator globals to avoid false ODR violation reports in partially sanitized programs at the cost of an increase in binary size
  -fsanitize-blacklist=<value>
                          Path to blacklist file for sanitizers
  -fsanitize-cfi-canonical-jump-tables
                          Make the jump table addresses canonical in the symbol table
  -fsanitize-cfi-cross-dso
                          Enable control flow integrity (CFI) checks for cross-DSO calls.
  -fsanitize-cfi-icall-generalize-pointers
                          Generalize pointers in CFI indirect call type signature checks
  -fsanitize-coverage-8bit-counters
                          Enable frequency counters in sanitizer coverage
  -fsanitize-coverage-allowlist=<value>
                          Restrict sanitizer coverage instrumentation exclusively to modules and functions that match the provided special case list, except the blocked ones
  -fsanitize-coverage-blacklist=<value>
                          Deprecated, use -fsanitize-coverage-blocklist= instead
  -fsanitize-coverage-blocklist=<value>
                          Disable sanitizer coverage instrumentation for modules and functions that match the provided special case list, even the allowed ones
  -fsanitize-coverage-indirect-calls
                          Enable sanitizer coverage for indirect calls
  -fsanitize-coverage-inline-8bit-counters
                          Enable inline 8-bit counters in sanitizer coverage
  -fsanitize-coverage-inline-bool-flag
                          Enable inline bool flag in sanitizer coverage
  -fsanitize-coverage-no-prune
                          Disable coverage pruning (i.e. instrument all blocks/edges)
  -fsanitize-coverage-pc-table
                          Create a table of coverage-instrumented PCs
  -fsanitize-coverage-stack-depth
                          Enable max stack depth tracing
  -fsanitize-coverage-trace-bb
                          Enable basic block tracing in sanitizer coverage
  -fsanitize-coverage-trace-cmp
                          Enable cmp instruction tracing in sanitizer coverage
  -fsanitize-coverage-trace-div
                          Enable div instruction tracing in sanitizer coverage
  -fsanitize-coverage-trace-gep
                          Enable gep instruction tracing in sanitizer coverage
  -fsanitize-coverage-trace-pc-guard
                          Enable PC tracing with guard in sanitizer coverage
  -fsanitize-coverage-trace-pc
                          Enable PC tracing in sanitizer coverage
  -fsanitize-coverage-type=<value>
                          Sanitizer coverage type
  -fsanitize-coverage-whitelist=<value>
                          Deprecated, use -fsanitize-coverage-allowlist= instead
  -fsanitize-coverage=<value>
                          Specify the type of coverage instrumentation for Sanitizers
  -fsanitize-hwaddress-abi=<value>
                          Select the HWAddressSanitizer ABI to target (interceptor or platform, default interceptor). This option is currently unused.
  -fsanitize-memory-track-origins=<value>
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-track-origins
                          Enable origins tracking in MemorySanitizer
  -fsanitize-memory-use-after-dtor
                          Enable use-after-destroy detection in MemorySanitizer
  -fsanitize-minimal-runtime
                          
  -fsanitize-recover=<value>
                          Enable recovery for specified sanitizers
  -fsanitize-stats        Enable sanitizer statistics gathering.
  -fsanitize-system-blacklist=<value>
                          Path to system blacklist file for sanitizers
  -fsanitize-thread-atomics
                          Enable atomic operations instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-func-entry-exit
                          Enable function entry/exit instrumentation in ThreadSanitizer (default)
  -fsanitize-thread-memory-access
                          Enable memory access instrumentation in ThreadSanitizer (default)
  -fsanitize-trap=<value> Enable trapping for specified sanitizers
  -fsanitize-trap         Enable trapping for all sanitizers
  -fsanitize-undefined-strip-path-components=<number>
                          Strip (or keep only, if negative) a given number of path components when emitting check metadata.
  -fsanitize=<check>      Turn on runtime checks for various forms of undefined or suspicious behavior. See user manual for available checks
  -fsemantic-interposition
                          
  -fshort-enums           Allocate to an enum type only as many bytes as it needs for the declared range of possible values
  -fshow-overloads=<value>
                          Which overload candidates to show when overload resolution fails: best|all; defaults to all
  -fsigned-wchar          Use a signed type for wchar_t
  -fsized-deallocation    Enable C++14 sized global deallocation functions
  -fspell-checking-limit <N>
                          Set the maximum number of times to perform spell checking on unrecognized identifiers (0 = no limit).
  -fsplit-lto-unit        Enables splitting of the LTO unit
  -fsplit-machine-functions
                          Enable late function splitting using profile information (x86 ELF)
  -fstack-clash-protection
                          Enable stack clash protection
  -fstack-size-section    Emit section containing metadata on function stack sizes
  -fstrict-enums          Enable optimizations based on the strict definition of an enum's value range
  -fstrict-vtable-pointers
                          Enable optimizations based on the strict rules for overwriting polymorphic C++ objects
  -fsycl-is-device        Generate code for SYCL device.
  -fsycl                  Enable SYCL kernels compilation for device
  -fsystem-module         Build this module as a system module. Only used with -emit-module
  -ftabstop <N>           Set the tab stop distance.
  -ftemplate-backtrace-limit <N>
                          Set the maximum number of entries to print in a template instantiation backtrace (0 = no limit).
  -ftemplate-depth <value>
                          Maximum depth of recursive template instantiation
  -ftest-coverage         
  -ftest-module-file-extension=<value>
                          introduce a module file extension for testing purposes. The argument is parsed as blockname:major:minor:hashed:user info
  -fthin-link-bitcode=<value>
                          Write minimized bitcode to <file> for the ThinLTO thin link only
  -fthinlto-index=<value> Perform ThinLTO importing using provided function summary index
  -ftime-report=<value>   (For new pass manager) "per-pass": one report for each pass; "per-pass-run": one report for each pass invocation
  -ftime-trace-granularity=<value>
                          Minimum time granularity (in microseconds) traced by time profiler
  -ftime-trace            Turn on time profiler. Generates JSON file based on output filename.
  -ftrap-function=<value> Issue call to specified function rather than a trap instruction
  -ftrapv                 Trap on integer overflow
  -ftrigraphs             Process trigraph sequences
  -ftrivial-auto-var-init-stop-after=<value>
                          Stop initializing trivial automatic stack variables after the specified number of instances
  -ftrivial-auto-var-init=<value>
                          Initialize trivial automatic stack variables: uninitialized (default) | pattern
  -ftype-visibility <value>
                          Default type visibility
  -function-alignment <value>
                          default alignment for functions
  -funique-basic-block-section-names
                          Use unique names for basic block sections (ELF Only)
  -funique-internal-linkage-names
                          Uniqueify Internal Linkage Symbol Names by appending the MD5 hash of the module path
  -funknown-anytype       Enable parser support for the __unknown_anytype type; for testing purposes only
  -funroll-loops          Turn on loop unroller
  -fuse-ctor-homing       Use constructor homing if we are using limited debug info already
  -fuse-line-directives   Use #line in preprocessed output
  -fuse-register-sized-bitfield-access
                          Use register sized accesses to bit-fields, when possible.
  -fvalidate-ast-input-files-content
                          Compute and store the hash of input files used to build an AST. Files with mismatching mtime's are considered valid if both contents is identical
  -fveclib=<value>        Use the given vector functions library
  -fvirtual-function-elimination
                          Enables dead virtual function elimination optimization. Requires -flto=full
  -fvisibility-dllexport=<value>
                          The visibility for dllexport defintions [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-dllimport=<value>
                          The visibility for dllimport external declarations [-fvisibility-from-dllstorageclass]
  -fvisibility-externs-nodllstorageclass=<value>
                          The visibility for external declarations without an explicit DLL dllstorageclass [-fvisibility-from-dllstorageclass]
  -fvisibility-from-dllstorageclass
                          Set the visiblity of symbols in the generated code from their DLL storage class
  -fvisibility-global-new-delete-hidden
                          Give global C++ operator new and delete declarations hidden visibility
  -fvisibility-inlines-hidden-static-local-var
                          When -fvisibility-inlines-hidden is enabled, static variables in inline C++ member functions will also be given hidden visibility by default
  -fvisibility-inlines-hidden
                          Give inline C++ member functions hidden visibility by default
  -fvisibility-nodllstorageclass=<value>
                          The visibility for defintiions without an explicit DLL export class [-fvisibility-from-dllstorageclass]
  -fvisibility <value>    Default type and symbol visibility
  -fwchar-type=<value>    Select underlying type for wchar_t
  -fwhole-program-vtables Enables whole-program vtable optimization. Requires -flto
  -fwrapv                 Treat signed integer overflow as two's complement
  -fwritable-strings      Store string literals as writable data
  -fxl-pragma-pack        Enable IBM XL #pragma pack handling
  -fxray-always-emit-customevents
                          Always emit __xray_customevent(...) calls even if the containing function is not always instrumented
  -fxray-always-emit-typedevents
                          Always emit __xray_typedevent(...) calls even if the containing function is not always instrumented
  -fxray-always-instrument= <value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'always instrument' XRay attribute.
  -fxray-attr-list= <value>
                          Filename defining the list of functions/types for imbuing XRay attributes.
  -fxray-function-groups=<value>
                          Only instrument 1 of N groups
  -fxray-ignore-loops     Don't instrument functions with loops unless they also meet the minimum function size
  -fxray-instruction-threshold= <value>
                          Sets the minimum function size to instrument with XRay
  -fxray-instrumentation-bundle= <value>
                          Select which XRay instrumentation points to emit. Options: all, none, function-entry, function-exit, function, custom. Default is 'all'.  'function' includes both 'function-entry' and 'function-exit'.
  -fxray-instrument       Generate XRay instrumentation sleds on function entry and exit
  -fxray-link-deps        Tells clang to add the link dependencies for XRay.
  -fxray-modes= <value>   List of modes to link in by default into XRay instrumented binaries.
  -fxray-never-instrument= <value>
                          DEPRECATED: Filename defining the whitelist for imbuing the 'never instrument' XRay attribute.
  -fxray-selected-function-group=<value>
                          When using -fxray-function-groups, select which group of functions to instrument. Valid range is 0 to fxray-function-groups - 1
  -fzvector               Enable System z vector language extension
  -F <value>              Add directory to framework include search path
  -gcodeview-ghash        Emit type record hashes in a .debug$H section
  -gcodeview              Generate CodeView debug information
  -gdwarf32               Enables DWARF32 format for ELF binaries, if debug information emission is enabled.
  -gdwarf64               Enables DWARF64 format for ELF binaries, if debug information emission is enabled.
  -gembed-source          Embed source text in DWARF debug sections
  -gno-column-info        
  -gno-inline-line-tables Don't emit inline line tables.
  --gpu-max-threads-per-block=<value>
                          Default max threads per block for kernel launch bounds for HIP
  -header-include-file <value>
                          Filename (or -) to write header include output to
  -help                   Display available options
  -H                      Show header includes and nesting depth
  -idirafter <value>      Add directory to AFTER include search path
  -iframeworkwithsysroot <directory>
                          Add directory to SYSTEM framework search path, absolute paths are relative to -isysroot
  -iframework <value>     Add directory to SYSTEM framework search path
  -imacros <file>         Include macros from file before parsing
  -include-pch <file>     Include precompiled header file
  -include <file>         Include file before parsing
  -index-header-map       Make the next included directory (-I or -F) an indexer header map
  -init-only              Only execute frontend initialization
  -internal-externc-isystem <directory>
                          Add directory to the internal system include search path with implicit extern "C" semantics; these are assumed to not be user-provided and are used to model system and standard headers' paths.
  -internal-isystem <directory>
                          Add directory to the internal system include search path; these are assumed to not be user-provided and are used to model system and standard headers' paths.
  -iprefix <dir>          Set the -iwithprefix/-iwithprefixbefore prefix
  -iquote <directory>     Add directory to QUOTE include search path
  -isysroot <dir>         Set the system root directory (usually /)
  -isystem <directory>    Add directory to SYSTEM include search path
  -ivfsoverlay <value>    Overlay the virtual filesystem described by file over the real file system
  -iwithprefixbefore <dir>
                          Set directory to include search path with prefix
  -iwithprefix <dir>      Set directory to SYSTEM include search path with prefix
  -iwithsysroot <directory>
                          Add directory to SYSTEM include search path, absolute paths are relative to -isysroot
  -I <dir>                Add directory to the end of the list of include search paths
  --linker-option=<value> Add linker option
  -load <dsopath>         Load the named plugin (dynamic shared object)
  -mabi=ieeelongdouble    Use IEEE 754 quadruple-precision for long double
  -mabi=vec-default       Enable the default Altivec ABI on AIX (AIX only). Uses only volatile vector registers.
  -mabi=vec-extabi        Enable the extended Altivec ABI on AIX (AIX only). Uses volatile and nonvolatile vector registers
  -main-file-name <value> Main file name to use for debug info and source if missing
  -maix-struct-return     Return all structs in memory (PPC32 only)
  -malign-double          Align doubles to two words in structs (x86 only)
  -massembler-fatal-warnings
                          Make assembler warnings fatal
  -massembler-no-warn     Make assembler not emit warnings
  -mbackchain             Link stack frames through backchain on System Z
  -mcmodel=medany         Equivalent to -mcmodel=medium, compatible with RISC-V gcc.
  -mcmodel=medlow         Equivalent to -mcmodel=small, compatible with RISC-V gcc.
  -mcmse                  Allow use of CMSE (Armv8-M Security Extensions)
  -mconstructor-aliases   Emit complete constructors and destructors as aliases when possible
  -mdebug-pass <value>    Enable additional debug output
  -mdisable-tail-calls    Disable tail call optimization, keeping the call stack accurate
  -mdouble=<value>        Force double to be 32 bits or 64 bits
  -meabi <value>          Set EABI type, e.g. 4, 5 or gnu (default depends on triple)
  -menable-no-infs        Allow optimization to assume there are no infinities.
  -menable-no-nans        Allow optimization to assume there are no NaNs.
  -menable-unsafe-fp-math Allow unsafe floating-point math optimizations which may decrease precision
  -mfentry                Insert calls to fentry at function entry (x86/SystemZ only)
  -mfloat-abi <value>     The float ABI to use
  -mfpmath <value>        Which unit to use for fp math
  -mframe-pointer=<value> Specify which frame pointers to retain (all, non-leaf, none).
  -mglobal-merge          Enable merging of globals
  -MG                     Add missing headers to depfile
  -mignore-xcoff-visibility
                          Not emit the visibility attribute for asm in AIX OS or give all symbols 'unspecified' visibility in XCOFF object file
  -migrate                Migrate source code
  -mincremental-linker-compatible
                          (integrated-as) Emit an object file which can be used with an incremental linker
  -mlimit-float-precision <value>
                          Limit float precision to the given value
  -mlink-bitcode-file <value>
                          Link the given bitcode file before performing optimizations.
  -mlink-builtin-bitcode <value>
                          Link and internalize needed symbols from the given bitcode file before performing optimizations.
  -mllvm <value>          Additional arguments to forward to LLVM's option processing
  -mlong-double-128       Force long double to be 128 bits
  -mlong-double-64        Force long double to be 64 bits
  -mlong-double-80        Force long double to be 80 bits, padded to 128 bits for storage
  -mmemops                Enable generation of memop instructions
  -mms-bitfields          Set the default structure layout to be compatible with the Microsoft compiler standard
  -mno-backchain          
  -mno-global-merge       Disable merging of globals
  -mno-memops             Disable generation of memop instructions
  -mno-nvj                Disable generation of new-value jumps
  -mno-nvs                Disable generation of new-value stores
  -mno-outline-atomics    Don't generate local calls to out-of-line atomic operations
  -mno-outline            Disable function outlining (AArch64 only)
  -mno-packets            Disable generation of instruction packets
  -mno-stack-arg-probe    Disable stack probes which are enabled by default
  -mno-tls-direct-seg-refs
                          Disable direct TLS access through segment registers
  -mnoexecstack           Mark the file as not needing an executable stack
  -mnop-mcount            Generate mcount/__fentry__ calls as nops. To activate they need to be patched in.
  -mnvj                   Enable generation of new-value jumps
  -mnvs                   Enable generation of new-value stores
  -module-dependency-dir <value>
                          Directory to dump module dependencies to
  -module-file-deps       Include module files in dependency output
  -module-file-info       Provide information about a particular module file
  -moutline-atomics       Generate local calls to out-of-line atomic operations
  -moutline               Enable function outlining (AArch64 only)
  -mpacked-stack          Use packed stack layout (SystemZ only).
  -mpackets               Enable generation of instruction packets
  -mprefer-vector-width=<value>
                          Specifies preferred vector width for auto-vectorization. Defaults to 'none' which allows target specific decisions.
  -MP                     Create phony target for each dependency (other than main file)
  -mqdsp6-compat          Enable hexagon-qdsp6 backward compatibility
  -MQ <value>             Specify name of main file output to quote in depfile
  -mreassociate           Allow reassociation transformations for floating-point instructions
  -mrecord-mcount         Generate a __mcount_loc section entry for each __fentry__ call.
  -mregparm <value>       Limit the number of registers available for integer arguments
  -mrelax-all             (integrated-as) Relax all machine instructions
  --mrelax-relocations    Use relaxable elf relocations
  -mrelocation-model <value>
                          The relocation model to use
  -mrtd                   Make StdCall calling convention the default
  -msave-temp-labels      Save temporary labels in the symbol table. Note this may change .s semantics and shouldn't generally be used on compiler-generated code.
  -msign-return-address=<value>
                          Select return address signing scope
  -msmall-data-limit <value>
                          Put global and static data smaller than the limit into a special section
  -msoft-float            Use software floating point
  -mspeculative-load-hardening
                          
  -mstack-alignment=<value>
                          Set the stack alignment
  -mstack-probe-size=<value>
                          Set the stack probe size
  -mstack-protector-guard-offset=<value>
                          Use the given offset for addressing the stack-protector guard
  -mstack-protector-guard-reg=<value>
                          Use the given reg for addressing the stack-protector guard
  -mstack-protector-guard=<value>
                          Use the given guard (global, tls) for addressing the stack-protector guard
  -mstackrealign          Force realign the stack at entry to every function
  -mstrict-align          Force all memory accesses to be aligned (same as mno-unaligned-access)
  -msve-vector-bits=<value>
                          Specify the size in bits of an SVE vector register. Defaults to the vector length agnostic value of "scalable". (AArch64 only)
  -msvr4-struct-return    Return small structs in registers (PPC32 only)
  -mt-migrate-directory <value>
                          Directory for temporary files produced during ARC or ObjC migration
  -mthread-model <value>  The thread model to use, e.g. posix, single (posix by default)
  -mtls-size=<value>      Specify bit size of immediate TLS offsets (AArch64 ELF only): 12 (for 4KB) | 24 (for 16MB, default) | 32 (for 4GB) | 48 (for 256TB, needs -mcmodel=large)
  -mtp <value>            Mode for reading thread pointer
  -MT <value>             Specify name of main file output in depfile
  -munsafe-fp-atomics     Enable unsafe floating point atomic instructions (AMDGPU only)
  -munwind-tables         Generate unwinding tables for all functions
  -MV                     Use NMake/Jom format for the depfile
  -new-struct-path-tbaa   Enable enhanced struct-path aware Type Based Alias Analysis
  -no-code-completion-globals
                          Do not include global declarations in code-completion results.
  -no-code-completion-ns-level-decls
                          Do not include declarations inside namespaces (incl. global namespace) in the code-completion results.
  -no-emit-llvm-uselists  Don't preserve order of LLVM use-lists when serializing
  -no-finalize-removal    Do not remove finalize method in gc mode
  -no-implicit-float      Don't generate implicit floating point instructions
  -no-ns-alloc-error      Do not error on use of NSAllocateCollectable/NSReallocateCollectable
  -no-pthread             
  -no-struct-path-tbaa    Turn off struct-path aware Type Based Alias Analysis
  --no-system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as not including a system header.
  -nobuiltininc           Disable builtin #include directories
  -nostdinc++             Disable standard #include directories for the C++ standard library
  -nostdsysteminc         Disable standard system #include directories
  -objc-isystem <directory>
                          Add directory to the ObjC SYSTEM include search path
  -objcmt-atomic-property Make migration to 'atomic' properties
  -objcmt-migrate-all     Enable migration to modern ObjC
  -objcmt-migrate-annotation
                          Enable migration to property and method annotations
  -objcmt-migrate-designated-init
                          Enable migration to infer NS_DESIGNATED_INITIALIZER for initializer methods
  -objcmt-migrate-instancetype
                          Enable migration to infer instancetype for method result type
  -objcmt-migrate-literals
                          Enable migration to modern ObjC literals
  -objcmt-migrate-ns-macros
                          Enable migration to NS_ENUM/NS_OPTIONS macros
  -objcmt-migrate-property-dot-syntax
                          Enable migration of setter/getter messages to property-dot syntax
  -objcmt-migrate-property
                          Enable migration to modern ObjC property
  -objcmt-migrate-protocol-conformance
                          Enable migration to add protocol conformance on classes
  -objcmt-migrate-readonly-property
                          Enable migration to modern ObjC readonly property
  -objcmt-migrate-readwrite-property
                          Enable migration to modern ObjC readwrite property
  -objcmt-migrate-subscripting
                          Enable migration to modern ObjC subscripting
  -objcmt-ns-nonatomic-iosonly
                          Enable migration to use NS_NONATOMIC_IOSONLY macro for setting property's 'atomic' attribute
  -objcmt-returns-innerpointer-property
                          Enable migration to annotate property with NS_RETURNS_INNER_POINTER
  -objcmt-whitelist-dir-path=<value>
                          Only modify files with a filename contained in the provided directory path
  -objcxx-isystem <directory>
                          Add directory to the ObjC++ SYSTEM include search path
  -opt-record-file <value>
                          File name to use for YAML optimization record output
  -opt-record-format <value>
                          The format used for serializing remarks (default: YAML)
  -opt-record-passes <value>
                          Only record remark information for passes whose names match the given regular expression
  -o <file>               Write output to <file>
  -pch-through-hdrstop-create
                          When creating a PCH, stop PCH generation after #pragma hdrstop.
  -pch-through-hdrstop-use
                          When using a PCH, skip tokens until after a #pragma hdrstop.
  -pch-through-header=<value>
                          Stop PCH generation after including this file.  When using a PCH, skip tokens until after this file is included.
  -pg                     Enable mcount instrumentation
  -pic-is-pie             File is for a position independent executable
  -pic-level <value>      Value for __PIC__
  -plugin-arg-<name> <arg>
                          Pass <arg> to plugin <name>
  -plugin <name>          Use the named plugin action instead of the default action (use "help" to list available options)
  -preamble-bytes=<value> Assume that the precompiled header is a precompiled preamble covering the first N bytes of the main file
  -print-dependency-directives-minimized-source
                          Print the output of the dependency directives source minimizer
  -print-ivar-layout      Enable Objective-C Ivar layout bitmap print trace
  -print-preamble         Print the "preamble" of a file, which is a candidate for implicit precompiled headers.
  -print-stats            Print performance metrics and statistics
  -print-supported-cpus   Print supported cpu models for the given target (if target is not specified, it will print the supported cpus for the default target)
  -pthread                Support POSIX threads in generated code
  -P                      Disable linemarker output in -E mode
  -Qn                     Do not emit metadata containing compiler name and version
  -Qy                     Emit metadata containing compiler name and version
  -record-command-line <value>
                          The string to embed in the .LLVM.command.line section.
  -relaxed-aliasing       Turn off Type Based Alias Analysis
  -relocatable-pch        Whether to build a relocatable precompiled header
  -remap-file <from>;<to> Replace the contents of the <from> file with the contents of the <to> file
  -resource-dir <value>   The directory which holds the compiler resource files
  -rewrite-macros         Expand macros without full preprocessing
  -rewrite-objc           Rewrite Objective-C source to C++
  -rewrite-test           Rewriter playground
  -Rpass-analysis=<value> Report transformation analysis from optimization passes whose name matches the given POSIX regular expression
  -Rpass-missed=<value>   Report missed transformations by optimization passes whose name matches the given POSIX regular expression
  -Rpass=<value>          Report transformations performed by optimization passes whose name matches the given POSIX regular expression
  -R<remark>              Enable the specified remark
  -save-temps=<value>     Save intermediate compilation results.
  -serialize-diagnostic-file <filename>
                          File for serializing diagnostics in a binary format
  -setup-static-analyzer  Set up preprocessor for static analyzer (done automatically when static analyzer is run).
  --show-includes         Print cl.exe style /showIncludes to stdout
  -split-dwarf-file <value>
                          Name of the split dwarf debug info file to encode in the object file
  -split-dwarf-output <value>
                          File name to use for split dwarf debug info output
  -split-stacks           Try to use a split stack if possible.
  -stack-protector-buffer-size <value>
                          Lower bound for a buffer to be considered for stack protection
  -stack-protector <value>
                          Enable stack protectors
  -static-define          Should __STATIC__ be defined
  -stats-file=<value>     Filename to write statistics to
  -std=<value>            Language standard to compile for
  -stdlib=<value>         C++ standard library to use
  -sycl-std=<value>       SYCL language standard to compile for.
  -sys-header-deps        Include system headers in dependency output
  --system-header-prefix=<prefix>
                          Treat all #include paths starting with <prefix> as including a system header.
  -S                      Only run preprocess and compilation steps
  -target-abi <value>     Target a particular ABI type
  -target-cpu <value>     Target a specific cpu type
  -target-feature <value> Target specific attributes
  -target-linker-version <value>
                          Target linker version
  -target-sdk-version=<value>
                          The version of target SDK used for compilation
  -templight-dump         Dump templight information to stdout
  -traditional-cpp        Enable some traditional CPP emulation
  -trim-egraph            Only show error-related paths in the analysis graph
  -triple <value>         Specify target triple (e.g. i686-apple-darwin9)
  -tune-cpu <value>       Tune for a specific cpu type
  -undef                  undef all system defines
  -unoptimized-cfg        Generate unoptimized CFGs for all analyses
  -unwindlib=<value>      Unwind library to use
  -U <macro>              Undefine macro <macro>
  -vectorize-loops        Run the Loop vectorization passes
  -vectorize-slp          Run the SLP vectorization passes
  -verify-ignore-unexpected=<value>
                          Ignore unexpected diagnostic messages
  -verify-ignore-unexpected
                          Ignore unexpected diagnostic messages
  -verify-pch             Load and verify that a pre-compiled header file is not stale
  -verify=<prefixes>      Verify diagnostic output using comment directives that start with prefixes in the comma-separated sequence <prefixes>
  -verify                 Equivalent to -verify=expected
  --version               Print version information
  -version                Print the compiler version
  -vtordisp-mode=<value>  Control vtordisp placement on win32 targets
  -v                      Show commands to run and use verbose output
  -Wdeprecated            Enable warnings for deprecated constructs and define __DEPRECATED
  -Wno-rewrite-macros     Silence ObjC rewriting warnings
  -working-directory <value>
                          Resolve file paths relative to the specified directory
  -Wundef-prefix=<arg>    Enable warnings for undefined macros with a prefix in the comma separated list <arg>
  -W<warning>             Enable the specified warning
  -w                      Suppress all warnings
  -x <language>           Treat subsequent input files as having type <language>
